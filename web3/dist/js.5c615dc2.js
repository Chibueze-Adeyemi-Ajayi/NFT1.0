// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"../../../Users/Jilo/AppData/Roaming/npm/node_modules/parcel-bundler/src/builtins/_empty.js":[function(require,module,exports) {

},{}],"../../node_modules/bn.js/lib/bn.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
(function (module, exports) {
  'use strict';

  // Utils
  function assert (val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
  }

  // Could use `inherits` module, but don't want to move from single file
  // architecture yet.
  function inherits (ctor, superCtor) {
    ctor.super_ = superCtor;
    var TempCtor = function () {};
    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  }

  // BN

  function BN (number, base, endian) {
    if (BN.isBN(number)) {
      return number;
    }

    this.negative = 0;
    this.words = null;
    this.length = 0;

    // Reduction context
    this.red = null;

    if (number !== null) {
      if (base === 'le' || base === 'be') {
        endian = base;
        base = 10;
      }

      this._init(number || 0, base || 10, endian || 'be');
    }
  }
  if (typeof module === 'object') {
    module.exports = BN;
  } else {
    exports.BN = BN;
  }

  BN.BN = BN;
  BN.wordSize = 26;

  var Buffer;
  try {
    if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
      Buffer = window.Buffer;
    } else {
      Buffer = require('buffer').Buffer;
    }
  } catch (e) {
  }

  BN.isBN = function isBN (num) {
    if (num instanceof BN) {
      return true;
    }

    return num !== null && typeof num === 'object' &&
      num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
  };

  BN.max = function max (left, right) {
    if (left.cmp(right) > 0) return left;
    return right;
  };

  BN.min = function min (left, right) {
    if (left.cmp(right) < 0) return left;
    return right;
  };

  BN.prototype._init = function init (number, base, endian) {
    if (typeof number === 'number') {
      return this._initNumber(number, base, endian);
    }

    if (typeof number === 'object') {
      return this._initArray(number, base, endian);
    }

    if (base === 'hex') {
      base = 16;
    }
    assert(base === (base | 0) && base >= 2 && base <= 36);

    number = number.toString().replace(/\s+/g, '');
    var start = 0;
    if (number[0] === '-') {
      start++;
      this.negative = 1;
    }

    if (start < number.length) {
      if (base === 16) {
        this._parseHex(number, start, endian);
      } else {
        this._parseBase(number, base, start);
        if (endian === 'le') {
          this._initArray(this.toArray(), base, endian);
        }
      }
    }
  };

  BN.prototype._initNumber = function _initNumber (number, base, endian) {
    if (number < 0) {
      this.negative = 1;
      number = -number;
    }
    if (number < 0x4000000) {
      this.words = [ number & 0x3ffffff ];
      this.length = 1;
    } else if (number < 0x10000000000000) {
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff
      ];
      this.length = 2;
    } else {
      assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
      this.words = [
        number & 0x3ffffff,
        (number / 0x4000000) & 0x3ffffff,
        1
      ];
      this.length = 3;
    }

    if (endian !== 'le') return;

    // Reverse the bytes
    this._initArray(this.toArray(), base, endian);
  };

  BN.prototype._initArray = function _initArray (number, base, endian) {
    // Perhaps a Uint8Array
    assert(typeof number.length === 'number');
    if (number.length <= 0) {
      this.words = [ 0 ];
      this.length = 1;
      return this;
    }

    this.length = Math.ceil(number.length / 3);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    var j, w;
    var off = 0;
    if (endian === 'be') {
      for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
        w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    } else if (endian === 'le') {
      for (i = 0, j = 0; i < number.length; i += 3) {
        w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
        this.words[j] |= (w << off) & 0x3ffffff;
        this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
        off += 24;
        if (off >= 26) {
          off -= 26;
          j++;
        }
      }
    }
    return this.strip();
  };

  function parseHex4Bits (string, index) {
    var c = string.charCodeAt(index);
    // 'A' - 'F'
    if (c >= 65 && c <= 70) {
      return c - 55;
    // 'a' - 'f'
    } else if (c >= 97 && c <= 102) {
      return c - 87;
    // '0' - '9'
    } else {
      return (c - 48) & 0xf;
    }
  }

  function parseHexByte (string, lowerBound, index) {
    var r = parseHex4Bits(string, index);
    if (index - 1 >= lowerBound) {
      r |= parseHex4Bits(string, index - 1) << 4;
    }
    return r;
  }

  BN.prototype._parseHex = function _parseHex (number, start, endian) {
    // Create possibly bigger array to ensure that it fits the number
    this.length = Math.ceil((number.length - start) / 6);
    this.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      this.words[i] = 0;
    }

    // 24-bits chunks
    var off = 0;
    var j = 0;

    var w;
    if (endian === 'be') {
      for (i = number.length - 1; i >= start; i -= 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    } else {
      var parseLength = number.length - start;
      for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
        w = parseHexByte(number, start, i) << off;
        this.words[j] |= w & 0x3ffffff;
        if (off >= 18) {
          off -= 18;
          j += 1;
          this.words[j] |= w >>> 26;
        } else {
          off += 8;
        }
      }
    }

    this.strip();
  };

  function parseBase (str, start, end, mul) {
    var r = 0;
    var len = Math.min(str.length, end);
    for (var i = start; i < len; i++) {
      var c = str.charCodeAt(i) - 48;

      r *= mul;

      // 'a'
      if (c >= 49) {
        r += c - 49 + 0xa;

      // 'A'
      } else if (c >= 17) {
        r += c - 17 + 0xa;

      // '0' - '9'
      } else {
        r += c;
      }
    }
    return r;
  }

  BN.prototype._parseBase = function _parseBase (number, base, start) {
    // Initialize as zero
    this.words = [ 0 ];
    this.length = 1;

    // Find length of limb in base
    for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
      limbLen++;
    }
    limbLen--;
    limbPow = (limbPow / base) | 0;

    var total = number.length - start;
    var mod = total % limbLen;
    var end = Math.min(total, total - mod) + start;

    var word = 0;
    for (var i = start; i < end; i += limbLen) {
      word = parseBase(number, i, i + limbLen, base);

      this.imuln(limbPow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    if (mod !== 0) {
      var pow = 1;
      word = parseBase(number, i, number.length, base);

      for (i = 0; i < mod; i++) {
        pow *= base;
      }

      this.imuln(pow);
      if (this.words[0] + word < 0x4000000) {
        this.words[0] += word;
      } else {
        this._iaddn(word);
      }
    }

    this.strip();
  };

  BN.prototype.copy = function copy (dest) {
    dest.words = new Array(this.length);
    for (var i = 0; i < this.length; i++) {
      dest.words[i] = this.words[i];
    }
    dest.length = this.length;
    dest.negative = this.negative;
    dest.red = this.red;
  };

  BN.prototype.clone = function clone () {
    var r = new BN(null);
    this.copy(r);
    return r;
  };

  BN.prototype._expand = function _expand (size) {
    while (this.length < size) {
      this.words[this.length++] = 0;
    }
    return this;
  };

  // Remove leading `0` from `this`
  BN.prototype.strip = function strip () {
    while (this.length > 1 && this.words[this.length - 1] === 0) {
      this.length--;
    }
    return this._normSign();
  };

  BN.prototype._normSign = function _normSign () {
    // -0 = 0
    if (this.length === 1 && this.words[0] === 0) {
      this.negative = 0;
    }
    return this;
  };

  BN.prototype.inspect = function inspect () {
    return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
  };

  /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */

  var zeros = [
    '',
    '0',
    '00',
    '000',
    '0000',
    '00000',
    '000000',
    '0000000',
    '00000000',
    '000000000',
    '0000000000',
    '00000000000',
    '000000000000',
    '0000000000000',
    '00000000000000',
    '000000000000000',
    '0000000000000000',
    '00000000000000000',
    '000000000000000000',
    '0000000000000000000',
    '00000000000000000000',
    '000000000000000000000',
    '0000000000000000000000',
    '00000000000000000000000',
    '000000000000000000000000',
    '0000000000000000000000000'
  ];

  var groupSizes = [
    0, 0,
    25, 16, 12, 11, 10, 9, 8,
    8, 7, 7, 7, 7, 6, 6,
    6, 6, 6, 6, 6, 5, 5,
    5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5
  ];

  var groupBases = [
    0, 0,
    33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
    43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
    16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
    6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
    24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
  ];

  BN.prototype.toString = function toString (base, padding) {
    base = base || 10;
    padding = padding | 0 || 1;

    var out;
    if (base === 16 || base === 'hex') {
      out = '';
      var off = 0;
      var carry = 0;
      for (var i = 0; i < this.length; i++) {
        var w = this.words[i];
        var word = (((w << off) | carry) & 0xffffff).toString(16);
        carry = (w >>> (24 - off)) & 0xffffff;
        if (carry !== 0 || i !== this.length - 1) {
          out = zeros[6 - word.length] + word + out;
        } else {
          out = word + out;
        }
        off += 2;
        if (off >= 26) {
          off -= 26;
          i--;
        }
      }
      if (carry !== 0) {
        out = carry.toString(16) + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    if (base === (base | 0) && base >= 2 && base <= 36) {
      // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
      var groupSize = groupSizes[base];
      // var groupBase = Math.pow(base, groupSize);
      var groupBase = groupBases[base];
      out = '';
      var c = this.clone();
      c.negative = 0;
      while (!c.isZero()) {
        var r = c.modn(groupBase).toString(base);
        c = c.idivn(groupBase);

        if (!c.isZero()) {
          out = zeros[groupSize - r.length] + r + out;
        } else {
          out = r + out;
        }
      }
      if (this.isZero()) {
        out = '0' + out;
      }
      while (out.length % padding !== 0) {
        out = '0' + out;
      }
      if (this.negative !== 0) {
        out = '-' + out;
      }
      return out;
    }

    assert(false, 'Base should be between 2 and 36');
  };

  BN.prototype.toNumber = function toNumber () {
    var ret = this.words[0];
    if (this.length === 2) {
      ret += this.words[1] * 0x4000000;
    } else if (this.length === 3 && this.words[2] === 0x01) {
      // NOTE: at this stage it is known that the top bit is set
      ret += 0x10000000000000 + (this.words[1] * 0x4000000);
    } else if (this.length > 2) {
      assert(false, 'Number can only safely store up to 53 bits');
    }
    return (this.negative !== 0) ? -ret : ret;
  };

  BN.prototype.toJSON = function toJSON () {
    return this.toString(16);
  };

  BN.prototype.toBuffer = function toBuffer (endian, length) {
    assert(typeof Buffer !== 'undefined');
    return this.toArrayLike(Buffer, endian, length);
  };

  BN.prototype.toArray = function toArray (endian, length) {
    return this.toArrayLike(Array, endian, length);
  };

  BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
    var byteLength = this.byteLength();
    var reqLength = length || Math.max(1, byteLength);
    assert(byteLength <= reqLength, 'byte array longer than desired length');
    assert(reqLength > 0, 'Requested array length <= 0');

    this.strip();
    var littleEndian = endian === 'le';
    var res = new ArrayType(reqLength);

    var b, i;
    var q = this.clone();
    if (!littleEndian) {
      // Assume big-endian
      for (i = 0; i < reqLength - byteLength; i++) {
        res[i] = 0;
      }

      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[reqLength - i - 1] = b;
      }
    } else {
      for (i = 0; !q.isZero(); i++) {
        b = q.andln(0xff);
        q.iushrn(8);

        res[i] = b;
      }

      for (; i < reqLength; i++) {
        res[i] = 0;
      }
    }

    return res;
  };

  if (Math.clz32) {
    BN.prototype._countBits = function _countBits (w) {
      return 32 - Math.clz32(w);
    };
  } else {
    BN.prototype._countBits = function _countBits (w) {
      var t = w;
      var r = 0;
      if (t >= 0x1000) {
        r += 13;
        t >>>= 13;
      }
      if (t >= 0x40) {
        r += 7;
        t >>>= 7;
      }
      if (t >= 0x8) {
        r += 4;
        t >>>= 4;
      }
      if (t >= 0x02) {
        r += 2;
        t >>>= 2;
      }
      return r + t;
    };
  }

  BN.prototype._zeroBits = function _zeroBits (w) {
    // Short-cut
    if (w === 0) return 26;

    var t = w;
    var r = 0;
    if ((t & 0x1fff) === 0) {
      r += 13;
      t >>>= 13;
    }
    if ((t & 0x7f) === 0) {
      r += 7;
      t >>>= 7;
    }
    if ((t & 0xf) === 0) {
      r += 4;
      t >>>= 4;
    }
    if ((t & 0x3) === 0) {
      r += 2;
      t >>>= 2;
    }
    if ((t & 0x1) === 0) {
      r++;
    }
    return r;
  };

  // Return number of used bits in a BN
  BN.prototype.bitLength = function bitLength () {
    var w = this.words[this.length - 1];
    var hi = this._countBits(w);
    return (this.length - 1) * 26 + hi;
  };

  function toBitArray (num) {
    var w = new Array(num.bitLength());

    for (var bit = 0; bit < w.length; bit++) {
      var off = (bit / 26) | 0;
      var wbit = bit % 26;

      w[bit] = (num.words[off] & (1 << wbit)) >>> wbit;
    }

    return w;
  }

  // Number of trailing zero bits
  BN.prototype.zeroBits = function zeroBits () {
    if (this.isZero()) return 0;

    var r = 0;
    for (var i = 0; i < this.length; i++) {
      var b = this._zeroBits(this.words[i]);
      r += b;
      if (b !== 26) break;
    }
    return r;
  };

  BN.prototype.byteLength = function byteLength () {
    return Math.ceil(this.bitLength() / 8);
  };

  BN.prototype.toTwos = function toTwos (width) {
    if (this.negative !== 0) {
      return this.abs().inotn(width).iaddn(1);
    }
    return this.clone();
  };

  BN.prototype.fromTwos = function fromTwos (width) {
    if (this.testn(width - 1)) {
      return this.notn(width).iaddn(1).ineg();
    }
    return this.clone();
  };

  BN.prototype.isNeg = function isNeg () {
    return this.negative !== 0;
  };

  // Return negative clone of `this`
  BN.prototype.neg = function neg () {
    return this.clone().ineg();
  };

  BN.prototype.ineg = function ineg () {
    if (!this.isZero()) {
      this.negative ^= 1;
    }

    return this;
  };

  // Or `num` with `this` in-place
  BN.prototype.iuor = function iuor (num) {
    while (this.length < num.length) {
      this.words[this.length++] = 0;
    }

    for (var i = 0; i < num.length; i++) {
      this.words[i] = this.words[i] | num.words[i];
    }

    return this.strip();
  };

  BN.prototype.ior = function ior (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuor(num);
  };

  // Or `num` with `this`
  BN.prototype.or = function or (num) {
    if (this.length > num.length) return this.clone().ior(num);
    return num.clone().ior(this);
  };

  BN.prototype.uor = function uor (num) {
    if (this.length > num.length) return this.clone().iuor(num);
    return num.clone().iuor(this);
  };

  // And `num` with `this` in-place
  BN.prototype.iuand = function iuand (num) {
    // b = min-length(num, this)
    var b;
    if (this.length > num.length) {
      b = num;
    } else {
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = this.words[i] & num.words[i];
    }

    this.length = b.length;

    return this.strip();
  };

  BN.prototype.iand = function iand (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuand(num);
  };

  // And `num` with `this`
  BN.prototype.and = function and (num) {
    if (this.length > num.length) return this.clone().iand(num);
    return num.clone().iand(this);
  };

  BN.prototype.uand = function uand (num) {
    if (this.length > num.length) return this.clone().iuand(num);
    return num.clone().iuand(this);
  };

  // Xor `num` with `this` in-place
  BN.prototype.iuxor = function iuxor (num) {
    // a.length > b.length
    var a;
    var b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    for (var i = 0; i < b.length; i++) {
      this.words[i] = a.words[i] ^ b.words[i];
    }

    if (this !== a) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = a.length;

    return this.strip();
  };

  BN.prototype.ixor = function ixor (num) {
    assert((this.negative | num.negative) === 0);
    return this.iuxor(num);
  };

  // Xor `num` with `this`
  BN.prototype.xor = function xor (num) {
    if (this.length > num.length) return this.clone().ixor(num);
    return num.clone().ixor(this);
  };

  BN.prototype.uxor = function uxor (num) {
    if (this.length > num.length) return this.clone().iuxor(num);
    return num.clone().iuxor(this);
  };

  // Not ``this`` with ``width`` bitwidth
  BN.prototype.inotn = function inotn (width) {
    assert(typeof width === 'number' && width >= 0);

    var bytesNeeded = Math.ceil(width / 26) | 0;
    var bitsLeft = width % 26;

    // Extend the buffer with leading zeroes
    this._expand(bytesNeeded);

    if (bitsLeft > 0) {
      bytesNeeded--;
    }

    // Handle complete words
    for (var i = 0; i < bytesNeeded; i++) {
      this.words[i] = ~this.words[i] & 0x3ffffff;
    }

    // Handle the residue
    if (bitsLeft > 0) {
      this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
    }

    // And remove leading zeroes
    return this.strip();
  };

  BN.prototype.notn = function notn (width) {
    return this.clone().inotn(width);
  };

  // Set `bit` of `this`
  BN.prototype.setn = function setn (bit, val) {
    assert(typeof bit === 'number' && bit >= 0);

    var off = (bit / 26) | 0;
    var wbit = bit % 26;

    this._expand(off + 1);

    if (val) {
      this.words[off] = this.words[off] | (1 << wbit);
    } else {
      this.words[off] = this.words[off] & ~(1 << wbit);
    }

    return this.strip();
  };

  // Add `num` to `this` in-place
  BN.prototype.iadd = function iadd (num) {
    var r;

    // negative + positive
    if (this.negative !== 0 && num.negative === 0) {
      this.negative = 0;
      r = this.isub(num);
      this.negative ^= 1;
      return this._normSign();

    // positive + negative
    } else if (this.negative === 0 && num.negative !== 0) {
      num.negative = 0;
      r = this.isub(num);
      num.negative = 1;
      return r._normSign();
    }

    // a.length > b.length
    var a, b;
    if (this.length > num.length) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      this.words[i] = r & 0x3ffffff;
      carry = r >>> 26;
    }

    this.length = a.length;
    if (carry !== 0) {
      this.words[this.length] = carry;
      this.length++;
    // Copy the rest of the words
    } else if (a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    return this;
  };

  // Add `num` to `this`
  BN.prototype.add = function add (num) {
    var res;
    if (num.negative !== 0 && this.negative === 0) {
      num.negative = 0;
      res = this.sub(num);
      num.negative ^= 1;
      return res;
    } else if (num.negative === 0 && this.negative !== 0) {
      this.negative = 0;
      res = num.sub(this);
      this.negative = 1;
      return res;
    }

    if (this.length > num.length) return this.clone().iadd(num);

    return num.clone().iadd(this);
  };

  // Subtract `num` from `this` in-place
  BN.prototype.isub = function isub (num) {
    // this - (-num) = this + num
    if (num.negative !== 0) {
      num.negative = 0;
      var r = this.iadd(num);
      num.negative = 1;
      return r._normSign();

    // -this - num = -(this + num)
    } else if (this.negative !== 0) {
      this.negative = 0;
      this.iadd(num);
      this.negative = 1;
      return this._normSign();
    }

    // At this point both numbers are positive
    var cmp = this.cmp(num);

    // Optimization - zeroify
    if (cmp === 0) {
      this.negative = 0;
      this.length = 1;
      this.words[0] = 0;
      return this;
    }

    // a > b
    var a, b;
    if (cmp > 0) {
      a = this;
      b = num;
    } else {
      a = num;
      b = this;
    }

    var carry = 0;
    for (var i = 0; i < b.length; i++) {
      r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }
    for (; carry !== 0 && i < a.length; i++) {
      r = (a.words[i] | 0) + carry;
      carry = r >> 26;
      this.words[i] = r & 0x3ffffff;
    }

    // Copy rest of the words
    if (carry === 0 && i < a.length && a !== this) {
      for (; i < a.length; i++) {
        this.words[i] = a.words[i];
      }
    }

    this.length = Math.max(this.length, i);

    if (a !== this) {
      this.negative = 1;
    }

    return this.strip();
  };

  // Subtract `num` from `this`
  BN.prototype.sub = function sub (num) {
    return this.clone().isub(num);
  };

  function smallMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    var len = (self.length + num.length) | 0;
    out.length = len;
    len = (len - 1) | 0;

    // Peel one iteration (compiler can't do it, because of code complexity)
    var a = self.words[0] | 0;
    var b = num.words[0] | 0;
    var r = a * b;

    var lo = r & 0x3ffffff;
    var carry = (r / 0x4000000) | 0;
    out.words[0] = lo;

    for (var k = 1; k < len; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = carry >>> 26;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = (k - j) | 0;
        a = self.words[i] | 0;
        b = num.words[j] | 0;
        r = a * b + rword;
        ncarry += (r / 0x4000000) | 0;
        rword = r & 0x3ffffff;
      }
      out.words[k] = rword | 0;
      carry = ncarry | 0;
    }
    if (carry !== 0) {
      out.words[k] = carry | 0;
    } else {
      out.length--;
    }

    return out.strip();
  }

  // TODO(indutny): it may be reasonable to omit it for users who don't need
  // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
  // multiplication (like elliptic secp256k1).
  var comb10MulTo = function comb10MulTo (self, num, out) {
    var a = self.words;
    var b = num.words;
    var o = out.words;
    var c = 0;
    var lo;
    var mid;
    var hi;
    var a0 = a[0] | 0;
    var al0 = a0 & 0x1fff;
    var ah0 = a0 >>> 13;
    var a1 = a[1] | 0;
    var al1 = a1 & 0x1fff;
    var ah1 = a1 >>> 13;
    var a2 = a[2] | 0;
    var al2 = a2 & 0x1fff;
    var ah2 = a2 >>> 13;
    var a3 = a[3] | 0;
    var al3 = a3 & 0x1fff;
    var ah3 = a3 >>> 13;
    var a4 = a[4] | 0;
    var al4 = a4 & 0x1fff;
    var ah4 = a4 >>> 13;
    var a5 = a[5] | 0;
    var al5 = a5 & 0x1fff;
    var ah5 = a5 >>> 13;
    var a6 = a[6] | 0;
    var al6 = a6 & 0x1fff;
    var ah6 = a6 >>> 13;
    var a7 = a[7] | 0;
    var al7 = a7 & 0x1fff;
    var ah7 = a7 >>> 13;
    var a8 = a[8] | 0;
    var al8 = a8 & 0x1fff;
    var ah8 = a8 >>> 13;
    var a9 = a[9] | 0;
    var al9 = a9 & 0x1fff;
    var ah9 = a9 >>> 13;
    var b0 = b[0] | 0;
    var bl0 = b0 & 0x1fff;
    var bh0 = b0 >>> 13;
    var b1 = b[1] | 0;
    var bl1 = b1 & 0x1fff;
    var bh1 = b1 >>> 13;
    var b2 = b[2] | 0;
    var bl2 = b2 & 0x1fff;
    var bh2 = b2 >>> 13;
    var b3 = b[3] | 0;
    var bl3 = b3 & 0x1fff;
    var bh3 = b3 >>> 13;
    var b4 = b[4] | 0;
    var bl4 = b4 & 0x1fff;
    var bh4 = b4 >>> 13;
    var b5 = b[5] | 0;
    var bl5 = b5 & 0x1fff;
    var bh5 = b5 >>> 13;
    var b6 = b[6] | 0;
    var bl6 = b6 & 0x1fff;
    var bh6 = b6 >>> 13;
    var b7 = b[7] | 0;
    var bl7 = b7 & 0x1fff;
    var bh7 = b7 >>> 13;
    var b8 = b[8] | 0;
    var bl8 = b8 & 0x1fff;
    var bh8 = b8 >>> 13;
    var b9 = b[9] | 0;
    var bl9 = b9 & 0x1fff;
    var bh9 = b9 >>> 13;

    out.negative = self.negative ^ num.negative;
    out.length = 19;
    /* k = 0 */
    lo = Math.imul(al0, bl0);
    mid = Math.imul(al0, bh0);
    mid = (mid + Math.imul(ah0, bl0)) | 0;
    hi = Math.imul(ah0, bh0);
    var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
    w0 &= 0x3ffffff;
    /* k = 1 */
    lo = Math.imul(al1, bl0);
    mid = Math.imul(al1, bh0);
    mid = (mid + Math.imul(ah1, bl0)) | 0;
    hi = Math.imul(ah1, bh0);
    lo = (lo + Math.imul(al0, bl1)) | 0;
    mid = (mid + Math.imul(al0, bh1)) | 0;
    mid = (mid + Math.imul(ah0, bl1)) | 0;
    hi = (hi + Math.imul(ah0, bh1)) | 0;
    var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
    w1 &= 0x3ffffff;
    /* k = 2 */
    lo = Math.imul(al2, bl0);
    mid = Math.imul(al2, bh0);
    mid = (mid + Math.imul(ah2, bl0)) | 0;
    hi = Math.imul(ah2, bh0);
    lo = (lo + Math.imul(al1, bl1)) | 0;
    mid = (mid + Math.imul(al1, bh1)) | 0;
    mid = (mid + Math.imul(ah1, bl1)) | 0;
    hi = (hi + Math.imul(ah1, bh1)) | 0;
    lo = (lo + Math.imul(al0, bl2)) | 0;
    mid = (mid + Math.imul(al0, bh2)) | 0;
    mid = (mid + Math.imul(ah0, bl2)) | 0;
    hi = (hi + Math.imul(ah0, bh2)) | 0;
    var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
    w2 &= 0x3ffffff;
    /* k = 3 */
    lo = Math.imul(al3, bl0);
    mid = Math.imul(al3, bh0);
    mid = (mid + Math.imul(ah3, bl0)) | 0;
    hi = Math.imul(ah3, bh0);
    lo = (lo + Math.imul(al2, bl1)) | 0;
    mid = (mid + Math.imul(al2, bh1)) | 0;
    mid = (mid + Math.imul(ah2, bl1)) | 0;
    hi = (hi + Math.imul(ah2, bh1)) | 0;
    lo = (lo + Math.imul(al1, bl2)) | 0;
    mid = (mid + Math.imul(al1, bh2)) | 0;
    mid = (mid + Math.imul(ah1, bl2)) | 0;
    hi = (hi + Math.imul(ah1, bh2)) | 0;
    lo = (lo + Math.imul(al0, bl3)) | 0;
    mid = (mid + Math.imul(al0, bh3)) | 0;
    mid = (mid + Math.imul(ah0, bl3)) | 0;
    hi = (hi + Math.imul(ah0, bh3)) | 0;
    var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
    w3 &= 0x3ffffff;
    /* k = 4 */
    lo = Math.imul(al4, bl0);
    mid = Math.imul(al4, bh0);
    mid = (mid + Math.imul(ah4, bl0)) | 0;
    hi = Math.imul(ah4, bh0);
    lo = (lo + Math.imul(al3, bl1)) | 0;
    mid = (mid + Math.imul(al3, bh1)) | 0;
    mid = (mid + Math.imul(ah3, bl1)) | 0;
    hi = (hi + Math.imul(ah3, bh1)) | 0;
    lo = (lo + Math.imul(al2, bl2)) | 0;
    mid = (mid + Math.imul(al2, bh2)) | 0;
    mid = (mid + Math.imul(ah2, bl2)) | 0;
    hi = (hi + Math.imul(ah2, bh2)) | 0;
    lo = (lo + Math.imul(al1, bl3)) | 0;
    mid = (mid + Math.imul(al1, bh3)) | 0;
    mid = (mid + Math.imul(ah1, bl3)) | 0;
    hi = (hi + Math.imul(ah1, bh3)) | 0;
    lo = (lo + Math.imul(al0, bl4)) | 0;
    mid = (mid + Math.imul(al0, bh4)) | 0;
    mid = (mid + Math.imul(ah0, bl4)) | 0;
    hi = (hi + Math.imul(ah0, bh4)) | 0;
    var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
    w4 &= 0x3ffffff;
    /* k = 5 */
    lo = Math.imul(al5, bl0);
    mid = Math.imul(al5, bh0);
    mid = (mid + Math.imul(ah5, bl0)) | 0;
    hi = Math.imul(ah5, bh0);
    lo = (lo + Math.imul(al4, bl1)) | 0;
    mid = (mid + Math.imul(al4, bh1)) | 0;
    mid = (mid + Math.imul(ah4, bl1)) | 0;
    hi = (hi + Math.imul(ah4, bh1)) | 0;
    lo = (lo + Math.imul(al3, bl2)) | 0;
    mid = (mid + Math.imul(al3, bh2)) | 0;
    mid = (mid + Math.imul(ah3, bl2)) | 0;
    hi = (hi + Math.imul(ah3, bh2)) | 0;
    lo = (lo + Math.imul(al2, bl3)) | 0;
    mid = (mid + Math.imul(al2, bh3)) | 0;
    mid = (mid + Math.imul(ah2, bl3)) | 0;
    hi = (hi + Math.imul(ah2, bh3)) | 0;
    lo = (lo + Math.imul(al1, bl4)) | 0;
    mid = (mid + Math.imul(al1, bh4)) | 0;
    mid = (mid + Math.imul(ah1, bl4)) | 0;
    hi = (hi + Math.imul(ah1, bh4)) | 0;
    lo = (lo + Math.imul(al0, bl5)) | 0;
    mid = (mid + Math.imul(al0, bh5)) | 0;
    mid = (mid + Math.imul(ah0, bl5)) | 0;
    hi = (hi + Math.imul(ah0, bh5)) | 0;
    var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
    w5 &= 0x3ffffff;
    /* k = 6 */
    lo = Math.imul(al6, bl0);
    mid = Math.imul(al6, bh0);
    mid = (mid + Math.imul(ah6, bl0)) | 0;
    hi = Math.imul(ah6, bh0);
    lo = (lo + Math.imul(al5, bl1)) | 0;
    mid = (mid + Math.imul(al5, bh1)) | 0;
    mid = (mid + Math.imul(ah5, bl1)) | 0;
    hi = (hi + Math.imul(ah5, bh1)) | 0;
    lo = (lo + Math.imul(al4, bl2)) | 0;
    mid = (mid + Math.imul(al4, bh2)) | 0;
    mid = (mid + Math.imul(ah4, bl2)) | 0;
    hi = (hi + Math.imul(ah4, bh2)) | 0;
    lo = (lo + Math.imul(al3, bl3)) | 0;
    mid = (mid + Math.imul(al3, bh3)) | 0;
    mid = (mid + Math.imul(ah3, bl3)) | 0;
    hi = (hi + Math.imul(ah3, bh3)) | 0;
    lo = (lo + Math.imul(al2, bl4)) | 0;
    mid = (mid + Math.imul(al2, bh4)) | 0;
    mid = (mid + Math.imul(ah2, bl4)) | 0;
    hi = (hi + Math.imul(ah2, bh4)) | 0;
    lo = (lo + Math.imul(al1, bl5)) | 0;
    mid = (mid + Math.imul(al1, bh5)) | 0;
    mid = (mid + Math.imul(ah1, bl5)) | 0;
    hi = (hi + Math.imul(ah1, bh5)) | 0;
    lo = (lo + Math.imul(al0, bl6)) | 0;
    mid = (mid + Math.imul(al0, bh6)) | 0;
    mid = (mid + Math.imul(ah0, bl6)) | 0;
    hi = (hi + Math.imul(ah0, bh6)) | 0;
    var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
    w6 &= 0x3ffffff;
    /* k = 7 */
    lo = Math.imul(al7, bl0);
    mid = Math.imul(al7, bh0);
    mid = (mid + Math.imul(ah7, bl0)) | 0;
    hi = Math.imul(ah7, bh0);
    lo = (lo + Math.imul(al6, bl1)) | 0;
    mid = (mid + Math.imul(al6, bh1)) | 0;
    mid = (mid + Math.imul(ah6, bl1)) | 0;
    hi = (hi + Math.imul(ah6, bh1)) | 0;
    lo = (lo + Math.imul(al5, bl2)) | 0;
    mid = (mid + Math.imul(al5, bh2)) | 0;
    mid = (mid + Math.imul(ah5, bl2)) | 0;
    hi = (hi + Math.imul(ah5, bh2)) | 0;
    lo = (lo + Math.imul(al4, bl3)) | 0;
    mid = (mid + Math.imul(al4, bh3)) | 0;
    mid = (mid + Math.imul(ah4, bl3)) | 0;
    hi = (hi + Math.imul(ah4, bh3)) | 0;
    lo = (lo + Math.imul(al3, bl4)) | 0;
    mid = (mid + Math.imul(al3, bh4)) | 0;
    mid = (mid + Math.imul(ah3, bl4)) | 0;
    hi = (hi + Math.imul(ah3, bh4)) | 0;
    lo = (lo + Math.imul(al2, bl5)) | 0;
    mid = (mid + Math.imul(al2, bh5)) | 0;
    mid = (mid + Math.imul(ah2, bl5)) | 0;
    hi = (hi + Math.imul(ah2, bh5)) | 0;
    lo = (lo + Math.imul(al1, bl6)) | 0;
    mid = (mid + Math.imul(al1, bh6)) | 0;
    mid = (mid + Math.imul(ah1, bl6)) | 0;
    hi = (hi + Math.imul(ah1, bh6)) | 0;
    lo = (lo + Math.imul(al0, bl7)) | 0;
    mid = (mid + Math.imul(al0, bh7)) | 0;
    mid = (mid + Math.imul(ah0, bl7)) | 0;
    hi = (hi + Math.imul(ah0, bh7)) | 0;
    var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
    w7 &= 0x3ffffff;
    /* k = 8 */
    lo = Math.imul(al8, bl0);
    mid = Math.imul(al8, bh0);
    mid = (mid + Math.imul(ah8, bl0)) | 0;
    hi = Math.imul(ah8, bh0);
    lo = (lo + Math.imul(al7, bl1)) | 0;
    mid = (mid + Math.imul(al7, bh1)) | 0;
    mid = (mid + Math.imul(ah7, bl1)) | 0;
    hi = (hi + Math.imul(ah7, bh1)) | 0;
    lo = (lo + Math.imul(al6, bl2)) | 0;
    mid = (mid + Math.imul(al6, bh2)) | 0;
    mid = (mid + Math.imul(ah6, bl2)) | 0;
    hi = (hi + Math.imul(ah6, bh2)) | 0;
    lo = (lo + Math.imul(al5, bl3)) | 0;
    mid = (mid + Math.imul(al5, bh3)) | 0;
    mid = (mid + Math.imul(ah5, bl3)) | 0;
    hi = (hi + Math.imul(ah5, bh3)) | 0;
    lo = (lo + Math.imul(al4, bl4)) | 0;
    mid = (mid + Math.imul(al4, bh4)) | 0;
    mid = (mid + Math.imul(ah4, bl4)) | 0;
    hi = (hi + Math.imul(ah4, bh4)) | 0;
    lo = (lo + Math.imul(al3, bl5)) | 0;
    mid = (mid + Math.imul(al3, bh5)) | 0;
    mid = (mid + Math.imul(ah3, bl5)) | 0;
    hi = (hi + Math.imul(ah3, bh5)) | 0;
    lo = (lo + Math.imul(al2, bl6)) | 0;
    mid = (mid + Math.imul(al2, bh6)) | 0;
    mid = (mid + Math.imul(ah2, bl6)) | 0;
    hi = (hi + Math.imul(ah2, bh6)) | 0;
    lo = (lo + Math.imul(al1, bl7)) | 0;
    mid = (mid + Math.imul(al1, bh7)) | 0;
    mid = (mid + Math.imul(ah1, bl7)) | 0;
    hi = (hi + Math.imul(ah1, bh7)) | 0;
    lo = (lo + Math.imul(al0, bl8)) | 0;
    mid = (mid + Math.imul(al0, bh8)) | 0;
    mid = (mid + Math.imul(ah0, bl8)) | 0;
    hi = (hi + Math.imul(ah0, bh8)) | 0;
    var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
    w8 &= 0x3ffffff;
    /* k = 9 */
    lo = Math.imul(al9, bl0);
    mid = Math.imul(al9, bh0);
    mid = (mid + Math.imul(ah9, bl0)) | 0;
    hi = Math.imul(ah9, bh0);
    lo = (lo + Math.imul(al8, bl1)) | 0;
    mid = (mid + Math.imul(al8, bh1)) | 0;
    mid = (mid + Math.imul(ah8, bl1)) | 0;
    hi = (hi + Math.imul(ah8, bh1)) | 0;
    lo = (lo + Math.imul(al7, bl2)) | 0;
    mid = (mid + Math.imul(al7, bh2)) | 0;
    mid = (mid + Math.imul(ah7, bl2)) | 0;
    hi = (hi + Math.imul(ah7, bh2)) | 0;
    lo = (lo + Math.imul(al6, bl3)) | 0;
    mid = (mid + Math.imul(al6, bh3)) | 0;
    mid = (mid + Math.imul(ah6, bl3)) | 0;
    hi = (hi + Math.imul(ah6, bh3)) | 0;
    lo = (lo + Math.imul(al5, bl4)) | 0;
    mid = (mid + Math.imul(al5, bh4)) | 0;
    mid = (mid + Math.imul(ah5, bl4)) | 0;
    hi = (hi + Math.imul(ah5, bh4)) | 0;
    lo = (lo + Math.imul(al4, bl5)) | 0;
    mid = (mid + Math.imul(al4, bh5)) | 0;
    mid = (mid + Math.imul(ah4, bl5)) | 0;
    hi = (hi + Math.imul(ah4, bh5)) | 0;
    lo = (lo + Math.imul(al3, bl6)) | 0;
    mid = (mid + Math.imul(al3, bh6)) | 0;
    mid = (mid + Math.imul(ah3, bl6)) | 0;
    hi = (hi + Math.imul(ah3, bh6)) | 0;
    lo = (lo + Math.imul(al2, bl7)) | 0;
    mid = (mid + Math.imul(al2, bh7)) | 0;
    mid = (mid + Math.imul(ah2, bl7)) | 0;
    hi = (hi + Math.imul(ah2, bh7)) | 0;
    lo = (lo + Math.imul(al1, bl8)) | 0;
    mid = (mid + Math.imul(al1, bh8)) | 0;
    mid = (mid + Math.imul(ah1, bl8)) | 0;
    hi = (hi + Math.imul(ah1, bh8)) | 0;
    lo = (lo + Math.imul(al0, bl9)) | 0;
    mid = (mid + Math.imul(al0, bh9)) | 0;
    mid = (mid + Math.imul(ah0, bl9)) | 0;
    hi = (hi + Math.imul(ah0, bh9)) | 0;
    var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
    w9 &= 0x3ffffff;
    /* k = 10 */
    lo = Math.imul(al9, bl1);
    mid = Math.imul(al9, bh1);
    mid = (mid + Math.imul(ah9, bl1)) | 0;
    hi = Math.imul(ah9, bh1);
    lo = (lo + Math.imul(al8, bl2)) | 0;
    mid = (mid + Math.imul(al8, bh2)) | 0;
    mid = (mid + Math.imul(ah8, bl2)) | 0;
    hi = (hi + Math.imul(ah8, bh2)) | 0;
    lo = (lo + Math.imul(al7, bl3)) | 0;
    mid = (mid + Math.imul(al7, bh3)) | 0;
    mid = (mid + Math.imul(ah7, bl3)) | 0;
    hi = (hi + Math.imul(ah7, bh3)) | 0;
    lo = (lo + Math.imul(al6, bl4)) | 0;
    mid = (mid + Math.imul(al6, bh4)) | 0;
    mid = (mid + Math.imul(ah6, bl4)) | 0;
    hi = (hi + Math.imul(ah6, bh4)) | 0;
    lo = (lo + Math.imul(al5, bl5)) | 0;
    mid = (mid + Math.imul(al5, bh5)) | 0;
    mid = (mid + Math.imul(ah5, bl5)) | 0;
    hi = (hi + Math.imul(ah5, bh5)) | 0;
    lo = (lo + Math.imul(al4, bl6)) | 0;
    mid = (mid + Math.imul(al4, bh6)) | 0;
    mid = (mid + Math.imul(ah4, bl6)) | 0;
    hi = (hi + Math.imul(ah4, bh6)) | 0;
    lo = (lo + Math.imul(al3, bl7)) | 0;
    mid = (mid + Math.imul(al3, bh7)) | 0;
    mid = (mid + Math.imul(ah3, bl7)) | 0;
    hi = (hi + Math.imul(ah3, bh7)) | 0;
    lo = (lo + Math.imul(al2, bl8)) | 0;
    mid = (mid + Math.imul(al2, bh8)) | 0;
    mid = (mid + Math.imul(ah2, bl8)) | 0;
    hi = (hi + Math.imul(ah2, bh8)) | 0;
    lo = (lo + Math.imul(al1, bl9)) | 0;
    mid = (mid + Math.imul(al1, bh9)) | 0;
    mid = (mid + Math.imul(ah1, bl9)) | 0;
    hi = (hi + Math.imul(ah1, bh9)) | 0;
    var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
    w10 &= 0x3ffffff;
    /* k = 11 */
    lo = Math.imul(al9, bl2);
    mid = Math.imul(al9, bh2);
    mid = (mid + Math.imul(ah9, bl2)) | 0;
    hi = Math.imul(ah9, bh2);
    lo = (lo + Math.imul(al8, bl3)) | 0;
    mid = (mid + Math.imul(al8, bh3)) | 0;
    mid = (mid + Math.imul(ah8, bl3)) | 0;
    hi = (hi + Math.imul(ah8, bh3)) | 0;
    lo = (lo + Math.imul(al7, bl4)) | 0;
    mid = (mid + Math.imul(al7, bh4)) | 0;
    mid = (mid + Math.imul(ah7, bl4)) | 0;
    hi = (hi + Math.imul(ah7, bh4)) | 0;
    lo = (lo + Math.imul(al6, bl5)) | 0;
    mid = (mid + Math.imul(al6, bh5)) | 0;
    mid = (mid + Math.imul(ah6, bl5)) | 0;
    hi = (hi + Math.imul(ah6, bh5)) | 0;
    lo = (lo + Math.imul(al5, bl6)) | 0;
    mid = (mid + Math.imul(al5, bh6)) | 0;
    mid = (mid + Math.imul(ah5, bl6)) | 0;
    hi = (hi + Math.imul(ah5, bh6)) | 0;
    lo = (lo + Math.imul(al4, bl7)) | 0;
    mid = (mid + Math.imul(al4, bh7)) | 0;
    mid = (mid + Math.imul(ah4, bl7)) | 0;
    hi = (hi + Math.imul(ah4, bh7)) | 0;
    lo = (lo + Math.imul(al3, bl8)) | 0;
    mid = (mid + Math.imul(al3, bh8)) | 0;
    mid = (mid + Math.imul(ah3, bl8)) | 0;
    hi = (hi + Math.imul(ah3, bh8)) | 0;
    lo = (lo + Math.imul(al2, bl9)) | 0;
    mid = (mid + Math.imul(al2, bh9)) | 0;
    mid = (mid + Math.imul(ah2, bl9)) | 0;
    hi = (hi + Math.imul(ah2, bh9)) | 0;
    var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
    w11 &= 0x3ffffff;
    /* k = 12 */
    lo = Math.imul(al9, bl3);
    mid = Math.imul(al9, bh3);
    mid = (mid + Math.imul(ah9, bl3)) | 0;
    hi = Math.imul(ah9, bh3);
    lo = (lo + Math.imul(al8, bl4)) | 0;
    mid = (mid + Math.imul(al8, bh4)) | 0;
    mid = (mid + Math.imul(ah8, bl4)) | 0;
    hi = (hi + Math.imul(ah8, bh4)) | 0;
    lo = (lo + Math.imul(al7, bl5)) | 0;
    mid = (mid + Math.imul(al7, bh5)) | 0;
    mid = (mid + Math.imul(ah7, bl5)) | 0;
    hi = (hi + Math.imul(ah7, bh5)) | 0;
    lo = (lo + Math.imul(al6, bl6)) | 0;
    mid = (mid + Math.imul(al6, bh6)) | 0;
    mid = (mid + Math.imul(ah6, bl6)) | 0;
    hi = (hi + Math.imul(ah6, bh6)) | 0;
    lo = (lo + Math.imul(al5, bl7)) | 0;
    mid = (mid + Math.imul(al5, bh7)) | 0;
    mid = (mid + Math.imul(ah5, bl7)) | 0;
    hi = (hi + Math.imul(ah5, bh7)) | 0;
    lo = (lo + Math.imul(al4, bl8)) | 0;
    mid = (mid + Math.imul(al4, bh8)) | 0;
    mid = (mid + Math.imul(ah4, bl8)) | 0;
    hi = (hi + Math.imul(ah4, bh8)) | 0;
    lo = (lo + Math.imul(al3, bl9)) | 0;
    mid = (mid + Math.imul(al3, bh9)) | 0;
    mid = (mid + Math.imul(ah3, bl9)) | 0;
    hi = (hi + Math.imul(ah3, bh9)) | 0;
    var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
    w12 &= 0x3ffffff;
    /* k = 13 */
    lo = Math.imul(al9, bl4);
    mid = Math.imul(al9, bh4);
    mid = (mid + Math.imul(ah9, bl4)) | 0;
    hi = Math.imul(ah9, bh4);
    lo = (lo + Math.imul(al8, bl5)) | 0;
    mid = (mid + Math.imul(al8, bh5)) | 0;
    mid = (mid + Math.imul(ah8, bl5)) | 0;
    hi = (hi + Math.imul(ah8, bh5)) | 0;
    lo = (lo + Math.imul(al7, bl6)) | 0;
    mid = (mid + Math.imul(al7, bh6)) | 0;
    mid = (mid + Math.imul(ah7, bl6)) | 0;
    hi = (hi + Math.imul(ah7, bh6)) | 0;
    lo = (lo + Math.imul(al6, bl7)) | 0;
    mid = (mid + Math.imul(al6, bh7)) | 0;
    mid = (mid + Math.imul(ah6, bl7)) | 0;
    hi = (hi + Math.imul(ah6, bh7)) | 0;
    lo = (lo + Math.imul(al5, bl8)) | 0;
    mid = (mid + Math.imul(al5, bh8)) | 0;
    mid = (mid + Math.imul(ah5, bl8)) | 0;
    hi = (hi + Math.imul(ah5, bh8)) | 0;
    lo = (lo + Math.imul(al4, bl9)) | 0;
    mid = (mid + Math.imul(al4, bh9)) | 0;
    mid = (mid + Math.imul(ah4, bl9)) | 0;
    hi = (hi + Math.imul(ah4, bh9)) | 0;
    var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
    w13 &= 0x3ffffff;
    /* k = 14 */
    lo = Math.imul(al9, bl5);
    mid = Math.imul(al9, bh5);
    mid = (mid + Math.imul(ah9, bl5)) | 0;
    hi = Math.imul(ah9, bh5);
    lo = (lo + Math.imul(al8, bl6)) | 0;
    mid = (mid + Math.imul(al8, bh6)) | 0;
    mid = (mid + Math.imul(ah8, bl6)) | 0;
    hi = (hi + Math.imul(ah8, bh6)) | 0;
    lo = (lo + Math.imul(al7, bl7)) | 0;
    mid = (mid + Math.imul(al7, bh7)) | 0;
    mid = (mid + Math.imul(ah7, bl7)) | 0;
    hi = (hi + Math.imul(ah7, bh7)) | 0;
    lo = (lo + Math.imul(al6, bl8)) | 0;
    mid = (mid + Math.imul(al6, bh8)) | 0;
    mid = (mid + Math.imul(ah6, bl8)) | 0;
    hi = (hi + Math.imul(ah6, bh8)) | 0;
    lo = (lo + Math.imul(al5, bl9)) | 0;
    mid = (mid + Math.imul(al5, bh9)) | 0;
    mid = (mid + Math.imul(ah5, bl9)) | 0;
    hi = (hi + Math.imul(ah5, bh9)) | 0;
    var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
    w14 &= 0x3ffffff;
    /* k = 15 */
    lo = Math.imul(al9, bl6);
    mid = Math.imul(al9, bh6);
    mid = (mid + Math.imul(ah9, bl6)) | 0;
    hi = Math.imul(ah9, bh6);
    lo = (lo + Math.imul(al8, bl7)) | 0;
    mid = (mid + Math.imul(al8, bh7)) | 0;
    mid = (mid + Math.imul(ah8, bl7)) | 0;
    hi = (hi + Math.imul(ah8, bh7)) | 0;
    lo = (lo + Math.imul(al7, bl8)) | 0;
    mid = (mid + Math.imul(al7, bh8)) | 0;
    mid = (mid + Math.imul(ah7, bl8)) | 0;
    hi = (hi + Math.imul(ah7, bh8)) | 0;
    lo = (lo + Math.imul(al6, bl9)) | 0;
    mid = (mid + Math.imul(al6, bh9)) | 0;
    mid = (mid + Math.imul(ah6, bl9)) | 0;
    hi = (hi + Math.imul(ah6, bh9)) | 0;
    var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
    w15 &= 0x3ffffff;
    /* k = 16 */
    lo = Math.imul(al9, bl7);
    mid = Math.imul(al9, bh7);
    mid = (mid + Math.imul(ah9, bl7)) | 0;
    hi = Math.imul(ah9, bh7);
    lo = (lo + Math.imul(al8, bl8)) | 0;
    mid = (mid + Math.imul(al8, bh8)) | 0;
    mid = (mid + Math.imul(ah8, bl8)) | 0;
    hi = (hi + Math.imul(ah8, bh8)) | 0;
    lo = (lo + Math.imul(al7, bl9)) | 0;
    mid = (mid + Math.imul(al7, bh9)) | 0;
    mid = (mid + Math.imul(ah7, bl9)) | 0;
    hi = (hi + Math.imul(ah7, bh9)) | 0;
    var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
    w16 &= 0x3ffffff;
    /* k = 17 */
    lo = Math.imul(al9, bl8);
    mid = Math.imul(al9, bh8);
    mid = (mid + Math.imul(ah9, bl8)) | 0;
    hi = Math.imul(ah9, bh8);
    lo = (lo + Math.imul(al8, bl9)) | 0;
    mid = (mid + Math.imul(al8, bh9)) | 0;
    mid = (mid + Math.imul(ah8, bl9)) | 0;
    hi = (hi + Math.imul(ah8, bh9)) | 0;
    var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
    w17 &= 0x3ffffff;
    /* k = 18 */
    lo = Math.imul(al9, bl9);
    mid = Math.imul(al9, bh9);
    mid = (mid + Math.imul(ah9, bl9)) | 0;
    hi = Math.imul(ah9, bh9);
    var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
    c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
    w18 &= 0x3ffffff;
    o[0] = w0;
    o[1] = w1;
    o[2] = w2;
    o[3] = w3;
    o[4] = w4;
    o[5] = w5;
    o[6] = w6;
    o[7] = w7;
    o[8] = w8;
    o[9] = w9;
    o[10] = w10;
    o[11] = w11;
    o[12] = w12;
    o[13] = w13;
    o[14] = w14;
    o[15] = w15;
    o[16] = w16;
    o[17] = w17;
    o[18] = w18;
    if (c !== 0) {
      o[19] = c;
      out.length++;
    }
    return out;
  };

  // Polyfill comb
  if (!Math.imul) {
    comb10MulTo = smallMulTo;
  }

  function bigMulTo (self, num, out) {
    out.negative = num.negative ^ self.negative;
    out.length = self.length + num.length;

    var carry = 0;
    var hncarry = 0;
    for (var k = 0; k < out.length - 1; k++) {
      // Sum all words with the same `i + j = k` and accumulate `ncarry`,
      // note that ncarry could be >= 0x3ffffff
      var ncarry = hncarry;
      hncarry = 0;
      var rword = carry & 0x3ffffff;
      var maxJ = Math.min(k, num.length - 1);
      for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
        var i = k - j;
        var a = self.words[i] | 0;
        var b = num.words[j] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
        lo = (lo + rword) | 0;
        rword = lo & 0x3ffffff;
        ncarry = (ncarry + (lo >>> 26)) | 0;

        hncarry += ncarry >>> 26;
        ncarry &= 0x3ffffff;
      }
      out.words[k] = rword;
      carry = ncarry;
      ncarry = hncarry;
    }
    if (carry !== 0) {
      out.words[k] = carry;
    } else {
      out.length--;
    }

    return out.strip();
  }

  function jumboMulTo (self, num, out) {
    var fftm = new FFTM();
    return fftm.mulp(self, num, out);
  }

  BN.prototype.mulTo = function mulTo (num, out) {
    var res;
    var len = this.length + num.length;
    if (this.length === 10 && num.length === 10) {
      res = comb10MulTo(this, num, out);
    } else if (len < 63) {
      res = smallMulTo(this, num, out);
    } else if (len < 1024) {
      res = bigMulTo(this, num, out);
    } else {
      res = jumboMulTo(this, num, out);
    }

    return res;
  };

  // Cooley-Tukey algorithm for FFT
  // slightly revisited to rely on looping instead of recursion

  function FFTM (x, y) {
    this.x = x;
    this.y = y;
  }

  FFTM.prototype.makeRBT = function makeRBT (N) {
    var t = new Array(N);
    var l = BN.prototype._countBits(N) - 1;
    for (var i = 0; i < N; i++) {
      t[i] = this.revBin(i, l, N);
    }

    return t;
  };

  // Returns binary-reversed representation of `x`
  FFTM.prototype.revBin = function revBin (x, l, N) {
    if (x === 0 || x === N - 1) return x;

    var rb = 0;
    for (var i = 0; i < l; i++) {
      rb |= (x & 1) << (l - i - 1);
      x >>= 1;
    }

    return rb;
  };

  // Performs "tweedling" phase, therefore 'emulating'
  // behaviour of the recursive algorithm
  FFTM.prototype.permute = function permute (rbt, rws, iws, rtws, itws, N) {
    for (var i = 0; i < N; i++) {
      rtws[i] = rws[rbt[i]];
      itws[i] = iws[rbt[i]];
    }
  };

  FFTM.prototype.transform = function transform (rws, iws, rtws, itws, N, rbt) {
    this.permute(rbt, rws, iws, rtws, itws, N);

    for (var s = 1; s < N; s <<= 1) {
      var l = s << 1;

      var rtwdf = Math.cos(2 * Math.PI / l);
      var itwdf = Math.sin(2 * Math.PI / l);

      for (var p = 0; p < N; p += l) {
        var rtwdf_ = rtwdf;
        var itwdf_ = itwdf;

        for (var j = 0; j < s; j++) {
          var re = rtws[p + j];
          var ie = itws[p + j];

          var ro = rtws[p + j + s];
          var io = itws[p + j + s];

          var rx = rtwdf_ * ro - itwdf_ * io;

          io = rtwdf_ * io + itwdf_ * ro;
          ro = rx;

          rtws[p + j] = re + ro;
          itws[p + j] = ie + io;

          rtws[p + j + s] = re - ro;
          itws[p + j + s] = ie - io;

          /* jshint maxdepth : false */
          if (j !== l) {
            rx = rtwdf * rtwdf_ - itwdf * itwdf_;

            itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
            rtwdf_ = rx;
          }
        }
      }
    }
  };

  FFTM.prototype.guessLen13b = function guessLen13b (n, m) {
    var N = Math.max(m, n) | 1;
    var odd = N & 1;
    var i = 0;
    for (N = N / 2 | 0; N; N = N >>> 1) {
      i++;
    }

    return 1 << i + 1 + odd;
  };

  FFTM.prototype.conjugate = function conjugate (rws, iws, N) {
    if (N <= 1) return;

    for (var i = 0; i < N / 2; i++) {
      var t = rws[i];

      rws[i] = rws[N - i - 1];
      rws[N - i - 1] = t;

      t = iws[i];

      iws[i] = -iws[N - i - 1];
      iws[N - i - 1] = -t;
    }
  };

  FFTM.prototype.normalize13b = function normalize13b (ws, N) {
    var carry = 0;
    for (var i = 0; i < N / 2; i++) {
      var w = Math.round(ws[2 * i + 1] / N) * 0x2000 +
        Math.round(ws[2 * i] / N) +
        carry;

      ws[i] = w & 0x3ffffff;

      if (w < 0x4000000) {
        carry = 0;
      } else {
        carry = w / 0x4000000 | 0;
      }
    }

    return ws;
  };

  FFTM.prototype.convert13b = function convert13b (ws, len, rws, N) {
    var carry = 0;
    for (var i = 0; i < len; i++) {
      carry = carry + (ws[i] | 0);

      rws[2 * i] = carry & 0x1fff; carry = carry >>> 13;
      rws[2 * i + 1] = carry & 0x1fff; carry = carry >>> 13;
    }

    // Pad with zeroes
    for (i = 2 * len; i < N; ++i) {
      rws[i] = 0;
    }

    assert(carry === 0);
    assert((carry & ~0x1fff) === 0);
  };

  FFTM.prototype.stub = function stub (N) {
    var ph = new Array(N);
    for (var i = 0; i < N; i++) {
      ph[i] = 0;
    }

    return ph;
  };

  FFTM.prototype.mulp = function mulp (x, y, out) {
    var N = 2 * this.guessLen13b(x.length, y.length);

    var rbt = this.makeRBT(N);

    var _ = this.stub(N);

    var rws = new Array(N);
    var rwst = new Array(N);
    var iwst = new Array(N);

    var nrws = new Array(N);
    var nrwst = new Array(N);
    var niwst = new Array(N);

    var rmws = out.words;
    rmws.length = N;

    this.convert13b(x.words, x.length, rws, N);
    this.convert13b(y.words, y.length, nrws, N);

    this.transform(rws, _, rwst, iwst, N, rbt);
    this.transform(nrws, _, nrwst, niwst, N, rbt);

    for (var i = 0; i < N; i++) {
      var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
      iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
      rwst[i] = rx;
    }

    this.conjugate(rwst, iwst, N);
    this.transform(rwst, iwst, rmws, _, N, rbt);
    this.conjugate(rmws, _, N);
    this.normalize13b(rmws, N);

    out.negative = x.negative ^ y.negative;
    out.length = x.length + y.length;
    return out.strip();
  };

  // Multiply `this` by `num`
  BN.prototype.mul = function mul (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return this.mulTo(num, out);
  };

  // Multiply employing FFT
  BN.prototype.mulf = function mulf (num) {
    var out = new BN(null);
    out.words = new Array(this.length + num.length);
    return jumboMulTo(this, num, out);
  };

  // In-place Multiplication
  BN.prototype.imul = function imul (num) {
    return this.clone().mulTo(num, this);
  };

  BN.prototype.imuln = function imuln (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);

    // Carry
    var carry = 0;
    for (var i = 0; i < this.length; i++) {
      var w = (this.words[i] | 0) * num;
      var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
      carry >>= 26;
      carry += (w / 0x4000000) | 0;
      // NOTE: lo is 27bit maximum
      carry += lo >>> 26;
      this.words[i] = lo & 0x3ffffff;
    }

    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }

    return this;
  };

  BN.prototype.muln = function muln (num) {
    return this.clone().imuln(num);
  };

  // `this` * `this`
  BN.prototype.sqr = function sqr () {
    return this.mul(this);
  };

  // `this` * `this` in-place
  BN.prototype.isqr = function isqr () {
    return this.imul(this.clone());
  };

  // Math.pow(`this`, `num`)
  BN.prototype.pow = function pow (num) {
    var w = toBitArray(num);
    if (w.length === 0) return new BN(1);

    // Skip leading zeroes
    var res = this;
    for (var i = 0; i < w.length; i++, res = res.sqr()) {
      if (w[i] !== 0) break;
    }

    if (++i < w.length) {
      for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
        if (w[i] === 0) continue;

        res = res.mul(q);
      }
    }

    return res;
  };

  // Shift-left in-place
  BN.prototype.iushln = function iushln (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;
    var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
    var i;

    if (r !== 0) {
      var carry = 0;

      for (i = 0; i < this.length; i++) {
        var newCarry = this.words[i] & carryMask;
        var c = ((this.words[i] | 0) - newCarry) << r;
        this.words[i] = c | carry;
        carry = newCarry >>> (26 - r);
      }

      if (carry) {
        this.words[i] = carry;
        this.length++;
      }
    }

    if (s !== 0) {
      for (i = this.length - 1; i >= 0; i--) {
        this.words[i + s] = this.words[i];
      }

      for (i = 0; i < s; i++) {
        this.words[i] = 0;
      }

      this.length += s;
    }

    return this.strip();
  };

  BN.prototype.ishln = function ishln (bits) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushln(bits);
  };

  // Shift-right in-place
  // NOTE: `hint` is a lowest bit before trailing zeroes
  // NOTE: if `extended` is present - it will be filled with destroyed bits
  BN.prototype.iushrn = function iushrn (bits, hint, extended) {
    assert(typeof bits === 'number' && bits >= 0);
    var h;
    if (hint) {
      h = (hint - (hint % 26)) / 26;
    } else {
      h = 0;
    }

    var r = bits % 26;
    var s = Math.min((bits - r) / 26, this.length);
    var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
    var maskedWords = extended;

    h -= s;
    h = Math.max(0, h);

    // Extended mode, copy masked part
    if (maskedWords) {
      for (var i = 0; i < s; i++) {
        maskedWords.words[i] = this.words[i];
      }
      maskedWords.length = s;
    }

    if (s === 0) {
      // No-op, we should not move anything at all
    } else if (this.length > s) {
      this.length -= s;
      for (i = 0; i < this.length; i++) {
        this.words[i] = this.words[i + s];
      }
    } else {
      this.words[0] = 0;
      this.length = 1;
    }

    var carry = 0;
    for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
      var word = this.words[i] | 0;
      this.words[i] = (carry << (26 - r)) | (word >>> r);
      carry = word & mask;
    }

    // Push carried bits as a mask
    if (maskedWords && carry !== 0) {
      maskedWords.words[maskedWords.length++] = carry;
    }

    if (this.length === 0) {
      this.words[0] = 0;
      this.length = 1;
    }

    return this.strip();
  };

  BN.prototype.ishrn = function ishrn (bits, hint, extended) {
    // TODO(indutny): implement me
    assert(this.negative === 0);
    return this.iushrn(bits, hint, extended);
  };

  // Shift-left
  BN.prototype.shln = function shln (bits) {
    return this.clone().ishln(bits);
  };

  BN.prototype.ushln = function ushln (bits) {
    return this.clone().iushln(bits);
  };

  // Shift-right
  BN.prototype.shrn = function shrn (bits) {
    return this.clone().ishrn(bits);
  };

  BN.prototype.ushrn = function ushrn (bits) {
    return this.clone().iushrn(bits);
  };

  // Test if n bit is set
  BN.prototype.testn = function testn (bit) {
    assert(typeof bit === 'number' && bit >= 0);
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) return false;

    // Check bit and return
    var w = this.words[s];

    return !!(w & q);
  };

  // Return only lowers bits of number (in-place)
  BN.prototype.imaskn = function imaskn (bits) {
    assert(typeof bits === 'number' && bits >= 0);
    var r = bits % 26;
    var s = (bits - r) / 26;

    assert(this.negative === 0, 'imaskn works only with positive numbers');

    if (this.length <= s) {
      return this;
    }

    if (r !== 0) {
      s++;
    }
    this.length = Math.min(s, this.length);

    if (r !== 0) {
      var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
      this.words[this.length - 1] &= mask;
    }

    return this.strip();
  };

  // Return only lowers bits of number
  BN.prototype.maskn = function maskn (bits) {
    return this.clone().imaskn(bits);
  };

  // Add plain number `num` to `this`
  BN.prototype.iaddn = function iaddn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.isubn(-num);

    // Possible sign change
    if (this.negative !== 0) {
      if (this.length === 1 && (this.words[0] | 0) < num) {
        this.words[0] = num - (this.words[0] | 0);
        this.negative = 0;
        return this;
      }

      this.negative = 0;
      this.isubn(num);
      this.negative = 1;
      return this;
    }

    // Add without checks
    return this._iaddn(num);
  };

  BN.prototype._iaddn = function _iaddn (num) {
    this.words[0] += num;

    // Carry
    for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
      this.words[i] -= 0x4000000;
      if (i === this.length - 1) {
        this.words[i + 1] = 1;
      } else {
        this.words[i + 1]++;
      }
    }
    this.length = Math.max(this.length, i + 1);

    return this;
  };

  // Subtract plain number `num` from `this`
  BN.prototype.isubn = function isubn (num) {
    assert(typeof num === 'number');
    assert(num < 0x4000000);
    if (num < 0) return this.iaddn(-num);

    if (this.negative !== 0) {
      this.negative = 0;
      this.iaddn(num);
      this.negative = 1;
      return this;
    }

    this.words[0] -= num;

    if (this.length === 1 && this.words[0] < 0) {
      this.words[0] = -this.words[0];
      this.negative = 1;
    } else {
      // Carry
      for (var i = 0; i < this.length && this.words[i] < 0; i++) {
        this.words[i] += 0x4000000;
        this.words[i + 1] -= 1;
      }
    }

    return this.strip();
  };

  BN.prototype.addn = function addn (num) {
    return this.clone().iaddn(num);
  };

  BN.prototype.subn = function subn (num) {
    return this.clone().isubn(num);
  };

  BN.prototype.iabs = function iabs () {
    this.negative = 0;

    return this;
  };

  BN.prototype.abs = function abs () {
    return this.clone().iabs();
  };

  BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
    var len = num.length + shift;
    var i;

    this._expand(len);

    var w;
    var carry = 0;
    for (i = 0; i < num.length; i++) {
      w = (this.words[i + shift] | 0) + carry;
      var right = (num.words[i] | 0) * mul;
      w -= right & 0x3ffffff;
      carry = (w >> 26) - ((right / 0x4000000) | 0);
      this.words[i + shift] = w & 0x3ffffff;
    }
    for (; i < this.length - shift; i++) {
      w = (this.words[i + shift] | 0) + carry;
      carry = w >> 26;
      this.words[i + shift] = w & 0x3ffffff;
    }

    if (carry === 0) return this.strip();

    // Subtraction overflow
    assert(carry === -1);
    carry = 0;
    for (i = 0; i < this.length; i++) {
      w = -(this.words[i] | 0) + carry;
      carry = w >> 26;
      this.words[i] = w & 0x3ffffff;
    }
    this.negative = 1;

    return this.strip();
  };

  BN.prototype._wordDiv = function _wordDiv (num, mode) {
    var shift = this.length - num.length;

    var a = this.clone();
    var b = num;

    // Normalize
    var bhi = b.words[b.length - 1] | 0;
    var bhiBits = this._countBits(bhi);
    shift = 26 - bhiBits;
    if (shift !== 0) {
      b = b.ushln(shift);
      a.iushln(shift);
      bhi = b.words[b.length - 1] | 0;
    }

    // Initialize quotient
    var m = a.length - b.length;
    var q;

    if (mode !== 'mod') {
      q = new BN(null);
      q.length = m + 1;
      q.words = new Array(q.length);
      for (var i = 0; i < q.length; i++) {
        q.words[i] = 0;
      }
    }

    var diff = a.clone()._ishlnsubmul(b, 1, m);
    if (diff.negative === 0) {
      a = diff;
      if (q) {
        q.words[m] = 1;
      }
    }

    for (var j = m - 1; j >= 0; j--) {
      var qj = (a.words[b.length + j] | 0) * 0x4000000 +
        (a.words[b.length + j - 1] | 0);

      // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
      // (0x7ffffff)
      qj = Math.min((qj / bhi) | 0, 0x3ffffff);

      a._ishlnsubmul(b, qj, j);
      while (a.negative !== 0) {
        qj--;
        a.negative = 0;
        a._ishlnsubmul(b, 1, j);
        if (!a.isZero()) {
          a.negative ^= 1;
        }
      }
      if (q) {
        q.words[j] = qj;
      }
    }
    if (q) {
      q.strip();
    }
    a.strip();

    // Denormalize
    if (mode !== 'div' && shift !== 0) {
      a.iushrn(shift);
    }

    return {
      div: q || null,
      mod: a
    };
  };

  // NOTE: 1) `mode` can be set to `mod` to request mod only,
  //       to `div` to request div only, or be absent to
  //       request both div & mod
  //       2) `positive` is true if unsigned mod is requested
  BN.prototype.divmod = function divmod (num, mode, positive) {
    assert(!num.isZero());

    if (this.isZero()) {
      return {
        div: new BN(0),
        mod: new BN(0)
      };
    }

    var div, mod, res;
    if (this.negative !== 0 && num.negative === 0) {
      res = this.neg().divmod(num, mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.iadd(num);
        }
      }

      return {
        div: div,
        mod: mod
      };
    }

    if (this.negative === 0 && num.negative !== 0) {
      res = this.divmod(num.neg(), mode);

      if (mode !== 'mod') {
        div = res.div.neg();
      }

      return {
        div: div,
        mod: res.mod
      };
    }

    if ((this.negative & num.negative) !== 0) {
      res = this.neg().divmod(num.neg(), mode);

      if (mode !== 'div') {
        mod = res.mod.neg();
        if (positive && mod.negative !== 0) {
          mod.isub(num);
        }
      }

      return {
        div: res.div,
        mod: mod
      };
    }

    // Both numbers are positive at this point

    // Strip both numbers to approximate shift value
    if (num.length > this.length || this.cmp(num) < 0) {
      return {
        div: new BN(0),
        mod: this
      };
    }

    // Very short reduction
    if (num.length === 1) {
      if (mode === 'div') {
        return {
          div: this.divn(num.words[0]),
          mod: null
        };
      }

      if (mode === 'mod') {
        return {
          div: null,
          mod: new BN(this.modn(num.words[0]))
        };
      }

      return {
        div: this.divn(num.words[0]),
        mod: new BN(this.modn(num.words[0]))
      };
    }

    return this._wordDiv(num, mode);
  };

  // Find `this` / `num`
  BN.prototype.div = function div (num) {
    return this.divmod(num, 'div', false).div;
  };

  // Find `this` % `num`
  BN.prototype.mod = function mod (num) {
    return this.divmod(num, 'mod', false).mod;
  };

  BN.prototype.umod = function umod (num) {
    return this.divmod(num, 'mod', true).mod;
  };

  // Find Round(`this` / `num`)
  BN.prototype.divRound = function divRound (num) {
    var dm = this.divmod(num);

    // Fast case - exact division
    if (dm.mod.isZero()) return dm.div;

    var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

    var half = num.ushrn(1);
    var r2 = num.andln(1);
    var cmp = mod.cmp(half);

    // Round down
    if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;

    // Round up
    return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
  };

  BN.prototype.modn = function modn (num) {
    assert(num <= 0x3ffffff);
    var p = (1 << 26) % num;

    var acc = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      acc = (p * acc + (this.words[i] | 0)) % num;
    }

    return acc;
  };

  // In-place division by number
  BN.prototype.idivn = function idivn (num) {
    assert(num <= 0x3ffffff);

    var carry = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var w = (this.words[i] | 0) + carry * 0x4000000;
      this.words[i] = (w / num) | 0;
      carry = w % num;
    }

    return this.strip();
  };

  BN.prototype.divn = function divn (num) {
    return this.clone().idivn(num);
  };

  BN.prototype.egcd = function egcd (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var x = this;
    var y = p.clone();

    if (x.negative !== 0) {
      x = x.umod(p);
    } else {
      x = x.clone();
    }

    // A * x + B * y = x
    var A = new BN(1);
    var B = new BN(0);

    // C * x + D * y = y
    var C = new BN(0);
    var D = new BN(1);

    var g = 0;

    while (x.isEven() && y.isEven()) {
      x.iushrn(1);
      y.iushrn(1);
      ++g;
    }

    var yp = y.clone();
    var xp = x.clone();

    while (!x.isZero()) {
      for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        x.iushrn(i);
        while (i-- > 0) {
          if (A.isOdd() || B.isOdd()) {
            A.iadd(yp);
            B.isub(xp);
          }

          A.iushrn(1);
          B.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        y.iushrn(j);
        while (j-- > 0) {
          if (C.isOdd() || D.isOdd()) {
            C.iadd(yp);
            D.isub(xp);
          }

          C.iushrn(1);
          D.iushrn(1);
        }
      }

      if (x.cmp(y) >= 0) {
        x.isub(y);
        A.isub(C);
        B.isub(D);
      } else {
        y.isub(x);
        C.isub(A);
        D.isub(B);
      }
    }

    return {
      a: C,
      b: D,
      gcd: y.iushln(g)
    };
  };

  // This is reduced incarnation of the binary EEA
  // above, designated to invert members of the
  // _prime_ fields F(p) at a maximal speed
  BN.prototype._invmp = function _invmp (p) {
    assert(p.negative === 0);
    assert(!p.isZero());

    var a = this;
    var b = p.clone();

    if (a.negative !== 0) {
      a = a.umod(p);
    } else {
      a = a.clone();
    }

    var x1 = new BN(1);
    var x2 = new BN(0);

    var delta = b.clone();

    while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
      for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
      if (i > 0) {
        a.iushrn(i);
        while (i-- > 0) {
          if (x1.isOdd()) {
            x1.iadd(delta);
          }

          x1.iushrn(1);
        }
      }

      for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
      if (j > 0) {
        b.iushrn(j);
        while (j-- > 0) {
          if (x2.isOdd()) {
            x2.iadd(delta);
          }

          x2.iushrn(1);
        }
      }

      if (a.cmp(b) >= 0) {
        a.isub(b);
        x1.isub(x2);
      } else {
        b.isub(a);
        x2.isub(x1);
      }
    }

    var res;
    if (a.cmpn(1) === 0) {
      res = x1;
    } else {
      res = x2;
    }

    if (res.cmpn(0) < 0) {
      res.iadd(p);
    }

    return res;
  };

  BN.prototype.gcd = function gcd (num) {
    if (this.isZero()) return num.abs();
    if (num.isZero()) return this.abs();

    var a = this.clone();
    var b = num.clone();
    a.negative = 0;
    b.negative = 0;

    // Remove common factor of two
    for (var shift = 0; a.isEven() && b.isEven(); shift++) {
      a.iushrn(1);
      b.iushrn(1);
    }

    do {
      while (a.isEven()) {
        a.iushrn(1);
      }
      while (b.isEven()) {
        b.iushrn(1);
      }

      var r = a.cmp(b);
      if (r < 0) {
        // Swap `a` and `b` to make `a` always bigger than `b`
        var t = a;
        a = b;
        b = t;
      } else if (r === 0 || b.cmpn(1) === 0) {
        break;
      }

      a.isub(b);
    } while (true);

    return b.iushln(shift);
  };

  // Invert number in the field F(num)
  BN.prototype.invm = function invm (num) {
    return this.egcd(num).a.umod(num);
  };

  BN.prototype.isEven = function isEven () {
    return (this.words[0] & 1) === 0;
  };

  BN.prototype.isOdd = function isOdd () {
    return (this.words[0] & 1) === 1;
  };

  // And first word and num
  BN.prototype.andln = function andln (num) {
    return this.words[0] & num;
  };

  // Increment at the bit position in-line
  BN.prototype.bincn = function bincn (bit) {
    assert(typeof bit === 'number');
    var r = bit % 26;
    var s = (bit - r) / 26;
    var q = 1 << r;

    // Fast case: bit is much higher than all existing words
    if (this.length <= s) {
      this._expand(s + 1);
      this.words[s] |= q;
      return this;
    }

    // Add bit and propagate, if needed
    var carry = q;
    for (var i = s; carry !== 0 && i < this.length; i++) {
      var w = this.words[i] | 0;
      w += carry;
      carry = w >>> 26;
      w &= 0x3ffffff;
      this.words[i] = w;
    }
    if (carry !== 0) {
      this.words[i] = carry;
      this.length++;
    }
    return this;
  };

  BN.prototype.isZero = function isZero () {
    return this.length === 1 && this.words[0] === 0;
  };

  BN.prototype.cmpn = function cmpn (num) {
    var negative = num < 0;

    if (this.negative !== 0 && !negative) return -1;
    if (this.negative === 0 && negative) return 1;

    this.strip();

    var res;
    if (this.length > 1) {
      res = 1;
    } else {
      if (negative) {
        num = -num;
      }

      assert(num <= 0x3ffffff, 'Number is too big');

      var w = this.words[0] | 0;
      res = w === num ? 0 : w < num ? -1 : 1;
    }
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Compare two numbers and return:
  // 1 - if `this` > `num`
  // 0 - if `this` == `num`
  // -1 - if `this` < `num`
  BN.prototype.cmp = function cmp (num) {
    if (this.negative !== 0 && num.negative === 0) return -1;
    if (this.negative === 0 && num.negative !== 0) return 1;

    var res = this.ucmp(num);
    if (this.negative !== 0) return -res | 0;
    return res;
  };

  // Unsigned comparison
  BN.prototype.ucmp = function ucmp (num) {
    // At this point both numbers have the same sign
    if (this.length > num.length) return 1;
    if (this.length < num.length) return -1;

    var res = 0;
    for (var i = this.length - 1; i >= 0; i--) {
      var a = this.words[i] | 0;
      var b = num.words[i] | 0;

      if (a === b) continue;
      if (a < b) {
        res = -1;
      } else if (a > b) {
        res = 1;
      }
      break;
    }
    return res;
  };

  BN.prototype.gtn = function gtn (num) {
    return this.cmpn(num) === 1;
  };

  BN.prototype.gt = function gt (num) {
    return this.cmp(num) === 1;
  };

  BN.prototype.gten = function gten (num) {
    return this.cmpn(num) >= 0;
  };

  BN.prototype.gte = function gte (num) {
    return this.cmp(num) >= 0;
  };

  BN.prototype.ltn = function ltn (num) {
    return this.cmpn(num) === -1;
  };

  BN.prototype.lt = function lt (num) {
    return this.cmp(num) === -1;
  };

  BN.prototype.lten = function lten (num) {
    return this.cmpn(num) <= 0;
  };

  BN.prototype.lte = function lte (num) {
    return this.cmp(num) <= 0;
  };

  BN.prototype.eqn = function eqn (num) {
    return this.cmpn(num) === 0;
  };

  BN.prototype.eq = function eq (num) {
    return this.cmp(num) === 0;
  };

  //
  // A reduce context, could be using montgomery or something better, depending
  // on the `m` itself.
  //
  BN.red = function red (num) {
    return new Red(num);
  };

  BN.prototype.toRed = function toRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    assert(this.negative === 0, 'red works only with positives');
    return ctx.convertTo(this)._forceRed(ctx);
  };

  BN.prototype.fromRed = function fromRed () {
    assert(this.red, 'fromRed works only with numbers in reduction context');
    return this.red.convertFrom(this);
  };

  BN.prototype._forceRed = function _forceRed (ctx) {
    this.red = ctx;
    return this;
  };

  BN.prototype.forceRed = function forceRed (ctx) {
    assert(!this.red, 'Already a number in reduction context');
    return this._forceRed(ctx);
  };

  BN.prototype.redAdd = function redAdd (num) {
    assert(this.red, 'redAdd works only with red numbers');
    return this.red.add(this, num);
  };

  BN.prototype.redIAdd = function redIAdd (num) {
    assert(this.red, 'redIAdd works only with red numbers');
    return this.red.iadd(this, num);
  };

  BN.prototype.redSub = function redSub (num) {
    assert(this.red, 'redSub works only with red numbers');
    return this.red.sub(this, num);
  };

  BN.prototype.redISub = function redISub (num) {
    assert(this.red, 'redISub works only with red numbers');
    return this.red.isub(this, num);
  };

  BN.prototype.redShl = function redShl (num) {
    assert(this.red, 'redShl works only with red numbers');
    return this.red.shl(this, num);
  };

  BN.prototype.redMul = function redMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.mul(this, num);
  };

  BN.prototype.redIMul = function redIMul (num) {
    assert(this.red, 'redMul works only with red numbers');
    this.red._verify2(this, num);
    return this.red.imul(this, num);
  };

  BN.prototype.redSqr = function redSqr () {
    assert(this.red, 'redSqr works only with red numbers');
    this.red._verify1(this);
    return this.red.sqr(this);
  };

  BN.prototype.redISqr = function redISqr () {
    assert(this.red, 'redISqr works only with red numbers');
    this.red._verify1(this);
    return this.red.isqr(this);
  };

  // Square root over p
  BN.prototype.redSqrt = function redSqrt () {
    assert(this.red, 'redSqrt works only with red numbers');
    this.red._verify1(this);
    return this.red.sqrt(this);
  };

  BN.prototype.redInvm = function redInvm () {
    assert(this.red, 'redInvm works only with red numbers');
    this.red._verify1(this);
    return this.red.invm(this);
  };

  // Return negative clone of `this` % `red modulo`
  BN.prototype.redNeg = function redNeg () {
    assert(this.red, 'redNeg works only with red numbers');
    this.red._verify1(this);
    return this.red.neg(this);
  };

  BN.prototype.redPow = function redPow (num) {
    assert(this.red && !num.red, 'redPow(normalNum)');
    this.red._verify1(this);
    return this.red.pow(this, num);
  };

  // Prime numbers with efficient reduction
  var primes = {
    k256: null,
    p224: null,
    p192: null,
    p25519: null
  };

  // Pseudo-Mersenne prime
  function MPrime (name, p) {
    // P = 2 ^ N - K
    this.name = name;
    this.p = new BN(p, 16);
    this.n = this.p.bitLength();
    this.k = new BN(1).iushln(this.n).isub(this.p);

    this.tmp = this._tmp();
  }

  MPrime.prototype._tmp = function _tmp () {
    var tmp = new BN(null);
    tmp.words = new Array(Math.ceil(this.n / 13));
    return tmp;
  };

  MPrime.prototype.ireduce = function ireduce (num) {
    // Assumes that `num` is less than `P^2`
    // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
    var r = num;
    var rlen;

    do {
      this.split(r, this.tmp);
      r = this.imulK(r);
      r = r.iadd(this.tmp);
      rlen = r.bitLength();
    } while (rlen > this.n);

    var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
    if (cmp === 0) {
      r.words[0] = 0;
      r.length = 1;
    } else if (cmp > 0) {
      r.isub(this.p);
    } else {
      if (r.strip !== undefined) {
        // r is BN v4 instance
        r.strip();
      } else {
        // r is BN v5 instance
        r._strip();
      }
    }

    return r;
  };

  MPrime.prototype.split = function split (input, out) {
    input.iushrn(this.n, 0, out);
  };

  MPrime.prototype.imulK = function imulK (num) {
    return num.imul(this.k);
  };

  function K256 () {
    MPrime.call(
      this,
      'k256',
      'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
  }
  inherits(K256, MPrime);

  K256.prototype.split = function split (input, output) {
    // 256 = 9 * 26 + 22
    var mask = 0x3fffff;

    var outLen = Math.min(input.length, 9);
    for (var i = 0; i < outLen; i++) {
      output.words[i] = input.words[i];
    }
    output.length = outLen;

    if (input.length <= 9) {
      input.words[0] = 0;
      input.length = 1;
      return;
    }

    // Shift by 9 limbs
    var prev = input.words[9];
    output.words[output.length++] = prev & mask;

    for (i = 10; i < input.length; i++) {
      var next = input.words[i] | 0;
      input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
      prev = next;
    }
    prev >>>= 22;
    input.words[i - 10] = prev;
    if (prev === 0 && input.length > 10) {
      input.length -= 10;
    } else {
      input.length -= 9;
    }
  };

  K256.prototype.imulK = function imulK (num) {
    // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
    num.words[num.length] = 0;
    num.words[num.length + 1] = 0;
    num.length += 2;

    // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
    var lo = 0;
    for (var i = 0; i < num.length; i++) {
      var w = num.words[i] | 0;
      lo += w * 0x3d1;
      num.words[i] = lo & 0x3ffffff;
      lo = w * 0x40 + ((lo / 0x4000000) | 0);
    }

    // Fast length reduction
    if (num.words[num.length - 1] === 0) {
      num.length--;
      if (num.words[num.length - 1] === 0) {
        num.length--;
      }
    }
    return num;
  };

  function P224 () {
    MPrime.call(
      this,
      'p224',
      'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
  }
  inherits(P224, MPrime);

  function P192 () {
    MPrime.call(
      this,
      'p192',
      'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
  }
  inherits(P192, MPrime);

  function P25519 () {
    // 2 ^ 255 - 19
    MPrime.call(
      this,
      '25519',
      '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
  }
  inherits(P25519, MPrime);

  P25519.prototype.imulK = function imulK (num) {
    // K = 0x13
    var carry = 0;
    for (var i = 0; i < num.length; i++) {
      var hi = (num.words[i] | 0) * 0x13 + carry;
      var lo = hi & 0x3ffffff;
      hi >>>= 26;

      num.words[i] = lo;
      carry = hi;
    }
    if (carry !== 0) {
      num.words[num.length++] = carry;
    }
    return num;
  };

  // Exported mostly for testing purposes, use plain name instead
  BN._prime = function prime (name) {
    // Cached version of prime
    if (primes[name]) return primes[name];

    var prime;
    if (name === 'k256') {
      prime = new K256();
    } else if (name === 'p224') {
      prime = new P224();
    } else if (name === 'p192') {
      prime = new P192();
    } else if (name === 'p25519') {
      prime = new P25519();
    } else {
      throw new Error('Unknown prime ' + name);
    }
    primes[name] = prime;

    return prime;
  };

  //
  // Base reduction engine
  //
  function Red (m) {
    if (typeof m === 'string') {
      var prime = BN._prime(m);
      this.m = prime.p;
      this.prime = prime;
    } else {
      assert(m.gtn(1), 'modulus must be greater than 1');
      this.m = m;
      this.prime = null;
    }
  }

  Red.prototype._verify1 = function _verify1 (a) {
    assert(a.negative === 0, 'red works only with positives');
    assert(a.red, 'red works only with red numbers');
  };

  Red.prototype._verify2 = function _verify2 (a, b) {
    assert((a.negative | b.negative) === 0, 'red works only with positives');
    assert(a.red && a.red === b.red,
      'red works only with red numbers');
  };

  Red.prototype.imod = function imod (a) {
    if (this.prime) return this.prime.ireduce(a)._forceRed(this);
    return a.umod(this.m)._forceRed(this);
  };

  Red.prototype.neg = function neg (a) {
    if (a.isZero()) {
      return a.clone();
    }

    return this.m.sub(a)._forceRed(this);
  };

  Red.prototype.add = function add (a, b) {
    this._verify2(a, b);

    var res = a.add(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.iadd = function iadd (a, b) {
    this._verify2(a, b);

    var res = a.iadd(b);
    if (res.cmp(this.m) >= 0) {
      res.isub(this.m);
    }
    return res;
  };

  Red.prototype.sub = function sub (a, b) {
    this._verify2(a, b);

    var res = a.sub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res._forceRed(this);
  };

  Red.prototype.isub = function isub (a, b) {
    this._verify2(a, b);

    var res = a.isub(b);
    if (res.cmpn(0) < 0) {
      res.iadd(this.m);
    }
    return res;
  };

  Red.prototype.shl = function shl (a, num) {
    this._verify1(a);
    return this.imod(a.ushln(num));
  };

  Red.prototype.imul = function imul (a, b) {
    this._verify2(a, b);
    return this.imod(a.imul(b));
  };

  Red.prototype.mul = function mul (a, b) {
    this._verify2(a, b);
    return this.imod(a.mul(b));
  };

  Red.prototype.isqr = function isqr (a) {
    return this.imul(a, a.clone());
  };

  Red.prototype.sqr = function sqr (a) {
    return this.mul(a, a);
  };

  Red.prototype.sqrt = function sqrt (a) {
    if (a.isZero()) return a.clone();

    var mod3 = this.m.andln(3);
    assert(mod3 % 2 === 1);

    // Fast case
    if (mod3 === 3) {
      var pow = this.m.add(new BN(1)).iushrn(2);
      return this.pow(a, pow);
    }

    // Tonelli-Shanks algorithm (Totally unoptimized and slow)
    //
    // Find Q and S, that Q * 2 ^ S = (P - 1)
    var q = this.m.subn(1);
    var s = 0;
    while (!q.isZero() && q.andln(1) === 0) {
      s++;
      q.iushrn(1);
    }
    assert(!q.isZero());

    var one = new BN(1).toRed(this);
    var nOne = one.redNeg();

    // Find quadratic non-residue
    // NOTE: Max is such because of generalized Riemann hypothesis.
    var lpow = this.m.subn(1).iushrn(1);
    var z = this.m.bitLength();
    z = new BN(2 * z * z).toRed(this);

    while (this.pow(z, lpow).cmp(nOne) !== 0) {
      z.redIAdd(nOne);
    }

    var c = this.pow(z, q);
    var r = this.pow(a, q.addn(1).iushrn(1));
    var t = this.pow(a, q);
    var m = s;
    while (t.cmp(one) !== 0) {
      var tmp = t;
      for (var i = 0; tmp.cmp(one) !== 0; i++) {
        tmp = tmp.redSqr();
      }
      assert(i < m);
      var b = this.pow(c, new BN(1).iushln(m - i - 1));

      r = r.redMul(b);
      c = b.redSqr();
      t = t.redMul(c);
      m = i;
    }

    return r;
  };

  Red.prototype.invm = function invm (a) {
    var inv = a._invmp(this.m);
    if (inv.negative !== 0) {
      inv.negative = 0;
      return this.imod(inv).redNeg();
    } else {
      return this.imod(inv);
    }
  };

  Red.prototype.pow = function pow (a, num) {
    if (num.isZero()) return new BN(1).toRed(this);
    if (num.cmpn(1) === 0) return a.clone();

    var windowSize = 4;
    var wnd = new Array(1 << windowSize);
    wnd[0] = new BN(1).toRed(this);
    wnd[1] = a;
    for (var i = 2; i < wnd.length; i++) {
      wnd[i] = this.mul(wnd[i - 1], a);
    }

    var res = wnd[0];
    var current = 0;
    var currentLen = 0;
    var start = num.bitLength() % 26;
    if (start === 0) {
      start = 26;
    }

    for (i = num.length - 1; i >= 0; i--) {
      var word = num.words[i];
      for (var j = start - 1; j >= 0; j--) {
        var bit = (word >> j) & 1;
        if (res !== wnd[0]) {
          res = this.sqr(res);
        }

        if (bit === 0 && current === 0) {
          currentLen = 0;
          continue;
        }

        current <<= 1;
        current |= bit;
        currentLen++;
        if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

        res = this.mul(res, wnd[current]);
        currentLen = 0;
        current = 0;
      }
      start = 26;
    }

    return res;
  };

  Red.prototype.convertTo = function convertTo (num) {
    var r = num.umod(this.m);

    return r === num ? r.clone() : r;
  };

  Red.prototype.convertFrom = function convertFrom (num) {
    var res = num.clone();
    res.red = null;
    return res;
  };

  //
  // Montgomery method engine
  //

  BN.mont = function mont (num) {
    return new Mont(num);
  };

  function Mont (m) {
    Red.call(this, m);

    this.shift = this.m.bitLength();
    if (this.shift % 26 !== 0) {
      this.shift += 26 - (this.shift % 26);
    }

    this.r = new BN(1).iushln(this.shift);
    this.r2 = this.imod(this.r.sqr());
    this.rinv = this.r._invmp(this.m);

    this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
    this.minv = this.minv.umod(this.r);
    this.minv = this.r.sub(this.minv);
  }
  inherits(Mont, Red);

  Mont.prototype.convertTo = function convertTo (num) {
    return this.imod(num.ushln(this.shift));
  };

  Mont.prototype.convertFrom = function convertFrom (num) {
    var r = this.imod(num.mul(this.rinv));
    r.red = null;
    return r;
  };

  Mont.prototype.imul = function imul (a, b) {
    if (a.isZero() || b.isZero()) {
      a.words[0] = 0;
      a.length = 1;
      return a;
    }

    var t = a.imul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;

    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.mul = function mul (a, b) {
    if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

    var t = a.mul(b);
    var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
    var u = t.isub(c).iushrn(this.shift);
    var res = u;
    if (u.cmp(this.m) >= 0) {
      res = u.isub(this.m);
    } else if (u.cmpn(0) < 0) {
      res = u.iadd(this.m);
    }

    return res._forceRed(this);
  };

  Mont.prototype.invm = function invm (a) {
    // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
    var res = this.imod(a._invmp(this.m).mul(this.r2));
    return res._forceRed(this);
  };
})(typeof module === 'undefined' || module, this);

},{"buffer":"../../../Users/Jilo/AppData/Roaming/npm/node_modules/parcel-bundler/src/builtins/_empty.js"}],"../../node_modules/@ethersproject/logger/lib.esm/_version.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.version = void 0;
const version = "logger/5.6.0";
exports.version = version;
},{}],"../../node_modules/@ethersproject/logger/lib.esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Logger = exports.LogLevel = exports.ErrorCode = void 0;

var _version = require("./_version");

let _permanentCensorErrors = false;
let _censorErrors = false;
const LogLevels = {
  debug: 1,
  "default": 2,
  info: 2,
  warning: 3,
  error: 4,
  off: 5
};
let _logLevel = LogLevels["default"];
let _globalLogger = null;

function _checkNormalize() {
  try {
    const missing = []; // Make sure all forms of normalization are supported

    ["NFD", "NFC", "NFKD", "NFKC"].forEach(form => {
      try {
        if ("test".normalize(form) !== "test") {
          throw new Error("bad normalize");
        }

        ;
      } catch (error) {
        missing.push(form);
      }
    });

    if (missing.length) {
      throw new Error("missing " + missing.join(", "));
    }

    if (String.fromCharCode(0xe9).normalize("NFD") !== String.fromCharCode(0x65, 0x0301)) {
      throw new Error("broken implementation");
    }
  } catch (error) {
    return error.message;
  }

  return null;
}

const _normalizeError = _checkNormalize();

var LogLevel;
exports.LogLevel = LogLevel;

(function (LogLevel) {
  LogLevel["DEBUG"] = "DEBUG";
  LogLevel["INFO"] = "INFO";
  LogLevel["WARNING"] = "WARNING";
  LogLevel["ERROR"] = "ERROR";
  LogLevel["OFF"] = "OFF";
})(LogLevel || (exports.LogLevel = LogLevel = {}));

var ErrorCode;
exports.ErrorCode = ErrorCode;

(function (ErrorCode) {
  ///////////////////
  // Generic Errors
  // Unknown Error
  ErrorCode["UNKNOWN_ERROR"] = "UNKNOWN_ERROR"; // Not Implemented

  ErrorCode["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED"; // Unsupported Operation
  //   - operation

  ErrorCode["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION"; // Network Error (i.e. Ethereum Network, such as an invalid chain ID)
  //   - event ("noNetwork" is not re-thrown in provider.ready; otherwise thrown)

  ErrorCode["NETWORK_ERROR"] = "NETWORK_ERROR"; // Some sort of bad response from the server

  ErrorCode["SERVER_ERROR"] = "SERVER_ERROR"; // Timeout

  ErrorCode["TIMEOUT"] = "TIMEOUT"; ///////////////////
  // Operational  Errors
  // Buffer Overrun

  ErrorCode["BUFFER_OVERRUN"] = "BUFFER_OVERRUN"; // Numeric Fault
  //   - operation: the operation being executed
  //   - fault: the reason this faulted

  ErrorCode["NUMERIC_FAULT"] = "NUMERIC_FAULT"; ///////////////////
  // Argument Errors
  // Missing new operator to an object
  //  - name: The name of the class

  ErrorCode["MISSING_NEW"] = "MISSING_NEW"; // Invalid argument (e.g. value is incompatible with type) to a function:
  //   - argument: The argument name that was invalid
  //   - value: The value of the argument

  ErrorCode["INVALID_ARGUMENT"] = "INVALID_ARGUMENT"; // Missing argument to a function:
  //   - count: The number of arguments received
  //   - expectedCount: The number of arguments expected

  ErrorCode["MISSING_ARGUMENT"] = "MISSING_ARGUMENT"; // Too many arguments
  //   - count: The number of arguments received
  //   - expectedCount: The number of arguments expected

  ErrorCode["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT"; ///////////////////
  // Blockchain Errors
  // Call exception
  //  - transaction: the transaction
  //  - address?: the contract address
  //  - args?: The arguments passed into the function
  //  - method?: The Solidity method signature
  //  - errorSignature?: The EIP848 error signature
  //  - errorArgs?: The EIP848 error parameters
  //  - reason: The reason (only for EIP848 "Error(string)")

  ErrorCode["CALL_EXCEPTION"] = "CALL_EXCEPTION"; // Insufficient funds (< value + gasLimit * gasPrice)
  //   - transaction: the transaction attempted

  ErrorCode["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS"; // Nonce has already been used
  //   - transaction: the transaction attempted

  ErrorCode["NONCE_EXPIRED"] = "NONCE_EXPIRED"; // The replacement fee for the transaction is too low
  //   - transaction: the transaction attempted

  ErrorCode["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED"; // The gas limit could not be estimated
  //   - transaction: the transaction passed to estimateGas

  ErrorCode["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT"; // The transaction was replaced by one with a higher gas price
  //   - reason: "cancelled", "replaced" or "repriced"
  //   - cancelled: true if reason == "cancelled" or reason == "replaced")
  //   - hash: original transaction hash
  //   - replacement: the full TransactionsResponse for the replacement
  //   - receipt: the receipt of the replacement

  ErrorCode["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
})(ErrorCode || (exports.ErrorCode = ErrorCode = {}));

;
const HEX = "0123456789abcdef";

class Logger {
  constructor(version) {
    Object.defineProperty(this, "version", {
      enumerable: true,
      value: version,
      writable: false
    });
  }

  _log(logLevel, args) {
    const level = logLevel.toLowerCase();

    if (LogLevels[level] == null) {
      this.throwArgumentError("invalid log level name", "logLevel", logLevel);
    }

    if (_logLevel > LogLevels[level]) {
      return;
    }

    console.log.apply(console, args);
  }

  debug(...args) {
    this._log(Logger.levels.DEBUG, args);
  }

  info(...args) {
    this._log(Logger.levels.INFO, args);
  }

  warn(...args) {
    this._log(Logger.levels.WARNING, args);
  }

  makeError(message, code, params) {
    // Errors are being censored
    if (_censorErrors) {
      return this.makeError("censored error", code, {});
    }

    if (!code) {
      code = Logger.errors.UNKNOWN_ERROR;
    }

    if (!params) {
      params = {};
    }

    const messageDetails = [];
    Object.keys(params).forEach(key => {
      const value = params[key];

      try {
        if (value instanceof Uint8Array) {
          let hex = "";

          for (let i = 0; i < value.length; i++) {
            hex += HEX[value[i] >> 4];
            hex += HEX[value[i] & 0x0f];
          }

          messageDetails.push(key + "=Uint8Array(0x" + hex + ")");
        } else {
          messageDetails.push(key + "=" + JSON.stringify(value));
        }
      } catch (error) {
        messageDetails.push(key + "=" + JSON.stringify(params[key].toString()));
      }
    });
    messageDetails.push(`code=${code}`);
    messageDetails.push(`version=${this.version}`);
    const reason = message;
    let url = "";

    switch (code) {
      case ErrorCode.NUMERIC_FAULT:
        {
          url = "NUMERIC_FAULT";
          const fault = message;

          switch (fault) {
            case "overflow":
            case "underflow":
            case "division-by-zero":
              url += "-" + fault;
              break;

            case "negative-power":
            case "negative-width":
              url += "-unsupported";
              break;

            case "unbound-bitwise-result":
              url += "-unbound-result";
              break;
          }

          break;
        }

      case ErrorCode.CALL_EXCEPTION:
      case ErrorCode.INSUFFICIENT_FUNDS:
      case ErrorCode.MISSING_NEW:
      case ErrorCode.NONCE_EXPIRED:
      case ErrorCode.REPLACEMENT_UNDERPRICED:
      case ErrorCode.TRANSACTION_REPLACED:
      case ErrorCode.UNPREDICTABLE_GAS_LIMIT:
        url = code;
        break;
    }

    if (url) {
      message += " [ See: https:/\/links.ethers.org/v5-errors-" + url + " ]";
    }

    if (messageDetails.length) {
      message += " (" + messageDetails.join(", ") + ")";
    } // @TODO: Any??


    const error = new Error(message);
    error.reason = reason;
    error.code = code;
    Object.keys(params).forEach(function (key) {
      error[key] = params[key];
    });
    return error;
  }

  throwError(message, code, params) {
    throw this.makeError(message, code, params);
  }

  throwArgumentError(message, name, value) {
    return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {
      argument: name,
      value: value
    });
  }

  assert(condition, message, code, params) {
    if (!!condition) {
      return;
    }

    this.throwError(message, code, params);
  }

  assertArgument(condition, message, name, value) {
    if (!!condition) {
      return;
    }

    this.throwArgumentError(message, name, value);
  }

  checkNormalize(message) {
    if (message == null) {
      message = "platform missing String.prototype.normalize";
    }

    if (_normalizeError) {
      this.throwError("platform missing String.prototype.normalize", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "String.prototype.normalize",
        form: _normalizeError
      });
    }
  }

  checkSafeUint53(value, message) {
    if (typeof value !== "number") {
      return;
    }

    if (message == null) {
      message = "value not safe";
    }

    if (value < 0 || value >= 0x1fffffffffffff) {
      this.throwError(message, Logger.errors.NUMERIC_FAULT, {
        operation: "checkSafeInteger",
        fault: "out-of-safe-range",
        value: value
      });
    }

    if (value % 1) {
      this.throwError(message, Logger.errors.NUMERIC_FAULT, {
        operation: "checkSafeInteger",
        fault: "non-integer",
        value: value
      });
    }
  }

  checkArgumentCount(count, expectedCount, message) {
    if (message) {
      message = ": " + message;
    } else {
      message = "";
    }

    if (count < expectedCount) {
      this.throwError("missing argument" + message, Logger.errors.MISSING_ARGUMENT, {
        count: count,
        expectedCount: expectedCount
      });
    }

    if (count > expectedCount) {
      this.throwError("too many arguments" + message, Logger.errors.UNEXPECTED_ARGUMENT, {
        count: count,
        expectedCount: expectedCount
      });
    }
  }

  checkNew(target, kind) {
    if (target === Object || target == null) {
      this.throwError("missing new", Logger.errors.MISSING_NEW, {
        name: kind.name
      });
    }
  }

  checkAbstract(target, kind) {
    if (target === kind) {
      this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", Logger.errors.UNSUPPORTED_OPERATION, {
        name: target.name,
        operation: "new"
      });
    } else if (target === Object || target == null) {
      this.throwError("missing new", Logger.errors.MISSING_NEW, {
        name: kind.name
      });
    }
  }

  static globalLogger() {
    if (!_globalLogger) {
      _globalLogger = new Logger(_version.version);
    }

    return _globalLogger;
  }

  static setCensorship(censorship, permanent) {
    if (!censorship && permanent) {
      this.globalLogger().throwError("cannot permanently disable censorship", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "setCensorship"
      });
    }

    if (_permanentCensorErrors) {
      if (!censorship) {
        return;
      }

      this.globalLogger().throwError("error censorship permanent", Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "setCensorship"
      });
    }

    _censorErrors = !!censorship;
    _permanentCensorErrors = !!permanent;
  }

  static setLogLevel(logLevel) {
    const level = LogLevels[logLevel.toLowerCase()];

    if (level == null) {
      Logger.globalLogger().warn("invalid log level - " + logLevel);
      return;
    }

    _logLevel = level;
  }

  static from(version) {
    return new Logger(version);
  }

}

exports.Logger = Logger;
Logger.errors = ErrorCode;
Logger.levels = LogLevel;
},{"./_version":"../../node_modules/@ethersproject/logger/lib.esm/_version.js"}],"../../node_modules/@ethersproject/bytes/lib.esm/_version.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.version = void 0;
const version = "bytes/5.6.1";
exports.version = version;
},{}],"../../node_modules/@ethersproject/bytes/lib.esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.arrayify = arrayify;
exports.concat = concat;
exports.hexConcat = hexConcat;
exports.hexDataLength = hexDataLength;
exports.hexDataSlice = hexDataSlice;
exports.hexStripZeros = hexStripZeros;
exports.hexValue = hexValue;
exports.hexZeroPad = hexZeroPad;
exports.hexlify = hexlify;
exports.isBytes = isBytes;
exports.isBytesLike = isBytesLike;
exports.isHexString = isHexString;
exports.joinSignature = joinSignature;
exports.splitSignature = splitSignature;
exports.stripZeros = stripZeros;
exports.zeroPad = zeroPad;

var _logger = require("@ethersproject/logger");

var _version = require("./_version");

const logger = new _logger.Logger(_version.version); ///////////////////////////////

function isHexable(value) {
  return !!value.toHexString;
}

function addSlice(array) {
  if (array.slice) {
    return array;
  }

  array.slice = function () {
    const args = Array.prototype.slice.call(arguments);
    return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
  };

  return array;
}

function isBytesLike(value) {
  return isHexString(value) && !(value.length % 2) || isBytes(value);
}

function isInteger(value) {
  return typeof value === "number" && value == value && value % 1 === 0;
}

function isBytes(value) {
  if (value == null) {
    return false;
  }

  if (value.constructor === Uint8Array) {
    return true;
  }

  if (typeof value === "string") {
    return false;
  }

  if (!isInteger(value.length) || value.length < 0) {
    return false;
  }

  for (let i = 0; i < value.length; i++) {
    const v = value[i];

    if (!isInteger(v) || v < 0 || v >= 256) {
      return false;
    }
  }

  return true;
}

function arrayify(value, options) {
  if (!options) {
    options = {};
  }

  if (typeof value === "number") {
    logger.checkSafeUint53(value, "invalid arrayify value");
    const result = [];

    while (value) {
      result.unshift(value & 0xff);
      value = parseInt(String(value / 256));
    }

    if (result.length === 0) {
      result.push(0);
    }

    return addSlice(new Uint8Array(result));
  }

  if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }

  if (isHexable(value)) {
    value = value.toHexString();
  }

  if (isHexString(value)) {
    let hex = value.substring(2);

    if (hex.length % 2) {
      if (options.hexPad === "left") {
        hex = "0" + hex;
      } else if (options.hexPad === "right") {
        hex += "0";
      } else {
        logger.throwArgumentError("hex data is odd-length", "value", value);
      }
    }

    const result = [];

    for (let i = 0; i < hex.length; i += 2) {
      result.push(parseInt(hex.substring(i, i + 2), 16));
    }

    return addSlice(new Uint8Array(result));
  }

  if (isBytes(value)) {
    return addSlice(new Uint8Array(value));
  }

  return logger.throwArgumentError("invalid arrayify value", "value", value);
}

function concat(items) {
  const objects = items.map(item => arrayify(item));
  const length = objects.reduce((accum, item) => accum + item.length, 0);
  const result = new Uint8Array(length);
  objects.reduce((offset, object) => {
    result.set(object, offset);
    return offset + object.length;
  }, 0);
  return addSlice(result);
}

function stripZeros(value) {
  let result = arrayify(value);

  if (result.length === 0) {
    return result;
  } // Find the first non-zero entry


  let start = 0;

  while (start < result.length && result[start] === 0) {
    start++;
  } // If we started with zeros, strip them


  if (start) {
    result = result.slice(start);
  }

  return result;
}

function zeroPad(value, length) {
  value = arrayify(value);

  if (value.length > length) {
    logger.throwArgumentError("value out of range", "value", arguments[0]);
  }

  const result = new Uint8Array(length);
  result.set(value, length - value.length);
  return addSlice(result);
}

function isHexString(value, length) {
  if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
    return false;
  }

  if (length && value.length !== 2 + 2 * length) {
    return false;
  }

  return true;
}

const HexCharacters = "0123456789abcdef";

function hexlify(value, options) {
  if (!options) {
    options = {};
  }

  if (typeof value === "number") {
    logger.checkSafeUint53(value, "invalid hexlify value");
    let hex = "";

    while (value) {
      hex = HexCharacters[value & 0xf] + hex;
      value = Math.floor(value / 16);
    }

    if (hex.length) {
      if (hex.length % 2) {
        hex = "0" + hex;
      }

      return "0x" + hex;
    }

    return "0x00";
  }

  if (typeof value === "bigint") {
    value = value.toString(16);

    if (value.length % 2) {
      return "0x0" + value;
    }

    return "0x" + value;
  }

  if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }

  if (isHexable(value)) {
    return value.toHexString();
  }

  if (isHexString(value)) {
    if (value.length % 2) {
      if (options.hexPad === "left") {
        value = "0x0" + value.substring(2);
      } else if (options.hexPad === "right") {
        value += "0";
      } else {
        logger.throwArgumentError("hex data is odd-length", "value", value);
      }
    }

    return value.toLowerCase();
  }

  if (isBytes(value)) {
    let result = "0x";

    for (let i = 0; i < value.length; i++) {
      let v = value[i];
      result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];
    }

    return result;
  }

  return logger.throwArgumentError("invalid hexlify value", "value", value);
}
/*
function unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {
    if (typeof(value) === "string" && value.length % 2 && value.substring(0, 2) === "0x") {
        return "0x0" + value.substring(2);
    }
    return value;
}
*/


function hexDataLength(data) {
  if (typeof data !== "string") {
    data = hexlify(data);
  } else if (!isHexString(data) || data.length % 2) {
    return null;
  }

  return (data.length - 2) / 2;
}

function hexDataSlice(data, offset, endOffset) {
  if (typeof data !== "string") {
    data = hexlify(data);
  } else if (!isHexString(data) || data.length % 2) {
    logger.throwArgumentError("invalid hexData", "value", data);
  }

  offset = 2 + 2 * offset;

  if (endOffset != null) {
    return "0x" + data.substring(offset, 2 + 2 * endOffset);
  }

  return "0x" + data.substring(offset);
}

function hexConcat(items) {
  let result = "0x";
  items.forEach(item => {
    result += hexlify(item).substring(2);
  });
  return result;
}

function hexValue(value) {
  const trimmed = hexStripZeros(hexlify(value, {
    hexPad: "left"
  }));

  if (trimmed === "0x") {
    return "0x0";
  }

  return trimmed;
}

function hexStripZeros(value) {
  if (typeof value !== "string") {
    value = hexlify(value);
  }

  if (!isHexString(value)) {
    logger.throwArgumentError("invalid hex string", "value", value);
  }

  value = value.substring(2);
  let offset = 0;

  while (offset < value.length && value[offset] === "0") {
    offset++;
  }

  return "0x" + value.substring(offset);
}

function hexZeroPad(value, length) {
  if (typeof value !== "string") {
    value = hexlify(value);
  } else if (!isHexString(value)) {
    logger.throwArgumentError("invalid hex string", "value", value);
  }

  if (value.length > 2 * length + 2) {
    logger.throwArgumentError("value out of range", "value", arguments[1]);
  }

  while (value.length < 2 * length + 2) {
    value = "0x0" + value.substring(2);
  }

  return value;
}

function splitSignature(signature) {
  const result = {
    r: "0x",
    s: "0x",
    _vs: "0x",
    recoveryParam: 0,
    v: 0,
    yParityAndS: "0x",
    compact: "0x"
  };

  if (isBytesLike(signature)) {
    let bytes = arrayify(signature); // Get the r, s and v

    if (bytes.length === 64) {
      // EIP-2098; pull the v from the top bit of s and clear it
      result.v = 27 + (bytes[32] >> 7);
      bytes[32] &= 0x7f;
      result.r = hexlify(bytes.slice(0, 32));
      result.s = hexlify(bytes.slice(32, 64));
    } else if (bytes.length === 65) {
      result.r = hexlify(bytes.slice(0, 32));
      result.s = hexlify(bytes.slice(32, 64));
      result.v = bytes[64];
    } else {
      logger.throwArgumentError("invalid signature string", "signature", signature);
    } // Allow a recid to be used as the v


    if (result.v < 27) {
      if (result.v === 0 || result.v === 1) {
        result.v += 27;
      } else {
        logger.throwArgumentError("signature invalid v byte", "signature", signature);
      }
    } // Compute recoveryParam from v


    result.recoveryParam = 1 - result.v % 2; // Compute _vs from recoveryParam and s

    if (result.recoveryParam) {
      bytes[32] |= 0x80;
    }

    result._vs = hexlify(bytes.slice(32, 64));
  } else {
    result.r = signature.r;
    result.s = signature.s;
    result.v = signature.v;
    result.recoveryParam = signature.recoveryParam;
    result._vs = signature._vs; // If the _vs is available, use it to populate missing s, v and recoveryParam
    // and verify non-missing s, v and recoveryParam

    if (result._vs != null) {
      const vs = zeroPad(arrayify(result._vs), 32);
      result._vs = hexlify(vs); // Set or check the recid

      const recoveryParam = vs[0] >= 128 ? 1 : 0;

      if (result.recoveryParam == null) {
        result.recoveryParam = recoveryParam;
      } else if (result.recoveryParam !== recoveryParam) {
        logger.throwArgumentError("signature recoveryParam mismatch _vs", "signature", signature);
      } // Set or check the s


      vs[0] &= 0x7f;
      const s = hexlify(vs);

      if (result.s == null) {
        result.s = s;
      } else if (result.s !== s) {
        logger.throwArgumentError("signature v mismatch _vs", "signature", signature);
      }
    } // Use recid and v to populate each other


    if (result.recoveryParam == null) {
      if (result.v == null) {
        logger.throwArgumentError("signature missing v and recoveryParam", "signature", signature);
      } else if (result.v === 0 || result.v === 1) {
        result.recoveryParam = result.v;
      } else {
        result.recoveryParam = 1 - result.v % 2;
      }
    } else {
      if (result.v == null) {
        result.v = 27 + result.recoveryParam;
      } else {
        const recId = result.v === 0 || result.v === 1 ? result.v : 1 - result.v % 2;

        if (result.recoveryParam !== recId) {
          logger.throwArgumentError("signature recoveryParam mismatch v", "signature", signature);
        }
      }
    }

    if (result.r == null || !isHexString(result.r)) {
      logger.throwArgumentError("signature missing or invalid r", "signature", signature);
    } else {
      result.r = hexZeroPad(result.r, 32);
    }

    if (result.s == null || !isHexString(result.s)) {
      logger.throwArgumentError("signature missing or invalid s", "signature", signature);
    } else {
      result.s = hexZeroPad(result.s, 32);
    }

    const vs = arrayify(result.s);

    if (vs[0] >= 128) {
      logger.throwArgumentError("signature s out of range", "signature", signature);
    }

    if (result.recoveryParam) {
      vs[0] |= 0x80;
    }

    const _vs = hexlify(vs);

    if (result._vs) {
      if (!isHexString(result._vs)) {
        logger.throwArgumentError("signature invalid _vs", "signature", signature);
      }

      result._vs = hexZeroPad(result._vs, 32);
    } // Set or check the _vs


    if (result._vs == null) {
      result._vs = _vs;
    } else if (result._vs !== _vs) {
      logger.throwArgumentError("signature _vs mismatch v and s", "signature", signature);
    }
  }

  result.yParityAndS = result._vs;
  result.compact = result.r + result.yParityAndS.substring(2);
  return result;
}

function joinSignature(signature) {
  signature = splitSignature(signature);
  return hexlify(concat([signature.r, signature.s, signature.recoveryParam ? "0x1c" : "0x1b"]));
}
},{"@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","./_version":"../../node_modules/@ethersproject/bytes/lib.esm/_version.js"}],"../../node_modules/@ethersproject/bignumber/lib.esm/_version.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.version = void 0;
const version = "bignumber/5.6.0";
exports.version = version;
},{}],"../../node_modules/@ethersproject/bignumber/lib.esm/bignumber.js":[function(require,module,exports) {
"use strict";
/**
 *  BigNumber
 *
 *  A wrapper around the BN.js object. We use the BN.js library
 *  because it is used by elliptic, so it is required regardless.
 *
 */

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BigNumber = void 0;
exports._base16To36 = _base16To36;
exports._base36To16 = _base36To16;
exports.isBigNumberish = isBigNumberish;

var _bn = _interopRequireDefault(require("bn.js"));

var _bytes = require("@ethersproject/bytes");

var _logger = require("@ethersproject/logger");

var _version = require("./_version");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var BN = _bn.default.BN;
const logger = new _logger.Logger(_version.version);
const _constructorGuard = {};
const MAX_SAFE = 0x1fffffffffffff;

function isBigNumberish(value) {
  return value != null && (BigNumber.isBigNumber(value) || typeof value === "number" && value % 1 === 0 || typeof value === "string" && !!value.match(/^-?[0-9]+$/) || (0, _bytes.isHexString)(value) || typeof value === "bigint" || (0, _bytes.isBytes)(value));
} // Only warn about passing 10 into radix once


let _warnedToStringRadix = false;

class BigNumber {
  constructor(constructorGuard, hex) {
    logger.checkNew(new.target, BigNumber);

    if (constructorGuard !== _constructorGuard) {
      logger.throwError("cannot call constructor directly; use BigNumber.from", _logger.Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "new (BigNumber)"
      });
    }

    this._hex = hex;
    this._isBigNumber = true;
    Object.freeze(this);
  }

  fromTwos(value) {
    return toBigNumber(toBN(this).fromTwos(value));
  }

  toTwos(value) {
    return toBigNumber(toBN(this).toTwos(value));
  }

  abs() {
    if (this._hex[0] === "-") {
      return BigNumber.from(this._hex.substring(1));
    }

    return this;
  }

  add(other) {
    return toBigNumber(toBN(this).add(toBN(other)));
  }

  sub(other) {
    return toBigNumber(toBN(this).sub(toBN(other)));
  }

  div(other) {
    const o = BigNumber.from(other);

    if (o.isZero()) {
      throwFault("division-by-zero", "div");
    }

    return toBigNumber(toBN(this).div(toBN(other)));
  }

  mul(other) {
    return toBigNumber(toBN(this).mul(toBN(other)));
  }

  mod(other) {
    const value = toBN(other);

    if (value.isNeg()) {
      throwFault("division-by-zero", "mod");
    }

    return toBigNumber(toBN(this).umod(value));
  }

  pow(other) {
    const value = toBN(other);

    if (value.isNeg()) {
      throwFault("negative-power", "pow");
    }

    return toBigNumber(toBN(this).pow(value));
  }

  and(other) {
    const value = toBN(other);

    if (this.isNegative() || value.isNeg()) {
      throwFault("unbound-bitwise-result", "and");
    }

    return toBigNumber(toBN(this).and(value));
  }

  or(other) {
    const value = toBN(other);

    if (this.isNegative() || value.isNeg()) {
      throwFault("unbound-bitwise-result", "or");
    }

    return toBigNumber(toBN(this).or(value));
  }

  xor(other) {
    const value = toBN(other);

    if (this.isNegative() || value.isNeg()) {
      throwFault("unbound-bitwise-result", "xor");
    }

    return toBigNumber(toBN(this).xor(value));
  }

  mask(value) {
    if (this.isNegative() || value < 0) {
      throwFault("negative-width", "mask");
    }

    return toBigNumber(toBN(this).maskn(value));
  }

  shl(value) {
    if (this.isNegative() || value < 0) {
      throwFault("negative-width", "shl");
    }

    return toBigNumber(toBN(this).shln(value));
  }

  shr(value) {
    if (this.isNegative() || value < 0) {
      throwFault("negative-width", "shr");
    }

    return toBigNumber(toBN(this).shrn(value));
  }

  eq(other) {
    return toBN(this).eq(toBN(other));
  }

  lt(other) {
    return toBN(this).lt(toBN(other));
  }

  lte(other) {
    return toBN(this).lte(toBN(other));
  }

  gt(other) {
    return toBN(this).gt(toBN(other));
  }

  gte(other) {
    return toBN(this).gte(toBN(other));
  }

  isNegative() {
    return this._hex[0] === "-";
  }

  isZero() {
    return toBN(this).isZero();
  }

  toNumber() {
    try {
      return toBN(this).toNumber();
    } catch (error) {
      throwFault("overflow", "toNumber", this.toString());
    }

    return null;
  }

  toBigInt() {
    try {
      return BigInt(this.toString());
    } catch (e) {}

    return logger.throwError("this platform does not support BigInt", _logger.Logger.errors.UNSUPPORTED_OPERATION, {
      value: this.toString()
    });
  }

  toString() {
    // Lots of people expect this, which we do not support, so check (See: #889)
    if (arguments.length > 0) {
      if (arguments[0] === 10) {
        if (!_warnedToStringRadix) {
          _warnedToStringRadix = true;
          logger.warn("BigNumber.toString does not accept any parameters; base-10 is assumed");
        }
      } else if (arguments[0] === 16) {
        logger.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", _logger.Logger.errors.UNEXPECTED_ARGUMENT, {});
      } else {
        logger.throwError("BigNumber.toString does not accept parameters", _logger.Logger.errors.UNEXPECTED_ARGUMENT, {});
      }
    }

    return toBN(this).toString(10);
  }

  toHexString() {
    return this._hex;
  }

  toJSON(key) {
    return {
      type: "BigNumber",
      hex: this.toHexString()
    };
  }

  static from(value) {
    if (value instanceof BigNumber) {
      return value;
    }

    if (typeof value === "string") {
      if (value.match(/^-?0x[0-9a-f]+$/i)) {
        return new BigNumber(_constructorGuard, toHex(value));
      }

      if (value.match(/^-?[0-9]+$/)) {
        return new BigNumber(_constructorGuard, toHex(new BN(value)));
      }

      return logger.throwArgumentError("invalid BigNumber string", "value", value);
    }

    if (typeof value === "number") {
      if (value % 1) {
        throwFault("underflow", "BigNumber.from", value);
      }

      if (value >= MAX_SAFE || value <= -MAX_SAFE) {
        throwFault("overflow", "BigNumber.from", value);
      }

      return BigNumber.from(String(value));
    }

    const anyValue = value;

    if (typeof anyValue === "bigint") {
      return BigNumber.from(anyValue.toString());
    }

    if ((0, _bytes.isBytes)(anyValue)) {
      return BigNumber.from((0, _bytes.hexlify)(anyValue));
    }

    if (anyValue) {
      // Hexable interface (takes priority)
      if (anyValue.toHexString) {
        const hex = anyValue.toHexString();

        if (typeof hex === "string") {
          return BigNumber.from(hex);
        }
      } else {
        // For now, handle legacy JSON-ified values (goes away in v6)
        let hex = anyValue._hex; // New-form JSON

        if (hex == null && anyValue.type === "BigNumber") {
          hex = anyValue.hex;
        }

        if (typeof hex === "string") {
          if ((0, _bytes.isHexString)(hex) || hex[0] === "-" && (0, _bytes.isHexString)(hex.substring(1))) {
            return BigNumber.from(hex);
          }
        }
      }
    }

    return logger.throwArgumentError("invalid BigNumber value", "value", value);
  }

  static isBigNumber(value) {
    return !!(value && value._isBigNumber);
  }

} // Normalize the hex string


exports.BigNumber = BigNumber;

function toHex(value) {
  // For BN, call on the hex string
  if (typeof value !== "string") {
    return toHex(value.toString(16));
  } // If negative, prepend the negative sign to the normalized positive value


  if (value[0] === "-") {
    // Strip off the negative sign
    value = value.substring(1); // Cannot have multiple negative signs (e.g. "--0x04")

    if (value[0] === "-") {
      logger.throwArgumentError("invalid hex", "value", value);
    } // Call toHex on the positive component


    value = toHex(value); // Do not allow "-0x00"

    if (value === "0x00") {
      return value;
    } // Negate the value


    return "-" + value;
  } // Add a "0x" prefix if missing


  if (value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  } // Normalize zero


  if (value === "0x") {
    return "0x00";
  } // Make the string even length


  if (value.length % 2) {
    value = "0x0" + value.substring(2);
  } // Trim to smallest even-length string


  while (value.length > 4 && value.substring(0, 4) === "0x00") {
    value = "0x" + value.substring(4);
  }

  return value;
}

function toBigNumber(value) {
  return BigNumber.from(toHex(value));
}

function toBN(value) {
  const hex = BigNumber.from(value).toHexString();

  if (hex[0] === "-") {
    return new BN("-" + hex.substring(3), 16);
  }

  return new BN(hex.substring(2), 16);
}

function throwFault(fault, operation, value) {
  const params = {
    fault: fault,
    operation: operation
  };

  if (value != null) {
    params.value = value;
  }

  return logger.throwError(fault, _logger.Logger.errors.NUMERIC_FAULT, params);
} // value should have no prefix


function _base36To16(value) {
  return new BN(value, 36).toString(16);
} // value should have no prefix


function _base16To36(value) {
  return new BN(value, 16).toString(36);
}
},{"bn.js":"../../node_modules/bn.js/lib/bn.js","@ethersproject/bytes":"../../node_modules/@ethersproject/bytes/lib.esm/index.js","@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","./_version":"../../node_modules/@ethersproject/bignumber/lib.esm/_version.js"}],"../../node_modules/@ethersproject/bignumber/lib.esm/fixednumber.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FixedNumber = exports.FixedFormat = void 0;
exports.formatFixed = formatFixed;
exports.parseFixed = parseFixed;

var _bytes = require("@ethersproject/bytes");

var _logger = require("@ethersproject/logger");

var _version = require("./_version");

var _bignumber = require("./bignumber");

const logger = new _logger.Logger(_version.version);
const _constructorGuard = {};

const Zero = _bignumber.BigNumber.from(0);

const NegativeOne = _bignumber.BigNumber.from(-1);

function throwFault(message, fault, operation, value) {
  const params = {
    fault: fault,
    operation: operation
  };

  if (value !== undefined) {
    params.value = value;
  }

  return logger.throwError(message, _logger.Logger.errors.NUMERIC_FAULT, params);
} // Constant to pull zeros from for multipliers


let zeros = "0";

while (zeros.length < 256) {
  zeros += zeros;
} // Returns a string "1" followed by decimal "0"s


function getMultiplier(decimals) {
  if (typeof decimals !== "number") {
    try {
      decimals = _bignumber.BigNumber.from(decimals).toNumber();
    } catch (e) {}
  }

  if (typeof decimals === "number" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {
    return "1" + zeros.substring(0, decimals);
  }

  return logger.throwArgumentError("invalid decimal size", "decimals", decimals);
}

function formatFixed(value, decimals) {
  if (decimals == null) {
    decimals = 0;
  }

  const multiplier = getMultiplier(decimals); // Make sure wei is a big number (convert as necessary)

  value = _bignumber.BigNumber.from(value);
  const negative = value.lt(Zero);

  if (negative) {
    value = value.mul(NegativeOne);
  }

  let fraction = value.mod(multiplier).toString();

  while (fraction.length < multiplier.length - 1) {
    fraction = "0" + fraction;
  } // Strip training 0


  fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
  const whole = value.div(multiplier).toString();

  if (multiplier.length === 1) {
    value = whole;
  } else {
    value = whole + "." + fraction;
  }

  if (negative) {
    value = "-" + value;
  }

  return value;
}

function parseFixed(value, decimals) {
  if (decimals == null) {
    decimals = 0;
  }

  const multiplier = getMultiplier(decimals);

  if (typeof value !== "string" || !value.match(/^-?[0-9.]+$/)) {
    logger.throwArgumentError("invalid decimal value", "value", value);
  } // Is it negative?


  const negative = value.substring(0, 1) === "-";

  if (negative) {
    value = value.substring(1);
  }

  if (value === ".") {
    logger.throwArgumentError("missing value", "value", value);
  } // Split it into a whole and fractional part


  const comps = value.split(".");

  if (comps.length > 2) {
    logger.throwArgumentError("too many decimal points", "value", value);
  }

  let whole = comps[0],
      fraction = comps[1];

  if (!whole) {
    whole = "0";
  }

  if (!fraction) {
    fraction = "0";
  } // Trim trailing zeros


  while (fraction[fraction.length - 1] === "0") {
    fraction = fraction.substring(0, fraction.length - 1);
  } // Check the fraction doesn't exceed our decimals size


  if (fraction.length > multiplier.length - 1) {
    throwFault("fractional component exceeds decimals", "underflow", "parseFixed");
  } // If decimals is 0, we have an empty string for fraction


  if (fraction === "") {
    fraction = "0";
  } // Fully pad the string with zeros to get to wei


  while (fraction.length < multiplier.length - 1) {
    fraction += "0";
  }

  const wholeValue = _bignumber.BigNumber.from(whole);

  const fractionValue = _bignumber.BigNumber.from(fraction);

  let wei = wholeValue.mul(multiplier).add(fractionValue);

  if (negative) {
    wei = wei.mul(NegativeOne);
  }

  return wei;
}

class FixedFormat {
  constructor(constructorGuard, signed, width, decimals) {
    if (constructorGuard !== _constructorGuard) {
      logger.throwError("cannot use FixedFormat constructor; use FixedFormat.from", _logger.Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "new FixedFormat"
      });
    }

    this.signed = signed;
    this.width = width;
    this.decimals = decimals;
    this.name = (signed ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
    this._multiplier = getMultiplier(decimals);
    Object.freeze(this);
  }

  static from(value) {
    if (value instanceof FixedFormat) {
      return value;
    }

    if (typeof value === "number") {
      value = `fixed128x${value}`;
    }

    let signed = true;
    let width = 128;
    let decimals = 18;

    if (typeof value === "string") {
      if (value === "fixed") {// defaults...
      } else if (value === "ufixed") {
        signed = false;
      } else {
        const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);

        if (!match) {
          logger.throwArgumentError("invalid fixed format", "format", value);
        }

        signed = match[1] !== "u";
        width = parseInt(match[2]);
        decimals = parseInt(match[3]);
      }
    } else if (value) {
      const check = (key, type, defaultValue) => {
        if (value[key] == null) {
          return defaultValue;
        }

        if (typeof value[key] !== type) {
          logger.throwArgumentError("invalid fixed format (" + key + " not " + type + ")", "format." + key, value[key]);
        }

        return value[key];
      };

      signed = check("signed", "boolean", signed);
      width = check("width", "number", width);
      decimals = check("decimals", "number", decimals);
    }

    if (width % 8) {
      logger.throwArgumentError("invalid fixed format width (not byte aligned)", "format.width", width);
    }

    if (decimals > 80) {
      logger.throwArgumentError("invalid fixed format (decimals too large)", "format.decimals", decimals);
    }

    return new FixedFormat(_constructorGuard, signed, width, decimals);
  }

}

exports.FixedFormat = FixedFormat;

class FixedNumber {
  constructor(constructorGuard, hex, value, format) {
    logger.checkNew(new.target, FixedNumber);

    if (constructorGuard !== _constructorGuard) {
      logger.throwError("cannot use FixedNumber constructor; use FixedNumber.from", _logger.Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "new FixedFormat"
      });
    }

    this.format = format;
    this._hex = hex;
    this._value = value;
    this._isFixedNumber = true;
    Object.freeze(this);
  }

  _checkFormat(other) {
    if (this.format.name !== other.format.name) {
      logger.throwArgumentError("incompatible format; use fixedNumber.toFormat", "other", other);
    }
  }

  addUnsafe(other) {
    this._checkFormat(other);

    const a = parseFixed(this._value, this.format.decimals);
    const b = parseFixed(other._value, other.format.decimals);
    return FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);
  }

  subUnsafe(other) {
    this._checkFormat(other);

    const a = parseFixed(this._value, this.format.decimals);
    const b = parseFixed(other._value, other.format.decimals);
    return FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);
  }

  mulUnsafe(other) {
    this._checkFormat(other);

    const a = parseFixed(this._value, this.format.decimals);
    const b = parseFixed(other._value, other.format.decimals);
    return FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);
  }

  divUnsafe(other) {
    this._checkFormat(other);

    const a = parseFixed(this._value, this.format.decimals);
    const b = parseFixed(other._value, other.format.decimals);
    return FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);
  }

  floor() {
    const comps = this.toString().split(".");

    if (comps.length === 1) {
      comps.push("0");
    }

    let result = FixedNumber.from(comps[0], this.format);
    const hasFraction = !comps[1].match(/^(0*)$/);

    if (this.isNegative() && hasFraction) {
      result = result.subUnsafe(ONE.toFormat(result.format));
    }

    return result;
  }

  ceiling() {
    const comps = this.toString().split(".");

    if (comps.length === 1) {
      comps.push("0");
    }

    let result = FixedNumber.from(comps[0], this.format);
    const hasFraction = !comps[1].match(/^(0*)$/);

    if (!this.isNegative() && hasFraction) {
      result = result.addUnsafe(ONE.toFormat(result.format));
    }

    return result;
  } // @TODO: Support other rounding algorithms


  round(decimals) {
    if (decimals == null) {
      decimals = 0;
    } // If we are already in range, we're done


    const comps = this.toString().split(".");

    if (comps.length === 1) {
      comps.push("0");
    }

    if (decimals < 0 || decimals > 80 || decimals % 1) {
      logger.throwArgumentError("invalid decimal count", "decimals", decimals);
    }

    if (comps[1].length <= decimals) {
      return this;
    }

    const factor = FixedNumber.from("1" + zeros.substring(0, decimals), this.format);
    const bump = BUMP.toFormat(this.format);
    return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);
  }

  isZero() {
    return this._value === "0.0" || this._value === "0";
  }

  isNegative() {
    return this._value[0] === "-";
  }

  toString() {
    return this._value;
  }

  toHexString(width) {
    if (width == null) {
      return this._hex;
    }

    if (width % 8) {
      logger.throwArgumentError("invalid byte width", "width", width);
    }

    const hex = _bignumber.BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();

    return (0, _bytes.hexZeroPad)(hex, width / 8);
  }

  toUnsafeFloat() {
    return parseFloat(this.toString());
  }

  toFormat(format) {
    return FixedNumber.fromString(this._value, format);
  }

  static fromValue(value, decimals, format) {
    // If decimals looks more like a format, and there is no format, shift the parameters
    if (format == null && decimals != null && !(0, _bignumber.isBigNumberish)(decimals)) {
      format = decimals;
      decimals = null;
    }

    if (decimals == null) {
      decimals = 0;
    }

    if (format == null) {
      format = "fixed";
    }

    return FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));
  }

  static fromString(value, format) {
    if (format == null) {
      format = "fixed";
    }

    const fixedFormat = FixedFormat.from(format);
    const numeric = parseFixed(value, fixedFormat.decimals);

    if (!fixedFormat.signed && numeric.lt(Zero)) {
      throwFault("unsigned value cannot be negative", "overflow", "value", value);
    }

    let hex = null;

    if (fixedFormat.signed) {
      hex = numeric.toTwos(fixedFormat.width).toHexString();
    } else {
      hex = numeric.toHexString();
      hex = (0, _bytes.hexZeroPad)(hex, fixedFormat.width / 8);
    }

    const decimal = formatFixed(numeric, fixedFormat.decimals);
    return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);
  }

  static fromBytes(value, format) {
    if (format == null) {
      format = "fixed";
    }

    const fixedFormat = FixedFormat.from(format);

    if ((0, _bytes.arrayify)(value).length > fixedFormat.width / 8) {
      throw new Error("overflow");
    }

    let numeric = _bignumber.BigNumber.from(value);

    if (fixedFormat.signed) {
      numeric = numeric.fromTwos(fixedFormat.width);
    }

    const hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();
    const decimal = formatFixed(numeric, fixedFormat.decimals);
    return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);
  }

  static from(value, format) {
    if (typeof value === "string") {
      return FixedNumber.fromString(value, format);
    }

    if ((0, _bytes.isBytes)(value)) {
      return FixedNumber.fromBytes(value, format);
    }

    try {
      return FixedNumber.fromValue(value, 0, format);
    } catch (error) {
      // Allow NUMERIC_FAULT to bubble up
      if (error.code !== _logger.Logger.errors.INVALID_ARGUMENT) {
        throw error;
      }
    }

    return logger.throwArgumentError("invalid FixedNumber value", "value", value);
  }

  static isFixedNumber(value) {
    return !!(value && value._isFixedNumber);
  }

}

exports.FixedNumber = FixedNumber;
const ONE = FixedNumber.from(1);
const BUMP = FixedNumber.from("0.5");
},{"@ethersproject/bytes":"../../node_modules/@ethersproject/bytes/lib.esm/index.js","@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","./_version":"../../node_modules/@ethersproject/bignumber/lib.esm/_version.js","./bignumber":"../../node_modules/@ethersproject/bignumber/lib.esm/bignumber.js"}],"../../node_modules/@ethersproject/bignumber/lib.esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "BigNumber", {
  enumerable: true,
  get: function () {
    return _bignumber.BigNumber;
  }
});
Object.defineProperty(exports, "FixedFormat", {
  enumerable: true,
  get: function () {
    return _fixednumber.FixedFormat;
  }
});
Object.defineProperty(exports, "FixedNumber", {
  enumerable: true,
  get: function () {
    return _fixednumber.FixedNumber;
  }
});
Object.defineProperty(exports, "_base16To36", {
  enumerable: true,
  get: function () {
    return _bignumber._base16To36;
  }
});
Object.defineProperty(exports, "_base36To16", {
  enumerable: true,
  get: function () {
    return _bignumber._base36To16;
  }
});
Object.defineProperty(exports, "formatFixed", {
  enumerable: true,
  get: function () {
    return _fixednumber.formatFixed;
  }
});
Object.defineProperty(exports, "parseFixed", {
  enumerable: true,
  get: function () {
    return _fixednumber.parseFixed;
  }
});

var _bignumber = require("./bignumber");

var _fixednumber = require("./fixednumber");
},{"./bignumber":"../../node_modules/@ethersproject/bignumber/lib.esm/bignumber.js","./fixednumber":"../../node_modules/@ethersproject/bignumber/lib.esm/fixednumber.js"}],"../../node_modules/@ethersproject/properties/lib.esm/_version.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.version = void 0;
const version = "properties/5.6.0";
exports.version = version;
},{}],"../../node_modules/@ethersproject/properties/lib.esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Description = void 0;
exports.checkProperties = checkProperties;
exports.deepCopy = deepCopy;
exports.defineReadOnly = defineReadOnly;
exports.getStatic = getStatic;
exports.resolveProperties = resolveProperties;
exports.shallowCopy = shallowCopy;

var _logger = require("@ethersproject/logger");

var _version = require("./_version");

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

const logger = new _logger.Logger(_version.version);

function defineReadOnly(object, name, value) {
  Object.defineProperty(object, name, {
    enumerable: true,
    value: value,
    writable: false
  });
} // Crawl up the constructor chain to find a static method


function getStatic(ctor, key) {
  for (let i = 0; i < 32; i++) {
    if (ctor[key]) {
      return ctor[key];
    }

    if (!ctor.prototype || typeof ctor.prototype !== "object") {
      break;
    }

    ctor = Object.getPrototypeOf(ctor.prototype).constructor;
  }

  return null;
}

function resolveProperties(object) {
  return __awaiter(this, void 0, void 0, function* () {
    const promises = Object.keys(object).map(key => {
      const value = object[key];
      return Promise.resolve(value).then(v => ({
        key: key,
        value: v
      }));
    });
    const results = yield Promise.all(promises);
    return results.reduce((accum, result) => {
      accum[result.key] = result.value;
      return accum;
    }, {});
  });
}

function checkProperties(object, properties) {
  if (!object || typeof object !== "object") {
    logger.throwArgumentError("invalid object", "object", object);
  }

  Object.keys(object).forEach(key => {
    if (!properties[key]) {
      logger.throwArgumentError("invalid object key - " + key, "transaction:" + key, object);
    }
  });
}

function shallowCopy(object) {
  const result = {};

  for (const key in object) {
    result[key] = object[key];
  }

  return result;
}

const opaque = {
  bigint: true,
  boolean: true,
  "function": true,
  number: true,
  string: true
};

function _isFrozen(object) {
  // Opaque objects are not mutable, so safe to copy by assignment
  if (object === undefined || object === null || opaque[typeof object]) {
    return true;
  }

  if (Array.isArray(object) || typeof object === "object") {
    if (!Object.isFrozen(object)) {
      return false;
    }

    const keys = Object.keys(object);

    for (let i = 0; i < keys.length; i++) {
      let value = null;

      try {
        value = object[keys[i]];
      } catch (error) {
        // If accessing a value triggers an error, it is a getter
        // designed to do so (e.g. Result) and is therefore "frozen"
        continue;
      }

      if (!_isFrozen(value)) {
        return false;
      }
    }

    return true;
  }

  return logger.throwArgumentError(`Cannot deepCopy ${typeof object}`, "object", object);
} // Returns a new copy of object, such that no properties may be replaced.
// New properties may be added only to objects.


function _deepCopy(object) {
  if (_isFrozen(object)) {
    return object;
  } // Arrays are mutable, so we need to create a copy


  if (Array.isArray(object)) {
    return Object.freeze(object.map(item => deepCopy(item)));
  }

  if (typeof object === "object") {
    const result = {};

    for (const key in object) {
      const value = object[key];

      if (value === undefined) {
        continue;
      }

      defineReadOnly(result, key, deepCopy(value));
    }

    return result;
  }

  return logger.throwArgumentError(`Cannot deepCopy ${typeof object}`, "object", object);
}

function deepCopy(object) {
  return _deepCopy(object);
}

class Description {
  constructor(info) {
    for (const key in info) {
      this[key] = deepCopy(info[key]);
    }
  }

}

exports.Description = Description;
},{"@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","./_version":"../../node_modules/@ethersproject/properties/lib.esm/_version.js"}],"../../node_modules/@ethersproject/abi/lib.esm/_version.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.version = void 0;
const version = "abi/5.6.1";
exports.version = version;
},{}],"../../node_modules/@ethersproject/abi/lib.esm/fragments.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ParamType = exports.FunctionFragment = exports.Fragment = exports.FormatTypes = exports.EventFragment = exports.ErrorFragment = exports.ConstructorFragment = void 0;

var _bignumber = require("@ethersproject/bignumber");

var _properties = require("@ethersproject/properties");

var _logger = require("@ethersproject/logger");

var _version = require("./_version");

const logger = new _logger.Logger(_version.version);
;
const _constructorGuard = {};
let ModifiersBytes = {
  calldata: true,
  memory: true,
  storage: true
};
let ModifiersNest = {
  calldata: true,
  memory: true
};

function checkModifier(type, name) {
  if (type === "bytes" || type === "string") {
    if (ModifiersBytes[name]) {
      return true;
    }
  } else if (type === "address") {
    if (name === "payable") {
      return true;
    }
  } else if (type.indexOf("[") >= 0 || type === "tuple") {
    if (ModifiersNest[name]) {
      return true;
    }
  }

  if (ModifiersBytes[name] || name === "payable") {
    logger.throwArgumentError("invalid modifier", "name", name);
  }

  return false;
} // @TODO: Make sure that children of an indexed tuple are marked with a null indexed


function parseParamType(param, allowIndexed) {
  let originalParam = param;

  function throwError(i) {
    logger.throwArgumentError(`unexpected character at position ${i}`, "param", param);
  }

  param = param.replace(/\s/g, " ");

  function newNode(parent) {
    let node = {
      type: "",
      name: "",
      parent: parent,
      state: {
        allowType: true
      }
    };

    if (allowIndexed) {
      node.indexed = false;
    }

    return node;
  }

  let parent = {
    type: "",
    name: "",
    state: {
      allowType: true
    }
  };
  let node = parent;

  for (let i = 0; i < param.length; i++) {
    let c = param[i];

    switch (c) {
      case "(":
        if (node.state.allowType && node.type === "") {
          node.type = "tuple";
        } else if (!node.state.allowParams) {
          throwError(i);
        }

        node.state.allowType = false;
        node.type = verifyType(node.type);
        node.components = [newNode(node)];
        node = node.components[0];
        break;

      case ")":
        delete node.state;

        if (node.name === "indexed") {
          if (!allowIndexed) {
            throwError(i);
          }

          node.indexed = true;
          node.name = "";
        }

        if (checkModifier(node.type, node.name)) {
          node.name = "";
        }

        node.type = verifyType(node.type);
        let child = node;
        node = node.parent;

        if (!node) {
          throwError(i);
        }

        delete child.parent;
        node.state.allowParams = false;
        node.state.allowName = true;
        node.state.allowArray = true;
        break;

      case ",":
        delete node.state;

        if (node.name === "indexed") {
          if (!allowIndexed) {
            throwError(i);
          }

          node.indexed = true;
          node.name = "";
        }

        if (checkModifier(node.type, node.name)) {
          node.name = "";
        }

        node.type = verifyType(node.type);
        let sibling = newNode(node.parent); //{ type: "", name: "", parent: node.parent, state: { allowType: true } };

        node.parent.components.push(sibling);
        delete node.parent;
        node = sibling;
        break;
      // Hit a space...

      case " ":
        // If reading type, the type is done and may read a param or name
        if (node.state.allowType) {
          if (node.type !== "") {
            node.type = verifyType(node.type);
            delete node.state.allowType;
            node.state.allowName = true;
            node.state.allowParams = true;
          }
        } // If reading name, the name is done


        if (node.state.allowName) {
          if (node.name !== "") {
            if (node.name === "indexed") {
              if (!allowIndexed) {
                throwError(i);
              }

              if (node.indexed) {
                throwError(i);
              }

              node.indexed = true;
              node.name = "";
            } else if (checkModifier(node.type, node.name)) {
              node.name = "";
            } else {
              node.state.allowName = false;
            }
          }
        }

        break;

      case "[":
        if (!node.state.allowArray) {
          throwError(i);
        }

        node.type += c;
        node.state.allowArray = false;
        node.state.allowName = false;
        node.state.readArray = true;
        break;

      case "]":
        if (!node.state.readArray) {
          throwError(i);
        }

        node.type += c;
        node.state.readArray = false;
        node.state.allowArray = true;
        node.state.allowName = true;
        break;

      default:
        if (node.state.allowType) {
          node.type += c;
          node.state.allowParams = true;
          node.state.allowArray = true;
        } else if (node.state.allowName) {
          node.name += c;
          delete node.state.allowArray;
        } else if (node.state.readArray) {
          node.type += c;
        } else {
          throwError(i);
        }

    }
  }

  if (node.parent) {
    logger.throwArgumentError("unexpected eof", "param", param);
  }

  delete parent.state;

  if (node.name === "indexed") {
    if (!allowIndexed) {
      throwError(originalParam.length - 7);
    }

    if (node.indexed) {
      throwError(originalParam.length - 7);
    }

    node.indexed = true;
    node.name = "";
  } else if (checkModifier(node.type, node.name)) {
    node.name = "";
  }

  parent.type = verifyType(parent.type);
  return parent;
}

function populate(object, params) {
  for (let key in params) {
    (0, _properties.defineReadOnly)(object, key, params[key]);
  }
}

const FormatTypes = Object.freeze({
  // Bare formatting, as is needed for computing a sighash of an event or function
  sighash: "sighash",
  // Human-Readable with Minimal spacing and without names (compact human-readable)
  minimal: "minimal",
  // Human-Readable with nice spacing, including all names
  full: "full",
  // JSON-format a la Solidity
  json: "json"
});
exports.FormatTypes = FormatTypes;
const paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);

class ParamType {
  constructor(constructorGuard, params) {
    if (constructorGuard !== _constructorGuard) {
      logger.throwError("use fromString", _logger.Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "new ParamType()"
      });
    }

    populate(this, params);
    let match = this.type.match(paramTypeArray);

    if (match) {
      populate(this, {
        arrayLength: parseInt(match[2] || "-1"),
        arrayChildren: ParamType.fromObject({
          type: match[1],
          components: this.components
        }),
        baseType: "array"
      });
    } else {
      populate(this, {
        arrayLength: null,
        arrayChildren: null,
        baseType: this.components != null ? "tuple" : this.type
      });
    }

    this._isParamType = true;
    Object.freeze(this);
  } // Format the parameter fragment
  //   - sighash: "(uint256,address)"
  //   - minimal: "tuple(uint256,address) indexed"
  //   - full:    "tuple(uint256 foo, address bar) indexed baz"


  format(format) {
    if (!format) {
      format = FormatTypes.sighash;
    }

    if (!FormatTypes[format]) {
      logger.throwArgumentError("invalid format type", "format", format);
    }

    if (format === FormatTypes.json) {
      let result = {
        type: this.baseType === "tuple" ? "tuple" : this.type,
        name: this.name || undefined
      };

      if (typeof this.indexed === "boolean") {
        result.indexed = this.indexed;
      }

      if (this.components) {
        result.components = this.components.map(comp => JSON.parse(comp.format(format)));
      }

      return JSON.stringify(result);
    }

    let result = ""; // Array

    if (this.baseType === "array") {
      result += this.arrayChildren.format(format);
      result += "[" + (this.arrayLength < 0 ? "" : String(this.arrayLength)) + "]";
    } else {
      if (this.baseType === "tuple") {
        if (format !== FormatTypes.sighash) {
          result += this.type;
        }

        result += "(" + this.components.map(comp => comp.format(format)).join(format === FormatTypes.full ? ", " : ",") + ")";
      } else {
        result += this.type;
      }
    }

    if (format !== FormatTypes.sighash) {
      if (this.indexed === true) {
        result += " indexed";
      }

      if (format === FormatTypes.full && this.name) {
        result += " " + this.name;
      }
    }

    return result;
  }

  static from(value, allowIndexed) {
    if (typeof value === "string") {
      return ParamType.fromString(value, allowIndexed);
    }

    return ParamType.fromObject(value);
  }

  static fromObject(value) {
    if (ParamType.isParamType(value)) {
      return value;
    }

    return new ParamType(_constructorGuard, {
      name: value.name || null,
      type: verifyType(value.type),
      indexed: value.indexed == null ? null : !!value.indexed,
      components: value.components ? value.components.map(ParamType.fromObject) : null
    });
  }

  static fromString(value, allowIndexed) {
    function ParamTypify(node) {
      return ParamType.fromObject({
        name: node.name,
        type: node.type,
        indexed: node.indexed,
        components: node.components
      });
    }

    return ParamTypify(parseParamType(value, !!allowIndexed));
  }

  static isParamType(value) {
    return !!(value != null && value._isParamType);
  }

}

exports.ParamType = ParamType;
;

function parseParams(value, allowIndex) {
  return splitNesting(value).map(param => ParamType.fromString(param, allowIndex));
}

class Fragment {
  constructor(constructorGuard, params) {
    if (constructorGuard !== _constructorGuard) {
      logger.throwError("use a static from method", _logger.Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "new Fragment()"
      });
    }

    populate(this, params);
    this._isFragment = true;
    Object.freeze(this);
  }

  static from(value) {
    if (Fragment.isFragment(value)) {
      return value;
    }

    if (typeof value === "string") {
      return Fragment.fromString(value);
    }

    return Fragment.fromObject(value);
  }

  static fromObject(value) {
    if (Fragment.isFragment(value)) {
      return value;
    }

    switch (value.type) {
      case "function":
        return FunctionFragment.fromObject(value);

      case "event":
        return EventFragment.fromObject(value);

      case "constructor":
        return ConstructorFragment.fromObject(value);

      case "error":
        return ErrorFragment.fromObject(value);

      case "fallback":
      case "receive":
        // @TODO: Something? Maybe return a FunctionFragment? A custom DefaultFunctionFragment?
        return null;
    }

    return logger.throwArgumentError("invalid fragment object", "value", value);
  }

  static fromString(value) {
    // Make sure the "returns" is surrounded by a space and all whitespace is exactly one space
    value = value.replace(/\s/g, " ");
    value = value.replace(/\(/g, " (").replace(/\)/g, ") ").replace(/\s+/g, " ");
    value = value.trim();

    if (value.split(" ")[0] === "event") {
      return EventFragment.fromString(value.substring(5).trim());
    } else if (value.split(" ")[0] === "function") {
      return FunctionFragment.fromString(value.substring(8).trim());
    } else if (value.split("(")[0].trim() === "constructor") {
      return ConstructorFragment.fromString(value.trim());
    } else if (value.split(" ")[0] === "error") {
      return ErrorFragment.fromString(value.substring(5).trim());
    }

    return logger.throwArgumentError("unsupported fragment", "value", value);
  }

  static isFragment(value) {
    return !!(value && value._isFragment);
  }

}

exports.Fragment = Fragment;

class EventFragment extends Fragment {
  format(format) {
    if (!format) {
      format = FormatTypes.sighash;
    }

    if (!FormatTypes[format]) {
      logger.throwArgumentError("invalid format type", "format", format);
    }

    if (format === FormatTypes.json) {
      return JSON.stringify({
        type: "event",
        anonymous: this.anonymous,
        name: this.name,
        inputs: this.inputs.map(input => JSON.parse(input.format(format)))
      });
    }

    let result = "";

    if (format !== FormatTypes.sighash) {
      result += "event ";
    }

    result += this.name + "(" + this.inputs.map(input => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";

    if (format !== FormatTypes.sighash) {
      if (this.anonymous) {
        result += "anonymous ";
      }
    }

    return result.trim();
  }

  static from(value) {
    if (typeof value === "string") {
      return EventFragment.fromString(value);
    }

    return EventFragment.fromObject(value);
  }

  static fromObject(value) {
    if (EventFragment.isEventFragment(value)) {
      return value;
    }

    if (value.type !== "event") {
      logger.throwArgumentError("invalid event object", "value", value);
    }

    const params = {
      name: verifyIdentifier(value.name),
      anonymous: value.anonymous,
      inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
      type: "event"
    };
    return new EventFragment(_constructorGuard, params);
  }

  static fromString(value) {
    let match = value.match(regexParen);

    if (!match) {
      logger.throwArgumentError("invalid event string", "value", value);
    }

    let anonymous = false;
    match[3].split(" ").forEach(modifier => {
      switch (modifier.trim()) {
        case "anonymous":
          anonymous = true;
          break;

        case "":
          break;

        default:
          logger.warn("unknown modifier: " + modifier);
      }
    });
    return EventFragment.fromObject({
      name: match[1].trim(),
      anonymous: anonymous,
      inputs: parseParams(match[2], true),
      type: "event"
    });
  }

  static isEventFragment(value) {
    return value && value._isFragment && value.type === "event";
  }

}

exports.EventFragment = EventFragment;

function parseGas(value, params) {
  params.gas = null;
  let comps = value.split("@");

  if (comps.length !== 1) {
    if (comps.length > 2) {
      logger.throwArgumentError("invalid human-readable ABI signature", "value", value);
    }

    if (!comps[1].match(/^[0-9]+$/)) {
      logger.throwArgumentError("invalid human-readable ABI signature gas", "value", value);
    }

    params.gas = _bignumber.BigNumber.from(comps[1]);
    return comps[0];
  }

  return value;
}

function parseModifiers(value, params) {
  params.constant = false;
  params.payable = false;
  params.stateMutability = "nonpayable";
  value.split(" ").forEach(modifier => {
    switch (modifier.trim()) {
      case "constant":
        params.constant = true;
        break;

      case "payable":
        params.payable = true;
        params.stateMutability = "payable";
        break;

      case "nonpayable":
        params.payable = false;
        params.stateMutability = "nonpayable";
        break;

      case "pure":
        params.constant = true;
        params.stateMutability = "pure";
        break;

      case "view":
        params.constant = true;
        params.stateMutability = "view";
        break;

      case "external":
      case "public":
      case "":
        break;

      default:
        console.log("unknown modifier: " + modifier);
    }
  });
}

function verifyState(value) {
  let result = {
    constant: false,
    payable: true,
    stateMutability: "payable"
  };

  if (value.stateMutability != null) {
    result.stateMutability = value.stateMutability; // Set (and check things are consistent) the constant property

    result.constant = result.stateMutability === "view" || result.stateMutability === "pure";

    if (value.constant != null) {
      if (!!value.constant !== result.constant) {
        logger.throwArgumentError("cannot have constant function with mutability " + result.stateMutability, "value", value);
      }
    } // Set (and check things are consistent) the payable property


    result.payable = result.stateMutability === "payable";

    if (value.payable != null) {
      if (!!value.payable !== result.payable) {
        logger.throwArgumentError("cannot have payable function with mutability " + result.stateMutability, "value", value);
      }
    }
  } else if (value.payable != null) {
    result.payable = !!value.payable; // If payable we can assume non-constant; otherwise we can't assume

    if (value.constant == null && !result.payable && value.type !== "constructor") {
      logger.throwArgumentError("unable to determine stateMutability", "value", value);
    }

    result.constant = !!value.constant;

    if (result.constant) {
      result.stateMutability = "view";
    } else {
      result.stateMutability = result.payable ? "payable" : "nonpayable";
    }

    if (result.payable && result.constant) {
      logger.throwArgumentError("cannot have constant payable function", "value", value);
    }
  } else if (value.constant != null) {
    result.constant = !!value.constant;
    result.payable = !result.constant;
    result.stateMutability = result.constant ? "view" : "payable";
  } else if (value.type !== "constructor") {
    logger.throwArgumentError("unable to determine stateMutability", "value", value);
  }

  return result;
}

class ConstructorFragment extends Fragment {
  format(format) {
    if (!format) {
      format = FormatTypes.sighash;
    }

    if (!FormatTypes[format]) {
      logger.throwArgumentError("invalid format type", "format", format);
    }

    if (format === FormatTypes.json) {
      return JSON.stringify({
        type: "constructor",
        stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : undefined,
        payable: this.payable,
        gas: this.gas ? this.gas.toNumber() : undefined,
        inputs: this.inputs.map(input => JSON.parse(input.format(format)))
      });
    }

    if (format === FormatTypes.sighash) {
      logger.throwError("cannot format a constructor for sighash", _logger.Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "format(sighash)"
      });
    }

    let result = "constructor(" + this.inputs.map(input => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";

    if (this.stateMutability && this.stateMutability !== "nonpayable") {
      result += this.stateMutability + " ";
    }

    return result.trim();
  }

  static from(value) {
    if (typeof value === "string") {
      return ConstructorFragment.fromString(value);
    }

    return ConstructorFragment.fromObject(value);
  }

  static fromObject(value) {
    if (ConstructorFragment.isConstructorFragment(value)) {
      return value;
    }

    if (value.type !== "constructor") {
      logger.throwArgumentError("invalid constructor object", "value", value);
    }

    let state = verifyState(value);

    if (state.constant) {
      logger.throwArgumentError("constructor cannot be constant", "value", value);
    }

    const params = {
      name: null,
      type: value.type,
      inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
      payable: state.payable,
      stateMutability: state.stateMutability,
      gas: value.gas ? _bignumber.BigNumber.from(value.gas) : null
    };
    return new ConstructorFragment(_constructorGuard, params);
  }

  static fromString(value) {
    let params = {
      type: "constructor"
    };
    value = parseGas(value, params);
    let parens = value.match(regexParen);

    if (!parens || parens[1].trim() !== "constructor") {
      logger.throwArgumentError("invalid constructor string", "value", value);
    }

    params.inputs = parseParams(parens[2].trim(), false);
    parseModifiers(parens[3].trim(), params);
    return ConstructorFragment.fromObject(params);
  }

  static isConstructorFragment(value) {
    return value && value._isFragment && value.type === "constructor";
  }

}

exports.ConstructorFragment = ConstructorFragment;

class FunctionFragment extends ConstructorFragment {
  format(format) {
    if (!format) {
      format = FormatTypes.sighash;
    }

    if (!FormatTypes[format]) {
      logger.throwArgumentError("invalid format type", "format", format);
    }

    if (format === FormatTypes.json) {
      return JSON.stringify({
        type: "function",
        name: this.name,
        constant: this.constant,
        stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : undefined,
        payable: this.payable,
        gas: this.gas ? this.gas.toNumber() : undefined,
        inputs: this.inputs.map(input => JSON.parse(input.format(format))),
        outputs: this.outputs.map(output => JSON.parse(output.format(format)))
      });
    }

    let result = "";

    if (format !== FormatTypes.sighash) {
      result += "function ";
    }

    result += this.name + "(" + this.inputs.map(input => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";

    if (format !== FormatTypes.sighash) {
      if (this.stateMutability) {
        if (this.stateMutability !== "nonpayable") {
          result += this.stateMutability + " ";
        }
      } else if (this.constant) {
        result += "view ";
      }

      if (this.outputs && this.outputs.length) {
        result += "returns (" + this.outputs.map(output => output.format(format)).join(", ") + ") ";
      }

      if (this.gas != null) {
        result += "@" + this.gas.toString() + " ";
      }
    }

    return result.trim();
  }

  static from(value) {
    if (typeof value === "string") {
      return FunctionFragment.fromString(value);
    }

    return FunctionFragment.fromObject(value);
  }

  static fromObject(value) {
    if (FunctionFragment.isFunctionFragment(value)) {
      return value;
    }

    if (value.type !== "function") {
      logger.throwArgumentError("invalid function object", "value", value);
    }

    let state = verifyState(value);
    const params = {
      type: value.type,
      name: verifyIdentifier(value.name),
      constant: state.constant,
      inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],
      outputs: value.outputs ? value.outputs.map(ParamType.fromObject) : [],
      payable: state.payable,
      stateMutability: state.stateMutability,
      gas: value.gas ? _bignumber.BigNumber.from(value.gas) : null
    };
    return new FunctionFragment(_constructorGuard, params);
  }

  static fromString(value) {
    let params = {
      type: "function"
    };
    value = parseGas(value, params);
    let comps = value.split(" returns ");

    if (comps.length > 2) {
      logger.throwArgumentError("invalid function string", "value", value);
    }

    let parens = comps[0].match(regexParen);

    if (!parens) {
      logger.throwArgumentError("invalid function signature", "value", value);
    }

    params.name = parens[1].trim();

    if (params.name) {
      verifyIdentifier(params.name);
    }

    params.inputs = parseParams(parens[2], false);
    parseModifiers(parens[3].trim(), params); // We have outputs

    if (comps.length > 1) {
      let returns = comps[1].match(regexParen);

      if (returns[1].trim() != "" || returns[3].trim() != "") {
        logger.throwArgumentError("unexpected tokens", "value", value);
      }

      params.outputs = parseParams(returns[2], false);
    } else {
      params.outputs = [];
    }

    return FunctionFragment.fromObject(params);
  }

  static isFunctionFragment(value) {
    return value && value._isFragment && value.type === "function";
  }

} //export class StructFragment extends Fragment {
//}


exports.FunctionFragment = FunctionFragment;

function checkForbidden(fragment) {
  const sig = fragment.format();

  if (sig === "Error(string)" || sig === "Panic(uint256)") {
    logger.throwArgumentError(`cannot specify user defined ${sig} error`, "fragment", fragment);
  }

  return fragment;
}

class ErrorFragment extends Fragment {
  format(format) {
    if (!format) {
      format = FormatTypes.sighash;
    }

    if (!FormatTypes[format]) {
      logger.throwArgumentError("invalid format type", "format", format);
    }

    if (format === FormatTypes.json) {
      return JSON.stringify({
        type: "error",
        name: this.name,
        inputs: this.inputs.map(input => JSON.parse(input.format(format)))
      });
    }

    let result = "";

    if (format !== FormatTypes.sighash) {
      result += "error ";
    }

    result += this.name + "(" + this.inputs.map(input => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
    return result.trim();
  }

  static from(value) {
    if (typeof value === "string") {
      return ErrorFragment.fromString(value);
    }

    return ErrorFragment.fromObject(value);
  }

  static fromObject(value) {
    if (ErrorFragment.isErrorFragment(value)) {
      return value;
    }

    if (value.type !== "error") {
      logger.throwArgumentError("invalid error object", "value", value);
    }

    const params = {
      type: value.type,
      name: verifyIdentifier(value.name),
      inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : []
    };
    return checkForbidden(new ErrorFragment(_constructorGuard, params));
  }

  static fromString(value) {
    let params = {
      type: "error"
    };
    let parens = value.match(regexParen);

    if (!parens) {
      logger.throwArgumentError("invalid error signature", "value", value);
    }

    params.name = parens[1].trim();

    if (params.name) {
      verifyIdentifier(params.name);
    }

    params.inputs = parseParams(parens[2], false);
    return checkForbidden(ErrorFragment.fromObject(params));
  }

  static isErrorFragment(value) {
    return value && value._isFragment && value.type === "error";
  }

}

exports.ErrorFragment = ErrorFragment;

function verifyType(type) {
  // These need to be transformed to their full description
  if (type.match(/^uint($|[^1-9])/)) {
    type = "uint256" + type.substring(4);
  } else if (type.match(/^int($|[^1-9])/)) {
    type = "int256" + type.substring(3);
  } // @TODO: more verification


  return type;
} // See: https://github.com/ethereum/solidity/blob/1f8f1a3db93a548d0555e3e14cfc55a10e25b60e/docs/grammar/SolidityLexer.g4#L234


const regexIdentifier = new RegExp("^[a-zA-Z$_][a-zA-Z0-9$_]*$");

function verifyIdentifier(value) {
  if (!value || !value.match(regexIdentifier)) {
    logger.throwArgumentError(`invalid identifier "${value}"`, "value", value);
  }

  return value;
}

const regexParen = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");

function splitNesting(value) {
  value = value.trim();
  let result = [];
  let accum = "";
  let depth = 0;

  for (let offset = 0; offset < value.length; offset++) {
    let c = value[offset];

    if (c === "," && depth === 0) {
      result.push(accum);
      accum = "";
    } else {
      accum += c;

      if (c === "(") {
        depth++;
      } else if (c === ")") {
        depth--;

        if (depth === -1) {
          logger.throwArgumentError("unbalanced parenthesis", "value", value);
        }
      }
    }
  }

  if (accum) {
    result.push(accum);
  }

  return result;
}
},{"@ethersproject/bignumber":"../../node_modules/@ethersproject/bignumber/lib.esm/index.js","@ethersproject/properties":"../../node_modules/@ethersproject/properties/lib.esm/index.js","@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","./_version":"../../node_modules/@ethersproject/abi/lib.esm/_version.js"}],"../../node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Writer = exports.Reader = exports.Coder = void 0;
exports.checkResultErrors = checkResultErrors;

var _bytes = require("@ethersproject/bytes");

var _bignumber = require("@ethersproject/bignumber");

var _properties = require("@ethersproject/properties");

var _logger = require("@ethersproject/logger");

var _version = require("../_version");

const logger = new _logger.Logger(_version.version);

function checkResultErrors(result) {
  // Find the first error (if any)
  const errors = [];

  const checkErrors = function (path, object) {
    if (!Array.isArray(object)) {
      return;
    }

    for (let key in object) {
      const childPath = path.slice();
      childPath.push(key);

      try {
        checkErrors(childPath, object[key]);
      } catch (error) {
        errors.push({
          path: childPath,
          error: error
        });
      }
    }
  };

  checkErrors([], result);
  return errors;
}

class Coder {
  constructor(name, type, localName, dynamic) {
    // @TODO: defineReadOnly these
    this.name = name;
    this.type = type;
    this.localName = localName;
    this.dynamic = dynamic;
  }

  _throwError(message, value) {
    logger.throwArgumentError(message, this.localName, value);
  }

}

exports.Coder = Coder;

class Writer {
  constructor(wordSize) {
    (0, _properties.defineReadOnly)(this, "wordSize", wordSize || 32);
    this._data = [];
    this._dataLength = 0;
    this._padding = new Uint8Array(wordSize);
  }

  get data() {
    return (0, _bytes.hexConcat)(this._data);
  }

  get length() {
    return this._dataLength;
  }

  _writeData(data) {
    this._data.push(data);

    this._dataLength += data.length;
    return data.length;
  }

  appendWriter(writer) {
    return this._writeData((0, _bytes.concat)(writer._data));
  } // Arrayish items; padded on the right to wordSize


  writeBytes(value) {
    let bytes = (0, _bytes.arrayify)(value);
    const paddingOffset = bytes.length % this.wordSize;

    if (paddingOffset) {
      bytes = (0, _bytes.concat)([bytes, this._padding.slice(paddingOffset)]);
    }

    return this._writeData(bytes);
  }

  _getValue(value) {
    let bytes = (0, _bytes.arrayify)(_bignumber.BigNumber.from(value));

    if (bytes.length > this.wordSize) {
      logger.throwError("value out-of-bounds", _logger.Logger.errors.BUFFER_OVERRUN, {
        length: this.wordSize,
        offset: bytes.length
      });
    }

    if (bytes.length % this.wordSize) {
      bytes = (0, _bytes.concat)([this._padding.slice(bytes.length % this.wordSize), bytes]);
    }

    return bytes;
  } // BigNumberish items; padded on the left to wordSize


  writeValue(value) {
    return this._writeData(this._getValue(value));
  }

  writeUpdatableValue() {
    const offset = this._data.length;

    this._data.push(this._padding);

    this._dataLength += this.wordSize;
    return value => {
      this._data[offset] = this._getValue(value);
    };
  }

}

exports.Writer = Writer;

class Reader {
  constructor(data, wordSize, coerceFunc, allowLoose) {
    (0, _properties.defineReadOnly)(this, "_data", (0, _bytes.arrayify)(data));
    (0, _properties.defineReadOnly)(this, "wordSize", wordSize || 32);
    (0, _properties.defineReadOnly)(this, "_coerceFunc", coerceFunc);
    (0, _properties.defineReadOnly)(this, "allowLoose", allowLoose);
    this._offset = 0;
  }

  get data() {
    return (0, _bytes.hexlify)(this._data);
  }

  get consumed() {
    return this._offset;
  } // The default Coerce function


  static coerce(name, value) {
    let match = name.match("^u?int([0-9]+)$");

    if (match && parseInt(match[1]) <= 48) {
      value = value.toNumber();
    }

    return value;
  }

  coerce(name, value) {
    if (this._coerceFunc) {
      return this._coerceFunc(name, value);
    }

    return Reader.coerce(name, value);
  }

  _peekBytes(offset, length, loose) {
    let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;

    if (this._offset + alignedLength > this._data.length) {
      if (this.allowLoose && loose && this._offset + length <= this._data.length) {
        alignedLength = length;
      } else {
        logger.throwError("data out-of-bounds", _logger.Logger.errors.BUFFER_OVERRUN, {
          length: this._data.length,
          offset: this._offset + alignedLength
        });
      }
    }

    return this._data.slice(this._offset, this._offset + alignedLength);
  }

  subReader(offset) {
    return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);
  }

  readBytes(length, loose) {
    let bytes = this._peekBytes(0, length, !!loose);

    this._offset += bytes.length; // @TODO: Make sure the length..end bytes are all 0?

    return bytes.slice(0, length);
  }

  readValue() {
    return _bignumber.BigNumber.from(this.readBytes(this.wordSize));
  }

}

exports.Reader = Reader;
},{"@ethersproject/bytes":"../../node_modules/@ethersproject/bytes/lib.esm/index.js","@ethersproject/bignumber":"../../node_modules/@ethersproject/bignumber/lib.esm/index.js","@ethersproject/properties":"../../node_modules/@ethersproject/properties/lib.esm/index.js","@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","../_version":"../../node_modules/@ethersproject/abi/lib.esm/_version.js"}],"../../../Users/Jilo/AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/process/browser.js":[function(require,module,exports) {

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};
},{}],"../../node_modules/js-sha3/src/sha3.js":[function(require,module,exports) {
var process = require("process");
var global = arguments[3];
var define;
/**
 * [js-sha3]{@link https://github.com/emn178/js-sha3}
 *
 * @version 0.8.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2015-2018
 * @license MIT
 */
/*jslint bitwise: true */
(function () {
  'use strict';

  var INPUT_ERROR = 'input is invalid type';
  var FINALIZE_ERROR = 'finalize already called';
  var WINDOW = typeof window === 'object';
  var root = WINDOW ? window : {};
  if (root.JS_SHA3_NO_WINDOW) {
    WINDOW = false;
  }
  var WEB_WORKER = !WINDOW && typeof self === 'object';
  var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
  if (NODE_JS) {
    root = global;
  } else if (WEB_WORKER) {
    root = self;
  }
  var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && typeof module === 'object' && module.exports;
  var AMD = typeof define === 'function' && define.amd;
  var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
  var HEX_CHARS = '0123456789abcdef'.split('');
  var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
  var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
  var KECCAK_PADDING = [1, 256, 65536, 16777216];
  var PADDING = [6, 1536, 393216, 100663296];
  var SHIFT = [0, 8, 16, 24];
  var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
    0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,
    2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,
    2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
    2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
  var BITS = [224, 256, 384, 512];
  var SHAKE_BITS = [128, 256];
  var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];
  var CSHAKE_BYTEPAD = {
    '128': 168,
    '256': 136
  };

  if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
    Array.isArray = function (obj) {
      return Object.prototype.toString.call(obj) === '[object Array]';
    };
  }

  if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
    ArrayBuffer.isView = function (obj) {
      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
    };
  }

  var createOutputMethod = function (bits, padding, outputType) {
    return function (message) {
      return new Keccak(bits, padding, bits).update(message)[outputType]();
    };
  };

  var createShakeOutputMethod = function (bits, padding, outputType) {
    return function (message, outputBits) {
      return new Keccak(bits, padding, outputBits).update(message)[outputType]();
    };
  };

  var createCshakeOutputMethod = function (bits, padding, outputType) {
    return function (message, outputBits, n, s) {
      return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();
    };
  };

  var createKmacOutputMethod = function (bits, padding, outputType) {
    return function (key, message, outputBits, s) {
      return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();
    };
  };

  var createOutputMethods = function (method, createMethod, bits, padding) {
    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
      var type = OUTPUT_TYPES[i];
      method[type] = createMethod(bits, padding, type);
    }
    return method;
  };

  var createMethod = function (bits, padding) {
    var method = createOutputMethod(bits, padding, 'hex');
    method.create = function () {
      return new Keccak(bits, padding, bits);
    };
    method.update = function (message) {
      return method.create().update(message);
    };
    return createOutputMethods(method, createOutputMethod, bits, padding);
  };

  var createShakeMethod = function (bits, padding) {
    var method = createShakeOutputMethod(bits, padding, 'hex');
    method.create = function (outputBits) {
      return new Keccak(bits, padding, outputBits);
    };
    method.update = function (message, outputBits) {
      return method.create(outputBits).update(message);
    };
    return createOutputMethods(method, createShakeOutputMethod, bits, padding);
  };

  var createCshakeMethod = function (bits, padding) {
    var w = CSHAKE_BYTEPAD[bits];
    var method = createCshakeOutputMethod(bits, padding, 'hex');
    method.create = function (outputBits, n, s) {
      if (!n && !s) {
        return methods['shake' + bits].create(outputBits);
      } else {
        return new Keccak(bits, padding, outputBits).bytepad([n, s], w);
      }
    };
    method.update = function (message, outputBits, n, s) {
      return method.create(outputBits, n, s).update(message);
    };
    return createOutputMethods(method, createCshakeOutputMethod, bits, padding);
  };

  var createKmacMethod = function (bits, padding) {
    var w = CSHAKE_BYTEPAD[bits];
    var method = createKmacOutputMethod(bits, padding, 'hex');
    method.create = function (key, outputBits, s) {
      return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);
    };
    method.update = function (key, message, outputBits, s) {
      return method.create(key, outputBits, s).update(message);
    };
    return createOutputMethods(method, createKmacOutputMethod, bits, padding);
  };

  var algorithms = [
    { name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },
    { name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },
    { name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
    { name: 'cshake', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
    { name: 'kmac', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
  ];

  var methods = {}, methodNames = [];

  for (var i = 0; i < algorithms.length; ++i) {
    var algorithm = algorithms[i];
    var bits = algorithm.bits;
    for (var j = 0; j < bits.length; ++j) {
      var methodName = algorithm.name + '_' + bits[j];
      methodNames.push(methodName);
      methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
      if (algorithm.name !== 'sha3') {
        var newMethodName = algorithm.name + bits[j];
        methodNames.push(newMethodName);
        methods[newMethodName] = methods[methodName];
      }
    }
  }

  function Keccak(bits, padding, outputBits) {
    this.blocks = [];
    this.s = [];
    this.padding = padding;
    this.outputBits = outputBits;
    this.reset = true;
    this.finalized = false;
    this.block = 0;
    this.start = 0;
    this.blockCount = (1600 - (bits << 1)) >> 5;
    this.byteCount = this.blockCount << 2;
    this.outputBlocks = outputBits >> 5;
    this.extraBytes = (outputBits & 31) >> 3;

    for (var i = 0; i < 50; ++i) {
      this.s[i] = 0;
    }
  }

  Keccak.prototype.update = function (message) {
    if (this.finalized) {
      throw new Error(FINALIZE_ERROR);
    }
    var notString, type = typeof message;
    if (type !== 'string') {
      if (type === 'object') {
        if (message === null) {
          throw new Error(INPUT_ERROR);
        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
          message = new Uint8Array(message);
        } else if (!Array.isArray(message)) {
          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
            throw new Error(INPUT_ERROR);
          }
        }
      } else {
        throw new Error(INPUT_ERROR);
      }
      notString = true;
    }
    var blocks = this.blocks, byteCount = this.byteCount, length = message.length,
      blockCount = this.blockCount, index = 0, s = this.s, i, code;

    while (index < length) {
      if (this.reset) {
        this.reset = false;
        blocks[0] = this.block;
        for (i = 1; i < blockCount + 1; ++i) {
          blocks[i] = 0;
        }
      }
      if (notString) {
        for (i = this.start; index < length && i < byteCount; ++index) {
          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
        }
      } else {
        for (i = this.start; index < length && i < byteCount; ++index) {
          code = message.charCodeAt(index);
          if (code < 0x80) {
            blocks[i >> 2] |= code << SHIFT[i++ & 3];
          } else if (code < 0x800) {
            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          } else if (code < 0xd800 || code >= 0xe000) {
            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          } else {
            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          }
        }
      }
      this.lastByteIndex = i;
      if (i >= byteCount) {
        this.start = i - byteCount;
        this.block = blocks[blockCount];
        for (i = 0; i < blockCount; ++i) {
          s[i] ^= blocks[i];
        }
        f(s);
        this.reset = true;
      } else {
        this.start = i;
      }
    }
    return this;
  };

  Keccak.prototype.encode = function (x, right) {
    var o = x & 255, n = 1;
    var bytes = [o];
    x = x >> 8;
    o = x & 255;
    while (o > 0) {
      bytes.unshift(o);
      x = x >> 8;
      o = x & 255;
      ++n;
    }
    if (right) {
      bytes.push(n);
    } else {
      bytes.unshift(n);
    }
    this.update(bytes);
    return bytes.length;
  };

  Keccak.prototype.encodeString = function (str) {
    var notString, type = typeof str;
    if (type !== 'string') {
      if (type === 'object') {
        if (str === null) {
          throw new Error(INPUT_ERROR);
        } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
          str = new Uint8Array(str);
        } else if (!Array.isArray(str)) {
          if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
            throw new Error(INPUT_ERROR);
          }
        }
      } else {
        throw new Error(INPUT_ERROR);
      }
      notString = true;
    }
    var bytes = 0, length = str.length;
    if (notString) {
      bytes = length;
    } else {
      for (var i = 0; i < str.length; ++i) {
        var code = str.charCodeAt(i);
        if (code < 0x80) {
          bytes += 1;
        } else if (code < 0x800) {
          bytes += 2;
        } else if (code < 0xd800 || code >= 0xe000) {
          bytes += 3;
        } else {
          code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++i) & 0x3ff));
          bytes += 4;
        }
      }
    }
    bytes += this.encode(bytes * 8);
    this.update(str);
    return bytes;
  };

  Keccak.prototype.bytepad = function (strs, w) {
    var bytes = this.encode(w);
    for (var i = 0; i < strs.length; ++i) {
      bytes += this.encodeString(strs[i]);
    }
    var paddingBytes = w - bytes % w;
    var zeros = [];
    zeros.length = paddingBytes;
    this.update(zeros);
    return this;
  };

  Keccak.prototype.finalize = function () {
    if (this.finalized) {
      return;
    }
    this.finalized = true;
    var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
    blocks[i >> 2] |= this.padding[i & 3];
    if (this.lastByteIndex === this.byteCount) {
      blocks[0] = blocks[blockCount];
      for (i = 1; i < blockCount + 1; ++i) {
        blocks[i] = 0;
      }
    }
    blocks[blockCount - 1] |= 0x80000000;
    for (i = 0; i < blockCount; ++i) {
      s[i] ^= blocks[i];
    }
    f(s);
  };

  Keccak.prototype.toString = Keccak.prototype.hex = function () {
    this.finalize();

    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
      extraBytes = this.extraBytes, i = 0, j = 0;
    var hex = '', block;
    while (j < outputBlocks) {
      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
        block = s[i];
        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +
          HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +
          HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +
          HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];
      }
      if (j % blockCount === 0) {
        f(s);
        i = 0;
      }
    }
    if (extraBytes) {
      block = s[i];
      hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];
      if (extraBytes > 1) {
        hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];
      }
      if (extraBytes > 2) {
        hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];
      }
    }
    return hex;
  };

  Keccak.prototype.arrayBuffer = function () {
    this.finalize();

    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
      extraBytes = this.extraBytes, i = 0, j = 0;
    var bytes = this.outputBits >> 3;
    var buffer;
    if (extraBytes) {
      buffer = new ArrayBuffer((outputBlocks + 1) << 2);
    } else {
      buffer = new ArrayBuffer(bytes);
    }
    var array = new Uint32Array(buffer);
    while (j < outputBlocks) {
      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
        array[j] = s[i];
      }
      if (j % blockCount === 0) {
        f(s);
      }
    }
    if (extraBytes) {
      array[i] = s[i];
      buffer = buffer.slice(0, bytes);
    }
    return buffer;
  };

  Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;

  Keccak.prototype.digest = Keccak.prototype.array = function () {
    this.finalize();

    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
      extraBytes = this.extraBytes, i = 0, j = 0;
    var array = [], offset, block;
    while (j < outputBlocks) {
      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
        offset = j << 2;
        block = s[i];
        array[offset] = block & 0xFF;
        array[offset + 1] = (block >> 8) & 0xFF;
        array[offset + 2] = (block >> 16) & 0xFF;
        array[offset + 3] = (block >> 24) & 0xFF;
      }
      if (j % blockCount === 0) {
        f(s);
      }
    }
    if (extraBytes) {
      offset = j << 2;
      block = s[i];
      array[offset] = block & 0xFF;
      if (extraBytes > 1) {
        array[offset + 1] = (block >> 8) & 0xFF;
      }
      if (extraBytes > 2) {
        array[offset + 2] = (block >> 16) & 0xFF;
      }
    }
    return array;
  };

  function Kmac(bits, padding, outputBits) {
    Keccak.call(this, bits, padding, outputBits);
  }

  Kmac.prototype = new Keccak();

  Kmac.prototype.finalize = function () {
    this.encode(this.outputBits, true);
    return Keccak.prototype.finalize.call(this);
  };

  var f = function (s) {
    var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,
      b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,
      b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,
      b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
    for (n = 0; n < 48; n += 2) {
      c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
      c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
      c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
      c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
      c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
      c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
      c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
      c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
      c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
      c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

      h = c8 ^ ((c2 << 1) | (c3 >>> 31));
      l = c9 ^ ((c3 << 1) | (c2 >>> 31));
      s[0] ^= h;
      s[1] ^= l;
      s[10] ^= h;
      s[11] ^= l;
      s[20] ^= h;
      s[21] ^= l;
      s[30] ^= h;
      s[31] ^= l;
      s[40] ^= h;
      s[41] ^= l;
      h = c0 ^ ((c4 << 1) | (c5 >>> 31));
      l = c1 ^ ((c5 << 1) | (c4 >>> 31));
      s[2] ^= h;
      s[3] ^= l;
      s[12] ^= h;
      s[13] ^= l;
      s[22] ^= h;
      s[23] ^= l;
      s[32] ^= h;
      s[33] ^= l;
      s[42] ^= h;
      s[43] ^= l;
      h = c2 ^ ((c6 << 1) | (c7 >>> 31));
      l = c3 ^ ((c7 << 1) | (c6 >>> 31));
      s[4] ^= h;
      s[5] ^= l;
      s[14] ^= h;
      s[15] ^= l;
      s[24] ^= h;
      s[25] ^= l;
      s[34] ^= h;
      s[35] ^= l;
      s[44] ^= h;
      s[45] ^= l;
      h = c4 ^ ((c8 << 1) | (c9 >>> 31));
      l = c5 ^ ((c9 << 1) | (c8 >>> 31));
      s[6] ^= h;
      s[7] ^= l;
      s[16] ^= h;
      s[17] ^= l;
      s[26] ^= h;
      s[27] ^= l;
      s[36] ^= h;
      s[37] ^= l;
      s[46] ^= h;
      s[47] ^= l;
      h = c6 ^ ((c0 << 1) | (c1 >>> 31));
      l = c7 ^ ((c1 << 1) | (c0 >>> 31));
      s[8] ^= h;
      s[9] ^= l;
      s[18] ^= h;
      s[19] ^= l;
      s[28] ^= h;
      s[29] ^= l;
      s[38] ^= h;
      s[39] ^= l;
      s[48] ^= h;
      s[49] ^= l;

      b0 = s[0];
      b1 = s[1];
      b32 = (s[11] << 4) | (s[10] >>> 28);
      b33 = (s[10] << 4) | (s[11] >>> 28);
      b14 = (s[20] << 3) | (s[21] >>> 29);
      b15 = (s[21] << 3) | (s[20] >>> 29);
      b46 = (s[31] << 9) | (s[30] >>> 23);
      b47 = (s[30] << 9) | (s[31] >>> 23);
      b28 = (s[40] << 18) | (s[41] >>> 14);
      b29 = (s[41] << 18) | (s[40] >>> 14);
      b20 = (s[2] << 1) | (s[3] >>> 31);
      b21 = (s[3] << 1) | (s[2] >>> 31);
      b2 = (s[13] << 12) | (s[12] >>> 20);
      b3 = (s[12] << 12) | (s[13] >>> 20);
      b34 = (s[22] << 10) | (s[23] >>> 22);
      b35 = (s[23] << 10) | (s[22] >>> 22);
      b16 = (s[33] << 13) | (s[32] >>> 19);
      b17 = (s[32] << 13) | (s[33] >>> 19);
      b48 = (s[42] << 2) | (s[43] >>> 30);
      b49 = (s[43] << 2) | (s[42] >>> 30);
      b40 = (s[5] << 30) | (s[4] >>> 2);
      b41 = (s[4] << 30) | (s[5] >>> 2);
      b22 = (s[14] << 6) | (s[15] >>> 26);
      b23 = (s[15] << 6) | (s[14] >>> 26);
      b4 = (s[25] << 11) | (s[24] >>> 21);
      b5 = (s[24] << 11) | (s[25] >>> 21);
      b36 = (s[34] << 15) | (s[35] >>> 17);
      b37 = (s[35] << 15) | (s[34] >>> 17);
      b18 = (s[45] << 29) | (s[44] >>> 3);
      b19 = (s[44] << 29) | (s[45] >>> 3);
      b10 = (s[6] << 28) | (s[7] >>> 4);
      b11 = (s[7] << 28) | (s[6] >>> 4);
      b42 = (s[17] << 23) | (s[16] >>> 9);
      b43 = (s[16] << 23) | (s[17] >>> 9);
      b24 = (s[26] << 25) | (s[27] >>> 7);
      b25 = (s[27] << 25) | (s[26] >>> 7);
      b6 = (s[36] << 21) | (s[37] >>> 11);
      b7 = (s[37] << 21) | (s[36] >>> 11);
      b38 = (s[47] << 24) | (s[46] >>> 8);
      b39 = (s[46] << 24) | (s[47] >>> 8);
      b30 = (s[8] << 27) | (s[9] >>> 5);
      b31 = (s[9] << 27) | (s[8] >>> 5);
      b12 = (s[18] << 20) | (s[19] >>> 12);
      b13 = (s[19] << 20) | (s[18] >>> 12);
      b44 = (s[29] << 7) | (s[28] >>> 25);
      b45 = (s[28] << 7) | (s[29] >>> 25);
      b26 = (s[38] << 8) | (s[39] >>> 24);
      b27 = (s[39] << 8) | (s[38] >>> 24);
      b8 = (s[48] << 14) | (s[49] >>> 18);
      b9 = (s[49] << 14) | (s[48] >>> 18);

      s[0] = b0 ^ (~b2 & b4);
      s[1] = b1 ^ (~b3 & b5);
      s[10] = b10 ^ (~b12 & b14);
      s[11] = b11 ^ (~b13 & b15);
      s[20] = b20 ^ (~b22 & b24);
      s[21] = b21 ^ (~b23 & b25);
      s[30] = b30 ^ (~b32 & b34);
      s[31] = b31 ^ (~b33 & b35);
      s[40] = b40 ^ (~b42 & b44);
      s[41] = b41 ^ (~b43 & b45);
      s[2] = b2 ^ (~b4 & b6);
      s[3] = b3 ^ (~b5 & b7);
      s[12] = b12 ^ (~b14 & b16);
      s[13] = b13 ^ (~b15 & b17);
      s[22] = b22 ^ (~b24 & b26);
      s[23] = b23 ^ (~b25 & b27);
      s[32] = b32 ^ (~b34 & b36);
      s[33] = b33 ^ (~b35 & b37);
      s[42] = b42 ^ (~b44 & b46);
      s[43] = b43 ^ (~b45 & b47);
      s[4] = b4 ^ (~b6 & b8);
      s[5] = b5 ^ (~b7 & b9);
      s[14] = b14 ^ (~b16 & b18);
      s[15] = b15 ^ (~b17 & b19);
      s[24] = b24 ^ (~b26 & b28);
      s[25] = b25 ^ (~b27 & b29);
      s[34] = b34 ^ (~b36 & b38);
      s[35] = b35 ^ (~b37 & b39);
      s[44] = b44 ^ (~b46 & b48);
      s[45] = b45 ^ (~b47 & b49);
      s[6] = b6 ^ (~b8 & b0);
      s[7] = b7 ^ (~b9 & b1);
      s[16] = b16 ^ (~b18 & b10);
      s[17] = b17 ^ (~b19 & b11);
      s[26] = b26 ^ (~b28 & b20);
      s[27] = b27 ^ (~b29 & b21);
      s[36] = b36 ^ (~b38 & b30);
      s[37] = b37 ^ (~b39 & b31);
      s[46] = b46 ^ (~b48 & b40);
      s[47] = b47 ^ (~b49 & b41);
      s[8] = b8 ^ (~b0 & b2);
      s[9] = b9 ^ (~b1 & b3);
      s[18] = b18 ^ (~b10 & b12);
      s[19] = b19 ^ (~b11 & b13);
      s[28] = b28 ^ (~b20 & b22);
      s[29] = b29 ^ (~b21 & b23);
      s[38] = b38 ^ (~b30 & b32);
      s[39] = b39 ^ (~b31 & b33);
      s[48] = b48 ^ (~b40 & b42);
      s[49] = b49 ^ (~b41 & b43);

      s[0] ^= RC[n];
      s[1] ^= RC[n + 1];
    }
  };

  if (COMMON_JS) {
    module.exports = methods;
  } else {
    for (i = 0; i < methodNames.length; ++i) {
      root[methodNames[i]] = methods[methodNames[i]];
    }
    if (AMD) {
      define(function () {
        return methods;
      });
    }
  }
})();

},{"process":"../../../Users/Jilo/AppData/Roaming/npm/node_modules/parcel-bundler/node_modules/process/browser.js"}],"../../node_modules/@ethersproject/keccak256/lib.esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.keccak256 = keccak256;

var _jsSha = _interopRequireDefault(require("js-sha3"));

var _bytes = require("@ethersproject/bytes");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function keccak256(data) {
  return '0x' + _jsSha.default.keccak_256((0, _bytes.arrayify)(data));
}
},{"js-sha3":"../../node_modules/js-sha3/src/sha3.js","@ethersproject/bytes":"../../node_modules/@ethersproject/bytes/lib.esm/index.js"}],"../../node_modules/@ethersproject/rlp/lib.esm/_version.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.version = void 0;
const version = "rlp/5.6.0";
exports.version = version;
},{}],"../../node_modules/@ethersproject/rlp/lib.esm/index.js":[function(require,module,exports) {
"use strict"; //See: https://github.com/ethereum/wiki/wiki/RLP

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decode = decode;
exports.encode = encode;

var _bytes = require("@ethersproject/bytes");

var _logger = require("@ethersproject/logger");

var _version = require("./_version");

const logger = new _logger.Logger(_version.version);

function arrayifyInteger(value) {
  const result = [];

  while (value) {
    result.unshift(value & 0xff);
    value >>= 8;
  }

  return result;
}

function unarrayifyInteger(data, offset, length) {
  let result = 0;

  for (let i = 0; i < length; i++) {
    result = result * 256 + data[offset + i];
  }

  return result;
}

function _encode(object) {
  if (Array.isArray(object)) {
    let payload = [];
    object.forEach(function (child) {
      payload = payload.concat(_encode(child));
    });

    if (payload.length <= 55) {
      payload.unshift(0xc0 + payload.length);
      return payload;
    }

    const length = arrayifyInteger(payload.length);
    length.unshift(0xf7 + length.length);
    return length.concat(payload);
  }

  if (!(0, _bytes.isBytesLike)(object)) {
    logger.throwArgumentError("RLP object must be BytesLike", "object", object);
  }

  const data = Array.prototype.slice.call((0, _bytes.arrayify)(object));

  if (data.length === 1 && data[0] <= 0x7f) {
    return data;
  } else if (data.length <= 55) {
    data.unshift(0x80 + data.length);
    return data;
  }

  const length = arrayifyInteger(data.length);
  length.unshift(0xb7 + length.length);
  return length.concat(data);
}

function encode(object) {
  return (0, _bytes.hexlify)(_encode(object));
}

function _decodeChildren(data, offset, childOffset, length) {
  const result = [];

  while (childOffset < offset + 1 + length) {
    const decoded = _decode(data, childOffset);

    result.push(decoded.result);
    childOffset += decoded.consumed;

    if (childOffset > offset + 1 + length) {
      logger.throwError("child data too short", _logger.Logger.errors.BUFFER_OVERRUN, {});
    }
  }

  return {
    consumed: 1 + length,
    result: result
  };
} // returns { consumed: number, result: Object }


function _decode(data, offset) {
  if (data.length === 0) {
    logger.throwError("data too short", _logger.Logger.errors.BUFFER_OVERRUN, {});
  } // Array with extra length prefix


  if (data[offset] >= 0xf8) {
    const lengthLength = data[offset] - 0xf7;

    if (offset + 1 + lengthLength > data.length) {
      logger.throwError("data short segment too short", _logger.Logger.errors.BUFFER_OVERRUN, {});
    }

    const length = unarrayifyInteger(data, offset + 1, lengthLength);

    if (offset + 1 + lengthLength + length > data.length) {
      logger.throwError("data long segment too short", _logger.Logger.errors.BUFFER_OVERRUN, {});
    }

    return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);
  } else if (data[offset] >= 0xc0) {
    const length = data[offset] - 0xc0;

    if (offset + 1 + length > data.length) {
      logger.throwError("data array too short", _logger.Logger.errors.BUFFER_OVERRUN, {});
    }

    return _decodeChildren(data, offset, offset + 1, length);
  } else if (data[offset] >= 0xb8) {
    const lengthLength = data[offset] - 0xb7;

    if (offset + 1 + lengthLength > data.length) {
      logger.throwError("data array too short", _logger.Logger.errors.BUFFER_OVERRUN, {});
    }

    const length = unarrayifyInteger(data, offset + 1, lengthLength);

    if (offset + 1 + lengthLength + length > data.length) {
      logger.throwError("data array too short", _logger.Logger.errors.BUFFER_OVERRUN, {});
    }

    const result = (0, _bytes.hexlify)(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));
    return {
      consumed: 1 + lengthLength + length,
      result: result
    };
  } else if (data[offset] >= 0x80) {
    const length = data[offset] - 0x80;

    if (offset + 1 + length > data.length) {
      logger.throwError("data too short", _logger.Logger.errors.BUFFER_OVERRUN, {});
    }

    const result = (0, _bytes.hexlify)(data.slice(offset + 1, offset + 1 + length));
    return {
      consumed: 1 + length,
      result: result
    };
  }

  return {
    consumed: 1,
    result: (0, _bytes.hexlify)(data[offset])
  };
}

function decode(data) {
  const bytes = (0, _bytes.arrayify)(data);

  const decoded = _decode(bytes, 0);

  if (decoded.consumed !== bytes.length) {
    logger.throwArgumentError("invalid rlp data", "data", data);
  }

  return decoded.result;
}
},{"@ethersproject/bytes":"../../node_modules/@ethersproject/bytes/lib.esm/index.js","@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","./_version":"../../node_modules/@ethersproject/rlp/lib.esm/_version.js"}],"../../node_modules/@ethersproject/address/lib.esm/_version.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.version = void 0;
const version = "address/5.6.0";
exports.version = version;
},{}],"../../node_modules/@ethersproject/address/lib.esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAddress = getAddress;
exports.getContractAddress = getContractAddress;
exports.getCreate2Address = getCreate2Address;
exports.getIcapAddress = getIcapAddress;
exports.isAddress = isAddress;

var _bytes = require("@ethersproject/bytes");

var _bignumber = require("@ethersproject/bignumber");

var _keccak = require("@ethersproject/keccak256");

var _rlp = require("@ethersproject/rlp");

var _logger = require("@ethersproject/logger");

var _version = require("./_version");

const logger = new _logger.Logger(_version.version);

function getChecksumAddress(address) {
  if (!(0, _bytes.isHexString)(address, 20)) {
    logger.throwArgumentError("invalid address", "address", address);
  }

  address = address.toLowerCase();
  const chars = address.substring(2).split("");
  const expanded = new Uint8Array(40);

  for (let i = 0; i < 40; i++) {
    expanded[i] = chars[i].charCodeAt(0);
  }

  const hashed = (0, _bytes.arrayify)((0, _keccak.keccak256)(expanded));

  for (let i = 0; i < 40; i += 2) {
    if (hashed[i >> 1] >> 4 >= 8) {
      chars[i] = chars[i].toUpperCase();
    }

    if ((hashed[i >> 1] & 0x0f) >= 8) {
      chars[i + 1] = chars[i + 1].toUpperCase();
    }
  }

  return "0x" + chars.join("");
} // Shims for environments that are missing some required constants and functions


const MAX_SAFE_INTEGER = 0x1fffffffffffff;

function log10(x) {
  if (Math.log10) {
    return Math.log10(x);
  }

  return Math.log(x) / Math.LN10;
} // See: https://en.wikipedia.org/wiki/International_Bank_Account_Number
// Create lookup table


const ibanLookup = {};

for (let i = 0; i < 10; i++) {
  ibanLookup[String(i)] = String(i);
}

for (let i = 0; i < 26; i++) {
  ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
} // How many decimal digits can we process? (for 64-bit float, this is 15)


const safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));

function ibanChecksum(address) {
  address = address.toUpperCase();
  address = address.substring(4) + address.substring(0, 2) + "00";
  let expanded = address.split("").map(c => {
    return ibanLookup[c];
  }).join(""); // Javascript can handle integers safely up to 15 (decimal) digits

  while (expanded.length >= safeDigits) {
    let block = expanded.substring(0, safeDigits);
    expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
  }

  let checksum = String(98 - parseInt(expanded, 10) % 97);

  while (checksum.length < 2) {
    checksum = "0" + checksum;
  }

  return checksum;
}

;

function getAddress(address) {
  let result = null;

  if (typeof address !== "string") {
    logger.throwArgumentError("invalid address", "address", address);
  }

  if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
    // Missing the 0x prefix
    if (address.substring(0, 2) !== "0x") {
      address = "0x" + address;
    }

    result = getChecksumAddress(address); // It is a checksummed address with a bad checksum

    if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
      logger.throwArgumentError("bad address checksum", "address", address);
    } // Maybe ICAP? (we only support direct mode)

  } else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
    // It is an ICAP address with a bad checksum
    if (address.substring(2, 4) !== ibanChecksum(address)) {
      logger.throwArgumentError("bad icap checksum", "address", address);
    }

    result = (0, _bignumber._base36To16)(address.substring(4));

    while (result.length < 40) {
      result = "0" + result;
    }

    result = getChecksumAddress("0x" + result);
  } else {
    logger.throwArgumentError("invalid address", "address", address);
  }

  return result;
}

function isAddress(address) {
  try {
    getAddress(address);
    return true;
  } catch (error) {}

  return false;
}

function getIcapAddress(address) {
  let base36 = (0, _bignumber._base16To36)(getAddress(address).substring(2)).toUpperCase();

  while (base36.length < 30) {
    base36 = "0" + base36;
  }

  return "XE" + ibanChecksum("XE00" + base36) + base36;
} // http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed


function getContractAddress(transaction) {
  let from = null;

  try {
    from = getAddress(transaction.from);
  } catch (error) {
    logger.throwArgumentError("missing from address", "transaction", transaction);
  }

  const nonce = (0, _bytes.stripZeros)((0, _bytes.arrayify)(_bignumber.BigNumber.from(transaction.nonce).toHexString()));
  return getAddress((0, _bytes.hexDataSlice)((0, _keccak.keccak256)((0, _rlp.encode)([from, nonce])), 12));
}

function getCreate2Address(from, salt, initCodeHash) {
  if ((0, _bytes.hexDataLength)(salt) !== 32) {
    logger.throwArgumentError("salt must be 32 bytes", "salt", salt);
  }

  if ((0, _bytes.hexDataLength)(initCodeHash) !== 32) {
    logger.throwArgumentError("initCodeHash must be 32 bytes", "initCodeHash", initCodeHash);
  }

  return getAddress((0, _bytes.hexDataSlice)((0, _keccak.keccak256)((0, _bytes.concat)(["0xff", getAddress(from), salt, initCodeHash])), 12));
}
},{"@ethersproject/bytes":"../../node_modules/@ethersproject/bytes/lib.esm/index.js","@ethersproject/bignumber":"../../node_modules/@ethersproject/bignumber/lib.esm/index.js","@ethersproject/keccak256":"../../node_modules/@ethersproject/keccak256/lib.esm/index.js","@ethersproject/rlp":"../../node_modules/@ethersproject/rlp/lib.esm/index.js","@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","./_version":"../../node_modules/@ethersproject/address/lib.esm/_version.js"}],"../../node_modules/@ethersproject/abi/lib.esm/coders/address.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AddressCoder = void 0;

var _address = require("@ethersproject/address");

var _bytes = require("@ethersproject/bytes");

var _abstractCoder = require("./abstract-coder");

class AddressCoder extends _abstractCoder.Coder {
  constructor(localName) {
    super("address", "address", localName, false);
  }

  defaultValue() {
    return "0x0000000000000000000000000000000000000000";
  }

  encode(writer, value) {
    try {
      value = (0, _address.getAddress)(value);
    } catch (error) {
      this._throwError(error.message, value);
    }

    return writer.writeValue(value);
  }

  decode(reader) {
    return (0, _address.getAddress)((0, _bytes.hexZeroPad)(reader.readValue().toHexString(), 20));
  }

}

exports.AddressCoder = AddressCoder;
},{"@ethersproject/address":"../../node_modules/@ethersproject/address/lib.esm/index.js","@ethersproject/bytes":"../../node_modules/@ethersproject/bytes/lib.esm/index.js","./abstract-coder":"../../node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js"}],"../../node_modules/@ethersproject/abi/lib.esm/coders/anonymous.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AnonymousCoder = void 0;

var _abstractCoder = require("./abstract-coder");

// Clones the functionality of an existing Coder, but without a localName
class AnonymousCoder extends _abstractCoder.Coder {
  constructor(coder) {
    super(coder.name, coder.type, undefined, coder.dynamic);
    this.coder = coder;
  }

  defaultValue() {
    return this.coder.defaultValue();
  }

  encode(writer, value) {
    return this.coder.encode(writer, value);
  }

  decode(reader) {
    return this.coder.decode(reader);
  }

}

exports.AnonymousCoder = AnonymousCoder;
},{"./abstract-coder":"../../node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js"}],"../../node_modules/@ethersproject/abi/lib.esm/coders/array.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ArrayCoder = void 0;
exports.pack = pack;
exports.unpack = unpack;

var _logger = require("@ethersproject/logger");

var _version = require("../_version");

var _abstractCoder = require("./abstract-coder");

var _anonymous = require("./anonymous");

const logger = new _logger.Logger(_version.version);

function pack(writer, coders, values) {
  let arrayValues = null;

  if (Array.isArray(values)) {
    arrayValues = values;
  } else if (values && typeof values === "object") {
    let unique = {};
    arrayValues = coders.map(coder => {
      const name = coder.localName;

      if (!name) {
        logger.throwError("cannot encode object for signature with missing names", _logger.Logger.errors.INVALID_ARGUMENT, {
          argument: "values",
          coder: coder,
          value: values
        });
      }

      if (unique[name]) {
        logger.throwError("cannot encode object for signature with duplicate names", _logger.Logger.errors.INVALID_ARGUMENT, {
          argument: "values",
          coder: coder,
          value: values
        });
      }

      unique[name] = true;
      return values[name];
    });
  } else {
    logger.throwArgumentError("invalid tuple value", "tuple", values);
  }

  if (coders.length !== arrayValues.length) {
    logger.throwArgumentError("types/value length mismatch", "tuple", values);
  }

  let staticWriter = new _abstractCoder.Writer(writer.wordSize);
  let dynamicWriter = new _abstractCoder.Writer(writer.wordSize);
  let updateFuncs = [];
  coders.forEach((coder, index) => {
    let value = arrayValues[index];

    if (coder.dynamic) {
      // Get current dynamic offset (for the future pointer)
      let dynamicOffset = dynamicWriter.length; // Encode the dynamic value into the dynamicWriter

      coder.encode(dynamicWriter, value); // Prepare to populate the correct offset once we are done

      let updateFunc = staticWriter.writeUpdatableValue();
      updateFuncs.push(baseOffset => {
        updateFunc(baseOffset + dynamicOffset);
      });
    } else {
      coder.encode(staticWriter, value);
    }
  }); // Backfill all the dynamic offsets, now that we know the static length

  updateFuncs.forEach(func => {
    func(staticWriter.length);
  });
  let length = writer.appendWriter(staticWriter);
  length += writer.appendWriter(dynamicWriter);
  return length;
}

function unpack(reader, coders) {
  let values = []; // A reader anchored to this base

  let baseReader = reader.subReader(0);
  coders.forEach(coder => {
    let value = null;

    if (coder.dynamic) {
      let offset = reader.readValue();
      let offsetReader = baseReader.subReader(offset.toNumber());

      try {
        value = coder.decode(offsetReader);
      } catch (error) {
        // Cannot recover from this
        if (error.code === _logger.Logger.errors.BUFFER_OVERRUN) {
          throw error;
        }

        value = error;
        value.baseType = coder.name;
        value.name = coder.localName;
        value.type = coder.type;
      }
    } else {
      try {
        value = coder.decode(reader);
      } catch (error) {
        // Cannot recover from this
        if (error.code === _logger.Logger.errors.BUFFER_OVERRUN) {
          throw error;
        }

        value = error;
        value.baseType = coder.name;
        value.name = coder.localName;
        value.type = coder.type;
      }
    }

    if (value != undefined) {
      values.push(value);
    }
  }); // We only output named properties for uniquely named coders

  const uniqueNames = coders.reduce((accum, coder) => {
    const name = coder.localName;

    if (name) {
      if (!accum[name]) {
        accum[name] = 0;
      }

      accum[name]++;
    }

    return accum;
  }, {}); // Add any named parameters (i.e. tuples)

  coders.forEach((coder, index) => {
    let name = coder.localName;

    if (!name || uniqueNames[name] !== 1) {
      return;
    }

    if (name === "length") {
      name = "_length";
    }

    if (values[name] != null) {
      return;
    }

    const value = values[index];

    if (value instanceof Error) {
      Object.defineProperty(values, name, {
        enumerable: true,
        get: () => {
          throw value;
        }
      });
    } else {
      values[name] = value;
    }
  });

  for (let i = 0; i < values.length; i++) {
    const value = values[i];

    if (value instanceof Error) {
      Object.defineProperty(values, i, {
        enumerable: true,
        get: () => {
          throw value;
        }
      });
    }
  }

  return Object.freeze(values);
}

class ArrayCoder extends _abstractCoder.Coder {
  constructor(coder, length, localName) {
    const type = coder.type + "[" + (length >= 0 ? length : "") + "]";
    const dynamic = length === -1 || coder.dynamic;
    super("array", type, localName, dynamic);
    this.coder = coder;
    this.length = length;
  }

  defaultValue() {
    // Verifies the child coder is valid (even if the array is dynamic or 0-length)
    const defaultChild = this.coder.defaultValue();
    const result = [];

    for (let i = 0; i < this.length; i++) {
      result.push(defaultChild);
    }

    return result;
  }

  encode(writer, value) {
    if (!Array.isArray(value)) {
      this._throwError("expected array value", value);
    }

    let count = this.length;

    if (count === -1) {
      count = value.length;
      writer.writeValue(value.length);
    }

    logger.checkArgumentCount(value.length, count, "coder array" + (this.localName ? " " + this.localName : ""));
    let coders = [];

    for (let i = 0; i < value.length; i++) {
      coders.push(this.coder);
    }

    return pack(writer, coders, value);
  }

  decode(reader) {
    let count = this.length;

    if (count === -1) {
      count = reader.readValue().toNumber(); // Check that there is *roughly* enough data to ensure
      // stray random data is not being read as a length. Each
      // slot requires at least 32 bytes for their value (or 32
      // bytes as a link to the data). This could use a much
      // tighter bound, but we are erroring on the side of safety.

      if (count * 32 > reader._data.length) {
        logger.throwError("insufficient data length", _logger.Logger.errors.BUFFER_OVERRUN, {
          length: reader._data.length,
          count: count
        });
      }
    }

    let coders = [];

    for (let i = 0; i < count; i++) {
      coders.push(new _anonymous.AnonymousCoder(this.coder));
    }

    return reader.coerce(this.name, unpack(reader, coders));
  }

}

exports.ArrayCoder = ArrayCoder;
},{"@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","../_version":"../../node_modules/@ethersproject/abi/lib.esm/_version.js","./abstract-coder":"../../node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js","./anonymous":"../../node_modules/@ethersproject/abi/lib.esm/coders/anonymous.js"}],"../../node_modules/@ethersproject/abi/lib.esm/coders/boolean.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BooleanCoder = void 0;

var _abstractCoder = require("./abstract-coder");

class BooleanCoder extends _abstractCoder.Coder {
  constructor(localName) {
    super("bool", "bool", localName, false);
  }

  defaultValue() {
    return false;
  }

  encode(writer, value) {
    return writer.writeValue(value ? 1 : 0);
  }

  decode(reader) {
    return reader.coerce(this.type, !reader.readValue().isZero());
  }

}

exports.BooleanCoder = BooleanCoder;
},{"./abstract-coder":"../../node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js"}],"../../node_modules/@ethersproject/abi/lib.esm/coders/bytes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DynamicBytesCoder = exports.BytesCoder = void 0;

var _bytes = require("@ethersproject/bytes");

var _abstractCoder = require("./abstract-coder");

class DynamicBytesCoder extends _abstractCoder.Coder {
  constructor(type, localName) {
    super(type, type, localName, true);
  }

  defaultValue() {
    return "0x";
  }

  encode(writer, value) {
    value = (0, _bytes.arrayify)(value);
    let length = writer.writeValue(value.length);
    length += writer.writeBytes(value);
    return length;
  }

  decode(reader) {
    return reader.readBytes(reader.readValue().toNumber(), true);
  }

}

exports.DynamicBytesCoder = DynamicBytesCoder;

class BytesCoder extends DynamicBytesCoder {
  constructor(localName) {
    super("bytes", localName);
  }

  decode(reader) {
    return reader.coerce(this.name, (0, _bytes.hexlify)(super.decode(reader)));
  }

}

exports.BytesCoder = BytesCoder;
},{"@ethersproject/bytes":"../../node_modules/@ethersproject/bytes/lib.esm/index.js","./abstract-coder":"../../node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js"}],"../../node_modules/@ethersproject/abi/lib.esm/coders/fixed-bytes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FixedBytesCoder = void 0;

var _bytes = require("@ethersproject/bytes");

var _abstractCoder = require("./abstract-coder");

// @TODO: Merge this with bytes
class FixedBytesCoder extends _abstractCoder.Coder {
  constructor(size, localName) {
    let name = "bytes" + String(size);
    super(name, name, localName, false);
    this.size = size;
  }

  defaultValue() {
    return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + this.size * 2);
  }

  encode(writer, value) {
    let data = (0, _bytes.arrayify)(value);

    if (data.length !== this.size) {
      this._throwError("incorrect data length", value);
    }

    return writer.writeBytes(data);
  }

  decode(reader) {
    return reader.coerce(this.name, (0, _bytes.hexlify)(reader.readBytes(this.size)));
  }

}

exports.FixedBytesCoder = FixedBytesCoder;
},{"@ethersproject/bytes":"../../node_modules/@ethersproject/bytes/lib.esm/index.js","./abstract-coder":"../../node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js"}],"../../node_modules/@ethersproject/abi/lib.esm/coders/null.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NullCoder = void 0;

var _abstractCoder = require("./abstract-coder");

class NullCoder extends _abstractCoder.Coder {
  constructor(localName) {
    super("null", "", localName, false);
  }

  defaultValue() {
    return null;
  }

  encode(writer, value) {
    if (value != null) {
      this._throwError("not null", value);
    }

    return writer.writeBytes([]);
  }

  decode(reader) {
    reader.readBytes(0);
    return reader.coerce(this.name, null);
  }

}

exports.NullCoder = NullCoder;
},{"./abstract-coder":"../../node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js"}],"../../node_modules/@ethersproject/constants/lib.esm/addresses.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AddressZero = void 0;
const AddressZero = "0x0000000000000000000000000000000000000000";
exports.AddressZero = AddressZero;
},{}],"../../node_modules/@ethersproject/constants/lib.esm/bignumbers.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Zero = exports.WeiPerEther = exports.Two = exports.One = exports.NegativeOne = exports.MinInt256 = exports.MaxUint256 = exports.MaxInt256 = void 0;

var _bignumber = require("@ethersproject/bignumber");

const NegativeOne = /*#__PURE__*/_bignumber.BigNumber.from(-1);

exports.NegativeOne = NegativeOne;

const Zero = /*#__PURE__*/_bignumber.BigNumber.from(0);

exports.Zero = Zero;

const One = /*#__PURE__*/_bignumber.BigNumber.from(1);

exports.One = One;

const Two = /*#__PURE__*/_bignumber.BigNumber.from(2);

exports.Two = Two;

const WeiPerEther = /*#__PURE__*/_bignumber.BigNumber.from("1000000000000000000");

exports.WeiPerEther = WeiPerEther;

const MaxUint256 = /*#__PURE__*/_bignumber.BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");

exports.MaxUint256 = MaxUint256;

const MinInt256 = /*#__PURE__*/_bignumber.BigNumber.from("-0x8000000000000000000000000000000000000000000000000000000000000000");

exports.MinInt256 = MinInt256;

const MaxInt256 = /*#__PURE__*/_bignumber.BigNumber.from("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");

exports.MaxInt256 = MaxInt256;
},{"@ethersproject/bignumber":"../../node_modules/@ethersproject/bignumber/lib.esm/index.js"}],"../../node_modules/@ethersproject/constants/lib.esm/hashes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HashZero = void 0;
const HashZero = "0x0000000000000000000000000000000000000000000000000000000000000000";
exports.HashZero = HashZero;
},{}],"../../node_modules/@ethersproject/constants/lib.esm/strings.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EtherSymbol = void 0;
// NFKC (composed)             // (decomposed)
const EtherSymbol = "\u039e"; // "\uD835\uDF63";

exports.EtherSymbol = EtherSymbol;
},{}],"../../node_modules/@ethersproject/constants/lib.esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "AddressZero", {
  enumerable: true,
  get: function () {
    return _addresses.AddressZero;
  }
});
Object.defineProperty(exports, "EtherSymbol", {
  enumerable: true,
  get: function () {
    return _strings.EtherSymbol;
  }
});
Object.defineProperty(exports, "HashZero", {
  enumerable: true,
  get: function () {
    return _hashes.HashZero;
  }
});
Object.defineProperty(exports, "MaxInt256", {
  enumerable: true,
  get: function () {
    return _bignumbers.MaxInt256;
  }
});
Object.defineProperty(exports, "MaxUint256", {
  enumerable: true,
  get: function () {
    return _bignumbers.MaxUint256;
  }
});
Object.defineProperty(exports, "MinInt256", {
  enumerable: true,
  get: function () {
    return _bignumbers.MinInt256;
  }
});
Object.defineProperty(exports, "NegativeOne", {
  enumerable: true,
  get: function () {
    return _bignumbers.NegativeOne;
  }
});
Object.defineProperty(exports, "One", {
  enumerable: true,
  get: function () {
    return _bignumbers.One;
  }
});
Object.defineProperty(exports, "Two", {
  enumerable: true,
  get: function () {
    return _bignumbers.Two;
  }
});
Object.defineProperty(exports, "WeiPerEther", {
  enumerable: true,
  get: function () {
    return _bignumbers.WeiPerEther;
  }
});
Object.defineProperty(exports, "Zero", {
  enumerable: true,
  get: function () {
    return _bignumbers.Zero;
  }
});

var _addresses = require("./addresses");

var _bignumbers = require("./bignumbers");

var _hashes = require("./hashes");

var _strings = require("./strings");
},{"./addresses":"../../node_modules/@ethersproject/constants/lib.esm/addresses.js","./bignumbers":"../../node_modules/@ethersproject/constants/lib.esm/bignumbers.js","./hashes":"../../node_modules/@ethersproject/constants/lib.esm/hashes.js","./strings":"../../node_modules/@ethersproject/constants/lib.esm/strings.js"}],"../../node_modules/@ethersproject/abi/lib.esm/coders/number.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NumberCoder = void 0;

var _bignumber = require("@ethersproject/bignumber");

var _constants = require("@ethersproject/constants");

var _abstractCoder = require("./abstract-coder");

class NumberCoder extends _abstractCoder.Coder {
  constructor(size, signed, localName) {
    const name = (signed ? "int" : "uint") + size * 8;
    super(name, name, localName, false);
    this.size = size;
    this.signed = signed;
  }

  defaultValue() {
    return 0;
  }

  encode(writer, value) {
    let v = _bignumber.BigNumber.from(value); // Check bounds are safe for encoding


    let maxUintValue = _constants.MaxUint256.mask(writer.wordSize * 8);

    if (this.signed) {
      let bounds = maxUintValue.mask(this.size * 8 - 1);

      if (v.gt(bounds) || v.lt(bounds.add(_constants.One).mul(_constants.NegativeOne))) {
        this._throwError("value out-of-bounds", value);
      }
    } else if (v.lt(_constants.Zero) || v.gt(maxUintValue.mask(this.size * 8))) {
      this._throwError("value out-of-bounds", value);
    }

    v = v.toTwos(this.size * 8).mask(this.size * 8);

    if (this.signed) {
      v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);
    }

    return writer.writeValue(v);
  }

  decode(reader) {
    let value = reader.readValue().mask(this.size * 8);

    if (this.signed) {
      value = value.fromTwos(this.size * 8);
    }

    return reader.coerce(this.name, value);
  }

}

exports.NumberCoder = NumberCoder;
},{"@ethersproject/bignumber":"../../node_modules/@ethersproject/bignumber/lib.esm/index.js","@ethersproject/constants":"../../node_modules/@ethersproject/constants/lib.esm/index.js","./abstract-coder":"../../node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js"}],"../../node_modules/@ethersproject/strings/lib.esm/_version.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.version = void 0;
const version = "strings/5.6.0";
exports.version = version;
},{}],"../../node_modules/@ethersproject/strings/lib.esm/utf8.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Utf8ErrorReason = exports.Utf8ErrorFuncs = exports.UnicodeNormalizationForm = void 0;
exports._toEscapedUtf8String = _toEscapedUtf8String;
exports._toUtf8String = _toUtf8String;
exports.toUtf8Bytes = toUtf8Bytes;
exports.toUtf8CodePoints = toUtf8CodePoints;
exports.toUtf8String = toUtf8String;

var _bytes = require("@ethersproject/bytes");

var _logger = require("@ethersproject/logger");

var _version = require("./_version");

const logger = new _logger.Logger(_version.version); ///////////////////////////////

var UnicodeNormalizationForm;
exports.UnicodeNormalizationForm = UnicodeNormalizationForm;

(function (UnicodeNormalizationForm) {
  UnicodeNormalizationForm["current"] = "";
  UnicodeNormalizationForm["NFC"] = "NFC";
  UnicodeNormalizationForm["NFD"] = "NFD";
  UnicodeNormalizationForm["NFKC"] = "NFKC";
  UnicodeNormalizationForm["NFKD"] = "NFKD";
})(UnicodeNormalizationForm || (exports.UnicodeNormalizationForm = UnicodeNormalizationForm = {}));

;
var Utf8ErrorReason;
exports.Utf8ErrorReason = Utf8ErrorReason;

(function (Utf8ErrorReason) {
  // A continuation byte was present where there was nothing to continue
  // - offset = the index the codepoint began in
  Utf8ErrorReason["UNEXPECTED_CONTINUE"] = "unexpected continuation byte"; // An invalid (non-continuation) byte to start a UTF-8 codepoint was found
  // - offset = the index the codepoint began in

  Utf8ErrorReason["BAD_PREFIX"] = "bad codepoint prefix"; // The string is too short to process the expected codepoint
  // - offset = the index the codepoint began in

  Utf8ErrorReason["OVERRUN"] = "string overrun"; // A missing continuation byte was expected but not found
  // - offset = the index the continuation byte was expected at

  Utf8ErrorReason["MISSING_CONTINUE"] = "missing continuation byte"; // The computed code point is outside the range for UTF-8
  // - offset       = start of this codepoint
  // - badCodepoint = the computed codepoint; outside the UTF-8 range

  Utf8ErrorReason["OUT_OF_RANGE"] = "out of UTF-8 range"; // UTF-8 strings may not contain UTF-16 surrogate pairs
  // - offset       = start of this codepoint
  // - badCodepoint = the computed codepoint; inside the UTF-16 surrogate range

  Utf8ErrorReason["UTF16_SURROGATE"] = "UTF-16 surrogate"; // The string is an overlong representation
  // - offset       = start of this codepoint
  // - badCodepoint = the computed codepoint; already bounds checked

  Utf8ErrorReason["OVERLONG"] = "overlong representation";
})(Utf8ErrorReason || (exports.Utf8ErrorReason = Utf8ErrorReason = {}));

;

function errorFunc(reason, offset, bytes, output, badCodepoint) {
  return logger.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes);
}

function ignoreFunc(reason, offset, bytes, output, badCodepoint) {
  // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes
  if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {
    let i = 0;

    for (let o = offset + 1; o < bytes.length; o++) {
      if (bytes[o] >> 6 !== 0x02) {
        break;
      }

      i++;
    }

    return i;
  } // This byte runs us past the end of the string, so just jump to the end
  // (but the first byte was read already read and therefore skipped)


  if (reason === Utf8ErrorReason.OVERRUN) {
    return bytes.length - offset - 1;
  } // Nothing to skip


  return 0;
}

function replaceFunc(reason, offset, bytes, output, badCodepoint) {
  // Overlong representations are otherwise "valid" code points; just non-deistingtished
  if (reason === Utf8ErrorReason.OVERLONG) {
    output.push(badCodepoint);
    return 0;
  } // Put the replacement character into the output


  output.push(0xfffd); // Otherwise, process as if ignoring errors

  return ignoreFunc(reason, offset, bytes, output, badCodepoint);
} // Common error handing strategies


const Utf8ErrorFuncs = Object.freeze({
  error: errorFunc,
  ignore: ignoreFunc,
  replace: replaceFunc
}); // http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499

exports.Utf8ErrorFuncs = Utf8ErrorFuncs;

function getUtf8CodePoints(bytes, onError) {
  if (onError == null) {
    onError = Utf8ErrorFuncs.error;
  }

  bytes = (0, _bytes.arrayify)(bytes);
  const result = [];
  let i = 0; // Invalid bytes are ignored

  while (i < bytes.length) {
    const c = bytes[i++]; // 0xxx xxxx

    if (c >> 7 === 0) {
      result.push(c);
      continue;
    } // Multibyte; how many bytes left for this character?


    let extraLength = null;
    let overlongMask = null; // 110x xxxx 10xx xxxx

    if ((c & 0xe0) === 0xc0) {
      extraLength = 1;
      overlongMask = 0x7f; // 1110 xxxx 10xx xxxx 10xx xxxx
    } else if ((c & 0xf0) === 0xe0) {
      extraLength = 2;
      overlongMask = 0x7ff; // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx
    } else if ((c & 0xf8) === 0xf0) {
      extraLength = 3;
      overlongMask = 0xffff;
    } else {
      if ((c & 0xc0) === 0x80) {
        i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);
      } else {
        i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);
      }

      continue;
    } // Do we have enough bytes in our data?


    if (i - 1 + extraLength >= bytes.length) {
      i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);
      continue;
    } // Remove the length prefix from the char


    let res = c & (1 << 8 - extraLength - 1) - 1;

    for (let j = 0; j < extraLength; j++) {
      let nextChar = bytes[i]; // Invalid continuation byte

      if ((nextChar & 0xc0) != 0x80) {
        i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);
        res = null;
        break;
      }

      ;
      res = res << 6 | nextChar & 0x3f;
      i++;
    } // See above loop for invalid continuation byte


    if (res === null) {
      continue;
    } // Maximum code point


    if (res > 0x10ffff) {
      i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);
      continue;
    } // Reserved for UTF-16 surrogate halves


    if (res >= 0xd800 && res <= 0xdfff) {
      i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);
      continue;
    } // Check for overlong sequences (more bytes than needed)


    if (res <= overlongMask) {
      i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);
      continue;
    }

    result.push(res);
  }

  return result;
} // http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array


function toUtf8Bytes(str, form = UnicodeNormalizationForm.current) {
  if (form != UnicodeNormalizationForm.current) {
    logger.checkNormalize();
    str = str.normalize(form);
  }

  let result = [];

  for (let i = 0; i < str.length; i++) {
    const c = str.charCodeAt(i);

    if (c < 0x80) {
      result.push(c);
    } else if (c < 0x800) {
      result.push(c >> 6 | 0xc0);
      result.push(c & 0x3f | 0x80);
    } else if ((c & 0xfc00) == 0xd800) {
      i++;
      const c2 = str.charCodeAt(i);

      if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {
        throw new Error("invalid utf-8 string");
      } // Surrogate Pair


      const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);
      result.push(pair >> 18 | 0xf0);
      result.push(pair >> 12 & 0x3f | 0x80);
      result.push(pair >> 6 & 0x3f | 0x80);
      result.push(pair & 0x3f | 0x80);
    } else {
      result.push(c >> 12 | 0xe0);
      result.push(c >> 6 & 0x3f | 0x80);
      result.push(c & 0x3f | 0x80);
    }
  }

  return (0, _bytes.arrayify)(result);
}

;

function escapeChar(value) {
  const hex = "0000" + value.toString(16);
  return "\\u" + hex.substring(hex.length - 4);
}

function _toEscapedUtf8String(bytes, onError) {
  return '"' + getUtf8CodePoints(bytes, onError).map(codePoint => {
    if (codePoint < 256) {
      switch (codePoint) {
        case 8:
          return "\\b";

        case 9:
          return "\\t";

        case 10:
          return "\\n";

        case 13:
          return "\\r";

        case 34:
          return "\\\"";

        case 92:
          return "\\\\";
      }

      if (codePoint >= 32 && codePoint < 127) {
        return String.fromCharCode(codePoint);
      }
    }

    if (codePoint <= 0xffff) {
      return escapeChar(codePoint);
    }

    codePoint -= 0x10000;
    return escapeChar((codePoint >> 10 & 0x3ff) + 0xd800) + escapeChar((codePoint & 0x3ff) + 0xdc00);
  }).join("") + '"';
}

function _toUtf8String(codePoints) {
  return codePoints.map(codePoint => {
    if (codePoint <= 0xffff) {
      return String.fromCharCode(codePoint);
    }

    codePoint -= 0x10000;
    return String.fromCharCode((codePoint >> 10 & 0x3ff) + 0xd800, (codePoint & 0x3ff) + 0xdc00);
  }).join("");
}

function toUtf8String(bytes, onError) {
  return _toUtf8String(getUtf8CodePoints(bytes, onError));
}

function toUtf8CodePoints(str, form = UnicodeNormalizationForm.current) {
  return getUtf8CodePoints(toUtf8Bytes(str, form));
}
},{"@ethersproject/bytes":"../../node_modules/@ethersproject/bytes/lib.esm/index.js","@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","./_version":"../../node_modules/@ethersproject/strings/lib.esm/_version.js"}],"../../node_modules/@ethersproject/strings/lib.esm/bytes32.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatBytes32String = formatBytes32String;
exports.parseBytes32String = parseBytes32String;

var _constants = require("@ethersproject/constants");

var _bytes = require("@ethersproject/bytes");

var _utf = require("./utf8");

function formatBytes32String(text) {
  // Get the bytes
  const bytes = (0, _utf.toUtf8Bytes)(text); // Check we have room for null-termination

  if (bytes.length > 31) {
    throw new Error("bytes32 string must be less than 32 bytes");
  } // Zero-pad (implicitly null-terminates)


  return (0, _bytes.hexlify)((0, _bytes.concat)([bytes, _constants.HashZero]).slice(0, 32));
}

function parseBytes32String(bytes) {
  const data = (0, _bytes.arrayify)(bytes); // Must be 32 bytes with a null-termination

  if (data.length !== 32) {
    throw new Error("invalid bytes32 - not 32 bytes long");
  }

  if (data[31] !== 0) {
    throw new Error("invalid bytes32 string - no null terminator");
  } // Find the null termination


  let length = 31;

  while (data[length - 1] === 0) {
    length--;
  } // Determine the string value


  return (0, _utf.toUtf8String)(data.slice(0, length));
}
},{"@ethersproject/constants":"../../node_modules/@ethersproject/constants/lib.esm/index.js","@ethersproject/bytes":"../../node_modules/@ethersproject/bytes/lib.esm/index.js","./utf8":"../../node_modules/@ethersproject/strings/lib.esm/utf8.js"}],"../../node_modules/@ethersproject/strings/lib.esm/idna.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._nameprepTableA1 = _nameprepTableA1;
exports._nameprepTableB2 = _nameprepTableB2;
exports._nameprepTableC = _nameprepTableC;
exports.nameprep = nameprep;

var _utf = require("./utf8");

function bytes2(data) {
  if (data.length % 4 !== 0) {
    throw new Error("bad data");
  }

  let result = [];

  for (let i = 0; i < data.length; i += 4) {
    result.push(parseInt(data.substring(i, i + 4), 16));
  }

  return result;
}

function createTable(data, func) {
  if (!func) {
    func = function (value) {
      return [parseInt(value, 16)];
    };
  }

  let lo = 0;
  let result = {};
  data.split(",").forEach(pair => {
    let comps = pair.split(":");
    lo += parseInt(comps[0], 16);
    result[lo] = func(comps[1]);
  });
  return result;
}

function createRangeTable(data) {
  let hi = 0;
  return data.split(",").map(v => {
    let comps = v.split("-");

    if (comps.length === 1) {
      comps[1] = "0";
    } else if (comps[1] === "") {
      comps[1] = "1";
    }

    let lo = hi + parseInt(comps[0], 16);
    hi = parseInt(comps[1], 16);
    return {
      l: lo,
      h: hi
    };
  });
}

function matchMap(value, ranges) {
  let lo = 0;

  for (let i = 0; i < ranges.length; i++) {
    let range = ranges[i];
    lo += range.l;

    if (value >= lo && value <= lo + range.h && (value - lo) % (range.d || 1) === 0) {
      if (range.e && range.e.indexOf(value - lo) !== -1) {
        continue;
      }

      return range;
    }
  }

  return null;
}

const Table_A_1_ranges = createRangeTable("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d"); // @TODO: Make this relative...

const Table_B_1_flags = "ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map(v => parseInt(v, 16));
const Table_B_2_ranges = [{
  h: 25,
  s: 32,
  l: 65
}, {
  h: 30,
  s: 32,
  e: [23],
  l: 127
}, {
  h: 54,
  s: 1,
  e: [48],
  l: 64,
  d: 2
}, {
  h: 14,
  s: 1,
  l: 57,
  d: 2
}, {
  h: 44,
  s: 1,
  l: 17,
  d: 2
}, {
  h: 10,
  s: 1,
  e: [2, 6, 8],
  l: 61,
  d: 2
}, {
  h: 16,
  s: 1,
  l: 68,
  d: 2
}, {
  h: 84,
  s: 1,
  e: [18, 24, 66],
  l: 19,
  d: 2
}, {
  h: 26,
  s: 32,
  e: [17],
  l: 435
}, {
  h: 22,
  s: 1,
  l: 71,
  d: 2
}, {
  h: 15,
  s: 80,
  l: 40
}, {
  h: 31,
  s: 32,
  l: 16
}, {
  h: 32,
  s: 1,
  l: 80,
  d: 2
}, {
  h: 52,
  s: 1,
  l: 42,
  d: 2
}, {
  h: 12,
  s: 1,
  l: 55,
  d: 2
}, {
  h: 40,
  s: 1,
  e: [38],
  l: 15,
  d: 2
}, {
  h: 14,
  s: 1,
  l: 48,
  d: 2
}, {
  h: 37,
  s: 48,
  l: 49
}, {
  h: 148,
  s: 1,
  l: 6351,
  d: 2
}, {
  h: 88,
  s: 1,
  l: 160,
  d: 2
}, {
  h: 15,
  s: 16,
  l: 704
}, {
  h: 25,
  s: 26,
  l: 854
}, {
  h: 25,
  s: 32,
  l: 55915
}, {
  h: 37,
  s: 40,
  l: 1247
}, {
  h: 25,
  s: -119711,
  l: 53248
}, {
  h: 25,
  s: -119763,
  l: 52
}, {
  h: 25,
  s: -119815,
  l: 52
}, {
  h: 25,
  s: -119867,
  e: [1, 4, 5, 7, 8, 11, 12, 17],
  l: 52
}, {
  h: 25,
  s: -119919,
  l: 52
}, {
  h: 24,
  s: -119971,
  e: [2, 7, 8, 17],
  l: 52
}, {
  h: 24,
  s: -120023,
  e: [2, 7, 13, 15, 16, 17],
  l: 52
}, {
  h: 25,
  s: -120075,
  l: 52
}, {
  h: 25,
  s: -120127,
  l: 52
}, {
  h: 25,
  s: -120179,
  l: 52
}, {
  h: 25,
  s: -120231,
  l: 52
}, {
  h: 25,
  s: -120283,
  l: 52
}, {
  h: 25,
  s: -120335,
  l: 52
}, {
  h: 24,
  s: -119543,
  e: [17],
  l: 56
}, {
  h: 24,
  s: -119601,
  e: [17],
  l: 58
}, {
  h: 24,
  s: -119659,
  e: [17],
  l: 58
}, {
  h: 24,
  s: -119717,
  e: [17],
  l: 58
}, {
  h: 24,
  s: -119775,
  e: [17],
  l: 58
}];
const Table_B_2_lut_abs = createTable("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3");
const Table_B_2_lut_rel = createTable("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7");
const Table_B_2_complex = createTable("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D", bytes2);
const Table_C_ranges = createRangeTable("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");

function flatten(values) {
  return values.reduce((accum, value) => {
    value.forEach(value => {
      accum.push(value);
    });
    return accum;
  }, []);
}

function _nameprepTableA1(codepoint) {
  return !!matchMap(codepoint, Table_A_1_ranges);
}

function _nameprepTableB2(codepoint) {
  let range = matchMap(codepoint, Table_B_2_ranges);

  if (range) {
    return [codepoint + range.s];
  }

  let codes = Table_B_2_lut_abs[codepoint];

  if (codes) {
    return codes;
  }

  let shift = Table_B_2_lut_rel[codepoint];

  if (shift) {
    return [codepoint + shift[0]];
  }

  let complex = Table_B_2_complex[codepoint];

  if (complex) {
    return complex;
  }

  return null;
}

function _nameprepTableC(codepoint) {
  return !!matchMap(codepoint, Table_C_ranges);
}

function nameprep(value) {
  // This allows platforms with incomplete normalize to bypass
  // it for very basic names which the built-in toLowerCase
  // will certainly handle correctly
  if (value.match(/^[a-z0-9-]*$/i) && value.length <= 59) {
    return value.toLowerCase();
  } // Get the code points (keeping the current normalization)


  let codes = (0, _utf.toUtf8CodePoints)(value);
  codes = flatten(codes.map(code => {
    // Substitute Table B.1 (Maps to Nothing)
    if (Table_B_1_flags.indexOf(code) >= 0) {
      return [];
    }

    if (code >= 0xfe00 && code <= 0xfe0f) {
      return [];
    } // Substitute Table B.2 (Case Folding)


    let codesTableB2 = _nameprepTableB2(code);

    if (codesTableB2) {
      return codesTableB2;
    } // No Substitution


    return [code];
  })); // Normalize using form KC

  codes = (0, _utf.toUtf8CodePoints)((0, _utf._toUtf8String)(codes), _utf.UnicodeNormalizationForm.NFKC); // Prohibit Tables C.1.2, C.2.2, C.3, C.4, C.5, C.6, C.7, C.8, C.9

  codes.forEach(code => {
    if (_nameprepTableC(code)) {
      throw new Error("STRINGPREP_CONTAINS_PROHIBITED");
    }
  }); // Prohibit Unassigned Code Points (Table A.1)

  codes.forEach(code => {
    if (_nameprepTableA1(code)) {
      throw new Error("STRINGPREP_CONTAINS_UNASSIGNED");
    }
  }); // IDNA extras

  let name = (0, _utf._toUtf8String)(codes); // IDNA: 4.2.3.1

  if (name.substring(0, 1) === "-" || name.substring(2, 4) === "--" || name.substring(name.length - 1) === "-") {
    throw new Error("invalid hyphen");
  } // IDNA: 4.2.4


  if (name.length > 63) {
    throw new Error("too long");
  }

  return name;
}
},{"./utf8":"../../node_modules/@ethersproject/strings/lib.esm/utf8.js"}],"../../node_modules/@ethersproject/strings/lib.esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "UnicodeNormalizationForm", {
  enumerable: true,
  get: function () {
    return _utf.UnicodeNormalizationForm;
  }
});
Object.defineProperty(exports, "Utf8ErrorFuncs", {
  enumerable: true,
  get: function () {
    return _utf.Utf8ErrorFuncs;
  }
});
Object.defineProperty(exports, "Utf8ErrorReason", {
  enumerable: true,
  get: function () {
    return _utf.Utf8ErrorReason;
  }
});
Object.defineProperty(exports, "_toEscapedUtf8String", {
  enumerable: true,
  get: function () {
    return _utf._toEscapedUtf8String;
  }
});
Object.defineProperty(exports, "formatBytes32String", {
  enumerable: true,
  get: function () {
    return _bytes.formatBytes32String;
  }
});
Object.defineProperty(exports, "nameprep", {
  enumerable: true,
  get: function () {
    return _idna.nameprep;
  }
});
Object.defineProperty(exports, "parseBytes32String", {
  enumerable: true,
  get: function () {
    return _bytes.parseBytes32String;
  }
});
Object.defineProperty(exports, "toUtf8Bytes", {
  enumerable: true,
  get: function () {
    return _utf.toUtf8Bytes;
  }
});
Object.defineProperty(exports, "toUtf8CodePoints", {
  enumerable: true,
  get: function () {
    return _utf.toUtf8CodePoints;
  }
});
Object.defineProperty(exports, "toUtf8String", {
  enumerable: true,
  get: function () {
    return _utf.toUtf8String;
  }
});

var _bytes = require("./bytes32");

var _idna = require("./idna");

var _utf = require("./utf8");
},{"./bytes32":"../../node_modules/@ethersproject/strings/lib.esm/bytes32.js","./idna":"../../node_modules/@ethersproject/strings/lib.esm/idna.js","./utf8":"../../node_modules/@ethersproject/strings/lib.esm/utf8.js"}],"../../node_modules/@ethersproject/abi/lib.esm/coders/string.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StringCoder = void 0;

var _strings = require("@ethersproject/strings");

var _bytes = require("./bytes");

class StringCoder extends _bytes.DynamicBytesCoder {
  constructor(localName) {
    super("string", localName);
  }

  defaultValue() {
    return "";
  }

  encode(writer, value) {
    return super.encode(writer, (0, _strings.toUtf8Bytes)(value));
  }

  decode(reader) {
    return (0, _strings.toUtf8String)(super.decode(reader));
  }

}

exports.StringCoder = StringCoder;
},{"@ethersproject/strings":"../../node_modules/@ethersproject/strings/lib.esm/index.js","./bytes":"../../node_modules/@ethersproject/abi/lib.esm/coders/bytes.js"}],"../../node_modules/@ethersproject/abi/lib.esm/coders/tuple.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TupleCoder = void 0;

var _abstractCoder = require("./abstract-coder");

var _array = require("./array");

class TupleCoder extends _abstractCoder.Coder {
  constructor(coders, localName) {
    let dynamic = false;
    const types = [];
    coders.forEach(coder => {
      if (coder.dynamic) {
        dynamic = true;
      }

      types.push(coder.type);
    });
    const type = "tuple(" + types.join(",") + ")";
    super("tuple", type, localName, dynamic);
    this.coders = coders;
  }

  defaultValue() {
    const values = [];
    this.coders.forEach(coder => {
      values.push(coder.defaultValue());
    }); // We only output named properties for uniquely named coders

    const uniqueNames = this.coders.reduce((accum, coder) => {
      const name = coder.localName;

      if (name) {
        if (!accum[name]) {
          accum[name] = 0;
        }

        accum[name]++;
      }

      return accum;
    }, {}); // Add named values

    this.coders.forEach((coder, index) => {
      let name = coder.localName;

      if (!name || uniqueNames[name] !== 1) {
        return;
      }

      if (name === "length") {
        name = "_length";
      }

      if (values[name] != null) {
        return;
      }

      values[name] = values[index];
    });
    return Object.freeze(values);
  }

  encode(writer, value) {
    return (0, _array.pack)(writer, this.coders, value);
  }

  decode(reader) {
    return reader.coerce(this.name, (0, _array.unpack)(reader, this.coders));
  }

}

exports.TupleCoder = TupleCoder;
},{"./abstract-coder":"../../node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js","./array":"../../node_modules/@ethersproject/abi/lib.esm/coders/array.js"}],"../../node_modules/@ethersproject/abi/lib.esm/abi-coder.js":[function(require,module,exports) {
"use strict"; // See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultAbiCoder = exports.AbiCoder = void 0;

var _bytes = require("@ethersproject/bytes");

var _properties = require("@ethersproject/properties");

var _logger = require("@ethersproject/logger");

var _version = require("./_version");

var _abstractCoder = require("./coders/abstract-coder");

var _address = require("./coders/address");

var _array = require("./coders/array");

var _boolean = require("./coders/boolean");

var _bytes2 = require("./coders/bytes");

var _fixedBytes = require("./coders/fixed-bytes");

var _null = require("./coders/null");

var _number = require("./coders/number");

var _string = require("./coders/string");

var _tuple = require("./coders/tuple");

var _fragments = require("./fragments");

const logger = new _logger.Logger(_version.version);
const paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
const paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);

class AbiCoder {
  constructor(coerceFunc) {
    logger.checkNew(new.target, AbiCoder);
    (0, _properties.defineReadOnly)(this, "coerceFunc", coerceFunc || null);
  }

  _getCoder(param) {
    switch (param.baseType) {
      case "address":
        return new _address.AddressCoder(param.name);

      case "bool":
        return new _boolean.BooleanCoder(param.name);

      case "string":
        return new _string.StringCoder(param.name);

      case "bytes":
        return new _bytes2.BytesCoder(param.name);

      case "array":
        return new _array.ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);

      case "tuple":
        return new _tuple.TupleCoder((param.components || []).map(component => {
          return this._getCoder(component);
        }), param.name);

      case "":
        return new _null.NullCoder(param.name);
    } // u?int[0-9]*


    let match = param.type.match(paramTypeNumber);

    if (match) {
      let size = parseInt(match[2] || "256");

      if (size === 0 || size > 256 || size % 8 !== 0) {
        logger.throwArgumentError("invalid " + match[1] + " bit length", "param", param);
      }

      return new _number.NumberCoder(size / 8, match[1] === "int", param.name);
    } // bytes[0-9]+


    match = param.type.match(paramTypeBytes);

    if (match) {
      let size = parseInt(match[1]);

      if (size === 0 || size > 32) {
        logger.throwArgumentError("invalid bytes length", "param", param);
      }

      return new _fixedBytes.FixedBytesCoder(size, param.name);
    }

    return logger.throwArgumentError("invalid type", "type", param.type);
  }

  _getWordSize() {
    return 32;
  }

  _getReader(data, allowLoose) {
    return new _abstractCoder.Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);
  }

  _getWriter() {
    return new _abstractCoder.Writer(this._getWordSize());
  }

  getDefaultValue(types) {
    const coders = types.map(type => this._getCoder(_fragments.ParamType.from(type)));
    const coder = new _tuple.TupleCoder(coders, "_");
    return coder.defaultValue();
  }

  encode(types, values) {
    if (types.length !== values.length) {
      logger.throwError("types/values length mismatch", _logger.Logger.errors.INVALID_ARGUMENT, {
        count: {
          types: types.length,
          values: values.length
        },
        value: {
          types: types,
          values: values
        }
      });
    }

    const coders = types.map(type => this._getCoder(_fragments.ParamType.from(type)));
    const coder = new _tuple.TupleCoder(coders, "_");

    const writer = this._getWriter();

    coder.encode(writer, values);
    return writer.data;
  }

  decode(types, data, loose) {
    const coders = types.map(type => this._getCoder(_fragments.ParamType.from(type)));
    const coder = new _tuple.TupleCoder(coders, "_");
    return coder.decode(this._getReader((0, _bytes.arrayify)(data), loose));
  }

}

exports.AbiCoder = AbiCoder;
const defaultAbiCoder = new AbiCoder();
exports.defaultAbiCoder = defaultAbiCoder;
},{"@ethersproject/bytes":"../../node_modules/@ethersproject/bytes/lib.esm/index.js","@ethersproject/properties":"../../node_modules/@ethersproject/properties/lib.esm/index.js","@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","./_version":"../../node_modules/@ethersproject/abi/lib.esm/_version.js","./coders/abstract-coder":"../../node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js","./coders/address":"../../node_modules/@ethersproject/abi/lib.esm/coders/address.js","./coders/array":"../../node_modules/@ethersproject/abi/lib.esm/coders/array.js","./coders/boolean":"../../node_modules/@ethersproject/abi/lib.esm/coders/boolean.js","./coders/bytes":"../../node_modules/@ethersproject/abi/lib.esm/coders/bytes.js","./coders/fixed-bytes":"../../node_modules/@ethersproject/abi/lib.esm/coders/fixed-bytes.js","./coders/null":"../../node_modules/@ethersproject/abi/lib.esm/coders/null.js","./coders/number":"../../node_modules/@ethersproject/abi/lib.esm/coders/number.js","./coders/string":"../../node_modules/@ethersproject/abi/lib.esm/coders/string.js","./coders/tuple":"../../node_modules/@ethersproject/abi/lib.esm/coders/tuple.js","./fragments":"../../node_modules/@ethersproject/abi/lib.esm/fragments.js"}],"../../node_modules/@ethersproject/hash/lib.esm/id.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.id = id;

var _keccak = require("@ethersproject/keccak256");

var _strings = require("@ethersproject/strings");

function id(text) {
  return (0, _keccak.keccak256)((0, _strings.toUtf8Bytes)(text));
}
},{"@ethersproject/keccak256":"../../node_modules/@ethersproject/keccak256/lib.esm/index.js","@ethersproject/strings":"../../node_modules/@ethersproject/strings/lib.esm/index.js"}],"../../node_modules/@ethersproject/hash/lib.esm/_version.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.version = void 0;
const version = "hash/5.6.0";
exports.version = version;
},{}],"../../node_modules/@ethersproject/hash/lib.esm/namehash.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dnsEncode = dnsEncode;
exports.isValidName = isValidName;
exports.namehash = namehash;

var _bytes = require("@ethersproject/bytes");

var _strings = require("@ethersproject/strings");

var _keccak = require("@ethersproject/keccak256");

var _logger = require("@ethersproject/logger");

var _version = require("./_version");

const logger = new _logger.Logger(_version.version);
const Zeros = new Uint8Array(32);
Zeros.fill(0);
const Partition = new RegExp("^((.*)\\.)?([^.]+)$");

function isValidName(name) {
  try {
    const comps = name.split(".");

    for (let i = 0; i < comps.length; i++) {
      if ((0, _strings.nameprep)(comps[i]).length === 0) {
        throw new Error("empty");
      }
    }

    return true;
  } catch (error) {}

  return false;
}

function namehash(name) {
  /* istanbul ignore if */
  if (typeof name !== "string") {
    logger.throwArgumentError("invalid ENS name; not a string", "name", name);
  }

  let current = name;
  let result = Zeros;

  while (current.length) {
    const partition = current.match(Partition);

    if (partition == null || partition[2] === "") {
      logger.throwArgumentError("invalid ENS address; missing component", "name", name);
    }

    const label = (0, _strings.toUtf8Bytes)((0, _strings.nameprep)(partition[3]));
    result = (0, _keccak.keccak256)((0, _bytes.concat)([result, (0, _keccak.keccak256)(label)]));
    current = partition[2] || "";
  }

  return (0, _bytes.hexlify)(result);
}

function dnsEncode(name) {
  return (0, _bytes.hexlify)((0, _bytes.concat)(name.split(".").map(comp => {
    // We jam in an _ prefix to fill in with the length later
    // Note: Nameprep throws if the component is over 63 bytes
    const bytes = (0, _strings.toUtf8Bytes)("_" + (0, _strings.nameprep)(comp));
    bytes[0] = bytes.length - 1;
    return bytes;
  }))) + "00";
}
},{"@ethersproject/bytes":"../../node_modules/@ethersproject/bytes/lib.esm/index.js","@ethersproject/strings":"../../node_modules/@ethersproject/strings/lib.esm/index.js","@ethersproject/keccak256":"../../node_modules/@ethersproject/keccak256/lib.esm/index.js","@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","./_version":"../../node_modules/@ethersproject/hash/lib.esm/_version.js"}],"../../node_modules/@ethersproject/hash/lib.esm/message.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hashMessage = hashMessage;
exports.messagePrefix = void 0;

var _bytes = require("@ethersproject/bytes");

var _keccak = require("@ethersproject/keccak256");

var _strings = require("@ethersproject/strings");

const messagePrefix = "\x19Ethereum Signed Message:\n";
exports.messagePrefix = messagePrefix;

function hashMessage(message) {
  if (typeof message === "string") {
    message = (0, _strings.toUtf8Bytes)(message);
  }

  return (0, _keccak.keccak256)((0, _bytes.concat)([(0, _strings.toUtf8Bytes)(messagePrefix), (0, _strings.toUtf8Bytes)(String(message.length)), message]));
}
},{"@ethersproject/bytes":"../../node_modules/@ethersproject/bytes/lib.esm/index.js","@ethersproject/keccak256":"../../node_modules/@ethersproject/keccak256/lib.esm/index.js","@ethersproject/strings":"../../node_modules/@ethersproject/strings/lib.esm/index.js"}],"../../node_modules/@ethersproject/hash/lib.esm/typed-data.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TypedDataEncoder = void 0;

var _address = require("@ethersproject/address");

var _bignumber = require("@ethersproject/bignumber");

var _bytes = require("@ethersproject/bytes");

var _keccak = require("@ethersproject/keccak256");

var _properties = require("@ethersproject/properties");

var _logger = require("@ethersproject/logger");

var _version = require("./_version");

var _id = require("./id");

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

const logger = new _logger.Logger(_version.version);
const padding = new Uint8Array(32);
padding.fill(0);

const NegativeOne = _bignumber.BigNumber.from(-1);

const Zero = _bignumber.BigNumber.from(0);

const One = _bignumber.BigNumber.from(1);

const MaxUint256 = _bignumber.BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");

function hexPadRight(value) {
  const bytes = (0, _bytes.arrayify)(value);
  const padOffset = bytes.length % 32;

  if (padOffset) {
    return (0, _bytes.hexConcat)([bytes, padding.slice(padOffset)]);
  }

  return (0, _bytes.hexlify)(bytes);
}

const hexTrue = (0, _bytes.hexZeroPad)(One.toHexString(), 32);
const hexFalse = (0, _bytes.hexZeroPad)(Zero.toHexString(), 32);
const domainFieldTypes = {
  name: "string",
  version: "string",
  chainId: "uint256",
  verifyingContract: "address",
  salt: "bytes32"
};
const domainFieldNames = ["name", "version", "chainId", "verifyingContract", "salt"];

function checkString(key) {
  return function (value) {
    if (typeof value !== "string") {
      logger.throwArgumentError(`invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);
    }

    return value;
  };
}

const domainChecks = {
  name: checkString("name"),
  version: checkString("version"),
  chainId: function (value) {
    try {
      return _bignumber.BigNumber.from(value).toString();
    } catch (error) {}

    return logger.throwArgumentError(`invalid domain value for "chainId"`, "domain.chainId", value);
  },
  verifyingContract: function (value) {
    try {
      return (0, _address.getAddress)(value).toLowerCase();
    } catch (error) {}

    return logger.throwArgumentError(`invalid domain value "verifyingContract"`, "domain.verifyingContract", value);
  },
  salt: function (value) {
    try {
      const bytes = (0, _bytes.arrayify)(value);

      if (bytes.length !== 32) {
        throw new Error("bad length");
      }

      return (0, _bytes.hexlify)(bytes);
    } catch (error) {}

    return logger.throwArgumentError(`invalid domain value "salt"`, "domain.salt", value);
  }
};

function getBaseEncoder(type) {
  // intXX and uintXX
  {
    const match = type.match(/^(u?)int(\d*)$/);

    if (match) {
      const signed = match[1] === "";
      const width = parseInt(match[2] || "256");

      if (width % 8 !== 0 || width > 256 || match[2] && match[2] !== String(width)) {
        logger.throwArgumentError("invalid numeric width", "type", type);
      }

      const boundsUpper = MaxUint256.mask(signed ? width - 1 : width);
      const boundsLower = signed ? boundsUpper.add(One).mul(NegativeOne) : Zero;
      return function (value) {
        const v = _bignumber.BigNumber.from(value);

        if (v.lt(boundsLower) || v.gt(boundsUpper)) {
          logger.throwArgumentError(`value out-of-bounds for ${type}`, "value", value);
        }

        return (0, _bytes.hexZeroPad)(v.toTwos(256).toHexString(), 32);
      };
    }
  } // bytesXX

  {
    const match = type.match(/^bytes(\d+)$/);

    if (match) {
      const width = parseInt(match[1]);

      if (width === 0 || width > 32 || match[1] !== String(width)) {
        logger.throwArgumentError("invalid bytes width", "type", type);
      }

      return function (value) {
        const bytes = (0, _bytes.arrayify)(value);

        if (bytes.length !== width) {
          logger.throwArgumentError(`invalid length for ${type}`, "value", value);
        }

        return hexPadRight(value);
      };
    }
  }

  switch (type) {
    case "address":
      return function (value) {
        return (0, _bytes.hexZeroPad)((0, _address.getAddress)(value), 32);
      };

    case "bool":
      return function (value) {
        return !value ? hexFalse : hexTrue;
      };

    case "bytes":
      return function (value) {
        return (0, _keccak.keccak256)(value);
      };

    case "string":
      return function (value) {
        return (0, _id.id)(value);
      };
  }

  return null;
}

function encodeType(name, fields) {
  return `${name}(${fields.map(({
    name,
    type
  }) => type + " " + name).join(",")})`;
}

class TypedDataEncoder {
  constructor(types) {
    (0, _properties.defineReadOnly)(this, "types", Object.freeze((0, _properties.deepCopy)(types)));
    (0, _properties.defineReadOnly)(this, "_encoderCache", {});
    (0, _properties.defineReadOnly)(this, "_types", {}); // Link struct types to their direct child structs

    const links = {}; // Link structs to structs which contain them as a child

    const parents = {}; // Link all subtypes within a given struct

    const subtypes = {};
    Object.keys(types).forEach(type => {
      links[type] = {};
      parents[type] = [];
      subtypes[type] = {};
    });

    for (const name in types) {
      const uniqueNames = {};
      types[name].forEach(field => {
        // Check each field has a unique name
        if (uniqueNames[field.name]) {
          logger.throwArgumentError(`duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, "types", types);
        }

        uniqueNames[field.name] = true; // Get the base type (drop any array specifiers)

        const baseType = field.type.match(/^([^\x5b]*)(\x5b|$)/)[1];

        if (baseType === name) {
          logger.throwArgumentError(`circular type reference to ${JSON.stringify(baseType)}`, "types", types);
        } // Is this a base encoding type?


        const encoder = getBaseEncoder(baseType);

        if (encoder) {
          return;
        }

        if (!parents[baseType]) {
          logger.throwArgumentError(`unknown type ${JSON.stringify(baseType)}`, "types", types);
        } // Add linkage


        parents[baseType].push(name);
        links[name][baseType] = true;
      });
    } // Deduce the primary type


    const primaryTypes = Object.keys(parents).filter(n => parents[n].length === 0);

    if (primaryTypes.length === 0) {
      logger.throwArgumentError("missing primary type", "types", types);
    } else if (primaryTypes.length > 1) {
      logger.throwArgumentError(`ambiguous primary types or unused types: ${primaryTypes.map(t => JSON.stringify(t)).join(", ")}`, "types", types);
    }

    (0, _properties.defineReadOnly)(this, "primaryType", primaryTypes[0]); // Check for circular type references

    function checkCircular(type, found) {
      if (found[type]) {
        logger.throwArgumentError(`circular type reference to ${JSON.stringify(type)}`, "types", types);
      }

      found[type] = true;
      Object.keys(links[type]).forEach(child => {
        if (!parents[child]) {
          return;
        } // Recursively check children


        checkCircular(child, found); // Mark all ancestors as having this decendant

        Object.keys(found).forEach(subtype => {
          subtypes[subtype][child] = true;
        });
      });
      delete found[type];
    }

    checkCircular(this.primaryType, {}); // Compute each fully describe type

    for (const name in subtypes) {
      const st = Object.keys(subtypes[name]);
      st.sort();
      this._types[name] = encodeType(name, types[name]) + st.map(t => encodeType(t, types[t])).join("");
    }
  }

  getEncoder(type) {
    let encoder = this._encoderCache[type];

    if (!encoder) {
      encoder = this._encoderCache[type] = this._getEncoder(type);
    }

    return encoder;
  }

  _getEncoder(type) {
    // Basic encoder type (address, bool, uint256, etc)
    {
      const encoder = getBaseEncoder(type);

      if (encoder) {
        return encoder;
      }
    } // Array

    const match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);

    if (match) {
      const subtype = match[1];
      const subEncoder = this.getEncoder(subtype);
      const length = parseInt(match[3]);
      return value => {
        if (length >= 0 && value.length !== length) {
          logger.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", value);
        }

        let result = value.map(subEncoder);

        if (this._types[subtype]) {
          result = result.map(_keccak.keccak256);
        }

        return (0, _keccak.keccak256)((0, _bytes.hexConcat)(result));
      };
    } // Struct


    const fields = this.types[type];

    if (fields) {
      const encodedType = (0, _id.id)(this._types[type]);
      return value => {
        const values = fields.map(({
          name,
          type
        }) => {
          const result = this.getEncoder(type)(value[name]);

          if (this._types[type]) {
            return (0, _keccak.keccak256)(result);
          }

          return result;
        });
        values.unshift(encodedType);
        return (0, _bytes.hexConcat)(values);
      };
    }

    return logger.throwArgumentError(`unknown type: ${type}`, "type", type);
  }

  encodeType(name) {
    const result = this._types[name];

    if (!result) {
      logger.throwArgumentError(`unknown type: ${JSON.stringify(name)}`, "name", name);
    }

    return result;
  }

  encodeData(type, value) {
    return this.getEncoder(type)(value);
  }

  hashStruct(name, value) {
    return (0, _keccak.keccak256)(this.encodeData(name, value));
  }

  encode(value) {
    return this.encodeData(this.primaryType, value);
  }

  hash(value) {
    return this.hashStruct(this.primaryType, value);
  }

  _visit(type, value, callback) {
    // Basic encoder type (address, bool, uint256, etc)
    {
      const encoder = getBaseEncoder(type);

      if (encoder) {
        return callback(type, value);
      }
    } // Array

    const match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);

    if (match) {
      const subtype = match[1];
      const length = parseInt(match[3]);

      if (length >= 0 && value.length !== length) {
        logger.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", value);
      }

      return value.map(v => this._visit(subtype, v, callback));
    } // Struct


    const fields = this.types[type];

    if (fields) {
      return fields.reduce((accum, {
        name,
        type
      }) => {
        accum[name] = this._visit(type, value[name], callback);
        return accum;
      }, {});
    }

    return logger.throwArgumentError(`unknown type: ${type}`, "type", type);
  }

  visit(value, callback) {
    return this._visit(this.primaryType, value, callback);
  }

  static from(types) {
    return new TypedDataEncoder(types);
  }

  static getPrimaryType(types) {
    return TypedDataEncoder.from(types).primaryType;
  }

  static hashStruct(name, types, value) {
    return TypedDataEncoder.from(types).hashStruct(name, value);
  }

  static hashDomain(domain) {
    const domainFields = [];

    for (const name in domain) {
      const type = domainFieldTypes[name];

      if (!type) {
        logger.throwArgumentError(`invalid typed-data domain key: ${JSON.stringify(name)}`, "domain", domain);
      }

      domainFields.push({
        name,
        type
      });
    }

    domainFields.sort((a, b) => {
      return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);
    });
    return TypedDataEncoder.hashStruct("EIP712Domain", {
      EIP712Domain: domainFields
    }, domain);
  }

  static encode(domain, types, value) {
    return (0, _bytes.hexConcat)(["0x1901", TypedDataEncoder.hashDomain(domain), TypedDataEncoder.from(types).hash(value)]);
  }

  static hash(domain, types, value) {
    return (0, _keccak.keccak256)(TypedDataEncoder.encode(domain, types, value));
  } // Replaces all address types with ENS names with their looked up address


  static resolveNames(domain, types, value, resolveName) {
    return __awaiter(this, void 0, void 0, function* () {
      // Make a copy to isolate it from the object passed in
      domain = (0, _properties.shallowCopy)(domain); // Look up all ENS names

      const ensCache = {}; // Do we need to look up the domain's verifyingContract?

      if (domain.verifyingContract && !(0, _bytes.isHexString)(domain.verifyingContract, 20)) {
        ensCache[domain.verifyingContract] = "0x";
      } // We are going to use the encoder to visit all the base values


      const encoder = TypedDataEncoder.from(types); // Get a list of all the addresses

      encoder.visit(value, (type, value) => {
        if (type === "address" && !(0, _bytes.isHexString)(value, 20)) {
          ensCache[value] = "0x";
        }

        return value;
      }); // Lookup each name

      for (const name in ensCache) {
        ensCache[name] = yield resolveName(name);
      } // Replace the domain verifyingContract if needed


      if (domain.verifyingContract && ensCache[domain.verifyingContract]) {
        domain.verifyingContract = ensCache[domain.verifyingContract];
      } // Replace all ENS names with their address


      value = encoder.visit(value, (type, value) => {
        if (type === "address" && ensCache[value]) {
          return ensCache[value];
        }

        return value;
      });
      return {
        domain,
        value
      };
    });
  }

  static getPayload(domain, types, value) {
    // Validate the domain fields
    TypedDataEncoder.hashDomain(domain); // Derive the EIP712Domain Struct reference type

    const domainValues = {};
    const domainTypes = [];
    domainFieldNames.forEach(name => {
      const value = domain[name];

      if (value == null) {
        return;
      }

      domainValues[name] = domainChecks[name](value);
      domainTypes.push({
        name,
        type: domainFieldTypes[name]
      });
    });
    const encoder = TypedDataEncoder.from(types);
    const typesWithDomain = (0, _properties.shallowCopy)(types);

    if (typesWithDomain.EIP712Domain) {
      logger.throwArgumentError("types must not contain EIP712Domain type", "types.EIP712Domain", types);
    } else {
      typesWithDomain.EIP712Domain = domainTypes;
    } // Validate the data structures and types


    encoder.encode(value);
    return {
      types: typesWithDomain,
      domain: domainValues,
      primaryType: encoder.primaryType,
      message: encoder.visit(value, (type, value) => {
        // bytes
        if (type.match(/^bytes(\d*)/)) {
          return (0, _bytes.hexlify)((0, _bytes.arrayify)(value));
        } // uint or int


        if (type.match(/^u?int/)) {
          return _bignumber.BigNumber.from(value).toString();
        }

        switch (type) {
          case "address":
            return value.toLowerCase();

          case "bool":
            return !!value;

          case "string":
            if (typeof value !== "string") {
              logger.throwArgumentError(`invalid string`, "value", value);
            }

            return value;
        }

        return logger.throwArgumentError("unsupported type", "type", type);
      })
    };
  }

}

exports.TypedDataEncoder = TypedDataEncoder;
},{"@ethersproject/address":"../../node_modules/@ethersproject/address/lib.esm/index.js","@ethersproject/bignumber":"../../node_modules/@ethersproject/bignumber/lib.esm/index.js","@ethersproject/bytes":"../../node_modules/@ethersproject/bytes/lib.esm/index.js","@ethersproject/keccak256":"../../node_modules/@ethersproject/keccak256/lib.esm/index.js","@ethersproject/properties":"../../node_modules/@ethersproject/properties/lib.esm/index.js","@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","./_version":"../../node_modules/@ethersproject/hash/lib.esm/_version.js","./id":"../../node_modules/@ethersproject/hash/lib.esm/id.js"}],"../../node_modules/@ethersproject/hash/lib.esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "_TypedDataEncoder", {
  enumerable: true,
  get: function () {
    return _typedData.TypedDataEncoder;
  }
});
Object.defineProperty(exports, "dnsEncode", {
  enumerable: true,
  get: function () {
    return _namehash.dnsEncode;
  }
});
Object.defineProperty(exports, "hashMessage", {
  enumerable: true,
  get: function () {
    return _message.hashMessage;
  }
});
Object.defineProperty(exports, "id", {
  enumerable: true,
  get: function () {
    return _id.id;
  }
});
Object.defineProperty(exports, "isValidName", {
  enumerable: true,
  get: function () {
    return _namehash.isValidName;
  }
});
Object.defineProperty(exports, "messagePrefix", {
  enumerable: true,
  get: function () {
    return _message.messagePrefix;
  }
});
Object.defineProperty(exports, "namehash", {
  enumerable: true,
  get: function () {
    return _namehash.namehash;
  }
});

var _id = require("./id");

var _namehash = require("./namehash");

var _message = require("./message");

var _typedData = require("./typed-data");
},{"./id":"../../node_modules/@ethersproject/hash/lib.esm/id.js","./namehash":"../../node_modules/@ethersproject/hash/lib.esm/namehash.js","./message":"../../node_modules/@ethersproject/hash/lib.esm/message.js","./typed-data":"../../node_modules/@ethersproject/hash/lib.esm/typed-data.js"}],"../../node_modules/@ethersproject/abi/lib.esm/interface.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TransactionDescription = exports.LogDescription = exports.Interface = exports.Indexed = exports.ErrorDescription = void 0;
Object.defineProperty(exports, "checkResultErrors", {
  enumerable: true,
  get: function () {
    return _abstractCoder.checkResultErrors;
  }
});

var _address = require("@ethersproject/address");

var _bignumber = require("@ethersproject/bignumber");

var _bytes = require("@ethersproject/bytes");

var _hash = require("@ethersproject/hash");

var _keccak = require("@ethersproject/keccak256");

var _properties = require("@ethersproject/properties");

var _abiCoder = require("./abi-coder");

var _abstractCoder = require("./coders/abstract-coder");

var _fragments = require("./fragments");

var _logger = require("@ethersproject/logger");

var _version = require("./_version");

const logger = new _logger.Logger(_version.version);

class LogDescription extends _properties.Description {}

exports.LogDescription = LogDescription;

class TransactionDescription extends _properties.Description {}

exports.TransactionDescription = TransactionDescription;

class ErrorDescription extends _properties.Description {}

exports.ErrorDescription = ErrorDescription;

class Indexed extends _properties.Description {
  static isIndexed(value) {
    return !!(value && value._isIndexed);
  }

}

exports.Indexed = Indexed;
const BuiltinErrors = {
  "0x08c379a0": {
    signature: "Error(string)",
    name: "Error",
    inputs: ["string"],
    reason: true
  },
  "0x4e487b71": {
    signature: "Panic(uint256)",
    name: "Panic",
    inputs: ["uint256"]
  }
};

function wrapAccessError(property, error) {
  const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);
  wrap.error = error;
  return wrap;
}
/*
function checkNames(fragment: Fragment, type: "input" | "output", params: Array<ParamType>): void {
    params.reduce((accum, param) => {
        if (param.name) {
            if (accum[param.name]) {
                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format("full") }`, "fragment", fragment);
            }
            accum[param.name] = true;
        }
        return accum;
    }, <{ [ name: string ]: boolean }>{ });
}
*/


class Interface {
  constructor(fragments) {
    logger.checkNew(new.target, Interface);
    let abi = [];

    if (typeof fragments === "string") {
      abi = JSON.parse(fragments);
    } else {
      abi = fragments;
    }

    (0, _properties.defineReadOnly)(this, "fragments", abi.map(fragment => {
      return _fragments.Fragment.from(fragment);
    }).filter(fragment => fragment != null));
    (0, _properties.defineReadOnly)(this, "_abiCoder", (0, _properties.getStatic)(new.target, "getAbiCoder")());
    (0, _properties.defineReadOnly)(this, "functions", {});
    (0, _properties.defineReadOnly)(this, "errors", {});
    (0, _properties.defineReadOnly)(this, "events", {});
    (0, _properties.defineReadOnly)(this, "structs", {}); // Add all fragments by their signature

    this.fragments.forEach(fragment => {
      let bucket = null;

      switch (fragment.type) {
        case "constructor":
          if (this.deploy) {
            logger.warn("duplicate definition - constructor");
            return;
          } //checkNames(fragment, "input", fragment.inputs);


          (0, _properties.defineReadOnly)(this, "deploy", fragment);
          return;

        case "function":
          //checkNames(fragment, "input", fragment.inputs);
          //checkNames(fragment, "output", (<FunctionFragment>fragment).outputs);
          bucket = this.functions;
          break;

        case "event":
          //checkNames(fragment, "input", fragment.inputs);
          bucket = this.events;
          break;

        case "error":
          bucket = this.errors;
          break;

        default:
          return;
      }

      let signature = fragment.format();

      if (bucket[signature]) {
        logger.warn("duplicate definition - " + signature);
        return;
      }

      bucket[signature] = fragment;
    }); // If we do not have a constructor add a default

    if (!this.deploy) {
      (0, _properties.defineReadOnly)(this, "deploy", _fragments.ConstructorFragment.from({
        payable: false,
        type: "constructor"
      }));
    }

    (0, _properties.defineReadOnly)(this, "_isInterface", true);
  }

  format(format) {
    if (!format) {
      format = _fragments.FormatTypes.full;
    }

    if (format === _fragments.FormatTypes.sighash) {
      logger.throwArgumentError("interface does not support formatting sighash", "format", format);
    }

    const abi = this.fragments.map(fragment => fragment.format(format)); // We need to re-bundle the JSON fragments a bit

    if (format === _fragments.FormatTypes.json) {
      return JSON.stringify(abi.map(j => JSON.parse(j)));
    }

    return abi;
  } // Sub-classes can override these to handle other blockchains


  static getAbiCoder() {
    return _abiCoder.defaultAbiCoder;
  }

  static getAddress(address) {
    return (0, _address.getAddress)(address);
  }

  static getSighash(fragment) {
    return (0, _bytes.hexDataSlice)((0, _hash.id)(fragment.format()), 0, 4);
  }

  static getEventTopic(eventFragment) {
    return (0, _hash.id)(eventFragment.format());
  } // Find a function definition by any means necessary (unless it is ambiguous)


  getFunction(nameOrSignatureOrSighash) {
    if ((0, _bytes.isHexString)(nameOrSignatureOrSighash)) {
      for (const name in this.functions) {
        if (nameOrSignatureOrSighash === this.getSighash(name)) {
          return this.functions[name];
        }
      }

      logger.throwArgumentError("no matching function", "sighash", nameOrSignatureOrSighash);
    } // It is a bare name, look up the function (will return null if ambiguous)


    if (nameOrSignatureOrSighash.indexOf("(") === -1) {
      const name = nameOrSignatureOrSighash.trim();
      const matching = Object.keys(this.functions).filter(f => f.split("("
      /* fix:) */
      )[0] === name);

      if (matching.length === 0) {
        logger.throwArgumentError("no matching function", "name", name);
      } else if (matching.length > 1) {
        logger.throwArgumentError("multiple matching functions", "name", name);
      }

      return this.functions[matching[0]];
    } // Normalize the signature and lookup the function


    const result = this.functions[_fragments.FunctionFragment.fromString(nameOrSignatureOrSighash).format()];

    if (!result) {
      logger.throwArgumentError("no matching function", "signature", nameOrSignatureOrSighash);
    }

    return result;
  } // Find an event definition by any means necessary (unless it is ambiguous)


  getEvent(nameOrSignatureOrTopic) {
    if ((0, _bytes.isHexString)(nameOrSignatureOrTopic)) {
      const topichash = nameOrSignatureOrTopic.toLowerCase();

      for (const name in this.events) {
        if (topichash === this.getEventTopic(name)) {
          return this.events[name];
        }
      }

      logger.throwArgumentError("no matching event", "topichash", topichash);
    } // It is a bare name, look up the function (will return null if ambiguous)


    if (nameOrSignatureOrTopic.indexOf("(") === -1) {
      const name = nameOrSignatureOrTopic.trim();
      const matching = Object.keys(this.events).filter(f => f.split("("
      /* fix:) */
      )[0] === name);

      if (matching.length === 0) {
        logger.throwArgumentError("no matching event", "name", name);
      } else if (matching.length > 1) {
        logger.throwArgumentError("multiple matching events", "name", name);
      }

      return this.events[matching[0]];
    } // Normalize the signature and lookup the function


    const result = this.events[_fragments.EventFragment.fromString(nameOrSignatureOrTopic).format()];

    if (!result) {
      logger.throwArgumentError("no matching event", "signature", nameOrSignatureOrTopic);
    }

    return result;
  } // Find a function definition by any means necessary (unless it is ambiguous)


  getError(nameOrSignatureOrSighash) {
    if ((0, _bytes.isHexString)(nameOrSignatureOrSighash)) {
      const getSighash = (0, _properties.getStatic)(this.constructor, "getSighash");

      for (const name in this.errors) {
        const error = this.errors[name];

        if (nameOrSignatureOrSighash === getSighash(error)) {
          return this.errors[name];
        }
      }

      logger.throwArgumentError("no matching error", "sighash", nameOrSignatureOrSighash);
    } // It is a bare name, look up the function (will return null if ambiguous)


    if (nameOrSignatureOrSighash.indexOf("(") === -1) {
      const name = nameOrSignatureOrSighash.trim();
      const matching = Object.keys(this.errors).filter(f => f.split("("
      /* fix:) */
      )[0] === name);

      if (matching.length === 0) {
        logger.throwArgumentError("no matching error", "name", name);
      } else if (matching.length > 1) {
        logger.throwArgumentError("multiple matching errors", "name", name);
      }

      return this.errors[matching[0]];
    } // Normalize the signature and lookup the function


    const result = this.errors[_fragments.FunctionFragment.fromString(nameOrSignatureOrSighash).format()];

    if (!result) {
      logger.throwArgumentError("no matching error", "signature", nameOrSignatureOrSighash);
    }

    return result;
  } // Get the sighash (the bytes4 selector) used by Solidity to identify a function


  getSighash(fragment) {
    if (typeof fragment === "string") {
      try {
        fragment = this.getFunction(fragment);
      } catch (error) {
        try {
          fragment = this.getError(fragment);
        } catch (_) {
          throw error;
        }
      }
    }

    return (0, _properties.getStatic)(this.constructor, "getSighash")(fragment);
  } // Get the topic (the bytes32 hash) used by Solidity to identify an event


  getEventTopic(eventFragment) {
    if (typeof eventFragment === "string") {
      eventFragment = this.getEvent(eventFragment);
    }

    return (0, _properties.getStatic)(this.constructor, "getEventTopic")(eventFragment);
  }

  _decodeParams(params, data) {
    return this._abiCoder.decode(params, data);
  }

  _encodeParams(params, values) {
    return this._abiCoder.encode(params, values);
  }

  encodeDeploy(values) {
    return this._encodeParams(this.deploy.inputs, values || []);
  }

  decodeErrorResult(fragment, data) {
    if (typeof fragment === "string") {
      fragment = this.getError(fragment);
    }

    const bytes = (0, _bytes.arrayify)(data);

    if ((0, _bytes.hexlify)(bytes.slice(0, 4)) !== this.getSighash(fragment)) {
      logger.throwArgumentError(`data signature does not match error ${fragment.name}.`, "data", (0, _bytes.hexlify)(bytes));
    }

    return this._decodeParams(fragment.inputs, bytes.slice(4));
  }

  encodeErrorResult(fragment, values) {
    if (typeof fragment === "string") {
      fragment = this.getError(fragment);
    }

    return (0, _bytes.hexlify)((0, _bytes.concat)([this.getSighash(fragment), this._encodeParams(fragment.inputs, values || [])]));
  } // Decode the data for a function call (e.g. tx.data)


  decodeFunctionData(functionFragment, data) {
    if (typeof functionFragment === "string") {
      functionFragment = this.getFunction(functionFragment);
    }

    const bytes = (0, _bytes.arrayify)(data);

    if ((0, _bytes.hexlify)(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {
      logger.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, "data", (0, _bytes.hexlify)(bytes));
    }

    return this._decodeParams(functionFragment.inputs, bytes.slice(4));
  } // Encode the data for a function call (e.g. tx.data)


  encodeFunctionData(functionFragment, values) {
    if (typeof functionFragment === "string") {
      functionFragment = this.getFunction(functionFragment);
    }

    return (0, _bytes.hexlify)((0, _bytes.concat)([this.getSighash(functionFragment), this._encodeParams(functionFragment.inputs, values || [])]));
  } // Decode the result from a function call (e.g. from eth_call)


  decodeFunctionResult(functionFragment, data) {
    if (typeof functionFragment === "string") {
      functionFragment = this.getFunction(functionFragment);
    }

    let bytes = (0, _bytes.arrayify)(data);
    let reason = null;
    let message = "";
    let errorArgs = null;
    let errorName = null;
    let errorSignature = null;

    switch (bytes.length % this._abiCoder._getWordSize()) {
      case 0:
        try {
          return this._abiCoder.decode(functionFragment.outputs, bytes);
        } catch (error) {}

        break;

      case 4:
        {
          const selector = (0, _bytes.hexlify)(bytes.slice(0, 4));
          const builtin = BuiltinErrors[selector];

          if (builtin) {
            errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));
            errorName = builtin.name;
            errorSignature = builtin.signature;

            if (builtin.reason) {
              reason = errorArgs[0];
            }

            if (errorName === "Error") {
              message = `; VM Exception while processing transaction: reverted with reason string ${JSON.stringify(errorArgs[0])}`;
            } else if (errorName === "Panic") {
              message = `; VM Exception while processing transaction: reverted with panic code ${errorArgs[0]}`;
            }
          } else {
            try {
              const error = this.getError(selector);
              errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));
              errorName = error.name;
              errorSignature = error.format();
            } catch (error) {}
          }

          break;
        }
    }

    return logger.throwError("call revert exception" + message, _logger.Logger.errors.CALL_EXCEPTION, {
      method: functionFragment.format(),
      data: (0, _bytes.hexlify)(data),
      errorArgs,
      errorName,
      errorSignature,
      reason
    });
  } // Encode the result for a function call (e.g. for eth_call)


  encodeFunctionResult(functionFragment, values) {
    if (typeof functionFragment === "string") {
      functionFragment = this.getFunction(functionFragment);
    }

    return (0, _bytes.hexlify)(this._abiCoder.encode(functionFragment.outputs, values || []));
  } // Create the filter for the event with search criteria (e.g. for eth_filterLog)


  encodeFilterTopics(eventFragment, values) {
    if (typeof eventFragment === "string") {
      eventFragment = this.getEvent(eventFragment);
    }

    if (values.length > eventFragment.inputs.length) {
      logger.throwError("too many arguments for " + eventFragment.format(), _logger.Logger.errors.UNEXPECTED_ARGUMENT, {
        argument: "values",
        value: values
      });
    }

    let topics = [];

    if (!eventFragment.anonymous) {
      topics.push(this.getEventTopic(eventFragment));
    }

    const encodeTopic = (param, value) => {
      if (param.type === "string") {
        return (0, _hash.id)(value);
      } else if (param.type === "bytes") {
        return (0, _keccak.keccak256)((0, _bytes.hexlify)(value));
      } // Check addresses are valid


      if (param.type === "address") {
        this._abiCoder.encode(["address"], [value]);
      }

      return (0, _bytes.hexZeroPad)((0, _bytes.hexlify)(value), 32);
    };

    values.forEach((value, index) => {
      let param = eventFragment.inputs[index];

      if (!param.indexed) {
        if (value != null) {
          logger.throwArgumentError("cannot filter non-indexed parameters; must be null", "contract." + param.name, value);
        }

        return;
      }

      if (value == null) {
        topics.push(null);
      } else if (param.baseType === "array" || param.baseType === "tuple") {
        logger.throwArgumentError("filtering with tuples or arrays not supported", "contract." + param.name, value);
      } else if (Array.isArray(value)) {
        topics.push(value.map(value => encodeTopic(param, value)));
      } else {
        topics.push(encodeTopic(param, value));
      }
    }); // Trim off trailing nulls

    while (topics.length && topics[topics.length - 1] === null) {
      topics.pop();
    }

    return topics;
  }

  encodeEventLog(eventFragment, values) {
    if (typeof eventFragment === "string") {
      eventFragment = this.getEvent(eventFragment);
    }

    const topics = [];
    const dataTypes = [];
    const dataValues = [];

    if (!eventFragment.anonymous) {
      topics.push(this.getEventTopic(eventFragment));
    }

    if (values.length !== eventFragment.inputs.length) {
      logger.throwArgumentError("event arguments/values mismatch", "values", values);
    }

    eventFragment.inputs.forEach((param, index) => {
      const value = values[index];

      if (param.indexed) {
        if (param.type === "string") {
          topics.push((0, _hash.id)(value));
        } else if (param.type === "bytes") {
          topics.push((0, _keccak.keccak256)(value));
        } else if (param.baseType === "tuple" || param.baseType === "array") {
          // @TODO
          throw new Error("not implemented");
        } else {
          topics.push(this._abiCoder.encode([param.type], [value]));
        }
      } else {
        dataTypes.push(param);
        dataValues.push(value);
      }
    });
    return {
      data: this._abiCoder.encode(dataTypes, dataValues),
      topics: topics
    };
  } // Decode a filter for the event and the search criteria


  decodeEventLog(eventFragment, data, topics) {
    if (typeof eventFragment === "string") {
      eventFragment = this.getEvent(eventFragment);
    }

    if (topics != null && !eventFragment.anonymous) {
      let topicHash = this.getEventTopic(eventFragment);

      if (!(0, _bytes.isHexString)(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {
        logger.throwError("fragment/topic mismatch", _logger.Logger.errors.INVALID_ARGUMENT, {
          argument: "topics[0]",
          expected: topicHash,
          value: topics[0]
        });
      }

      topics = topics.slice(1);
    }

    let indexed = [];
    let nonIndexed = [];
    let dynamic = [];
    eventFragment.inputs.forEach((param, index) => {
      if (param.indexed) {
        if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
          indexed.push(_fragments.ParamType.fromObject({
            type: "bytes32",
            name: param.name
          }));
          dynamic.push(true);
        } else {
          indexed.push(param);
          dynamic.push(false);
        }
      } else {
        nonIndexed.push(param);
        dynamic.push(false);
      }
    });
    let resultIndexed = topics != null ? this._abiCoder.decode(indexed, (0, _bytes.concat)(topics)) : null;

    let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);

    let result = [];
    let nonIndexedIndex = 0,
        indexedIndex = 0;
    eventFragment.inputs.forEach((param, index) => {
      if (param.indexed) {
        if (resultIndexed == null) {
          result[index] = new Indexed({
            _isIndexed: true,
            hash: null
          });
        } else if (dynamic[index]) {
          result[index] = new Indexed({
            _isIndexed: true,
            hash: resultIndexed[indexedIndex++]
          });
        } else {
          try {
            result[index] = resultIndexed[indexedIndex++];
          } catch (error) {
            result[index] = error;
          }
        }
      } else {
        try {
          result[index] = resultNonIndexed[nonIndexedIndex++];
        } catch (error) {
          result[index] = error;
        }
      } // Add the keyword argument if named and safe


      if (param.name && result[param.name] == null) {
        const value = result[index]; // Make error named values throw on access

        if (value instanceof Error) {
          Object.defineProperty(result, param.name, {
            enumerable: true,
            get: () => {
              throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value);
            }
          });
        } else {
          result[param.name] = value;
        }
      }
    }); // Make all error indexed values throw on access

    for (let i = 0; i < result.length; i++) {
      const value = result[i];

      if (value instanceof Error) {
        Object.defineProperty(result, i, {
          enumerable: true,
          get: () => {
            throw wrapAccessError(`index ${i}`, value);
          }
        });
      }
    }

    return Object.freeze(result);
  } // Given a transaction, find the matching function fragment (if any) and
  // determine all its properties and call parameters


  parseTransaction(tx) {
    let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());

    if (!fragment) {
      return null;
    }

    return new TransactionDescription({
      args: this._abiCoder.decode(fragment.inputs, "0x" + tx.data.substring(10)),
      functionFragment: fragment,
      name: fragment.name,
      signature: fragment.format(),
      sighash: this.getSighash(fragment),
      value: _bignumber.BigNumber.from(tx.value || "0")
    });
  } // @TODO
  //parseCallResult(data: BytesLike): ??
  // Given an event log, find the matching event fragment (if any) and
  // determine all its properties and values


  parseLog(log) {
    let fragment = this.getEvent(log.topics[0]);

    if (!fragment || fragment.anonymous) {
      return null;
    } // @TODO: If anonymous, and the only method, and the input count matches, should we parse?
    //        Probably not, because just because it is the only event in the ABI does
    //        not mean we have the full ABI; maybe just a fragment?


    return new LogDescription({
      eventFragment: fragment,
      name: fragment.name,
      signature: fragment.format(),
      topic: this.getEventTopic(fragment),
      args: this.decodeEventLog(fragment, log.data, log.topics)
    });
  }

  parseError(data) {
    const hexData = (0, _bytes.hexlify)(data);
    let fragment = this.getError(hexData.substring(0, 10).toLowerCase());

    if (!fragment) {
      return null;
    }

    return new ErrorDescription({
      args: this._abiCoder.decode(fragment.inputs, "0x" + hexData.substring(10)),
      errorFragment: fragment,
      name: fragment.name,
      signature: fragment.format(),
      sighash: this.getSighash(fragment)
    });
  }
  /*
  static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {
      if (Interface.isInterface(value)) {
          return value;
      }
      if (typeof(value) === "string") {
          return new Interface(JSON.parse(value));
      }
      return new Interface(value);
  }
  */


  static isInterface(value) {
    return !!(value && value._isInterface);
  }

}

exports.Interface = Interface;
},{"@ethersproject/address":"../../node_modules/@ethersproject/address/lib.esm/index.js","@ethersproject/bignumber":"../../node_modules/@ethersproject/bignumber/lib.esm/index.js","@ethersproject/bytes":"../../node_modules/@ethersproject/bytes/lib.esm/index.js","@ethersproject/hash":"../../node_modules/@ethersproject/hash/lib.esm/index.js","@ethersproject/keccak256":"../../node_modules/@ethersproject/keccak256/lib.esm/index.js","@ethersproject/properties":"../../node_modules/@ethersproject/properties/lib.esm/index.js","./abi-coder":"../../node_modules/@ethersproject/abi/lib.esm/abi-coder.js","./coders/abstract-coder":"../../node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js","./fragments":"../../node_modules/@ethersproject/abi/lib.esm/fragments.js","@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","./_version":"../../node_modules/@ethersproject/abi/lib.esm/_version.js"}],"../../node_modules/@ethersproject/abi/lib.esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "AbiCoder", {
  enumerable: true,
  get: function () {
    return _abiCoder.AbiCoder;
  }
});
Object.defineProperty(exports, "ConstructorFragment", {
  enumerable: true,
  get: function () {
    return _fragments.ConstructorFragment;
  }
});
Object.defineProperty(exports, "ErrorFragment", {
  enumerable: true,
  get: function () {
    return _fragments.ErrorFragment;
  }
});
Object.defineProperty(exports, "EventFragment", {
  enumerable: true,
  get: function () {
    return _fragments.EventFragment;
  }
});
Object.defineProperty(exports, "FormatTypes", {
  enumerable: true,
  get: function () {
    return _fragments.FormatTypes;
  }
});
Object.defineProperty(exports, "Fragment", {
  enumerable: true,
  get: function () {
    return _fragments.Fragment;
  }
});
Object.defineProperty(exports, "FunctionFragment", {
  enumerable: true,
  get: function () {
    return _fragments.FunctionFragment;
  }
});
Object.defineProperty(exports, "Indexed", {
  enumerable: true,
  get: function () {
    return _interface.Indexed;
  }
});
Object.defineProperty(exports, "Interface", {
  enumerable: true,
  get: function () {
    return _interface.Interface;
  }
});
Object.defineProperty(exports, "LogDescription", {
  enumerable: true,
  get: function () {
    return _interface.LogDescription;
  }
});
Object.defineProperty(exports, "ParamType", {
  enumerable: true,
  get: function () {
    return _fragments.ParamType;
  }
});
Object.defineProperty(exports, "TransactionDescription", {
  enumerable: true,
  get: function () {
    return _interface.TransactionDescription;
  }
});
Object.defineProperty(exports, "checkResultErrors", {
  enumerable: true,
  get: function () {
    return _interface.checkResultErrors;
  }
});
Object.defineProperty(exports, "defaultAbiCoder", {
  enumerable: true,
  get: function () {
    return _abiCoder.defaultAbiCoder;
  }
});

var _fragments = require("./fragments");

var _abiCoder = require("./abi-coder");

var _interface = require("./interface");
},{"./fragments":"../../node_modules/@ethersproject/abi/lib.esm/fragments.js","./abi-coder":"../../node_modules/@ethersproject/abi/lib.esm/abi-coder.js","./interface":"../../node_modules/@ethersproject/abi/lib.esm/interface.js"}],"../../node_modules/@ethersproject/abstract-provider/lib.esm/_version.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.version = void 0;
const version = "abstract-provider/5.6.0";
exports.version = version;
},{}],"../../node_modules/@ethersproject/abstract-provider/lib.esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TransactionOrderForkEvent = exports.TransactionForkEvent = exports.Provider = exports.ForkEvent = exports.BlockForkEvent = void 0;

var _bignumber = require("@ethersproject/bignumber");

var _bytes = require("@ethersproject/bytes");

var _properties = require("@ethersproject/properties");

var _logger = require("@ethersproject/logger");

var _version = require("./_version");

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

const logger = new _logger.Logger(_version.version);
;
; //export type CallTransactionable = {
//    call(transaction: TransactionRequest): Promise<TransactionResponse>;
//};

class ForkEvent extends _properties.Description {
  static isForkEvent(value) {
    return !!(value && value._isForkEvent);
  }

}

exports.ForkEvent = ForkEvent;

class BlockForkEvent extends ForkEvent {
  constructor(blockHash, expiry) {
    if (!(0, _bytes.isHexString)(blockHash, 32)) {
      logger.throwArgumentError("invalid blockHash", "blockHash", blockHash);
    }

    super({
      _isForkEvent: true,
      _isBlockForkEvent: true,
      expiry: expiry || 0,
      blockHash: blockHash
    });
  }

}

exports.BlockForkEvent = BlockForkEvent;

class TransactionForkEvent extends ForkEvent {
  constructor(hash, expiry) {
    if (!(0, _bytes.isHexString)(hash, 32)) {
      logger.throwArgumentError("invalid transaction hash", "hash", hash);
    }

    super({
      _isForkEvent: true,
      _isTransactionForkEvent: true,
      expiry: expiry || 0,
      hash: hash
    });
  }

}

exports.TransactionForkEvent = TransactionForkEvent;

class TransactionOrderForkEvent extends ForkEvent {
  constructor(beforeHash, afterHash, expiry) {
    if (!(0, _bytes.isHexString)(beforeHash, 32)) {
      logger.throwArgumentError("invalid transaction hash", "beforeHash", beforeHash);
    }

    if (!(0, _bytes.isHexString)(afterHash, 32)) {
      logger.throwArgumentError("invalid transaction hash", "afterHash", afterHash);
    }

    super({
      _isForkEvent: true,
      _isTransactionOrderForkEvent: true,
      expiry: expiry || 0,
      beforeHash: beforeHash,
      afterHash: afterHash
    });
  }

} ///////////////////////////////
// Exported Abstracts


exports.TransactionOrderForkEvent = TransactionOrderForkEvent;

class Provider {
  constructor() {
    logger.checkAbstract(new.target, Provider);
    (0, _properties.defineReadOnly)(this, "_isProvider", true);
  }

  getFeeData() {
    return __awaiter(this, void 0, void 0, function* () {
      const {
        block,
        gasPrice
      } = yield (0, _properties.resolveProperties)({
        block: this.getBlock("latest"),
        gasPrice: this.getGasPrice().catch(error => {
          // @TODO: Why is this now failing on Calaveras?
          //console.log(error);
          return null;
        })
      });
      let maxFeePerGas = null,
          maxPriorityFeePerGas = null;

      if (block && block.baseFeePerGas) {
        // We may want to compute this more accurately in the future,
        // using the formula "check if the base fee is correct".
        // See: https://eips.ethereum.org/EIPS/eip-1559
        maxPriorityFeePerGas = _bignumber.BigNumber.from("1500000000");
        maxFeePerGas = block.baseFeePerGas.mul(2).add(maxPriorityFeePerGas);
      }

      return {
        maxFeePerGas,
        maxPriorityFeePerGas,
        gasPrice
      };
    });
  } // Alias for "on"


  addListener(eventName, listener) {
    return this.on(eventName, listener);
  } // Alias for "off"


  removeListener(eventName, listener) {
    return this.off(eventName, listener);
  }

  static isProvider(value) {
    return !!(value && value._isProvider);
  }

}

exports.Provider = Provider;
},{"@ethersproject/bignumber":"../../node_modules/@ethersproject/bignumber/lib.esm/index.js","@ethersproject/bytes":"../../node_modules/@ethersproject/bytes/lib.esm/index.js","@ethersproject/properties":"../../node_modules/@ethersproject/properties/lib.esm/index.js","@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","./_version":"../../node_modules/@ethersproject/abstract-provider/lib.esm/_version.js"}],"../../node_modules/@ethersproject/abstract-signer/lib.esm/_version.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.version = void 0;
const version = "abstract-signer/5.6.0";
exports.version = version;
},{}],"../../node_modules/@ethersproject/abstract-signer/lib.esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VoidSigner = exports.Signer = void 0;

var _properties = require("@ethersproject/properties");

var _logger = require("@ethersproject/logger");

var _version = require("./_version");

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

const logger = new _logger.Logger(_version.version);
const allowedTransactionKeys = ["accessList", "ccipReadEnabled", "chainId", "customData", "data", "from", "gasLimit", "gasPrice", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "to", "type", "value"];
const forwardErrors = [_logger.Logger.errors.INSUFFICIENT_FUNDS, _logger.Logger.errors.NONCE_EXPIRED, _logger.Logger.errors.REPLACEMENT_UNDERPRICED];
;
;

class Signer {
  ///////////////////
  // Sub-classes MUST call super
  constructor() {
    logger.checkAbstract(new.target, Signer);
    (0, _properties.defineReadOnly)(this, "_isSigner", true);
  } ///////////////////
  // Sub-classes MAY override these


  getBalance(blockTag) {
    return __awaiter(this, void 0, void 0, function* () {
      this._checkProvider("getBalance");

      return yield this.provider.getBalance(this.getAddress(), blockTag);
    });
  }

  getTransactionCount(blockTag) {
    return __awaiter(this, void 0, void 0, function* () {
      this._checkProvider("getTransactionCount");

      return yield this.provider.getTransactionCount(this.getAddress(), blockTag);
    });
  } // Populates "from" if unspecified, and estimates the gas for the transaction


  estimateGas(transaction) {
    return __awaiter(this, void 0, void 0, function* () {
      this._checkProvider("estimateGas");

      const tx = yield (0, _properties.resolveProperties)(this.checkTransaction(transaction));
      return yield this.provider.estimateGas(tx);
    });
  } // Populates "from" if unspecified, and calls with the transaction


  call(transaction, blockTag) {
    return __awaiter(this, void 0, void 0, function* () {
      this._checkProvider("call");

      const tx = yield (0, _properties.resolveProperties)(this.checkTransaction(transaction));
      return yield this.provider.call(tx, blockTag);
    });
  } // Populates all fields in a transaction, signs it and sends it to the network


  sendTransaction(transaction) {
    return __awaiter(this, void 0, void 0, function* () {
      this._checkProvider("sendTransaction");

      const tx = yield this.populateTransaction(transaction);
      const signedTx = yield this.signTransaction(tx);
      return yield this.provider.sendTransaction(signedTx);
    });
  }

  getChainId() {
    return __awaiter(this, void 0, void 0, function* () {
      this._checkProvider("getChainId");

      const network = yield this.provider.getNetwork();
      return network.chainId;
    });
  }

  getGasPrice() {
    return __awaiter(this, void 0, void 0, function* () {
      this._checkProvider("getGasPrice");

      return yield this.provider.getGasPrice();
    });
  }

  getFeeData() {
    return __awaiter(this, void 0, void 0, function* () {
      this._checkProvider("getFeeData");

      return yield this.provider.getFeeData();
    });
  }

  resolveName(name) {
    return __awaiter(this, void 0, void 0, function* () {
      this._checkProvider("resolveName");

      return yield this.provider.resolveName(name);
    });
  } // Checks a transaction does not contain invalid keys and if
  // no "from" is provided, populates it.
  // - does NOT require a provider
  // - adds "from" is not present
  // - returns a COPY (safe to mutate the result)
  // By default called from: (overriding these prevents it)
  //   - call
  //   - estimateGas
  //   - populateTransaction (and therefor sendTransaction)


  checkTransaction(transaction) {
    for (const key in transaction) {
      if (allowedTransactionKeys.indexOf(key) === -1) {
        logger.throwArgumentError("invalid transaction key: " + key, "transaction", transaction);
      }
    }

    const tx = (0, _properties.shallowCopy)(transaction);

    if (tx.from == null) {
      tx.from = this.getAddress();
    } else {
      // Make sure any provided address matches this signer
      tx.from = Promise.all([Promise.resolve(tx.from), this.getAddress()]).then(result => {
        if (result[0].toLowerCase() !== result[1].toLowerCase()) {
          logger.throwArgumentError("from address mismatch", "transaction", transaction);
        }

        return result[0];
      });
    }

    return tx;
  } // Populates ALL keys for a transaction and checks that "from" matches
  // this Signer. Should be used by sendTransaction but NOT by signTransaction.
  // By default called from: (overriding these prevents it)
  //   - sendTransaction
  //
  // Notes:
  //  - We allow gasPrice for EIP-1559 as long as it matches maxFeePerGas


  populateTransaction(transaction) {
    return __awaiter(this, void 0, void 0, function* () {
      const tx = yield (0, _properties.resolveProperties)(this.checkTransaction(transaction));

      if (tx.to != null) {
        tx.to = Promise.resolve(tx.to).then(to => __awaiter(this, void 0, void 0, function* () {
          if (to == null) {
            return null;
          }

          const address = yield this.resolveName(to);

          if (address == null) {
            logger.throwArgumentError("provided ENS name resolves to null", "tx.to", to);
          }

          return address;
        })); // Prevent this error from causing an UnhandledPromiseException

        tx.to.catch(error => {});
      } // Do not allow mixing pre-eip-1559 and eip-1559 properties


      const hasEip1559 = tx.maxFeePerGas != null || tx.maxPriorityFeePerGas != null;

      if (tx.gasPrice != null && (tx.type === 2 || hasEip1559)) {
        logger.throwArgumentError("eip-1559 transaction do not support gasPrice", "transaction", transaction);
      } else if ((tx.type === 0 || tx.type === 1) && hasEip1559) {
        logger.throwArgumentError("pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas", "transaction", transaction);
      }

      if ((tx.type === 2 || tx.type == null) && tx.maxFeePerGas != null && tx.maxPriorityFeePerGas != null) {
        // Fully-formed EIP-1559 transaction (skip getFeeData)
        tx.type = 2;
      } else if (tx.type === 0 || tx.type === 1) {
        // Explicit Legacy or EIP-2930 transaction
        // Populate missing gasPrice
        if (tx.gasPrice == null) {
          tx.gasPrice = this.getGasPrice();
        }
      } else {
        // We need to get fee data to determine things
        const feeData = yield this.getFeeData();

        if (tx.type == null) {
          // We need to auto-detect the intended type of this transaction...
          if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {
            // The network supports EIP-1559!
            // Upgrade transaction from null to eip-1559
            tx.type = 2;

            if (tx.gasPrice != null) {
              // Using legacy gasPrice property on an eip-1559 network,
              // so use gasPrice as both fee properties
              const gasPrice = tx.gasPrice;
              delete tx.gasPrice;
              tx.maxFeePerGas = gasPrice;
              tx.maxPriorityFeePerGas = gasPrice;
            } else {
              // Populate missing fee data
              if (tx.maxFeePerGas == null) {
                tx.maxFeePerGas = feeData.maxFeePerGas;
              }

              if (tx.maxPriorityFeePerGas == null) {
                tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
              }
            }
          } else if (feeData.gasPrice != null) {
            // Network doesn't support EIP-1559...
            // ...but they are trying to use EIP-1559 properties
            if (hasEip1559) {
              logger.throwError("network does not support EIP-1559", _logger.Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "populateTransaction"
              });
            } // Populate missing fee data


            if (tx.gasPrice == null) {
              tx.gasPrice = feeData.gasPrice;
            } // Explicitly set untyped transaction to legacy


            tx.type = 0;
          } else {
            // getFeeData has failed us.
            logger.throwError("failed to get consistent fee data", _logger.Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "signer.getFeeData"
            });
          }
        } else if (tx.type === 2) {
          // Explicitly using EIP-1559
          // Populate missing fee data
          if (tx.maxFeePerGas == null) {
            tx.maxFeePerGas = feeData.maxFeePerGas;
          }

          if (tx.maxPriorityFeePerGas == null) {
            tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
          }
        }
      }

      if (tx.nonce == null) {
        tx.nonce = this.getTransactionCount("pending");
      }

      if (tx.gasLimit == null) {
        tx.gasLimit = this.estimateGas(tx).catch(error => {
          if (forwardErrors.indexOf(error.code) >= 0) {
            throw error;
          }

          return logger.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", _logger.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
            error: error,
            tx: tx
          });
        });
      }

      if (tx.chainId == null) {
        tx.chainId = this.getChainId();
      } else {
        tx.chainId = Promise.all([Promise.resolve(tx.chainId), this.getChainId()]).then(results => {
          if (results[1] !== 0 && results[0] !== results[1]) {
            logger.throwArgumentError("chainId address mismatch", "transaction", transaction);
          }

          return results[0];
        });
      }

      return yield (0, _properties.resolveProperties)(tx);
    });
  } ///////////////////
  // Sub-classes SHOULD leave these alone


  _checkProvider(operation) {
    if (!this.provider) {
      logger.throwError("missing provider", _logger.Logger.errors.UNSUPPORTED_OPERATION, {
        operation: operation || "_checkProvider"
      });
    }
  }

  static isSigner(value) {
    return !!(value && value._isSigner);
  }

}

exports.Signer = Signer;

class VoidSigner extends Signer {
  constructor(address, provider) {
    logger.checkNew(new.target, VoidSigner);
    super();
    (0, _properties.defineReadOnly)(this, "address", address);
    (0, _properties.defineReadOnly)(this, "provider", provider || null);
  }

  getAddress() {
    return Promise.resolve(this.address);
  }

  _fail(message, operation) {
    return Promise.resolve().then(() => {
      logger.throwError(message, _logger.Logger.errors.UNSUPPORTED_OPERATION, {
        operation: operation
      });
    });
  }

  signMessage(message) {
    return this._fail("VoidSigner cannot sign messages", "signMessage");
  }

  signTransaction(transaction) {
    return this._fail("VoidSigner cannot sign transactions", "signTransaction");
  }

  _signTypedData(domain, types, value) {
    return this._fail("VoidSigner cannot sign typed data", "signTypedData");
  }

  connect(provider) {
    return new VoidSigner(this.address, provider);
  }

}

exports.VoidSigner = VoidSigner;
},{"@ethersproject/properties":"../../node_modules/@ethersproject/properties/lib.esm/index.js","@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","./_version":"../../node_modules/@ethersproject/abstract-signer/lib.esm/_version.js"}],"../../node_modules/minimalistic-assert/index.js":[function(require,module,exports) {
module.exports = assert;

function assert(val, msg) {
  if (!val)
    throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r)
    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
};

},{}],"../../node_modules/inherits/inherits_browser.js":[function(require,module,exports) {
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}

},{}],"../../node_modules/hash.js/lib/hash/utils.js":[function(require,module,exports) {
'use strict';

var assert = require('minimalistic-assert');
var inherits = require('inherits');

exports.inherits = inherits;

function isSurrogatePair(msg, i) {
  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
    return false;
  }
  if (i < 0 || i + 1 >= msg.length) {
    return false;
  }
  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
}

function toArray(msg, enc) {
  if (Array.isArray(msg))
    return msg.slice();
  if (!msg)
    return [];
  var res = [];
  if (typeof msg === 'string') {
    if (!enc) {
      // Inspired by stringToUtf8ByteArray() in closure-library by Google
      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
      // Apache License 2.0
      // https://github.com/google/closure-library/blob/master/LICENSE
      var p = 0;
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        if (c < 128) {
          res[p++] = c;
        } else if (c < 2048) {
          res[p++] = (c >> 6) | 192;
          res[p++] = (c & 63) | 128;
        } else if (isSurrogatePair(msg, i)) {
          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
          res[p++] = (c >> 18) | 240;
          res[p++] = ((c >> 12) & 63) | 128;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        } else {
          res[p++] = (c >> 12) | 224;
          res[p++] = ((c >> 6) & 63) | 128;
          res[p++] = (c & 63) | 128;
        }
      }
    } else if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0)
        msg = '0' + msg;
      for (i = 0; i < msg.length; i += 2)
        res.push(parseInt(msg[i] + msg[i + 1], 16));
    }
  } else {
    for (i = 0; i < msg.length; i++)
      res[i] = msg[i] | 0;
  }
  return res;
}
exports.toArray = toArray;

function toHex(msg) {
  var res = '';
  for (var i = 0; i < msg.length; i++)
    res += zero2(msg[i].toString(16));
  return res;
}
exports.toHex = toHex;

function htonl(w) {
  var res = (w >>> 24) |
            ((w >>> 8) & 0xff00) |
            ((w << 8) & 0xff0000) |
            ((w & 0xff) << 24);
  return res >>> 0;
}
exports.htonl = htonl;

function toHex32(msg, endian) {
  var res = '';
  for (var i = 0; i < msg.length; i++) {
    var w = msg[i];
    if (endian === 'little')
      w = htonl(w);
    res += zero8(w.toString(16));
  }
  return res;
}
exports.toHex32 = toHex32;

function zero2(word) {
  if (word.length === 1)
    return '0' + word;
  else
    return word;
}
exports.zero2 = zero2;

function zero8(word) {
  if (word.length === 7)
    return '0' + word;
  else if (word.length === 6)
    return '00' + word;
  else if (word.length === 5)
    return '000' + word;
  else if (word.length === 4)
    return '0000' + word;
  else if (word.length === 3)
    return '00000' + word;
  else if (word.length === 2)
    return '000000' + word;
  else if (word.length === 1)
    return '0000000' + word;
  else
    return word;
}
exports.zero8 = zero8;

function join32(msg, start, end, endian) {
  var len = end - start;
  assert(len % 4 === 0);
  var res = new Array(len / 4);
  for (var i = 0, k = start; i < res.length; i++, k += 4) {
    var w;
    if (endian === 'big')
      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
    else
      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
    res[i] = w >>> 0;
  }
  return res;
}
exports.join32 = join32;

function split32(msg, endian) {
  var res = new Array(msg.length * 4);
  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
    var m = msg[i];
    if (endian === 'big') {
      res[k] = m >>> 24;
      res[k + 1] = (m >>> 16) & 0xff;
      res[k + 2] = (m >>> 8) & 0xff;
      res[k + 3] = m & 0xff;
    } else {
      res[k + 3] = m >>> 24;
      res[k + 2] = (m >>> 16) & 0xff;
      res[k + 1] = (m >>> 8) & 0xff;
      res[k] = m & 0xff;
    }
  }
  return res;
}
exports.split32 = split32;

function rotr32(w, b) {
  return (w >>> b) | (w << (32 - b));
}
exports.rotr32 = rotr32;

function rotl32(w, b) {
  return (w << b) | (w >>> (32 - b));
}
exports.rotl32 = rotl32;

function sum32(a, b) {
  return (a + b) >>> 0;
}
exports.sum32 = sum32;

function sum32_3(a, b, c) {
  return (a + b + c) >>> 0;
}
exports.sum32_3 = sum32_3;

function sum32_4(a, b, c, d) {
  return (a + b + c + d) >>> 0;
}
exports.sum32_4 = sum32_4;

function sum32_5(a, b, c, d, e) {
  return (a + b + c + d + e) >>> 0;
}
exports.sum32_5 = sum32_5;

function sum64(buf, pos, ah, al) {
  var bh = buf[pos];
  var bl = buf[pos + 1];

  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  buf[pos] = hi >>> 0;
  buf[pos + 1] = lo;
}
exports.sum64 = sum64;

function sum64_hi(ah, al, bh, bl) {
  var lo = (al + bl) >>> 0;
  var hi = (lo < al ? 1 : 0) + ah + bh;
  return hi >>> 0;
}
exports.sum64_hi = sum64_hi;

function sum64_lo(ah, al, bh, bl) {
  var lo = al + bl;
  return lo >>> 0;
}
exports.sum64_lo = sum64_lo;

function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;

  var hi = ah + bh + ch + dh + carry;
  return hi >>> 0;
}
exports.sum64_4_hi = sum64_4_hi;

function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
  var lo = al + bl + cl + dl;
  return lo >>> 0;
}
exports.sum64_4_lo = sum64_4_lo;

function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var carry = 0;
  var lo = al;
  lo = (lo + bl) >>> 0;
  carry += lo < al ? 1 : 0;
  lo = (lo + cl) >>> 0;
  carry += lo < cl ? 1 : 0;
  lo = (lo + dl) >>> 0;
  carry += lo < dl ? 1 : 0;
  lo = (lo + el) >>> 0;
  carry += lo < el ? 1 : 0;

  var hi = ah + bh + ch + dh + eh + carry;
  return hi >>> 0;
}
exports.sum64_5_hi = sum64_5_hi;

function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
  var lo = al + bl + cl + dl + el;

  return lo >>> 0;
}
exports.sum64_5_lo = sum64_5_lo;

function rotr64_hi(ah, al, num) {
  var r = (al << (32 - num)) | (ah >>> num);
  return r >>> 0;
}
exports.rotr64_hi = rotr64_hi;

function rotr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.rotr64_lo = rotr64_lo;

function shr64_hi(ah, al, num) {
  return ah >>> num;
}
exports.shr64_hi = shr64_hi;

function shr64_lo(ah, al, num) {
  var r = (ah << (32 - num)) | (al >>> num);
  return r >>> 0;
}
exports.shr64_lo = shr64_lo;

},{"minimalistic-assert":"../../node_modules/minimalistic-assert/index.js","inherits":"../../node_modules/inherits/inherits_browser.js"}],"../../node_modules/hash.js/lib/hash/common.js":[function(require,module,exports) {
'use strict';

var utils = require('./utils');
var assert = require('minimalistic-assert');

function BlockHash() {
  this.pending = null;
  this.pendingTotal = 0;
  this.blockSize = this.constructor.blockSize;
  this.outSize = this.constructor.outSize;
  this.hmacStrength = this.constructor.hmacStrength;
  this.padLength = this.constructor.padLength / 8;
  this.endian = 'big';

  this._delta8 = this.blockSize / 8;
  this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;

BlockHash.prototype.update = function update(msg, enc) {
  // Convert message to array, pad it, and join into 32bit blocks
  msg = utils.toArray(msg, enc);
  if (!this.pending)
    this.pending = msg;
  else
    this.pending = this.pending.concat(msg);
  this.pendingTotal += msg.length;

  // Enough data, try updating
  if (this.pending.length >= this._delta8) {
    msg = this.pending;

    // Process pending data in blocks
    var r = msg.length % this._delta8;
    this.pending = msg.slice(msg.length - r, msg.length);
    if (this.pending.length === 0)
      this.pending = null;

    msg = utils.join32(msg, 0, msg.length - r, this.endian);
    for (var i = 0; i < msg.length; i += this._delta32)
      this._update(msg, i, i + this._delta32);
  }

  return this;
};

BlockHash.prototype.digest = function digest(enc) {
  this.update(this._pad());
  assert(this.pending === null);

  return this._digest(enc);
};

BlockHash.prototype._pad = function pad() {
  var len = this.pendingTotal;
  var bytes = this._delta8;
  var k = bytes - ((len + this.padLength) % bytes);
  var res = new Array(k + this.padLength);
  res[0] = 0x80;
  for (var i = 1; i < k; i++)
    res[i] = 0;

  // Append length
  len <<= 3;
  if (this.endian === 'big') {
    for (var t = 8; t < this.padLength; t++)
      res[i++] = 0;

    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = len & 0xff;
  } else {
    res[i++] = len & 0xff;
    res[i++] = (len >>> 8) & 0xff;
    res[i++] = (len >>> 16) & 0xff;
    res[i++] = (len >>> 24) & 0xff;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;
    res[i++] = 0;

    for (t = 8; t < this.padLength; t++)
      res[i++] = 0;
  }

  return res;
};

},{"./utils":"../../node_modules/hash.js/lib/hash/utils.js","minimalistic-assert":"../../node_modules/minimalistic-assert/index.js"}],"../../node_modules/hash.js/lib/hash/sha/common.js":[function(require,module,exports) {
'use strict';

var utils = require('../utils');
var rotr32 = utils.rotr32;

function ft_1(s, x, y, z) {
  if (s === 0)
    return ch32(x, y, z);
  if (s === 1 || s === 3)
    return p32(x, y, z);
  if (s === 2)
    return maj32(x, y, z);
}
exports.ft_1 = ft_1;

function ch32(x, y, z) {
  return (x & y) ^ ((~x) & z);
}
exports.ch32 = ch32;

function maj32(x, y, z) {
  return (x & y) ^ (x & z) ^ (y & z);
}
exports.maj32 = maj32;

function p32(x, y, z) {
  return x ^ y ^ z;
}
exports.p32 = p32;

function s0_256(x) {
  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}
exports.s0_256 = s0_256;

function s1_256(x) {
  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}
exports.s1_256 = s1_256;

function g0_256(x) {
  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
}
exports.g0_256 = g0_256;

function g1_256(x) {
  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
}
exports.g1_256 = g1_256;

},{"../utils":"../../node_modules/hash.js/lib/hash/utils.js"}],"../../node_modules/hash.js/lib/hash/sha/1.js":[function(require,module,exports) {
'use strict';

var utils = require('../utils');
var common = require('../common');
var shaCommon = require('./common');

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_5 = utils.sum32_5;
var ft_1 = shaCommon.ft_1;
var BlockHash = common.BlockHash;

var sha1_K = [
  0x5A827999, 0x6ED9EBA1,
  0x8F1BBCDC, 0xCA62C1D6
];

function SHA1() {
  if (!(this instanceof SHA1))
    return new SHA1();

  BlockHash.call(this);
  this.h = [
    0x67452301, 0xefcdab89, 0x98badcfe,
    0x10325476, 0xc3d2e1f0 ];
  this.W = new Array(80);
}

utils.inherits(SHA1, BlockHash);
module.exports = SHA1;

SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;

SHA1.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];

  for(; i < W.length; i++)
    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];

  for (i = 0; i < W.length; i++) {
    var s = ~~(i / 20);
    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
    e = d;
    d = c;
    c = rotl32(b, 30);
    b = a;
    a = t;
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
};

SHA1.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

},{"../utils":"../../node_modules/hash.js/lib/hash/utils.js","../common":"../../node_modules/hash.js/lib/hash/common.js","./common":"../../node_modules/hash.js/lib/hash/sha/common.js"}],"../../node_modules/hash.js/lib/hash/sha/256.js":[function(require,module,exports) {
'use strict';

var utils = require('../utils');
var common = require('../common');
var shaCommon = require('./common');
var assert = require('minimalistic-assert');

var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;

var BlockHash = common.BlockHash;

var sha256_K = [
  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
];

function SHA256() {
  if (!(this instanceof SHA256))
    return new SHA256();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
  ];
  this.k = sha256_K;
  this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
module.exports = SHA256;

SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;

SHA256.prototype._update = function _update(msg, start) {
  var W = this.W;

  for (var i = 0; i < 16; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i++)
    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

  var a = this.h[0];
  var b = this.h[1];
  var c = this.h[2];
  var d = this.h[3];
  var e = this.h[4];
  var f = this.h[5];
  var g = this.h[6];
  var h = this.h[7];

  assert(this.k.length === W.length);
  for (i = 0; i < W.length; i++) {
    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
    var T2 = sum32(s0_256(a), maj32(a, b, c));
    h = g;
    g = f;
    f = e;
    e = sum32(d, T1);
    d = c;
    c = b;
    b = a;
    a = sum32(T1, T2);
  }

  this.h[0] = sum32(this.h[0], a);
  this.h[1] = sum32(this.h[1], b);
  this.h[2] = sum32(this.h[2], c);
  this.h[3] = sum32(this.h[3], d);
  this.h[4] = sum32(this.h[4], e);
  this.h[5] = sum32(this.h[5], f);
  this.h[6] = sum32(this.h[6], g);
  this.h[7] = sum32(this.h[7], h);
};

SHA256.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

},{"../utils":"../../node_modules/hash.js/lib/hash/utils.js","../common":"../../node_modules/hash.js/lib/hash/common.js","./common":"../../node_modules/hash.js/lib/hash/sha/common.js","minimalistic-assert":"../../node_modules/minimalistic-assert/index.js"}],"../../node_modules/hash.js/lib/hash/sha/224.js":[function(require,module,exports) {
'use strict';

var utils = require('../utils');
var SHA256 = require('./256');

function SHA224() {
  if (!(this instanceof SHA224))
    return new SHA224();

  SHA256.call(this);
  this.h = [
    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
}
utils.inherits(SHA224, SHA256);
module.exports = SHA224;

SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;

SHA224.prototype._digest = function digest(enc) {
  // Just truncate output
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 7), 'big');
  else
    return utils.split32(this.h.slice(0, 7), 'big');
};


},{"../utils":"../../node_modules/hash.js/lib/hash/utils.js","./256":"../../node_modules/hash.js/lib/hash/sha/256.js"}],"../../node_modules/hash.js/lib/hash/sha/512.js":[function(require,module,exports) {
'use strict';

var utils = require('../utils');
var common = require('../common');
var assert = require('minimalistic-assert');

var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;

var BlockHash = common.BlockHash;

var sha512_K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

function SHA512() {
  if (!(this instanceof SHA512))
    return new SHA512();

  BlockHash.call(this);
  this.h = [
    0x6a09e667, 0xf3bcc908,
    0xbb67ae85, 0x84caa73b,
    0x3c6ef372, 0xfe94f82b,
    0xa54ff53a, 0x5f1d36f1,
    0x510e527f, 0xade682d1,
    0x9b05688c, 0x2b3e6c1f,
    0x1f83d9ab, 0xfb41bd6b,
    0x5be0cd19, 0x137e2179 ];
  this.k = sha512_K;
  this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
module.exports = SHA512;

SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;

SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
  var W = this.W;

  // 32 x 32bit words
  for (var i = 0; i < 32; i++)
    W[i] = msg[start + i];
  for (; i < W.length; i += 2) {
    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
    var c1_hi = W[i - 14];  // i - 7
    var c1_lo = W[i - 13];
    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
    var c3_hi = W[i - 32];  // i - 16
    var c3_lo = W[i - 31];

    W[i] = sum64_4_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
    W[i + 1] = sum64_4_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo);
  }
};

SHA512.prototype._update = function _update(msg, start) {
  this._prepareBlock(msg, start);

  var W = this.W;

  var ah = this.h[0];
  var al = this.h[1];
  var bh = this.h[2];
  var bl = this.h[3];
  var ch = this.h[4];
  var cl = this.h[5];
  var dh = this.h[6];
  var dl = this.h[7];
  var eh = this.h[8];
  var el = this.h[9];
  var fh = this.h[10];
  var fl = this.h[11];
  var gh = this.h[12];
  var gl = this.h[13];
  var hh = this.h[14];
  var hl = this.h[15];

  assert(this.k.length === W.length);
  for (var i = 0; i < W.length; i += 2) {
    var c0_hi = hh;
    var c0_lo = hl;
    var c1_hi = s1_512_hi(eh, el);
    var c1_lo = s1_512_lo(eh, el);
    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
    var c3_hi = this.k[i];
    var c3_lo = this.k[i + 1];
    var c4_hi = W[i];
    var c4_lo = W[i + 1];

    var T1_hi = sum64_5_hi(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);
    var T1_lo = sum64_5_lo(
      c0_hi, c0_lo,
      c1_hi, c1_lo,
      c2_hi, c2_lo,
      c3_hi, c3_lo,
      c4_hi, c4_lo);

    c0_hi = s0_512_hi(ah, al);
    c0_lo = s0_512_lo(ah, al);
    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

    hh = gh;
    hl = gl;

    gh = fh;
    gl = fl;

    fh = eh;
    fl = el;

    eh = sum64_hi(dh, dl, T1_hi, T1_lo);
    el = sum64_lo(dl, dl, T1_hi, T1_lo);

    dh = ch;
    dl = cl;

    ch = bh;
    cl = bl;

    bh = ah;
    bl = al;

    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
  }

  sum64(this.h, 0, ah, al);
  sum64(this.h, 2, bh, bl);
  sum64(this.h, 4, ch, cl);
  sum64(this.h, 6, dh, dl);
  sum64(this.h, 8, eh, el);
  sum64(this.h, 10, fh, fl);
  sum64(this.h, 12, gh, gl);
  sum64(this.h, 14, hh, hl);
};

SHA512.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'big');
  else
    return utils.split32(this.h, 'big');
};

function ch64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ ((~xh) & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function ch64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ ((~xl) & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_hi(xh, xl, yh, yl, zh) {
  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function maj64_lo(xh, xl, yh, yl, zh, zl) {
  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 28);
  var c1_hi = rotr64_hi(xl, xh, 2);  // 34
  var c2_hi = rotr64_hi(xl, xh, 7);  // 39

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 28);
  var c1_lo = rotr64_lo(xl, xh, 2);  // 34
  var c2_lo = rotr64_lo(xl, xh, 7);  // 39

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 14);
  var c1_hi = rotr64_hi(xh, xl, 18);
  var c2_hi = rotr64_hi(xl, xh, 9);  // 41

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function s1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 14);
  var c1_lo = rotr64_lo(xh, xl, 18);
  var c2_lo = rotr64_lo(xl, xh, 9);  // 41

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 1);
  var c1_hi = rotr64_hi(xh, xl, 8);
  var c2_hi = shr64_hi(xh, xl, 7);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g0_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 1);
  var c1_lo = rotr64_lo(xh, xl, 8);
  var c2_lo = shr64_lo(xh, xl, 7);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_hi(xh, xl) {
  var c0_hi = rotr64_hi(xh, xl, 19);
  var c1_hi = rotr64_hi(xl, xh, 29);  // 61
  var c2_hi = shr64_hi(xh, xl, 6);

  var r = c0_hi ^ c1_hi ^ c2_hi;
  if (r < 0)
    r += 0x100000000;
  return r;
}

function g1_512_lo(xh, xl) {
  var c0_lo = rotr64_lo(xh, xl, 19);
  var c1_lo = rotr64_lo(xl, xh, 29);  // 61
  var c2_lo = shr64_lo(xh, xl, 6);

  var r = c0_lo ^ c1_lo ^ c2_lo;
  if (r < 0)
    r += 0x100000000;
  return r;
}

},{"../utils":"../../node_modules/hash.js/lib/hash/utils.js","../common":"../../node_modules/hash.js/lib/hash/common.js","minimalistic-assert":"../../node_modules/minimalistic-assert/index.js"}],"../../node_modules/hash.js/lib/hash/sha/384.js":[function(require,module,exports) {
'use strict';

var utils = require('../utils');

var SHA512 = require('./512');

function SHA384() {
  if (!(this instanceof SHA384))
    return new SHA384();

  SHA512.call(this);
  this.h = [
    0xcbbb9d5d, 0xc1059ed8,
    0x629a292a, 0x367cd507,
    0x9159015a, 0x3070dd17,
    0x152fecd8, 0xf70e5939,
    0x67332667, 0xffc00b31,
    0x8eb44a87, 0x68581511,
    0xdb0c2e0d, 0x64f98fa7,
    0x47b5481d, 0xbefa4fa4 ];
}
utils.inherits(SHA384, SHA512);
module.exports = SHA384;

SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;

SHA384.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h.slice(0, 12), 'big');
  else
    return utils.split32(this.h.slice(0, 12), 'big');
};

},{"../utils":"../../node_modules/hash.js/lib/hash/utils.js","./512":"../../node_modules/hash.js/lib/hash/sha/512.js"}],"../../node_modules/hash.js/lib/hash/sha.js":[function(require,module,exports) {
'use strict';

exports.sha1 = require('./sha/1');
exports.sha224 = require('./sha/224');
exports.sha256 = require('./sha/256');
exports.sha384 = require('./sha/384');
exports.sha512 = require('./sha/512');

},{"./sha/1":"../../node_modules/hash.js/lib/hash/sha/1.js","./sha/224":"../../node_modules/hash.js/lib/hash/sha/224.js","./sha/256":"../../node_modules/hash.js/lib/hash/sha/256.js","./sha/384":"../../node_modules/hash.js/lib/hash/sha/384.js","./sha/512":"../../node_modules/hash.js/lib/hash/sha/512.js"}],"../../node_modules/hash.js/lib/hash/ripemd.js":[function(require,module,exports) {
'use strict';

var utils = require('./utils');
var common = require('./common');

var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = common.BlockHash;

function RIPEMD160() {
  if (!(this instanceof RIPEMD160))
    return new RIPEMD160();

  BlockHash.call(this);

  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
  this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;

RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;

RIPEMD160.prototype._update = function update(msg, start) {
  var A = this.h[0];
  var B = this.h[1];
  var C = this.h[2];
  var D = this.h[3];
  var E = this.h[4];
  var Ah = A;
  var Bh = B;
  var Ch = C;
  var Dh = D;
  var Eh = E;
  for (var j = 0; j < 80; j++) {
    var T = sum32(
      rotl32(
        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
        s[j]),
      E);
    A = E;
    E = D;
    D = rotl32(C, 10);
    C = B;
    B = T;
    T = sum32(
      rotl32(
        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
        sh[j]),
      Eh);
    Ah = Eh;
    Eh = Dh;
    Dh = rotl32(Ch, 10);
    Ch = Bh;
    Bh = T;
  }
  T = sum32_3(this.h[1], C, Dh);
  this.h[1] = sum32_3(this.h[2], D, Eh);
  this.h[2] = sum32_3(this.h[3], E, Ah);
  this.h[3] = sum32_3(this.h[4], A, Bh);
  this.h[4] = sum32_3(this.h[0], B, Ch);
  this.h[0] = T;
};

RIPEMD160.prototype._digest = function digest(enc) {
  if (enc === 'hex')
    return utils.toHex32(this.h, 'little');
  else
    return utils.split32(this.h, 'little');
};

function f(j, x, y, z) {
  if (j <= 15)
    return x ^ y ^ z;
  else if (j <= 31)
    return (x & y) | ((~x) & z);
  else if (j <= 47)
    return (x | (~y)) ^ z;
  else if (j <= 63)
    return (x & z) | (y & (~z));
  else
    return x ^ (y | (~z));
}

function K(j) {
  if (j <= 15)
    return 0x00000000;
  else if (j <= 31)
    return 0x5a827999;
  else if (j <= 47)
    return 0x6ed9eba1;
  else if (j <= 63)
    return 0x8f1bbcdc;
  else
    return 0xa953fd4e;
}

function Kh(j) {
  if (j <= 15)
    return 0x50a28be6;
  else if (j <= 31)
    return 0x5c4dd124;
  else if (j <= 47)
    return 0x6d703ef3;
  else if (j <= 63)
    return 0x7a6d76e9;
  else
    return 0x00000000;
}

var r = [
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
];

var rh = [
  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
];

var s = [
  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
];

var sh = [
  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
];

},{"./utils":"../../node_modules/hash.js/lib/hash/utils.js","./common":"../../node_modules/hash.js/lib/hash/common.js"}],"../../node_modules/hash.js/lib/hash/hmac.js":[function(require,module,exports) {
'use strict';

var utils = require('./utils');
var assert = require('minimalistic-assert');

function Hmac(hash, key, enc) {
  if (!(this instanceof Hmac))
    return new Hmac(hash, key, enc);
  this.Hash = hash;
  this.blockSize = hash.blockSize / 8;
  this.outSize = hash.outSize / 8;
  this.inner = null;
  this.outer = null;

  this._init(utils.toArray(key, enc));
}
module.exports = Hmac;

Hmac.prototype._init = function init(key) {
  // Shorten key, if needed
  if (key.length > this.blockSize)
    key = new this.Hash().update(key).digest();
  assert(key.length <= this.blockSize);

  // Add padding to key
  for (var i = key.length; i < this.blockSize; i++)
    key.push(0);

  for (i = 0; i < key.length; i++)
    key[i] ^= 0x36;
  this.inner = new this.Hash().update(key);

  // 0x36 ^ 0x5c = 0x6a
  for (i = 0; i < key.length; i++)
    key[i] ^= 0x6a;
  this.outer = new this.Hash().update(key);
};

Hmac.prototype.update = function update(msg, enc) {
  this.inner.update(msg, enc);
  return this;
};

Hmac.prototype.digest = function digest(enc) {
  this.outer.update(this.inner.digest());
  return this.outer.digest(enc);
};

},{"./utils":"../../node_modules/hash.js/lib/hash/utils.js","minimalistic-assert":"../../node_modules/minimalistic-assert/index.js"}],"../../node_modules/hash.js/lib/hash.js":[function(require,module,exports) {
var hash = exports;

hash.utils = require('./hash/utils');
hash.common = require('./hash/common');
hash.sha = require('./hash/sha');
hash.ripemd = require('./hash/ripemd');
hash.hmac = require('./hash/hmac');

// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;

},{"./hash/utils":"../../node_modules/hash.js/lib/hash/utils.js","./hash/common":"../../node_modules/hash.js/lib/hash/common.js","./hash/sha":"../../node_modules/hash.js/lib/hash/sha.js","./hash/ripemd":"../../node_modules/hash.js/lib/hash/ripemd.js","./hash/hmac":"../../node_modules/hash.js/lib/hash/hmac.js"}],"../../node_modules/@ethersproject/signing-key/lib.esm/elliptic.js":[function(require,module,exports) {
var global = arguments[3];
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EC = void 0;

var _bn = _interopRequireDefault(require("bn.js"));

var _hash = _interopRequireDefault(require("hash.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs(x) {
  return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule(fn, basedir, module) {
  return module = {
    path: basedir,
    exports: {},
    require: function (path, base) {
      return commonjsRequire(path, base === undefined || base === null ? module.path : base);
    }
  }, fn(module, module.exports), module.exports;
}

function getDefaultExportFromNamespaceIfPresent(n) {
  return n && Object.prototype.hasOwnProperty.call(n, 'default') ? n['default'] : n;
}

function getDefaultExportFromNamespaceIfNotNamed(n) {
  return n && Object.prototype.hasOwnProperty.call(n, 'default') && Object.keys(n).length === 1 ? n['default'] : n;
}

function getAugmentedNamespace(n) {
  if (n.__esModule) return n;
  var a = Object.defineProperty({}, '__esModule', {
    value: true
  });
  Object.keys(n).forEach(function (k) {
    var d = Object.getOwnPropertyDescriptor(n, k);
    Object.defineProperty(a, k, d.get ? d : {
      enumerable: true,
      get: function () {
        return n[k];
      }
    });
  });
  return a;
}

function commonjsRequire() {
  throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
}

var minimalisticAssert = assert;

function assert(val, msg) {
  if (!val) throw new Error(msg || 'Assertion failed');
}

assert.equal = function assertEqual(l, r, msg) {
  if (l != r) throw new Error(msg || 'Assertion failed: ' + l + ' != ' + r);
};

var utils_1 = createCommonjsModule(function (module, exports) {
  'use strict';

  var utils = exports;

  function toArray(msg, enc) {
    if (Array.isArray(msg)) return msg.slice();
    if (!msg) return [];
    var res = [];

    if (typeof msg !== 'string') {
      for (var i = 0; i < msg.length; i++) res[i] = msg[i] | 0;

      return res;
    }

    if (enc === 'hex') {
      msg = msg.replace(/[^a-z0-9]+/ig, '');
      if (msg.length % 2 !== 0) msg = '0' + msg;

      for (var i = 0; i < msg.length; i += 2) res.push(parseInt(msg[i] + msg[i + 1], 16));
    } else {
      for (var i = 0; i < msg.length; i++) {
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 0xff;
        if (hi) res.push(hi, lo);else res.push(lo);
      }
    }

    return res;
  }

  utils.toArray = toArray;

  function zero2(word) {
    if (word.length === 1) return '0' + word;else return word;
  }

  utils.zero2 = zero2;

  function toHex(msg) {
    var res = '';

    for (var i = 0; i < msg.length; i++) res += zero2(msg[i].toString(16));

    return res;
  }

  utils.toHex = toHex;

  utils.encode = function encode(arr, enc) {
    if (enc === 'hex') return toHex(arr);else return arr;
  };
});
var utils_1$1 = createCommonjsModule(function (module, exports) {
  'use strict';

  var utils = exports;
  utils.assert = minimalisticAssert;
  utils.toArray = utils_1.toArray;
  utils.zero2 = utils_1.zero2;
  utils.toHex = utils_1.toHex;
  utils.encode = utils_1.encode; // Represent num in a w-NAF form

  function getNAF(num, w, bits) {
    var naf = new Array(Math.max(num.bitLength(), bits) + 1);
    naf.fill(0);
    var ws = 1 << w + 1;
    var k = num.clone();

    for (var i = 0; i < naf.length; i++) {
      var z;
      var mod = k.andln(ws - 1);

      if (k.isOdd()) {
        if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;else z = mod;
        k.isubn(z);
      } else {
        z = 0;
      }

      naf[i] = z;
      k.iushrn(1);
    }

    return naf;
  }

  utils.getNAF = getNAF; // Represent k1, k2 in a Joint Sparse Form

  function getJSF(k1, k2) {
    var jsf = [[], []];
    k1 = k1.clone();
    k2 = k2.clone();
    var d1 = 0;
    var d2 = 0;
    var m8;

    while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
      // First phase
      var m14 = k1.andln(3) + d1 & 3;
      var m24 = k2.andln(3) + d2 & 3;
      if (m14 === 3) m14 = -1;
      if (m24 === 3) m24 = -1;
      var u1;

      if ((m14 & 1) === 0) {
        u1 = 0;
      } else {
        m8 = k1.andln(7) + d1 & 7;
        if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;else u1 = m14;
      }

      jsf[0].push(u1);
      var u2;

      if ((m24 & 1) === 0) {
        u2 = 0;
      } else {
        m8 = k2.andln(7) + d2 & 7;
        if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;else u2 = m24;
      }

      jsf[1].push(u2); // Second phase

      if (2 * d1 === u1 + 1) d1 = 1 - d1;
      if (2 * d2 === u2 + 1) d2 = 1 - d2;
      k1.iushrn(1);
      k2.iushrn(1);
    }

    return jsf;
  }

  utils.getJSF = getJSF;

  function cachedProperty(obj, name, computer) {
    var key = '_' + name;

    obj.prototype[name] = function cachedProperty() {
      return this[key] !== undefined ? this[key] : this[key] = computer.call(this);
    };
  }

  utils.cachedProperty = cachedProperty;

  function parseBytes(bytes) {
    return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') : bytes;
  }

  utils.parseBytes = parseBytes;

  function intFromLE(bytes) {
    return new _bn.default(bytes, 'hex', 'le');
  }

  utils.intFromLE = intFromLE;
});
'use strict';

var getNAF = utils_1$1.getNAF;
var getJSF = utils_1$1.getJSF;
var assert$1 = utils_1$1.assert;

function BaseCurve(type, conf) {
  this.type = type;
  this.p = new _bn.default(conf.p, 16); // Use Montgomery, when there is no fast reduction for the prime

  this.red = conf.prime ? _bn.default.red(conf.prime) : _bn.default.mont(this.p); // Useful for many curves

  this.zero = new _bn.default(0).toRed(this.red);
  this.one = new _bn.default(1).toRed(this.red);
  this.two = new _bn.default(2).toRed(this.red); // Curve configuration, optional

  this.n = conf.n && new _bn.default(conf.n, 16);
  this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed); // Temporary arrays

  this._wnafT1 = new Array(4);
  this._wnafT2 = new Array(4);
  this._wnafT3 = new Array(4);
  this._wnafT4 = new Array(4);
  this._bitLength = this.n ? this.n.bitLength() : 0; // Generalized Greg Maxwell's trick

  var adjustCount = this.n && this.p.div(this.n);

  if (!adjustCount || adjustCount.cmpn(100) > 0) {
    this.redN = null;
  } else {
    this._maxwellTrick = true;
    this.redN = this.n.toRed(this.red);
  }
}

var base = BaseCurve;

BaseCurve.prototype.point = function point() {
  throw new Error('Not implemented');
};

BaseCurve.prototype.validate = function validate() {
  throw new Error('Not implemented');
};

BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
  assert$1(p.precomputed);

  var doubles = p._getDoubles();

  var naf = getNAF(k, 1, this._bitLength);
  var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
  I /= 3; // Translate into more windowed form

  var repr = [];
  var j;
  var nafW;

  for (j = 0; j < naf.length; j += doubles.step) {
    nafW = 0;

    for (var l = j + doubles.step - 1; l >= j; l--) nafW = (nafW << 1) + naf[l];

    repr.push(nafW);
  }

  var a = this.jpoint(null, null, null);
  var b = this.jpoint(null, null, null);

  for (var i = I; i > 0; i--) {
    for (j = 0; j < repr.length; j++) {
      nafW = repr[j];
      if (nafW === i) b = b.mixedAdd(doubles.points[j]);else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());
    }

    a = a.add(b);
  }

  return a.toP();
};

BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
  var w = 4; // Precompute window

  var nafPoints = p._getNAFPoints(w);

  w = nafPoints.wnd;
  var wnd = nafPoints.points; // Get NAF form

  var naf = getNAF(k, w, this._bitLength); // Add `this`*(N+1) for every w-NAF index

  var acc = this.jpoint(null, null, null);

  for (var i = naf.length - 1; i >= 0; i--) {
    // Count zeroes
    for (var l = 0; i >= 0 && naf[i] === 0; i--) l++;

    if (i >= 0) l++;
    acc = acc.dblp(l);
    if (i < 0) break;
    var z = naf[i];
    assert$1(z !== 0);

    if (p.type === 'affine') {
      // J +- P
      if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]);else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
    } else {
      // J +- J
      if (z > 0) acc = acc.add(wnd[z - 1 >> 1]);else acc = acc.add(wnd[-z - 1 >> 1].neg());
    }
  }

  return p.type === 'affine' ? acc.toP() : acc;
};

BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
  var wndWidth = this._wnafT1;
  var wnd = this._wnafT2;
  var naf = this._wnafT3; // Fill all arrays

  var max = 0;
  var i;
  var j;
  var p;

  for (i = 0; i < len; i++) {
    p = points[i];

    var nafPoints = p._getNAFPoints(defW);

    wndWidth[i] = nafPoints.wnd;
    wnd[i] = nafPoints.points;
  } // Comb small window NAFs


  for (i = len - 1; i >= 1; i -= 2) {
    var a = i - 1;
    var b = i;

    if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
      naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
      naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
      max = Math.max(naf[a].length, max);
      max = Math.max(naf[b].length, max);
      continue;
    }

    var comb = [points[a],
    /* 1 */
    null,
    /* 3 */
    null,
    /* 5 */
    points[b]
    /* 7 */
    ]; // Try to avoid Projective points, if possible

    if (points[a].y.cmp(points[b].y) === 0) {
      comb[1] = points[a].add(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].add(points[b].neg());
    } else {
      comb[1] = points[a].toJ().mixedAdd(points[b]);
      comb[2] = points[a].toJ().mixedAdd(points[b].neg());
    }

    var index = [-3,
    /* -1 -1 */
    -1,
    /* -1 0 */
    -5,
    /* -1 1 */
    -7,
    /* 0 -1 */
    0,
    /* 0 0 */
    7,
    /* 0 1 */
    5,
    /* 1 -1 */
    1,
    /* 1 0 */
    3
    /* 1 1 */
    ];
    var jsf = getJSF(coeffs[a], coeffs[b]);
    max = Math.max(jsf[0].length, max);
    naf[a] = new Array(max);
    naf[b] = new Array(max);

    for (j = 0; j < max; j++) {
      var ja = jsf[0][j] | 0;
      var jb = jsf[1][j] | 0;
      naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
      naf[b][j] = 0;
      wnd[a] = comb;
    }
  }

  var acc = this.jpoint(null, null, null);
  var tmp = this._wnafT4;

  for (i = max; i >= 0; i--) {
    var k = 0;

    while (i >= 0) {
      var zero = true;

      for (j = 0; j < len; j++) {
        tmp[j] = naf[j][i] | 0;
        if (tmp[j] !== 0) zero = false;
      }

      if (!zero) break;
      k++;
      i--;
    }

    if (i >= 0) k++;
    acc = acc.dblp(k);
    if (i < 0) break;

    for (j = 0; j < len; j++) {
      var z = tmp[j];
      p;
      if (z === 0) continue;else if (z > 0) p = wnd[j][z - 1 >> 1];else if (z < 0) p = wnd[j][-z - 1 >> 1].neg();
      if (p.type === 'affine') acc = acc.mixedAdd(p);else acc = acc.add(p);
    }
  } // Zeroify references


  for (i = 0; i < len; i++) wnd[i] = null;

  if (jacobianResult) return acc;else return acc.toP();
};

function BasePoint(curve, type) {
  this.curve = curve;
  this.type = type;
  this.precomputed = null;
}

BaseCurve.BasePoint = BasePoint;

BasePoint.prototype.eq = function
  /*other*/
eq() {
  throw new Error('Not implemented');
};

BasePoint.prototype.validate = function validate() {
  return this.curve.validate(this);
};

BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
  bytes = utils_1$1.toArray(bytes, enc);
  var len = this.p.byteLength(); // uncompressed, hybrid-odd, hybrid-even

  if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) && bytes.length - 1 === 2 * len) {
    if (bytes[0] === 0x06) assert$1(bytes[bytes.length - 1] % 2 === 0);else if (bytes[0] === 0x07) assert$1(bytes[bytes.length - 1] % 2 === 1);
    var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));
    return res;
  } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) && bytes.length - 1 === len) {
    return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
  }

  throw new Error('Unknown point format');
};

BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
  return this.encode(enc, true);
};

BasePoint.prototype._encode = function _encode(compact) {
  var len = this.curve.p.byteLength();
  var x = this.getX().toArray('be', len);
  if (compact) return [this.getY().isEven() ? 0x02 : 0x03].concat(x);
  return [0x04].concat(x, this.getY().toArray('be', len));
};

BasePoint.prototype.encode = function encode(enc, compact) {
  return utils_1$1.encode(this._encode(compact), enc);
};

BasePoint.prototype.precompute = function precompute(power) {
  if (this.precomputed) return this;
  var precomputed = {
    doubles: null,
    naf: null,
    beta: null
  };
  precomputed.naf = this._getNAFPoints(8);
  precomputed.doubles = this._getDoubles(4, power);
  precomputed.beta = this._getBeta();
  this.precomputed = precomputed;
  return this;
};

BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
  if (!this.precomputed) return false;
  var doubles = this.precomputed.doubles;
  if (!doubles) return false;
  return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};

BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
  if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;
  var doubles = [this];
  var acc = this;

  for (var i = 0; i < power; i += step) {
    for (var j = 0; j < step; j++) acc = acc.dbl();

    doubles.push(acc);
  }

  return {
    step: step,
    points: doubles
  };
};

BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
  if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
  var res = [this];
  var max = (1 << wnd) - 1;
  var dbl = max === 1 ? null : this.dbl();

  for (var i = 1; i < max; i++) res[i] = res[i - 1].add(dbl);

  return {
    wnd: wnd,
    points: res
  };
};

BasePoint.prototype._getBeta = function _getBeta() {
  return null;
};

BasePoint.prototype.dblp = function dblp(k) {
  var r = this;

  for (var i = 0; i < k; i++) r = r.dbl();

  return r;
};

var inherits_browser = createCommonjsModule(function (module) {
  if (typeof Object.create === 'function') {
    // implementation from standard node.js 'util' module
    module.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      }
    };
  } else {
    // old school shim for old browsers
    module.exports = function inherits(ctor, superCtor) {
      if (superCtor) {
        ctor.super_ = superCtor;

        var TempCtor = function () {};

        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
    };
  }
});
'use strict';

var assert$2 = utils_1$1.assert;

function ShortCurve(conf) {
  base.call(this, 'short', conf);
  this.a = new _bn.default(conf.a, 16).toRed(this.red);
  this.b = new _bn.default(conf.b, 16).toRed(this.red);
  this.tinv = this.two.redInvm();
  this.zeroA = this.a.fromRed().cmpn(0) === 0;
  this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0; // If the curve is endomorphic, precalculate beta and lambda

  this.endo = this._getEndomorphism(conf);
  this._endoWnafT1 = new Array(4);
  this._endoWnafT2 = new Array(4);
}

inherits_browser(ShortCurve, base);
var short_1 = ShortCurve;

ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
  // No efficient endomorphism
  if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return; // Compute beta and lambda, that lambda * P = (beta * Px; Py)

  var beta;
  var lambda;

  if (conf.beta) {
    beta = new _bn.default(conf.beta, 16).toRed(this.red);
  } else {
    var betas = this._getEndoRoots(this.p); // Choose the smallest beta


    beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
    beta = beta.toRed(this.red);
  }

  if (conf.lambda) {
    lambda = new _bn.default(conf.lambda, 16);
  } else {
    // Choose the lambda that is matching selected beta
    var lambdas = this._getEndoRoots(this.n);

    if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
      lambda = lambdas[0];
    } else {
      lambda = lambdas[1];
      assert$2(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
    }
  } // Get basis vectors, used for balanced length-two representation


  var basis;

  if (conf.basis) {
    basis = conf.basis.map(function (vec) {
      return {
        a: new _bn.default(vec.a, 16),
        b: new _bn.default(vec.b, 16)
      };
    });
  } else {
    basis = this._getEndoBasis(lambda);
  }

  return {
    beta: beta,
    lambda: lambda,
    basis: basis
  };
};

ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
  // Find roots of for x^2 + x + 1 in F
  // Root = (-1 +- Sqrt(-3)) / 2
  //
  var red = num === this.p ? this.red : _bn.default.mont(num);
  var tinv = new _bn.default(2).toRed(red).redInvm();
  var ntinv = tinv.redNeg();
  var s = new _bn.default(3).toRed(red).redNeg().redSqrt().redMul(tinv);
  var l1 = ntinv.redAdd(s).fromRed();
  var l2 = ntinv.redSub(s).fromRed();
  return [l1, l2];
};

ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
  // aprxSqrt >= sqrt(this.n)
  var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2)); // 3.74
  // Run EGCD, until r(L + 1) < aprxSqrt

  var u = lambda;
  var v = this.n.clone();
  var x1 = new _bn.default(1);
  var y1 = new _bn.default(0);
  var x2 = new _bn.default(0);
  var y2 = new _bn.default(1); // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)

  var a0;
  var b0; // First vector

  var a1;
  var b1; // Second vector

  var a2;
  var b2;
  var prevR;
  var i = 0;
  var r;
  var x;

  while (u.cmpn(0) !== 0) {
    var q = v.div(u);
    r = v.sub(q.mul(u));
    x = x2.sub(q.mul(x1));
    var y = y2.sub(q.mul(y1));

    if (!a1 && r.cmp(aprxSqrt) < 0) {
      a0 = prevR.neg();
      b0 = x1;
      a1 = r.neg();
      b1 = x;
    } else if (a1 && ++i === 2) {
      break;
    }

    prevR = r;
    v = u;
    u = r;
    x2 = x1;
    x1 = x;
    y2 = y1;
    y1 = y;
  }

  a2 = r.neg();
  b2 = x;
  var len1 = a1.sqr().add(b1.sqr());
  var len2 = a2.sqr().add(b2.sqr());

  if (len2.cmp(len1) >= 0) {
    a2 = a0;
    b2 = b0;
  } // Normalize signs


  if (a1.negative) {
    a1 = a1.neg();
    b1 = b1.neg();
  }

  if (a2.negative) {
    a2 = a2.neg();
    b2 = b2.neg();
  }

  return [{
    a: a1,
    b: b1
  }, {
    a: a2,
    b: b2
  }];
};

ShortCurve.prototype._endoSplit = function _endoSplit(k) {
  var basis = this.endo.basis;
  var v1 = basis[0];
  var v2 = basis[1];
  var c1 = v2.b.mul(k).divRound(this.n);
  var c2 = v1.b.neg().mul(k).divRound(this.n);
  var p1 = c1.mul(v1.a);
  var p2 = c2.mul(v2.a);
  var q1 = c1.mul(v1.b);
  var q2 = c2.mul(v2.b); // Calculate answer

  var k1 = k.sub(p1).sub(p2);
  var k2 = q1.add(q2).neg();
  return {
    k1: k1,
    k2: k2
  };
};

ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
  x = new _bn.default(x, 16);
  if (!x.red) x = x.toRed(this.red);
  var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
  var y = y2.redSqrt();
  if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point'); // XXX Is there any way to tell if the number is odd without converting it
  // to non-red form?

  var isOdd = y.fromRed().isOdd();
  if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
  return this.point(x, y);
};

ShortCurve.prototype.validate = function validate(point) {
  if (point.inf) return true;
  var x = point.x;
  var y = point.y;
  var ax = this.a.redMul(x);
  var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
  return y.redSqr().redISub(rhs).cmpn(0) === 0;
};

ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
  var npoints = this._endoWnafT1;
  var ncoeffs = this._endoWnafT2;

  for (var i = 0; i < points.length; i++) {
    var split = this._endoSplit(coeffs[i]);

    var p = points[i];

    var beta = p._getBeta();

    if (split.k1.negative) {
      split.k1.ineg();
      p = p.neg(true);
    }

    if (split.k2.negative) {
      split.k2.ineg();
      beta = beta.neg(true);
    }

    npoints[i * 2] = p;
    npoints[i * 2 + 1] = beta;
    ncoeffs[i * 2] = split.k1;
    ncoeffs[i * 2 + 1] = split.k2;
  }

  var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult); // Clean-up references to points and coefficients


  for (var j = 0; j < i * 2; j++) {
    npoints[j] = null;
    ncoeffs[j] = null;
  }

  return res;
};

function Point(curve, x, y, isRed) {
  base.BasePoint.call(this, curve, 'affine');

  if (x === null && y === null) {
    this.x = null;
    this.y = null;
    this.inf = true;
  } else {
    this.x = new _bn.default(x, 16);
    this.y = new _bn.default(y, 16); // Force redgomery representation when loading from JSON

    if (isRed) {
      this.x.forceRed(this.curve.red);
      this.y.forceRed(this.curve.red);
    }

    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
    if (!this.y.red) this.y = this.y.toRed(this.curve.red);
    this.inf = false;
  }
}

inherits_browser(Point, base.BasePoint);

ShortCurve.prototype.point = function point(x, y, isRed) {
  return new Point(this, x, y, isRed);
};

ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
  return Point.fromJSON(this, obj, red);
};

Point.prototype._getBeta = function _getBeta() {
  if (!this.curve.endo) return;
  var pre = this.precomputed;
  if (pre && pre.beta) return pre.beta;
  var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);

  if (pre) {
    var curve = this.curve;

    var endoMul = function (p) {
      return curve.point(p.x.redMul(curve.endo.beta), p.y);
    };

    pre.beta = beta;
    beta.precomputed = {
      beta: null,
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(endoMul)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(endoMul)
      }
    };
  }

  return beta;
};

Point.prototype.toJSON = function toJSON() {
  if (!this.precomputed) return [this.x, this.y];
  return [this.x, this.y, this.precomputed && {
    doubles: this.precomputed.doubles && {
      step: this.precomputed.doubles.step,
      points: this.precomputed.doubles.points.slice(1)
    },
    naf: this.precomputed.naf && {
      wnd: this.precomputed.naf.wnd,
      points: this.precomputed.naf.points.slice(1)
    }
  }];
};

Point.fromJSON = function fromJSON(curve, obj, red) {
  if (typeof obj === 'string') obj = JSON.parse(obj);
  var res = curve.point(obj[0], obj[1], red);
  if (!obj[2]) return res;

  function obj2point(obj) {
    return curve.point(obj[0], obj[1], red);
  }

  var pre = obj[2];
  res.precomputed = {
    beta: null,
    doubles: pre.doubles && {
      step: pre.doubles.step,
      points: [res].concat(pre.doubles.points.map(obj2point))
    },
    naf: pre.naf && {
      wnd: pre.naf.wnd,
      points: [res].concat(pre.naf.points.map(obj2point))
    }
  };
  return res;
};

Point.prototype.inspect = function inspect() {
  if (this.isInfinity()) return '<EC Point Infinity>';
  return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};

Point.prototype.isInfinity = function isInfinity() {
  return this.inf;
};

Point.prototype.add = function add(p) {
  // O + P = P
  if (this.inf) return p; // P + O = P

  if (p.inf) return this; // P + P = 2P

  if (this.eq(p)) return this.dbl(); // P + (-P) = O

  if (this.neg().eq(p)) return this.curve.point(null, null); // P + Q = O

  if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);
  var c = this.y.redSub(p.y);
  if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());
  var nx = c.redSqr().redISub(this.x).redISub(p.x);
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.dbl = function dbl() {
  if (this.inf) return this; // 2P = O

  var ys1 = this.y.redAdd(this.y);
  if (ys1.cmpn(0) === 0) return this.curve.point(null, null);
  var a = this.curve.a;
  var x2 = this.x.redSqr();
  var dyinv = ys1.redInvm();
  var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
  var nx = c.redSqr().redISub(this.x.redAdd(this.x));
  var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
  return this.curve.point(nx, ny);
};

Point.prototype.getX = function getX() {
  return this.x.fromRed();
};

Point.prototype.getY = function getY() {
  return this.y.fromRed();
};

Point.prototype.mul = function mul(k) {
  k = new _bn.default(k, 16);
  if (this.isInfinity()) return this;else if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);else if (this.curve.endo) return this.curve._endoWnafMulAdd([this], [k]);else return this.curve._wnafMul(this, k);
};

Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
  var points = [this, p2];
  var coeffs = [k1, k2];
  if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);else return this.curve._wnafMulAdd(1, points, coeffs, 2);
};

Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
  var points = [this, p2];
  var coeffs = [k1, k2];
  if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true);else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};

Point.prototype.eq = function eq(p) {
  return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};

Point.prototype.neg = function neg(_precompute) {
  if (this.inf) return this;
  var res = this.curve.point(this.x, this.y.redNeg());

  if (_precompute && this.precomputed) {
    var pre = this.precomputed;

    var negate = function (p) {
      return p.neg();
    };

    res.precomputed = {
      naf: pre.naf && {
        wnd: pre.naf.wnd,
        points: pre.naf.points.map(negate)
      },
      doubles: pre.doubles && {
        step: pre.doubles.step,
        points: pre.doubles.points.map(negate)
      }
    };
  }

  return res;
};

Point.prototype.toJ = function toJ() {
  if (this.inf) return this.curve.jpoint(null, null, null);
  var res = this.curve.jpoint(this.x, this.y, this.curve.one);
  return res;
};

function JPoint(curve, x, y, z) {
  base.BasePoint.call(this, curve, 'jacobian');

  if (x === null && y === null && z === null) {
    this.x = this.curve.one;
    this.y = this.curve.one;
    this.z = new _bn.default(0);
  } else {
    this.x = new _bn.default(x, 16);
    this.y = new _bn.default(y, 16);
    this.z = new _bn.default(z, 16);
  }

  if (!this.x.red) this.x = this.x.toRed(this.curve.red);
  if (!this.y.red) this.y = this.y.toRed(this.curve.red);
  if (!this.z.red) this.z = this.z.toRed(this.curve.red);
  this.zOne = this.z === this.curve.one;
}

inherits_browser(JPoint, base.BasePoint);

ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
  return new JPoint(this, x, y, z);
};

JPoint.prototype.toP = function toP() {
  if (this.isInfinity()) return this.curve.point(null, null);
  var zinv = this.z.redInvm();
  var zinv2 = zinv.redSqr();
  var ax = this.x.redMul(zinv2);
  var ay = this.y.redMul(zinv2).redMul(zinv);
  return this.curve.point(ax, ay);
};

JPoint.prototype.neg = function neg() {
  return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};

JPoint.prototype.add = function add(p) {
  // O + P = P
  if (this.isInfinity()) return p; // P + O = P

  if (p.isInfinity()) return this; // 12M + 4S + 7A

  var pz2 = p.z.redSqr();
  var z2 = this.z.redSqr();
  var u1 = this.x.redMul(pz2);
  var u2 = p.x.redMul(z2);
  var s1 = this.y.redMul(pz2.redMul(p.z));
  var s2 = p.y.redMul(z2.redMul(this.z));
  var h = u1.redSub(u2);
  var r = s1.redSub(s2);

  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);else return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);
  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(p.z).redMul(h);
  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mixedAdd = function mixedAdd(p) {
  // O + P = P
  if (this.isInfinity()) return p.toJ(); // P + O = P

  if (p.isInfinity()) return this; // 8M + 3S + 7A

  var z2 = this.z.redSqr();
  var u1 = this.x;
  var u2 = p.x.redMul(z2);
  var s1 = this.y;
  var s2 = p.y.redMul(z2).redMul(this.z);
  var h = u1.redSub(u2);
  var r = s1.redSub(s2);

  if (h.cmpn(0) === 0) {
    if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);else return this.dbl();
  }

  var h2 = h.redSqr();
  var h3 = h2.redMul(h);
  var v = u1.redMul(h2);
  var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
  var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
  var nz = this.z.redMul(h);
  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.dblp = function dblp(pow) {
  if (pow === 0) return this;
  if (this.isInfinity()) return this;
  if (!pow) return this.dbl();
  var i;

  if (this.curve.zeroA || this.curve.threeA) {
    var r = this;

    for (i = 0; i < pow; i++) r = r.dbl();

    return r;
  } // 1M + 2S + 1A + N * (4S + 5M + 8A)
  // N = 1 => 6M + 6S + 9A


  var a = this.curve.a;
  var tinv = this.curve.tinv;
  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr(); // Reuse results

  var jyd = jy.redAdd(jy);

  for (i = 0; i < pow; i++) {
    var jx2 = jx.redSqr();
    var jyd2 = jyd.redSqr();
    var jyd4 = jyd2.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
    var t1 = jx.redMul(jyd2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var dny = c.redMul(t2);
    dny = dny.redIAdd(dny).redISub(jyd4);
    var nz = jyd.redMul(jz);
    if (i + 1 < pow) jz4 = jz4.redMul(jyd4);
    jx = nx;
    jz = nz;
    jyd = dny;
  }

  return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};

JPoint.prototype.dbl = function dbl() {
  if (this.isInfinity()) return this;
  if (this.curve.zeroA) return this._zeroDbl();else if (this.curve.threeA) return this._threeDbl();else return this._dbl();
};

JPoint.prototype._zeroDbl = function _zeroDbl() {
  var nx;
  var ny;
  var nz; // Z = 1

  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 14A
    // XX = X1^2
    var xx = this.x.redSqr(); // YY = Y1^2

    var yy = this.y.redSqr(); // YYYY = YY^2

    var yyyy = yy.redSqr(); // S = 2 * ((X1 + YY)^2 - XX - YYYY)

    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s); // M = 3 * XX + a; a = 0

    var m = xx.redAdd(xx).redIAdd(xx); // T = M ^ 2 - 2*S

    var t = m.redSqr().redISub(s).redISub(s); // 8 * YYYY

    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8); // X3 = T

    nx = t; // Y3 = M * (S - T) - 8 * YYYY

    ny = m.redMul(s.redISub(t)).redISub(yyyy8); // Z3 = 2*Y1

    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
    //     #doubling-dbl-2009-l
    // 2M + 5S + 13A
    // A = X1^2
    var a = this.x.redSqr(); // B = Y1^2

    var b = this.y.redSqr(); // C = B^2

    var c = b.redSqr(); // D = 2 * ((X1 + B)^2 - A - C)

    var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
    d = d.redIAdd(d); // E = 3 * A

    var e = a.redAdd(a).redIAdd(a); // F = E^2

    var f = e.redSqr(); // 8 * C

    var c8 = c.redIAdd(c);
    c8 = c8.redIAdd(c8);
    c8 = c8.redIAdd(c8); // X3 = F - 2 * D

    nx = f.redISub(d).redISub(d); // Y3 = E * (D - X3) - 8 * C

    ny = e.redMul(d.redISub(nx)).redISub(c8); // Z3 = 2 * Y1 * Z1

    nz = this.y.redMul(this.z);
    nz = nz.redIAdd(nz);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._threeDbl = function _threeDbl() {
  var nx;
  var ny;
  var nz; // Z = 1

  if (this.zOne) {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
    //     #doubling-mdbl-2007-bl
    // 1M + 5S + 15A
    // XX = X1^2
    var xx = this.x.redSqr(); // YY = Y1^2

    var yy = this.y.redSqr(); // YYYY = YY^2

    var yyyy = yy.redSqr(); // S = 2 * ((X1 + YY)^2 - XX - YYYY)

    var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    s = s.redIAdd(s); // M = 3 * XX + a

    var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a); // T = M^2 - 2 * S

    var t = m.redSqr().redISub(s).redISub(s); // X3 = T

    nx = t; // Y3 = M * (S - T) - 8 * YYYY

    var yyyy8 = yyyy.redIAdd(yyyy);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    yyyy8 = yyyy8.redIAdd(yyyy8);
    ny = m.redMul(s.redISub(t)).redISub(yyyy8); // Z3 = 2 * Y1

    nz = this.y.redAdd(this.y);
  } else {
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
    // 3M + 5S
    // delta = Z1^2
    var delta = this.z.redSqr(); // gamma = Y1^2

    var gamma = this.y.redSqr(); // beta = X1 * gamma

    var beta = this.x.redMul(gamma); // alpha = 3 * (X1 - delta) * (X1 + delta)

    var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
    alpha = alpha.redAdd(alpha).redIAdd(alpha); // X3 = alpha^2 - 8 * beta

    var beta4 = beta.redIAdd(beta);
    beta4 = beta4.redIAdd(beta4);
    var beta8 = beta4.redAdd(beta4);
    nx = alpha.redSqr().redISub(beta8); // Z3 = (Y1 + Z1)^2 - gamma - delta

    nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta); // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2

    var ggamma8 = gamma.redSqr();
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ggamma8 = ggamma8.redIAdd(ggamma8);
    ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
  }

  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype._dbl = function _dbl() {
  var a = this.curve.a; // 4M + 6S + 10A

  var jx = this.x;
  var jy = this.y;
  var jz = this.z;
  var jz4 = jz.redSqr().redSqr();
  var jx2 = jx.redSqr();
  var jy2 = jy.redSqr();
  var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
  var jxd4 = jx.redAdd(jx);
  jxd4 = jxd4.redIAdd(jxd4);
  var t1 = jxd4.redMul(jy2);
  var nx = c.redSqr().redISub(t1.redAdd(t1));
  var t2 = t1.redISub(nx);
  var jyd8 = jy2.redSqr();
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  jyd8 = jyd8.redIAdd(jyd8);
  var ny = c.redMul(t2).redISub(jyd8);
  var nz = jy.redAdd(jy).redMul(jz);
  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.trpl = function trpl() {
  if (!this.curve.zeroA) return this.dbl().add(this); // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
  // 5M + 10S + ...
  // XX = X1^2

  var xx = this.x.redSqr(); // YY = Y1^2

  var yy = this.y.redSqr(); // ZZ = Z1^2

  var zz = this.z.redSqr(); // YYYY = YY^2

  var yyyy = yy.redSqr(); // M = 3 * XX + a * ZZ2; a = 0

  var m = xx.redAdd(xx).redIAdd(xx); // MM = M^2

  var mm = m.redSqr(); // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM

  var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
  e = e.redIAdd(e);
  e = e.redAdd(e).redIAdd(e);
  e = e.redISub(mm); // EE = E^2

  var ee = e.redSqr(); // T = 16*YYYY

  var t = yyyy.redIAdd(yyyy);
  t = t.redIAdd(t);
  t = t.redIAdd(t);
  t = t.redIAdd(t); // U = (M + E)^2 - MM - EE - T

  var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t); // X3 = 4 * (X1 * EE - 4 * YY * U)

  var yyu4 = yy.redMul(u);
  yyu4 = yyu4.redIAdd(yyu4);
  yyu4 = yyu4.redIAdd(yyu4);
  var nx = this.x.redMul(ee).redISub(yyu4);
  nx = nx.redIAdd(nx);
  nx = nx.redIAdd(nx); // Y3 = 8 * Y1 * (U * (T - U) - E * EE)

  var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny);
  ny = ny.redIAdd(ny); // Z3 = (Z1 + E)^2 - ZZ - EE

  var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
  return this.curve.jpoint(nx, ny, nz);
};

JPoint.prototype.mul = function mul(k, kbase) {
  k = new _bn.default(k, kbase);
  return this.curve._wnafMul(this, k);
};

JPoint.prototype.eq = function eq(p) {
  if (p.type === 'affine') return this.eq(p.toJ());
  if (this === p) return true; // x1 * z2^2 == x2 * z1^2

  var z2 = this.z.redSqr();
  var pz2 = p.z.redSqr();
  if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) return false; // y1 * z2^3 == y2 * z1^3

  var z3 = z2.redMul(this.z);
  var pz3 = pz2.redMul(p.z);
  return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};

JPoint.prototype.eqXToP = function eqXToP(x) {
  var zs = this.z.redSqr();
  var rx = x.toRed(this.curve.red).redMul(zs);
  if (this.x.cmp(rx) === 0) return true;
  var xc = x.clone();
  var t = this.curve.redN.redMul(zs);

  for (;;) {
    xc.iadd(this.curve.n);
    if (xc.cmp(this.curve.p) >= 0) return false;
    rx.redIAdd(t);
    if (this.x.cmp(rx) === 0) return true;
  }
};

JPoint.prototype.inspect = function inspect() {
  if (this.isInfinity()) return '<EC JPoint Infinity>';
  return '<EC JPoint x: ' + this.x.toString(16, 2) + ' y: ' + this.y.toString(16, 2) + ' z: ' + this.z.toString(16, 2) + '>';
};

JPoint.prototype.isInfinity = function isInfinity() {
  // XXX This code assumes that zero is always zero in red
  return this.z.cmpn(0) === 0;
};

var curve_1 = createCommonjsModule(function (module, exports) {
  'use strict';

  var curve = exports;
  curve.base = base;
  curve.short = short_1;
  curve.mont =
  /*RicMoo:ethers:require(./mont)*/
  null;
  curve.edwards =
  /*RicMoo:ethers:require(./edwards)*/
  null;
});
var curves_1 = createCommonjsModule(function (module, exports) {
  'use strict';

  var curves = exports;
  var assert = utils_1$1.assert;

  function PresetCurve(options) {
    if (options.type === 'short') this.curve = new curve_1.short(options);else if (options.type === 'edwards') this.curve = new curve_1.edwards(options);else this.curve = new curve_1.mont(options);
    this.g = this.curve.g;
    this.n = this.curve.n;
    this.hash = options.hash;
    assert(this.g.validate(), 'Invalid curve');
    assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
  }

  curves.PresetCurve = PresetCurve;

  function defineCurve(name, options) {
    Object.defineProperty(curves, name, {
      configurable: true,
      enumerable: true,
      get: function () {
        var curve = new PresetCurve(options);
        Object.defineProperty(curves, name, {
          configurable: true,
          enumerable: true,
          value: curve
        });
        return curve;
      }
    });
  }

  defineCurve('p192', {
    type: 'short',
    prime: 'p192',
    p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
    b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
    n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
    hash: _hash.default.sha256,
    gRed: false,
    g: ['188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012', '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811']
  });
  defineCurve('p224', {
    type: 'short',
    prime: 'p224',
    p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
    b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
    n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
    hash: _hash.default.sha256,
    gRed: false,
    g: ['b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21', 'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34']
  });
  defineCurve('p256', {
    type: 'short',
    prime: null,
    p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
    a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
    b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
    n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
    hash: _hash.default.sha256,
    gRed: false,
    g: ['6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296', '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5']
  });
  defineCurve('p384', {
    type: 'short',
    prime: null,
    p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'fffffffe ffffffff 00000000 00000000 ffffffff',
    a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'fffffffe ffffffff 00000000 00000000 fffffffc',
    b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' + '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
    n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' + 'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
    hash: _hash.default.sha384,
    gRed: false,
    g: ['aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' + '5502f25d bf55296c 3a545e38 72760ab7', '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' + '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f']
  });
  defineCurve('p521', {
    type: 'short',
    prime: null,
    p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff',
    a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff fffffffc',
    b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' + '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' + '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
    n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' + 'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
    hash: _hash.default.sha512,
    gRed: false,
    g: ['000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' + '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' + 'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66', '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' + '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' + '3fad0761 353c7086 a272c240 88be9476 9fd16650']
  });
  defineCurve('curve25519', {
    type: 'mont',
    prime: 'p25519',
    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    a: '76d06',
    b: '1',
    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    hash: _hash.default.sha256,
    gRed: false,
    g: ['9']
  });
  defineCurve('ed25519', {
    type: 'edwards',
    prime: 'p25519',
    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    a: '-1',
    c: '1',
    // -121665 * (121666^(-1)) (mod P)
    d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    hash: _hash.default.sha256,
    gRed: false,
    g: ['216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a', // 4/5
    '6666666666666666666666666666666666666666666666666666666666666658']
  });
  var pre;

  try {
    pre =
    /*RicMoo:ethers:require(./precomputed/secp256k1)*/
    null.crash();
  } catch (e) {
    pre = undefined;
  }

  defineCurve('secp256k1', {
    type: 'short',
    prime: 'k256',
    p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
    a: '0',
    b: '7',
    n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
    h: '1',
    hash: _hash.default.sha256,
    // Precomputed endomorphism
    beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
    lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
    basis: [{
      a: '3086d221a7d46bcde86c90e49284eb15',
      b: '-e4437ed6010e88286f547fa90abfe4c3'
    }, {
      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
      b: '3086d221a7d46bcde86c90e49284eb15'
    }],
    gRed: false,
    g: ['79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798', '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8', pre]
  });
});
'use strict';

function HmacDRBG(options) {
  if (!(this instanceof HmacDRBG)) return new HmacDRBG(options);
  this.hash = options.hash;
  this.predResist = !!options.predResist;
  this.outLen = this.hash.outSize;
  this.minEntropy = options.minEntropy || this.hash.hmacStrength;
  this._reseed = null;
  this.reseedInterval = null;
  this.K = null;
  this.V = null;
  var entropy = utils_1.toArray(options.entropy, options.entropyEnc || 'hex');
  var nonce = utils_1.toArray(options.nonce, options.nonceEnc || 'hex');
  var pers = utils_1.toArray(options.pers, options.persEnc || 'hex');
  minimalisticAssert(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._init(entropy, nonce, pers);
}

var hmacDrbg = HmacDRBG;

HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
  var seed = entropy.concat(nonce).concat(pers);
  this.K = new Array(this.outLen / 8);
  this.V = new Array(this.outLen / 8);

  for (var i = 0; i < this.V.length; i++) {
    this.K[i] = 0x00;
    this.V[i] = 0x01;
  }

  this._update(seed);

  this._reseed = 1;
  this.reseedInterval = 0x1000000000000; // 2^48
};

HmacDRBG.prototype._hmac = function hmac() {
  return new _hash.default.hmac(this.hash, this.K);
};

HmacDRBG.prototype._update = function update(seed) {
  var kmac = this._hmac().update(this.V).update([0x00]);

  if (seed) kmac = kmac.update(seed);
  this.K = kmac.digest();
  this.V = this._hmac().update(this.V).digest();
  if (!seed) return;
  this.K = this._hmac().update(this.V).update([0x01]).update(seed).digest();
  this.V = this._hmac().update(this.V).digest();
};

HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
  // Optional entropy enc
  if (typeof entropyEnc !== 'string') {
    addEnc = add;
    add = entropyEnc;
    entropyEnc = null;
  }

  entropy = utils_1.toArray(entropy, entropyEnc);
  add = utils_1.toArray(add, addEnc);
  minimalisticAssert(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

  this._update(entropy.concat(add || []));

  this._reseed = 1;
};

HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
  if (this._reseed > this.reseedInterval) throw new Error('Reseed is required'); // Optional encoding

  if (typeof enc !== 'string') {
    addEnc = add;
    add = enc;
    enc = null;
  } // Optional additional data


  if (add) {
    add = utils_1.toArray(add, addEnc || 'hex');

    this._update(add);
  }

  var temp = [];

  while (temp.length < len) {
    this.V = this._hmac().update(this.V).digest();
    temp = temp.concat(this.V);
  }

  var res = temp.slice(0, len);

  this._update(add);

  this._reseed++;
  return utils_1.encode(res, enc);
};

'use strict';

var assert$3 = utils_1$1.assert;

function KeyPair(ec, options) {
  this.ec = ec;
  this.priv = null;
  this.pub = null; // KeyPair(ec, { priv: ..., pub: ... })

  if (options.priv) this._importPrivate(options.priv, options.privEnc);
  if (options.pub) this._importPublic(options.pub, options.pubEnc);
}

var key = KeyPair;

KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
  if (pub instanceof KeyPair) return pub;
  return new KeyPair(ec, {
    pub: pub,
    pubEnc: enc
  });
};

KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
  if (priv instanceof KeyPair) return priv;
  return new KeyPair(ec, {
    priv: priv,
    privEnc: enc
  });
};

KeyPair.prototype.validate = function validate() {
  var pub = this.getPublic();
  if (pub.isInfinity()) return {
    result: false,
    reason: 'Invalid public key'
  };
  if (!pub.validate()) return {
    result: false,
    reason: 'Public key is not a point'
  };
  if (!pub.mul(this.ec.curve.n).isInfinity()) return {
    result: false,
    reason: 'Public key * N != O'
  };
  return {
    result: true,
    reason: null
  };
};

KeyPair.prototype.getPublic = function getPublic(compact, enc) {
  // compact is optional argument
  if (typeof compact === 'string') {
    enc = compact;
    compact = null;
  }

  if (!this.pub) this.pub = this.ec.g.mul(this.priv);
  if (!enc) return this.pub;
  return this.pub.encode(enc, compact);
};

KeyPair.prototype.getPrivate = function getPrivate(enc) {
  if (enc === 'hex') return this.priv.toString(16, 2);else return this.priv;
};

KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
  this.priv = new _bn.default(key, enc || 16); // Ensure that the priv won't be bigger than n, otherwise we may fail
  // in fixed multiplication method

  this.priv = this.priv.umod(this.ec.curve.n);
};

KeyPair.prototype._importPublic = function _importPublic(key, enc) {
  if (key.x || key.y) {
    // Montgomery points only have an `x` coordinate.
    // Weierstrass/Edwards points on the other hand have both `x` and
    // `y` coordinates.
    if (this.ec.curve.type === 'mont') {
      assert$3(key.x, 'Need x coordinate');
    } else if (this.ec.curve.type === 'short' || this.ec.curve.type === 'edwards') {
      assert$3(key.x && key.y, 'Need both x and y coordinate');
    }

    this.pub = this.ec.curve.point(key.x, key.y);
    return;
  }

  this.pub = this.ec.curve.decodePoint(key, enc);
}; // ECDH


KeyPair.prototype.derive = function derive(pub) {
  if (!pub.validate()) {
    assert$3(pub.validate(), 'public point not validated');
  }

  return pub.mul(this.priv).getX();
}; // ECDSA


KeyPair.prototype.sign = function sign(msg, enc, options) {
  return this.ec.sign(msg, this, enc, options);
};

KeyPair.prototype.verify = function verify(msg, signature) {
  return this.ec.verify(msg, signature, this);
};

KeyPair.prototype.inspect = function inspect() {
  return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) + ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

'use strict';

var assert$4 = utils_1$1.assert;

function Signature(options, enc) {
  if (options instanceof Signature) return options;
  if (this._importDER(options, enc)) return;
  assert$4(options.r && options.s, 'Signature without r or s');
  this.r = new _bn.default(options.r, 16);
  this.s = new _bn.default(options.s, 16);
  if (options.recoveryParam === undefined) this.recoveryParam = null;else this.recoveryParam = options.recoveryParam;
}

var signature = Signature;

function Position() {
  this.place = 0;
}

function getLength(buf, p) {
  var initial = buf[p.place++];

  if (!(initial & 0x80)) {
    return initial;
  }

  var octetLen = initial & 0xf; // Indefinite length or overflow

  if (octetLen === 0 || octetLen > 4) {
    return false;
  }

  var val = 0;

  for (var i = 0, off = p.place; i < octetLen; i++, off++) {
    val <<= 8;
    val |= buf[off];
    val >>>= 0;
  } // Leading zeroes


  if (val <= 0x7f) {
    return false;
  }

  p.place = off;
  return val;
}

function rmPadding(buf) {
  var i = 0;
  var len = buf.length - 1;

  while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
    i++;
  }

  if (i === 0) {
    return buf;
  }

  return buf.slice(i);
}

Signature.prototype._importDER = function _importDER(data, enc) {
  data = utils_1$1.toArray(data, enc);
  var p = new Position();

  if (data[p.place++] !== 0x30) {
    return false;
  }

  var len = getLength(data, p);

  if (len === false) {
    return false;
  }

  if (len + p.place !== data.length) {
    return false;
  }

  if (data[p.place++] !== 0x02) {
    return false;
  }

  var rlen = getLength(data, p);

  if (rlen === false) {
    return false;
  }

  var r = data.slice(p.place, rlen + p.place);
  p.place += rlen;

  if (data[p.place++] !== 0x02) {
    return false;
  }

  var slen = getLength(data, p);

  if (slen === false) {
    return false;
  }

  if (data.length !== slen + p.place) {
    return false;
  }

  var s = data.slice(p.place, slen + p.place);

  if (r[0] === 0) {
    if (r[1] & 0x80) {
      r = r.slice(1);
    } else {
      // Leading zeroes
      return false;
    }
  }

  if (s[0] === 0) {
    if (s[1] & 0x80) {
      s = s.slice(1);
    } else {
      // Leading zeroes
      return false;
    }
  }

  this.r = new _bn.default(r);
  this.s = new _bn.default(s);
  this.recoveryParam = null;
  return true;
};

function constructLength(arr, len) {
  if (len < 0x80) {
    arr.push(len);
    return;
  }

  var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
  arr.push(octets | 0x80);

  while (--octets) {
    arr.push(len >>> (octets << 3) & 0xff);
  }

  arr.push(len);
}

Signature.prototype.toDER = function toDER(enc) {
  var r = this.r.toArray();
  var s = this.s.toArray(); // Pad values

  if (r[0] & 0x80) r = [0].concat(r); // Pad values

  if (s[0] & 0x80) s = [0].concat(s);
  r = rmPadding(r);
  s = rmPadding(s);

  while (!s[0] && !(s[1] & 0x80)) {
    s = s.slice(1);
  }

  var arr = [0x02];
  constructLength(arr, r.length);
  arr = arr.concat(r);
  arr.push(0x02);
  constructLength(arr, s.length);
  var backHalf = arr.concat(s);
  var res = [0x30];
  constructLength(res, backHalf.length);
  res = res.concat(backHalf);
  return utils_1$1.encode(res, enc);
};

'use strict';

var rand =
/*RicMoo:ethers:require(brorand)*/
function () {
  throw new Error('unsupported');
};

var assert$5 = utils_1$1.assert;

function EC(options) {
  if (!(this instanceof EC)) return new EC(options); // Shortcut `elliptic.ec(curve-name)`

  if (typeof options === 'string') {
    assert$5(Object.prototype.hasOwnProperty.call(curves_1, options), 'Unknown curve ' + options);
    options = curves_1[options];
  } // Shortcut for `elliptic.ec(elliptic.curves.curveName)`


  if (options instanceof curves_1.PresetCurve) options = {
    curve: options
  };
  this.curve = options.curve.curve;
  this.n = this.curve.n;
  this.nh = this.n.ushrn(1);
  this.g = this.curve.g; // Point on curve

  this.g = options.curve.g;
  this.g.precompute(options.curve.n.bitLength() + 1); // Hash for function for DRBG

  this.hash = options.hash || options.curve.hash;
}

var ec = EC;

EC.prototype.keyPair = function keyPair(options) {
  return new key(this, options);
};

EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
  return key.fromPrivate(this, priv, enc);
};

EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
  return key.fromPublic(this, pub, enc);
};

EC.prototype.genKeyPair = function genKeyPair(options) {
  if (!options) options = {}; // Instantiate Hmac_DRBG

  var drbg = new hmacDrbg({
    hash: this.hash,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8',
    entropy: options.entropy || rand(this.hash.hmacStrength),
    entropyEnc: options.entropy && options.entropyEnc || 'utf8',
    nonce: this.n.toArray()
  });
  var bytes = this.n.byteLength();
  var ns2 = this.n.sub(new _bn.default(2));

  for (;;) {
    var priv = new _bn.default(drbg.generate(bytes));
    if (priv.cmp(ns2) > 0) continue;
    priv.iaddn(1);
    return this.keyFromPrivate(priv);
  }
};

EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
  var delta = msg.byteLength() * 8 - this.n.bitLength();
  if (delta > 0) msg = msg.ushrn(delta);
  if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);else return msg;
};

EC.prototype.sign = function sign(msg, key, enc, options) {
  if (typeof enc === 'object') {
    options = enc;
    enc = null;
  }

  if (!options) options = {};
  key = this.keyFromPrivate(key, enc);
  msg = this._truncateToN(new _bn.default(msg, 16)); // Zero-extend key to provide enough entropy

  var bytes = this.n.byteLength();
  var bkey = key.getPrivate().toArray('be', bytes); // Zero-extend nonce to have the same byte size as N

  var nonce = msg.toArray('be', bytes); // Instantiate Hmac_DRBG

  var drbg = new hmacDrbg({
    hash: this.hash,
    entropy: bkey,
    nonce: nonce,
    pers: options.pers,
    persEnc: options.persEnc || 'utf8'
  }); // Number of bytes to generate

  var ns1 = this.n.sub(new _bn.default(1));

  for (var iter = 0;; iter++) {
    var k = options.k ? options.k(iter) : new _bn.default(drbg.generate(this.n.byteLength()));
    k = this._truncateToN(k, true);
    if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;
    var kp = this.g.mul(k);
    if (kp.isInfinity()) continue;
    var kpX = kp.getX();
    var r = kpX.umod(this.n);
    if (r.cmpn(0) === 0) continue;
    var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
    s = s.umod(this.n);
    if (s.cmpn(0) === 0) continue;
    var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0); // Use complement of `s`, if it is > `n / 2`

    if (options.canonical && s.cmp(this.nh) > 0) {
      s = this.n.sub(s);
      recoveryParam ^= 1;
    }

    return new signature({
      r: r,
      s: s,
      recoveryParam: recoveryParam
    });
  }
};

EC.prototype.verify = function verify(msg, signature$1, key, enc) {
  msg = this._truncateToN(new _bn.default(msg, 16));
  key = this.keyFromPublic(key, enc);
  signature$1 = new signature(signature$1, 'hex'); // Perform primitive values validation

  var r = signature$1.r;
  var s = signature$1.s;
  if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;
  if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false; // Validate signature

  var sinv = s.invm(this.n);
  var u1 = sinv.mul(msg).umod(this.n);
  var u2 = sinv.mul(r).umod(this.n);
  var p;

  if (!this.curve._maxwellTrick) {
    p = this.g.mulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity()) return false;
    return p.getX().umod(this.n).cmp(r) === 0;
  } // NOTE: Greg Maxwell's trick, inspired by:
  // https://git.io/vad3K


  p = this.g.jmulAdd(u1, key.getPublic(), u2);
  if (p.isInfinity()) return false; // Compare `p.x` of Jacobian point with `r`,
  // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
  // inverse of `p.z^2`

  return p.eqXToP(r);
};

EC.prototype.recoverPubKey = function (msg, signature$1, j, enc) {
  assert$5((3 & j) === j, 'The recovery param is more than two bits');
  signature$1 = new signature(signature$1, enc);
  var n = this.n;
  var e = new _bn.default(msg);
  var r = signature$1.r;
  var s = signature$1.s; // A set LSB signifies that the y-coordinate is odd

  var isYOdd = j & 1;
  var isSecondKey = j >> 1;
  if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error('Unable to find sencond key candinate'); // 1.1. Let x = r + jn.

  if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);else r = this.curve.pointFromX(r, isYOdd);
  var rInv = signature$1.r.invm(n);
  var s1 = n.sub(e).mul(rInv).umod(n);
  var s2 = s.mul(rInv).umod(n); // 1.6.1 Compute Q = r^-1 (sR -  eG)
  //               Q = r^-1 (sR + -eG)

  return this.g.mulAdd(s1, r, s2);
};

EC.prototype.getKeyRecoveryParam = function (e, signature$1, Q, enc) {
  signature$1 = new signature(signature$1, enc);
  if (signature$1.recoveryParam !== null) return signature$1.recoveryParam;

  for (var i = 0; i < 4; i++) {
    var Qprime;

    try {
      Qprime = this.recoverPubKey(e, signature$1, i);
    } catch (e) {
      continue;
    }

    if (Qprime.eq(Q)) return i;
  }

  throw new Error('Unable to find valid recovery factor');
};

var elliptic_1 = createCommonjsModule(function (module, exports) {
  'use strict';

  var elliptic = exports;
  elliptic.version =
  /*RicMoo:ethers*/
  {
    version: "6.5.4"
  }.version;
  elliptic.utils = utils_1$1;

  elliptic.rand =
  /*RicMoo:ethers:require(brorand)*/
  function () {
    throw new Error('unsupported');
  };

  elliptic.curve = curve_1;
  elliptic.curves = curves_1; // Protocols

  elliptic.ec = ec;
  elliptic.eddsa =
  /*RicMoo:ethers:require(./elliptic/eddsa)*/
  null;
});
var EC$1 = elliptic_1.ec;
exports.EC = EC$1;
},{"bn.js":"../../node_modules/bn.js/lib/bn.js","hash.js":"../../node_modules/hash.js/lib/hash.js"}],"../../node_modules/@ethersproject/signing-key/lib.esm/_version.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.version = void 0;
const version = "signing-key/5.6.0";
exports.version = version;
},{}],"../../node_modules/@ethersproject/signing-key/lib.esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SigningKey = void 0;
exports.computePublicKey = computePublicKey;
exports.recoverPublicKey = recoverPublicKey;

var _elliptic = require("./elliptic");

var _bytes = require("@ethersproject/bytes");

var _properties = require("@ethersproject/properties");

var _logger = require("@ethersproject/logger");

var _version = require("./_version");

const logger = new _logger.Logger(_version.version);
let _curve = null;

function getCurve() {
  if (!_curve) {
    _curve = new _elliptic.EC("secp256k1");
  }

  return _curve;
}

class SigningKey {
  constructor(privateKey) {
    (0, _properties.defineReadOnly)(this, "curve", "secp256k1");
    (0, _properties.defineReadOnly)(this, "privateKey", (0, _bytes.hexlify)(privateKey));
    const keyPair = getCurve().keyFromPrivate((0, _bytes.arrayify)(this.privateKey));
    (0, _properties.defineReadOnly)(this, "publicKey", "0x" + keyPair.getPublic(false, "hex"));
    (0, _properties.defineReadOnly)(this, "compressedPublicKey", "0x" + keyPair.getPublic(true, "hex"));
    (0, _properties.defineReadOnly)(this, "_isSigningKey", true);
  }

  _addPoint(other) {
    const p0 = getCurve().keyFromPublic((0, _bytes.arrayify)(this.publicKey));
    const p1 = getCurve().keyFromPublic((0, _bytes.arrayify)(other));
    return "0x" + p0.pub.add(p1.pub).encodeCompressed("hex");
  }

  signDigest(digest) {
    const keyPair = getCurve().keyFromPrivate((0, _bytes.arrayify)(this.privateKey));
    const digestBytes = (0, _bytes.arrayify)(digest);

    if (digestBytes.length !== 32) {
      logger.throwArgumentError("bad digest length", "digest", digest);
    }

    const signature = keyPair.sign(digestBytes, {
      canonical: true
    });
    return (0, _bytes.splitSignature)({
      recoveryParam: signature.recoveryParam,
      r: (0, _bytes.hexZeroPad)("0x" + signature.r.toString(16), 32),
      s: (0, _bytes.hexZeroPad)("0x" + signature.s.toString(16), 32)
    });
  }

  computeSharedSecret(otherKey) {
    const keyPair = getCurve().keyFromPrivate((0, _bytes.arrayify)(this.privateKey));
    const otherKeyPair = getCurve().keyFromPublic((0, _bytes.arrayify)(computePublicKey(otherKey)));
    return (0, _bytes.hexZeroPad)("0x" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);
  }

  static isSigningKey(value) {
    return !!(value && value._isSigningKey);
  }

}

exports.SigningKey = SigningKey;

function recoverPublicKey(digest, signature) {
  const sig = (0, _bytes.splitSignature)(signature);
  const rs = {
    r: (0, _bytes.arrayify)(sig.r),
    s: (0, _bytes.arrayify)(sig.s)
  };
  return "0x" + getCurve().recoverPubKey((0, _bytes.arrayify)(digest), rs, sig.recoveryParam).encode("hex", false);
}

function computePublicKey(key, compressed) {
  const bytes = (0, _bytes.arrayify)(key);

  if (bytes.length === 32) {
    const signingKey = new SigningKey(bytes);

    if (compressed) {
      return "0x" + getCurve().keyFromPrivate(bytes).getPublic(true, "hex");
    }

    return signingKey.publicKey;
  } else if (bytes.length === 33) {
    if (compressed) {
      return (0, _bytes.hexlify)(bytes);
    }

    return "0x" + getCurve().keyFromPublic(bytes).getPublic(false, "hex");
  } else if (bytes.length === 65) {
    if (!compressed) {
      return (0, _bytes.hexlify)(bytes);
    }

    return "0x" + getCurve().keyFromPublic(bytes).getPublic(true, "hex");
  }

  return logger.throwArgumentError("invalid public or private key", "key", "[REDACTED]");
}
},{"./elliptic":"../../node_modules/@ethersproject/signing-key/lib.esm/elliptic.js","@ethersproject/bytes":"../../node_modules/@ethersproject/bytes/lib.esm/index.js","@ethersproject/properties":"../../node_modules/@ethersproject/properties/lib.esm/index.js","@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","./_version":"../../node_modules/@ethersproject/signing-key/lib.esm/_version.js"}],"../../node_modules/@ethersproject/transactions/lib.esm/_version.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.version = void 0;
const version = "transactions/5.6.0";
exports.version = version;
},{}],"../../node_modules/@ethersproject/transactions/lib.esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TransactionTypes = void 0;
exports.accessListify = accessListify;
exports.computeAddress = computeAddress;
exports.parse = parse;
exports.recoverAddress = recoverAddress;
exports.serialize = serialize;

var _address = require("@ethersproject/address");

var _bignumber = require("@ethersproject/bignumber");

var _bytes = require("@ethersproject/bytes");

var _constants = require("@ethersproject/constants");

var _keccak = require("@ethersproject/keccak256");

var _properties = require("@ethersproject/properties");

var RLP = _interopRequireWildcard(require("@ethersproject/rlp"));

var _signingKey = require("@ethersproject/signing-key");

var _logger = require("@ethersproject/logger");

var _version = require("./_version");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const logger = new _logger.Logger(_version.version);
var TransactionTypes;
exports.TransactionTypes = TransactionTypes;

(function (TransactionTypes) {
  TransactionTypes[TransactionTypes["legacy"] = 0] = "legacy";
  TransactionTypes[TransactionTypes["eip2930"] = 1] = "eip2930";
  TransactionTypes[TransactionTypes["eip1559"] = 2] = "eip1559";
})(TransactionTypes || (exports.TransactionTypes = TransactionTypes = {}));

; ///////////////////////////////

function handleAddress(value) {
  if (value === "0x") {
    return null;
  }

  return (0, _address.getAddress)(value);
}

function handleNumber(value) {
  if (value === "0x") {
    return _constants.Zero;
  }

  return _bignumber.BigNumber.from(value);
} // Legacy Transaction Fields


const transactionFields = [{
  name: "nonce",
  maxLength: 32,
  numeric: true
}, {
  name: "gasPrice",
  maxLength: 32,
  numeric: true
}, {
  name: "gasLimit",
  maxLength: 32,
  numeric: true
}, {
  name: "to",
  length: 20
}, {
  name: "value",
  maxLength: 32,
  numeric: true
}, {
  name: "data"
}];
const allowedTransactionKeys = {
  chainId: true,
  data: true,
  gasLimit: true,
  gasPrice: true,
  nonce: true,
  to: true,
  type: true,
  value: true
};

function computeAddress(key) {
  const publicKey = (0, _signingKey.computePublicKey)(key);
  return (0, _address.getAddress)((0, _bytes.hexDataSlice)((0, _keccak.keccak256)((0, _bytes.hexDataSlice)(publicKey, 1)), 12));
}

function recoverAddress(digest, signature) {
  return computeAddress((0, _signingKey.recoverPublicKey)((0, _bytes.arrayify)(digest), signature));
}

function formatNumber(value, name) {
  const result = (0, _bytes.stripZeros)(_bignumber.BigNumber.from(value).toHexString());

  if (result.length > 32) {
    logger.throwArgumentError("invalid length for " + name, "transaction:" + name, value);
  }

  return result;
}

function accessSetify(addr, storageKeys) {
  return {
    address: (0, _address.getAddress)(addr),
    storageKeys: (storageKeys || []).map((storageKey, index) => {
      if ((0, _bytes.hexDataLength)(storageKey) !== 32) {
        logger.throwArgumentError("invalid access list storageKey", `accessList[${addr}:${index}]`, storageKey);
      }

      return storageKey.toLowerCase();
    })
  };
}

function accessListify(value) {
  if (Array.isArray(value)) {
    return value.map((set, index) => {
      if (Array.isArray(set)) {
        if (set.length > 2) {
          logger.throwArgumentError("access list expected to be [ address, storageKeys[] ]", `value[${index}]`, set);
        }

        return accessSetify(set[0], set[1]);
      }

      return accessSetify(set.address, set.storageKeys);
    });
  }

  const result = Object.keys(value).map(addr => {
    const storageKeys = value[addr].reduce((accum, storageKey) => {
      accum[storageKey] = true;
      return accum;
    }, {});
    return accessSetify(addr, Object.keys(storageKeys).sort());
  });
  result.sort((a, b) => a.address.localeCompare(b.address));
  return result;
}

function formatAccessList(value) {
  return accessListify(value).map(set => [set.address, set.storageKeys]);
}

function _serializeEip1559(transaction, signature) {
  // If there is an explicit gasPrice, make sure it matches the
  // EIP-1559 fees; otherwise they may not understand what they
  // think they are setting in terms of fee.
  if (transaction.gasPrice != null) {
    const gasPrice = _bignumber.BigNumber.from(transaction.gasPrice);

    const maxFeePerGas = _bignumber.BigNumber.from(transaction.maxFeePerGas || 0);

    if (!gasPrice.eq(maxFeePerGas)) {
      logger.throwArgumentError("mismatch EIP-1559 gasPrice != maxFeePerGas", "tx", {
        gasPrice,
        maxFeePerGas
      });
    }
  }

  const fields = [formatNumber(transaction.chainId || 0, "chainId"), formatNumber(transaction.nonce || 0, "nonce"), formatNumber(transaction.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"), formatNumber(transaction.maxFeePerGas || 0, "maxFeePerGas"), formatNumber(transaction.gasLimit || 0, "gasLimit"), transaction.to != null ? (0, _address.getAddress)(transaction.to) : "0x", formatNumber(transaction.value || 0, "value"), transaction.data || "0x", formatAccessList(transaction.accessList || [])];

  if (signature) {
    const sig = (0, _bytes.splitSignature)(signature);
    fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
    fields.push((0, _bytes.stripZeros)(sig.r));
    fields.push((0, _bytes.stripZeros)(sig.s));
  }

  return (0, _bytes.hexConcat)(["0x02", RLP.encode(fields)]);
}

function _serializeEip2930(transaction, signature) {
  const fields = [formatNumber(transaction.chainId || 0, "chainId"), formatNumber(transaction.nonce || 0, "nonce"), formatNumber(transaction.gasPrice || 0, "gasPrice"), formatNumber(transaction.gasLimit || 0, "gasLimit"), transaction.to != null ? (0, _address.getAddress)(transaction.to) : "0x", formatNumber(transaction.value || 0, "value"), transaction.data || "0x", formatAccessList(transaction.accessList || [])];

  if (signature) {
    const sig = (0, _bytes.splitSignature)(signature);
    fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
    fields.push((0, _bytes.stripZeros)(sig.r));
    fields.push((0, _bytes.stripZeros)(sig.s));
  }

  return (0, _bytes.hexConcat)(["0x01", RLP.encode(fields)]);
} // Legacy Transactions and EIP-155


function _serialize(transaction, signature) {
  (0, _properties.checkProperties)(transaction, allowedTransactionKeys);
  const raw = [];
  transactionFields.forEach(function (fieldInfo) {
    let value = transaction[fieldInfo.name] || [];
    const options = {};

    if (fieldInfo.numeric) {
      options.hexPad = "left";
    }

    value = (0, _bytes.arrayify)((0, _bytes.hexlify)(value, options)); // Fixed-width field

    if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {
      logger.throwArgumentError("invalid length for " + fieldInfo.name, "transaction:" + fieldInfo.name, value);
    } // Variable-width (with a maximum)


    if (fieldInfo.maxLength) {
      value = (0, _bytes.stripZeros)(value);

      if (value.length > fieldInfo.maxLength) {
        logger.throwArgumentError("invalid length for " + fieldInfo.name, "transaction:" + fieldInfo.name, value);
      }
    }

    raw.push((0, _bytes.hexlify)(value));
  });
  let chainId = 0;

  if (transaction.chainId != null) {
    // A chainId was provided; if non-zero we'll use EIP-155
    chainId = transaction.chainId;

    if (typeof chainId !== "number") {
      logger.throwArgumentError("invalid transaction.chainId", "transaction", transaction);
    }
  } else if (signature && !(0, _bytes.isBytesLike)(signature) && signature.v > 28) {
    // No chainId provided, but the signature is signing with EIP-155; derive chainId
    chainId = Math.floor((signature.v - 35) / 2);
  } // We have an EIP-155 transaction (chainId was specified and non-zero)


  if (chainId !== 0) {
    raw.push((0, _bytes.hexlify)(chainId)); // @TODO: hexValue?

    raw.push("0x");
    raw.push("0x");
  } // Requesting an unsigned transaction


  if (!signature) {
    return RLP.encode(raw);
  } // The splitSignature will ensure the transaction has a recoveryParam in the
  // case that the signTransaction function only adds a v.


  const sig = (0, _bytes.splitSignature)(signature); // We pushed a chainId and null r, s on for hashing only; remove those

  let v = 27 + sig.recoveryParam;

  if (chainId !== 0) {
    raw.pop();
    raw.pop();
    raw.pop();
    v += chainId * 2 + 8; // If an EIP-155 v (directly or indirectly; maybe _vs) was provided, check it!

    if (sig.v > 28 && sig.v !== v) {
      logger.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature);
    }
  } else if (sig.v !== v) {
    logger.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature);
  }

  raw.push((0, _bytes.hexlify)(v));
  raw.push((0, _bytes.stripZeros)((0, _bytes.arrayify)(sig.r)));
  raw.push((0, _bytes.stripZeros)((0, _bytes.arrayify)(sig.s)));
  return RLP.encode(raw);
}

function serialize(transaction, signature) {
  // Legacy and EIP-155 Transactions
  if (transaction.type == null || transaction.type === 0) {
    if (transaction.accessList != null) {
      logger.throwArgumentError("untyped transactions do not support accessList; include type: 1", "transaction", transaction);
    }

    return _serialize(transaction, signature);
  } // Typed Transactions (EIP-2718)


  switch (transaction.type) {
    case 1:
      return _serializeEip2930(transaction, signature);

    case 2:
      return _serializeEip1559(transaction, signature);

    default:
      break;
  }

  return logger.throwError(`unsupported transaction type: ${transaction.type}`, _logger.Logger.errors.UNSUPPORTED_OPERATION, {
    operation: "serializeTransaction",
    transactionType: transaction.type
  });
}

function _parseEipSignature(tx, fields, serialize) {
  try {
    const recid = handleNumber(fields[0]).toNumber();

    if (recid !== 0 && recid !== 1) {
      throw new Error("bad recid");
    }

    tx.v = recid;
  } catch (error) {
    logger.throwArgumentError("invalid v for transaction type: 1", "v", fields[0]);
  }

  tx.r = (0, _bytes.hexZeroPad)(fields[1], 32);
  tx.s = (0, _bytes.hexZeroPad)(fields[2], 32);

  try {
    const digest = (0, _keccak.keccak256)(serialize(tx));
    tx.from = recoverAddress(digest, {
      r: tx.r,
      s: tx.s,
      recoveryParam: tx.v
    });
  } catch (error) {
    console.log(error);
  }
}

function _parseEip1559(payload) {
  const transaction = RLP.decode(payload.slice(1));

  if (transaction.length !== 9 && transaction.length !== 12) {
    logger.throwArgumentError("invalid component count for transaction type: 2", "payload", (0, _bytes.hexlify)(payload));
  }

  const maxPriorityFeePerGas = handleNumber(transaction[2]);
  const maxFeePerGas = handleNumber(transaction[3]);
  const tx = {
    type: 2,
    chainId: handleNumber(transaction[0]).toNumber(),
    nonce: handleNumber(transaction[1]).toNumber(),
    maxPriorityFeePerGas: maxPriorityFeePerGas,
    maxFeePerGas: maxFeePerGas,
    gasPrice: null,
    gasLimit: handleNumber(transaction[4]),
    to: handleAddress(transaction[5]),
    value: handleNumber(transaction[6]),
    data: transaction[7],
    accessList: accessListify(transaction[8])
  }; // Unsigned EIP-1559 Transaction

  if (transaction.length === 9) {
    return tx;
  }

  tx.hash = (0, _keccak.keccak256)(payload);

  _parseEipSignature(tx, transaction.slice(9), _serializeEip1559);

  return tx;
}

function _parseEip2930(payload) {
  const transaction = RLP.decode(payload.slice(1));

  if (transaction.length !== 8 && transaction.length !== 11) {
    logger.throwArgumentError("invalid component count for transaction type: 1", "payload", (0, _bytes.hexlify)(payload));
  }

  const tx = {
    type: 1,
    chainId: handleNumber(transaction[0]).toNumber(),
    nonce: handleNumber(transaction[1]).toNumber(),
    gasPrice: handleNumber(transaction[2]),
    gasLimit: handleNumber(transaction[3]),
    to: handleAddress(transaction[4]),
    value: handleNumber(transaction[5]),
    data: transaction[6],
    accessList: accessListify(transaction[7])
  }; // Unsigned EIP-2930 Transaction

  if (transaction.length === 8) {
    return tx;
  }

  tx.hash = (0, _keccak.keccak256)(payload);

  _parseEipSignature(tx, transaction.slice(8), _serializeEip2930);

  return tx;
} // Legacy Transactions and EIP-155


function _parse(rawTransaction) {
  const transaction = RLP.decode(rawTransaction);

  if (transaction.length !== 9 && transaction.length !== 6) {
    logger.throwArgumentError("invalid raw transaction", "rawTransaction", rawTransaction);
  }

  const tx = {
    nonce: handleNumber(transaction[0]).toNumber(),
    gasPrice: handleNumber(transaction[1]),
    gasLimit: handleNumber(transaction[2]),
    to: handleAddress(transaction[3]),
    value: handleNumber(transaction[4]),
    data: transaction[5],
    chainId: 0
  }; // Legacy unsigned transaction

  if (transaction.length === 6) {
    return tx;
  }

  try {
    tx.v = _bignumber.BigNumber.from(transaction[6]).toNumber();
  } catch (error) {
    console.log(error);
    return tx;
  }

  tx.r = (0, _bytes.hexZeroPad)(transaction[7], 32);
  tx.s = (0, _bytes.hexZeroPad)(transaction[8], 32);

  if (_bignumber.BigNumber.from(tx.r).isZero() && _bignumber.BigNumber.from(tx.s).isZero()) {
    // EIP-155 unsigned transaction
    tx.chainId = tx.v;
    tx.v = 0;
  } else {
    // Signed Transaction
    tx.chainId = Math.floor((tx.v - 35) / 2);

    if (tx.chainId < 0) {
      tx.chainId = 0;
    }

    let recoveryParam = tx.v - 27;
    const raw = transaction.slice(0, 6);

    if (tx.chainId !== 0) {
      raw.push((0, _bytes.hexlify)(tx.chainId));
      raw.push("0x");
      raw.push("0x");
      recoveryParam -= tx.chainId * 2 + 8;
    }

    const digest = (0, _keccak.keccak256)(RLP.encode(raw));

    try {
      tx.from = recoverAddress(digest, {
        r: (0, _bytes.hexlify)(tx.r),
        s: (0, _bytes.hexlify)(tx.s),
        recoveryParam: recoveryParam
      });
    } catch (error) {
      console.log(error);
    }

    tx.hash = (0, _keccak.keccak256)(rawTransaction);
  }

  tx.type = null;
  return tx;
}

function parse(rawTransaction) {
  const payload = (0, _bytes.arrayify)(rawTransaction); // Legacy and EIP-155 Transactions

  if (payload[0] > 0x7f) {
    return _parse(payload);
  } // Typed Transaction (EIP-2718)


  switch (payload[0]) {
    case 1:
      return _parseEip2930(payload);

    case 2:
      return _parseEip1559(payload);

    default:
      break;
  }

  return logger.throwError(`unsupported transaction type: ${payload[0]}`, _logger.Logger.errors.UNSUPPORTED_OPERATION, {
    operation: "parseTransaction",
    transactionType: payload[0]
  });
}
},{"@ethersproject/address":"../../node_modules/@ethersproject/address/lib.esm/index.js","@ethersproject/bignumber":"../../node_modules/@ethersproject/bignumber/lib.esm/index.js","@ethersproject/bytes":"../../node_modules/@ethersproject/bytes/lib.esm/index.js","@ethersproject/constants":"../../node_modules/@ethersproject/constants/lib.esm/index.js","@ethersproject/keccak256":"../../node_modules/@ethersproject/keccak256/lib.esm/index.js","@ethersproject/properties":"../../node_modules/@ethersproject/properties/lib.esm/index.js","@ethersproject/rlp":"../../node_modules/@ethersproject/rlp/lib.esm/index.js","@ethersproject/signing-key":"../../node_modules/@ethersproject/signing-key/lib.esm/index.js","@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","./_version":"../../node_modules/@ethersproject/transactions/lib.esm/_version.js"}],"../../node_modules/@ethersproject/contracts/lib.esm/_version.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.version = void 0;
const version = "contracts/5.6.0";
exports.version = version;
},{}],"../../node_modules/@ethersproject/contracts/lib.esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ContractFactory = exports.Contract = exports.BaseContract = void 0;

var _abi = require("@ethersproject/abi");

var _abstractProvider = require("@ethersproject/abstract-provider");

var _abstractSigner = require("@ethersproject/abstract-signer");

var _address = require("@ethersproject/address");

var _bignumber = require("@ethersproject/bignumber");

var _bytes = require("@ethersproject/bytes");

var _properties = require("@ethersproject/properties");

var _transactions = require("@ethersproject/transactions");

var _logger = require("@ethersproject/logger");

var _version = require("./_version");

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

const logger = new _logger.Logger(_version.version);
;
; ///////////////////////////////

const allowedTransactionKeys = {
  chainId: true,
  data: true,
  from: true,
  gasLimit: true,
  gasPrice: true,
  nonce: true,
  to: true,
  value: true,
  type: true,
  accessList: true,
  maxFeePerGas: true,
  maxPriorityFeePerGas: true,
  customData: true,
  ccipReadEnabled: true
};

function resolveName(resolver, nameOrPromise) {
  return __awaiter(this, void 0, void 0, function* () {
    const name = yield nameOrPromise;

    if (typeof name !== "string") {
      logger.throwArgumentError("invalid address or ENS name", "name", name);
    } // If it is already an address, just use it (after adding checksum)


    try {
      return (0, _address.getAddress)(name);
    } catch (error) {}

    if (!resolver) {
      logger.throwError("a provider or signer is needed to resolve ENS names", _logger.Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "resolveName"
      });
    }

    const address = yield resolver.resolveName(name);

    if (address == null) {
      logger.throwArgumentError("resolver or addr is not configured for ENS name", "name", name);
    }

    return address;
  });
} // Recursively replaces ENS names with promises to resolve the name and resolves all properties


function resolveAddresses(resolver, value, paramType) {
  return __awaiter(this, void 0, void 0, function* () {
    if (Array.isArray(paramType)) {
      return yield Promise.all(paramType.map((paramType, index) => {
        return resolveAddresses(resolver, Array.isArray(value) ? value[index] : value[paramType.name], paramType);
      }));
    }

    if (paramType.type === "address") {
      return yield resolveName(resolver, value);
    }

    if (paramType.type === "tuple") {
      return yield resolveAddresses(resolver, value, paramType.components);
    }

    if (paramType.baseType === "array") {
      if (!Array.isArray(value)) {
        return Promise.reject(logger.makeError("invalid value for array", _logger.Logger.errors.INVALID_ARGUMENT, {
          argument: "value",
          value
        }));
      }

      return yield Promise.all(value.map(v => resolveAddresses(resolver, v, paramType.arrayChildren)));
    }

    return value;
  });
}

function populateTransaction(contract, fragment, args) {
  return __awaiter(this, void 0, void 0, function* () {
    // If an extra argument is given, it is overrides
    let overrides = {};

    if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === "object") {
      overrides = (0, _properties.shallowCopy)(args.pop());
    } // Make sure the parameter count matches


    logger.checkArgumentCount(args.length, fragment.inputs.length, "passed to contract"); // Populate "from" override (allow promises)

    if (contract.signer) {
      if (overrides.from) {
        // Contracts with a Signer are from the Signer's frame-of-reference;
        // but we allow overriding "from" if it matches the signer
        overrides.from = (0, _properties.resolveProperties)({
          override: resolveName(contract.signer, overrides.from),
          signer: contract.signer.getAddress()
        }).then(check => __awaiter(this, void 0, void 0, function* () {
          if ((0, _address.getAddress)(check.signer) !== check.override) {
            logger.throwError("Contract with a Signer cannot override from", _logger.Logger.errors.UNSUPPORTED_OPERATION, {
              operation: "overrides.from"
            });
          }

          return check.override;
        }));
      } else {
        overrides.from = contract.signer.getAddress();
      }
    } else if (overrides.from) {
      overrides.from = resolveName(contract.provider, overrides.from); //} else {
      // Contracts without a signer can override "from", and if
      // unspecified the zero address is used
      //overrides.from = AddressZero;
    } // Wait for all dependencies to be resolved (prefer the signer over the provider)


    const resolved = yield (0, _properties.resolveProperties)({
      args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),
      address: contract.resolvedAddress,
      overrides: (0, _properties.resolveProperties)(overrides) || {}
    }); // The ABI coded transaction

    const data = contract.interface.encodeFunctionData(fragment, resolved.args);
    const tx = {
      data: data,
      to: resolved.address
    }; // Resolved Overrides

    const ro = resolved.overrides; // Populate simple overrides

    if (ro.nonce != null) {
      tx.nonce = _bignumber.BigNumber.from(ro.nonce).toNumber();
    }

    if (ro.gasLimit != null) {
      tx.gasLimit = _bignumber.BigNumber.from(ro.gasLimit);
    }

    if (ro.gasPrice != null) {
      tx.gasPrice = _bignumber.BigNumber.from(ro.gasPrice);
    }

    if (ro.maxFeePerGas != null) {
      tx.maxFeePerGas = _bignumber.BigNumber.from(ro.maxFeePerGas);
    }

    if (ro.maxPriorityFeePerGas != null) {
      tx.maxPriorityFeePerGas = _bignumber.BigNumber.from(ro.maxPriorityFeePerGas);
    }

    if (ro.from != null) {
      tx.from = ro.from;
    }

    if (ro.type != null) {
      tx.type = ro.type;
    }

    if (ro.accessList != null) {
      tx.accessList = (0, _transactions.accessListify)(ro.accessList);
    } // If there was no "gasLimit" override, but the ABI specifies a default, use it


    if (tx.gasLimit == null && fragment.gas != null) {
      // Compute the intrinsic gas cost for this transaction
      // @TODO: This is based on the yellow paper as of Petersburg; this is something
      // we may wish to parameterize in v6 as part of the Network object. Since this
      // is always a non-nil to address, we can ignore G_create, but may wish to add
      // similar logic to the ContractFactory.
      let intrinsic = 21000;
      const bytes = (0, _bytes.arrayify)(data);

      for (let i = 0; i < bytes.length; i++) {
        intrinsic += 4;

        if (bytes[i]) {
          intrinsic += 64;
        }
      }

      tx.gasLimit = _bignumber.BigNumber.from(fragment.gas).add(intrinsic);
    } // Populate "value" override


    if (ro.value) {
      const roValue = _bignumber.BigNumber.from(ro.value);

      if (!roValue.isZero() && !fragment.payable) {
        logger.throwError("non-payable method cannot override value", _logger.Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "overrides.value",
          value: overrides.value
        });
      }

      tx.value = roValue;
    }

    if (ro.customData) {
      tx.customData = (0, _properties.shallowCopy)(ro.customData);
    }

    if (ro.ccipReadEnabled) {
      tx.ccipReadEnabled = !!ro.ccipReadEnabled;
    } // Remove the overrides


    delete overrides.nonce;
    delete overrides.gasLimit;
    delete overrides.gasPrice;
    delete overrides.from;
    delete overrides.value;
    delete overrides.type;
    delete overrides.accessList;
    delete overrides.maxFeePerGas;
    delete overrides.maxPriorityFeePerGas;
    delete overrides.customData;
    delete overrides.ccipReadEnabled; // Make sure there are no stray overrides, which may indicate a
    // typo or using an unsupported key.

    const leftovers = Object.keys(overrides).filter(key => overrides[key] != null);

    if (leftovers.length) {
      logger.throwError(`cannot override ${leftovers.map(l => JSON.stringify(l)).join(",")}`, _logger.Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "overrides",
        overrides: leftovers
      });
    }

    return tx;
  });
}

function buildPopulate(contract, fragment) {
  return function (...args) {
    return populateTransaction(contract, fragment, args);
  };
}

function buildEstimate(contract, fragment) {
  const signerOrProvider = contract.signer || contract.provider;
  return function (...args) {
    return __awaiter(this, void 0, void 0, function* () {
      if (!signerOrProvider) {
        logger.throwError("estimate require a provider or signer", _logger.Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "estimateGas"
        });
      }

      const tx = yield populateTransaction(contract, fragment, args);
      return yield signerOrProvider.estimateGas(tx);
    });
  };
}

function addContractWait(contract, tx) {
  const wait = tx.wait.bind(tx);

  tx.wait = confirmations => {
    return wait(confirmations).then(receipt => {
      receipt.events = receipt.logs.map(log => {
        let event = (0, _properties.deepCopy)(log);
        let parsed = null;

        try {
          parsed = contract.interface.parseLog(log);
        } catch (e) {} // Successfully parsed the event log; include it


        if (parsed) {
          event.args = parsed.args;

          event.decode = (data, topics) => {
            return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);
          };

          event.event = parsed.name;
          event.eventSignature = parsed.signature;
        } // Useful operations


        event.removeListener = () => {
          return contract.provider;
        };

        event.getBlock = () => {
          return contract.provider.getBlock(receipt.blockHash);
        };

        event.getTransaction = () => {
          return contract.provider.getTransaction(receipt.transactionHash);
        };

        event.getTransactionReceipt = () => {
          return Promise.resolve(receipt);
        };

        return event;
      });
      return receipt;
    });
  };
}

function buildCall(contract, fragment, collapseSimple) {
  const signerOrProvider = contract.signer || contract.provider;
  return function (...args) {
    return __awaiter(this, void 0, void 0, function* () {
      // Extract the "blockTag" override if present
      let blockTag = undefined;

      if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === "object") {
        const overrides = (0, _properties.shallowCopy)(args.pop());

        if (overrides.blockTag != null) {
          blockTag = yield overrides.blockTag;
        }

        delete overrides.blockTag;
        args.push(overrides);
      } // If the contract was just deployed, wait until it is mined


      if (contract.deployTransaction != null) {
        yield contract._deployed(blockTag);
      } // Call a node and get the result


      const tx = yield populateTransaction(contract, fragment, args);
      const result = yield signerOrProvider.call(tx, blockTag);

      try {
        let value = contract.interface.decodeFunctionResult(fragment, result);

        if (collapseSimple && fragment.outputs.length === 1) {
          value = value[0];
        }

        return value;
      } catch (error) {
        if (error.code === _logger.Logger.errors.CALL_EXCEPTION) {
          error.address = contract.address;
          error.args = args;
          error.transaction = tx;
        }

        throw error;
      }
    });
  };
}

function buildSend(contract, fragment) {
  return function (...args) {
    return __awaiter(this, void 0, void 0, function* () {
      if (!contract.signer) {
        logger.throwError("sending a transaction requires a signer", _logger.Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "sendTransaction"
        });
      } // If the contract was just deployed, wait until it is mined


      if (contract.deployTransaction != null) {
        yield contract._deployed();
      }

      const txRequest = yield populateTransaction(contract, fragment, args);
      const tx = yield contract.signer.sendTransaction(txRequest); // Tweak the tx.wait so the receipt has extra properties

      addContractWait(contract, tx);
      return tx;
    });
  };
}

function buildDefault(contract, fragment, collapseSimple) {
  if (fragment.constant) {
    return buildCall(contract, fragment, collapseSimple);
  }

  return buildSend(contract, fragment);
}

function getEventTag(filter) {
  if (filter.address && (filter.topics == null || filter.topics.length === 0)) {
    return "*";
  }

  return (filter.address || "*") + "@" + (filter.topics ? filter.topics.map(topic => {
    if (Array.isArray(topic)) {
      return topic.join("|");
    }

    return topic;
  }).join(":") : "");
}

class RunningEvent {
  constructor(tag, filter) {
    (0, _properties.defineReadOnly)(this, "tag", tag);
    (0, _properties.defineReadOnly)(this, "filter", filter);
    this._listeners = [];
  }

  addListener(listener, once) {
    this._listeners.push({
      listener: listener,
      once: once
    });
  }

  removeListener(listener) {
    let done = false;
    this._listeners = this._listeners.filter(item => {
      if (done || item.listener !== listener) {
        return true;
      }

      done = true;
      return false;
    });
  }

  removeAllListeners() {
    this._listeners = [];
  }

  listeners() {
    return this._listeners.map(i => i.listener);
  }

  listenerCount() {
    return this._listeners.length;
  }

  run(args) {
    const listenerCount = this.listenerCount();
    this._listeners = this._listeners.filter(item => {
      const argsCopy = args.slice(); // Call the callback in the next event loop

      setTimeout(() => {
        item.listener.apply(this, argsCopy);
      }, 0); // Reschedule it if it not "once"

      return !item.once;
    });
    return listenerCount;
  }

  prepareEvent(event) {} // Returns the array that will be applied to an emit


  getEmit(event) {
    return [event];
  }

}

class ErrorRunningEvent extends RunningEvent {
  constructor() {
    super("error", null);
  }

} // @TODO Fragment should inherit Wildcard? and just override getEmit?
//       or have a common abstract super class, with enough constructor
//       options to configure both.
// A Fragment Event will populate all the properties that Wildcard
// will, and additionally dereference the arguments when emitting


class FragmentRunningEvent extends RunningEvent {
  constructor(address, contractInterface, fragment, topics) {
    const filter = {
      address: address
    };
    let topic = contractInterface.getEventTopic(fragment);

    if (topics) {
      if (topic !== topics[0]) {
        logger.throwArgumentError("topic mismatch", "topics", topics);
      }

      filter.topics = topics.slice();
    } else {
      filter.topics = [topic];
    }

    super(getEventTag(filter), filter);
    (0, _properties.defineReadOnly)(this, "address", address);
    (0, _properties.defineReadOnly)(this, "interface", contractInterface);
    (0, _properties.defineReadOnly)(this, "fragment", fragment);
  }

  prepareEvent(event) {
    super.prepareEvent(event);
    event.event = this.fragment.name;
    event.eventSignature = this.fragment.format();

    event.decode = (data, topics) => {
      return this.interface.decodeEventLog(this.fragment, data, topics);
    };

    try {
      event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);
    } catch (error) {
      event.args = null;
      event.decodeError = error;
    }
  }

  getEmit(event) {
    const errors = (0, _abi.checkResultErrors)(event.args);

    if (errors.length) {
      throw errors[0].error;
    }

    const args = (event.args || []).slice();
    args.push(event);
    return args;
  }

} // A Wildcard Event will attempt to populate:
//  - event            The name of the event name
//  - eventSignature   The full signature of the event
//  - decode           A function to decode data and topics
//  - args             The decoded data and topics


class WildcardRunningEvent extends RunningEvent {
  constructor(address, contractInterface) {
    super("*", {
      address: address
    });
    (0, _properties.defineReadOnly)(this, "address", address);
    (0, _properties.defineReadOnly)(this, "interface", contractInterface);
  }

  prepareEvent(event) {
    super.prepareEvent(event);

    try {
      const parsed = this.interface.parseLog(event);
      event.event = parsed.name;
      event.eventSignature = parsed.signature;

      event.decode = (data, topics) => {
        return this.interface.decodeEventLog(parsed.eventFragment, data, topics);
      };

      event.args = parsed.args;
    } catch (error) {// No matching event
    }
  }

}

class BaseContract {
  constructor(addressOrName, contractInterface, signerOrProvider) {
    logger.checkNew(new.target, Contract); // @TODO: Maybe still check the addressOrName looks like a valid address or name?
    //address = getAddress(address);

    (0, _properties.defineReadOnly)(this, "interface", (0, _properties.getStatic)(new.target, "getInterface")(contractInterface));

    if (signerOrProvider == null) {
      (0, _properties.defineReadOnly)(this, "provider", null);
      (0, _properties.defineReadOnly)(this, "signer", null);
    } else if (_abstractSigner.Signer.isSigner(signerOrProvider)) {
      (0, _properties.defineReadOnly)(this, "provider", signerOrProvider.provider || null);
      (0, _properties.defineReadOnly)(this, "signer", signerOrProvider);
    } else if (_abstractProvider.Provider.isProvider(signerOrProvider)) {
      (0, _properties.defineReadOnly)(this, "provider", signerOrProvider);
      (0, _properties.defineReadOnly)(this, "signer", null);
    } else {
      logger.throwArgumentError("invalid signer or provider", "signerOrProvider", signerOrProvider);
    }

    (0, _properties.defineReadOnly)(this, "callStatic", {});
    (0, _properties.defineReadOnly)(this, "estimateGas", {});
    (0, _properties.defineReadOnly)(this, "functions", {});
    (0, _properties.defineReadOnly)(this, "populateTransaction", {});
    (0, _properties.defineReadOnly)(this, "filters", {});
    {
      const uniqueFilters = {};
      Object.keys(this.interface.events).forEach(eventSignature => {
        const event = this.interface.events[eventSignature];
        (0, _properties.defineReadOnly)(this.filters, eventSignature, (...args) => {
          return {
            address: this.address,
            topics: this.interface.encodeFilterTopics(event, args)
          };
        });

        if (!uniqueFilters[event.name]) {
          uniqueFilters[event.name] = [];
        }

        uniqueFilters[event.name].push(eventSignature);
      });
      Object.keys(uniqueFilters).forEach(name => {
        const filters = uniqueFilters[name];

        if (filters.length === 1) {
          (0, _properties.defineReadOnly)(this.filters, name, this.filters[filters[0]]);
        } else {
          logger.warn(`Duplicate definition of ${name} (${filters.join(", ")})`);
        }
      });
    }
    (0, _properties.defineReadOnly)(this, "_runningEvents", {});
    (0, _properties.defineReadOnly)(this, "_wrappedEmits", {});

    if (addressOrName == null) {
      logger.throwArgumentError("invalid contract address or ENS name", "addressOrName", addressOrName);
    }

    (0, _properties.defineReadOnly)(this, "address", addressOrName);

    if (this.provider) {
      (0, _properties.defineReadOnly)(this, "resolvedAddress", resolveName(this.provider, addressOrName));
    } else {
      try {
        (0, _properties.defineReadOnly)(this, "resolvedAddress", Promise.resolve((0, _address.getAddress)(addressOrName)));
      } catch (error) {
        // Without a provider, we cannot use ENS names
        logger.throwError("provider is required to use ENS name as contract address", _logger.Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "new Contract"
        });
      }
    } // Swallow bad ENS names to prevent Unhandled Exceptions


    this.resolvedAddress.catch(e => {});
    const uniqueNames = {};
    const uniqueSignatures = {};
    Object.keys(this.interface.functions).forEach(signature => {
      const fragment = this.interface.functions[signature]; // Check that the signature is unique; if not the ABI generation has
      // not been cleaned or may be incorrectly generated

      if (uniqueSignatures[signature]) {
        logger.warn(`Duplicate ABI entry for ${JSON.stringify(signature)}`);
        return;
      }

      uniqueSignatures[signature] = true; // Track unique names; we only expose bare named functions if they
      // are ambiguous

      {
        const name = fragment.name;

        if (!uniqueNames[`%${name}`]) {
          uniqueNames[`%${name}`] = [];
        }

        uniqueNames[`%${name}`].push(signature);
      }

      if (this[signature] == null) {
        (0, _properties.defineReadOnly)(this, signature, buildDefault(this, fragment, true));
      } // We do not collapse simple calls on this bucket, which allows
      // frameworks to safely use this without introspection as well as
      // allows decoding error recovery.


      if (this.functions[signature] == null) {
        (0, _properties.defineReadOnly)(this.functions, signature, buildDefault(this, fragment, false));
      }

      if (this.callStatic[signature] == null) {
        (0, _properties.defineReadOnly)(this.callStatic, signature, buildCall(this, fragment, true));
      }

      if (this.populateTransaction[signature] == null) {
        (0, _properties.defineReadOnly)(this.populateTransaction, signature, buildPopulate(this, fragment));
      }

      if (this.estimateGas[signature] == null) {
        (0, _properties.defineReadOnly)(this.estimateGas, signature, buildEstimate(this, fragment));
      }
    });
    Object.keys(uniqueNames).forEach(name => {
      // Ambiguous names to not get attached as bare names
      const signatures = uniqueNames[name];

      if (signatures.length > 1) {
        return;
      } // Strip off the leading "%" used for prototype protection


      name = name.substring(1);
      const signature = signatures[0]; // If overwriting a member property that is null, swallow the error

      try {
        if (this[name] == null) {
          (0, _properties.defineReadOnly)(this, name, this[signature]);
        }
      } catch (e) {}

      if (this.functions[name] == null) {
        (0, _properties.defineReadOnly)(this.functions, name, this.functions[signature]);
      }

      if (this.callStatic[name] == null) {
        (0, _properties.defineReadOnly)(this.callStatic, name, this.callStatic[signature]);
      }

      if (this.populateTransaction[name] == null) {
        (0, _properties.defineReadOnly)(this.populateTransaction, name, this.populateTransaction[signature]);
      }

      if (this.estimateGas[name] == null) {
        (0, _properties.defineReadOnly)(this.estimateGas, name, this.estimateGas[signature]);
      }
    });
  }

  static getContractAddress(transaction) {
    return (0, _address.getContractAddress)(transaction);
  }

  static getInterface(contractInterface) {
    if (_abi.Interface.isInterface(contractInterface)) {
      return contractInterface;
    }

    return new _abi.Interface(contractInterface);
  } // @TODO: Allow timeout?


  deployed() {
    return this._deployed();
  }

  _deployed(blockTag) {
    if (!this._deployedPromise) {
      // If we were just deployed, we know the transaction we should occur in
      if (this.deployTransaction) {
        this._deployedPromise = this.deployTransaction.wait().then(() => {
          return this;
        });
      } else {
        // @TODO: Once we allow a timeout to be passed in, we will wait
        // up to that many blocks for getCode
        // Otherwise, poll for our code to be deployed
        this._deployedPromise = this.provider.getCode(this.address, blockTag).then(code => {
          if (code === "0x") {
            logger.throwError("contract not deployed", _logger.Logger.errors.UNSUPPORTED_OPERATION, {
              contractAddress: this.address,
              operation: "getDeployed"
            });
          }

          return this;
        });
      }
    }

    return this._deployedPromise;
  } // @TODO:
  // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>
  // @TODO:
  // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>


  fallback(overrides) {
    if (!this.signer) {
      logger.throwError("sending a transactions require a signer", _logger.Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "sendTransaction(fallback)"
      });
    }

    const tx = (0, _properties.shallowCopy)(overrides || {});
    ["from", "to"].forEach(function (key) {
      if (tx[key] == null) {
        return;
      }

      logger.throwError("cannot override " + key, _logger.Logger.errors.UNSUPPORTED_OPERATION, {
        operation: key
      });
    });
    tx.to = this.resolvedAddress;
    return this.deployed().then(() => {
      return this.signer.sendTransaction(tx);
    });
  } // Reconnect to a different signer or provider


  connect(signerOrProvider) {
    if (typeof signerOrProvider === "string") {
      signerOrProvider = new _abstractSigner.VoidSigner(signerOrProvider, this.provider);
    }

    const contract = new this.constructor(this.address, this.interface, signerOrProvider);

    if (this.deployTransaction) {
      (0, _properties.defineReadOnly)(contract, "deployTransaction", this.deployTransaction);
    }

    return contract;
  } // Re-attach to a different on-chain instance of this contract


  attach(addressOrName) {
    return new this.constructor(addressOrName, this.interface, this.signer || this.provider);
  }

  static isIndexed(value) {
    return _abi.Indexed.isIndexed(value);
  }

  _normalizeRunningEvent(runningEvent) {
    // Already have an instance of this event running; we can re-use it
    if (this._runningEvents[runningEvent.tag]) {
      return this._runningEvents[runningEvent.tag];
    }

    return runningEvent;
  }

  _getRunningEvent(eventName) {
    if (typeof eventName === "string") {
      // Listen for "error" events (if your contract has an error event, include
      // the full signature to bypass this special event keyword)
      if (eventName === "error") {
        return this._normalizeRunningEvent(new ErrorRunningEvent());
      } // Listen for any event that is registered


      if (eventName === "event") {
        return this._normalizeRunningEvent(new RunningEvent("event", null));
      } // Listen for any event


      if (eventName === "*") {
        return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));
      } // Get the event Fragment (throws if ambiguous/unknown event)


      const fragment = this.interface.getEvent(eventName);
      return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));
    } // We have topics to filter by...


    if (eventName.topics && eventName.topics.length > 0) {
      // Is it a known topichash? (throws if no matching topichash)
      try {
        const topic = eventName.topics[0];

        if (typeof topic !== "string") {
          throw new Error("invalid topic"); // @TODO: May happen for anonymous events
        }

        const fragment = this.interface.getEvent(topic);
        return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));
      } catch (error) {} // Filter by the unknown topichash


      const filter = {
        address: this.address,
        topics: eventName.topics
      };
      return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));
    }

    return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));
  }

  _checkRunningEvents(runningEvent) {
    if (runningEvent.listenerCount() === 0) {
      delete this._runningEvents[runningEvent.tag]; // If we have a poller for this, remove it

      const emit = this._wrappedEmits[runningEvent.tag];

      if (emit && runningEvent.filter) {
        this.provider.off(runningEvent.filter, emit);
        delete this._wrappedEmits[runningEvent.tag];
      }
    }
  } // Subclasses can override this to gracefully recover
  // from parse errors if they wish


  _wrapEvent(runningEvent, log, listener) {
    const event = (0, _properties.deepCopy)(log);

    event.removeListener = () => {
      if (!listener) {
        return;
      }

      runningEvent.removeListener(listener);

      this._checkRunningEvents(runningEvent);
    };

    event.getBlock = () => {
      return this.provider.getBlock(log.blockHash);
    };

    event.getTransaction = () => {
      return this.provider.getTransaction(log.transactionHash);
    };

    event.getTransactionReceipt = () => {
      return this.provider.getTransactionReceipt(log.transactionHash);
    }; // This may throw if the topics and data mismatch the signature


    runningEvent.prepareEvent(event);
    return event;
  }

  _addEventListener(runningEvent, listener, once) {
    if (!this.provider) {
      logger.throwError("events require a provider or a signer with a provider", _logger.Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "once"
      });
    }

    runningEvent.addListener(listener, once); // Track this running event and its listeners (may already be there; but no hard in updating)

    this._runningEvents[runningEvent.tag] = runningEvent; // If we are not polling the provider, start polling

    if (!this._wrappedEmits[runningEvent.tag]) {
      const wrappedEmit = log => {
        let event = this._wrapEvent(runningEvent, log, listener); // Try to emit the result for the parameterized event...


        if (event.decodeError == null) {
          try {
            const args = runningEvent.getEmit(event);
            this.emit(runningEvent.filter, ...args);
          } catch (error) {
            event.decodeError = error.error;
          }
        } // Always emit "event" for fragment-base events


        if (runningEvent.filter != null) {
          this.emit("event", event);
        } // Emit "error" if there was an error


        if (event.decodeError != null) {
          this.emit("error", event.decodeError, event);
        }
      };

      this._wrappedEmits[runningEvent.tag] = wrappedEmit; // Special events, like "error" do not have a filter

      if (runningEvent.filter != null) {
        this.provider.on(runningEvent.filter, wrappedEmit);
      }
    }
  }

  queryFilter(event, fromBlockOrBlockhash, toBlock) {
    const runningEvent = this._getRunningEvent(event);

    const filter = (0, _properties.shallowCopy)(runningEvent.filter);

    if (typeof fromBlockOrBlockhash === "string" && (0, _bytes.isHexString)(fromBlockOrBlockhash, 32)) {
      if (toBlock != null) {
        logger.throwArgumentError("cannot specify toBlock with blockhash", "toBlock", toBlock);
      }

      filter.blockHash = fromBlockOrBlockhash;
    } else {
      filter.fromBlock = fromBlockOrBlockhash != null ? fromBlockOrBlockhash : 0;
      filter.toBlock = toBlock != null ? toBlock : "latest";
    }

    return this.provider.getLogs(filter).then(logs => {
      return logs.map(log => this._wrapEvent(runningEvent, log, null));
    });
  }

  on(event, listener) {
    this._addEventListener(this._getRunningEvent(event), listener, false);

    return this;
  }

  once(event, listener) {
    this._addEventListener(this._getRunningEvent(event), listener, true);

    return this;
  }

  emit(eventName, ...args) {
    if (!this.provider) {
      return false;
    }

    const runningEvent = this._getRunningEvent(eventName);

    const result = runningEvent.run(args) > 0; // May have drained all the "once" events; check for living events

    this._checkRunningEvents(runningEvent);

    return result;
  }

  listenerCount(eventName) {
    if (!this.provider) {
      return 0;
    }

    if (eventName == null) {
      return Object.keys(this._runningEvents).reduce((accum, key) => {
        return accum + this._runningEvents[key].listenerCount();
      }, 0);
    }

    return this._getRunningEvent(eventName).listenerCount();
  }

  listeners(eventName) {
    if (!this.provider) {
      return [];
    }

    if (eventName == null) {
      const result = [];

      for (let tag in this._runningEvents) {
        this._runningEvents[tag].listeners().forEach(listener => {
          result.push(listener);
        });
      }

      return result;
    }

    return this._getRunningEvent(eventName).listeners();
  }

  removeAllListeners(eventName) {
    if (!this.provider) {
      return this;
    }

    if (eventName == null) {
      for (const tag in this._runningEvents) {
        const runningEvent = this._runningEvents[tag];
        runningEvent.removeAllListeners();

        this._checkRunningEvents(runningEvent);
      }

      return this;
    } // Delete any listeners


    const runningEvent = this._getRunningEvent(eventName);

    runningEvent.removeAllListeners();

    this._checkRunningEvents(runningEvent);

    return this;
  }

  off(eventName, listener) {
    if (!this.provider) {
      return this;
    }

    const runningEvent = this._getRunningEvent(eventName);

    runningEvent.removeListener(listener);

    this._checkRunningEvents(runningEvent);

    return this;
  }

  removeListener(eventName, listener) {
    return this.off(eventName, listener);
  }

}

exports.BaseContract = BaseContract;

class Contract extends BaseContract {}

exports.Contract = Contract;

class ContractFactory {
  constructor(contractInterface, bytecode, signer) {
    let bytecodeHex = null;

    if (typeof bytecode === "string") {
      bytecodeHex = bytecode;
    } else if ((0, _bytes.isBytes)(bytecode)) {
      bytecodeHex = (0, _bytes.hexlify)(bytecode);
    } else if (bytecode && typeof bytecode.object === "string") {
      // Allow the bytecode object from the Solidity compiler
      bytecodeHex = bytecode.object;
    } else {
      // Crash in the next verification step
      bytecodeHex = "!";
    } // Make sure it is 0x prefixed


    if (bytecodeHex.substring(0, 2) !== "0x") {
      bytecodeHex = "0x" + bytecodeHex;
    } // Make sure the final result is valid bytecode


    if (!(0, _bytes.isHexString)(bytecodeHex) || bytecodeHex.length % 2) {
      logger.throwArgumentError("invalid bytecode", "bytecode", bytecode);
    } // If we have a signer, make sure it is valid


    if (signer && !_abstractSigner.Signer.isSigner(signer)) {
      logger.throwArgumentError("invalid signer", "signer", signer);
    }

    (0, _properties.defineReadOnly)(this, "bytecode", bytecodeHex);
    (0, _properties.defineReadOnly)(this, "interface", (0, _properties.getStatic)(new.target, "getInterface")(contractInterface));
    (0, _properties.defineReadOnly)(this, "signer", signer || null);
  } // @TODO: Future; rename to populateTransaction?


  getDeployTransaction(...args) {
    let tx = {}; // If we have 1 additional argument, we allow transaction overrides

    if (args.length === this.interface.deploy.inputs.length + 1 && typeof args[args.length - 1] === "object") {
      tx = (0, _properties.shallowCopy)(args.pop());

      for (const key in tx) {
        if (!allowedTransactionKeys[key]) {
          throw new Error("unknown transaction override " + key);
        }
      }
    } // Do not allow these to be overridden in a deployment transaction


    ["data", "from", "to"].forEach(key => {
      if (tx[key] == null) {
        return;
      }

      logger.throwError("cannot override " + key, _logger.Logger.errors.UNSUPPORTED_OPERATION, {
        operation: key
      });
    });

    if (tx.value) {
      const value = _bignumber.BigNumber.from(tx.value);

      if (!value.isZero() && !this.interface.deploy.payable) {
        logger.throwError("non-payable constructor cannot override value", _logger.Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "overrides.value",
          value: tx.value
        });
      }
    } // Make sure the call matches the constructor signature


    logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, " in Contract constructor"); // Set the data to the bytecode + the encoded constructor arguments

    tx.data = (0, _bytes.hexlify)((0, _bytes.concat)([this.bytecode, this.interface.encodeDeploy(args)]));
    return tx;
  }

  deploy(...args) {
    return __awaiter(this, void 0, void 0, function* () {
      let overrides = {}; // If 1 extra parameter was passed in, it contains overrides

      if (args.length === this.interface.deploy.inputs.length + 1) {
        overrides = args.pop();
      } // Make sure the call matches the constructor signature


      logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, " in Contract constructor"); // Resolve ENS names and promises in the arguments

      const params = yield resolveAddresses(this.signer, args, this.interface.deploy.inputs);
      params.push(overrides); // Get the deployment transaction (with optional overrides)

      const unsignedTx = this.getDeployTransaction(...params); // Send the deployment transaction

      const tx = yield this.signer.sendTransaction(unsignedTx);
      const address = (0, _properties.getStatic)(this.constructor, "getContractAddress")(tx);
      const contract = (0, _properties.getStatic)(this.constructor, "getContract")(address, this.interface, this.signer); // Add the modified wait that wraps events

      addContractWait(contract, tx);
      (0, _properties.defineReadOnly)(contract, "deployTransaction", tx);
      return contract;
    });
  }

  attach(address) {
    return this.constructor.getContract(address, this.interface, this.signer);
  }

  connect(signer) {
    return new this.constructor(this.interface, this.bytecode, signer);
  }

  static fromSolidity(compilerOutput, signer) {
    if (compilerOutput == null) {
      logger.throwError("missing compiler output", _logger.Logger.errors.MISSING_ARGUMENT, {
        argument: "compilerOutput"
      });
    }

    if (typeof compilerOutput === "string") {
      compilerOutput = JSON.parse(compilerOutput);
    }

    const abi = compilerOutput.abi;
    let bytecode = null;

    if (compilerOutput.bytecode) {
      bytecode = compilerOutput.bytecode;
    } else if (compilerOutput.evm && compilerOutput.evm.bytecode) {
      bytecode = compilerOutput.evm.bytecode;
    }

    return new this(abi, bytecode, signer);
  }

  static getInterface(contractInterface) {
    return Contract.getInterface(contractInterface);
  }

  static getContractAddress(tx) {
    return (0, _address.getContractAddress)(tx);
  }

  static getContract(address, contractInterface, signer) {
    return new Contract(address, contractInterface, signer);
  }

}

exports.ContractFactory = ContractFactory;
},{"@ethersproject/abi":"../../node_modules/@ethersproject/abi/lib.esm/index.js","@ethersproject/abstract-provider":"../../node_modules/@ethersproject/abstract-provider/lib.esm/index.js","@ethersproject/abstract-signer":"../../node_modules/@ethersproject/abstract-signer/lib.esm/index.js","@ethersproject/address":"../../node_modules/@ethersproject/address/lib.esm/index.js","@ethersproject/bignumber":"../../node_modules/@ethersproject/bignumber/lib.esm/index.js","@ethersproject/bytes":"../../node_modules/@ethersproject/bytes/lib.esm/index.js","@ethersproject/properties":"../../node_modules/@ethersproject/properties/lib.esm/index.js","@ethersproject/transactions":"../../node_modules/@ethersproject/transactions/lib.esm/index.js","@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","./_version":"../../node_modules/@ethersproject/contracts/lib.esm/_version.js"}],"../../node_modules/@ethersproject/basex/lib.esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BaseX = exports.Base58 = exports.Base32 = void 0;

var _bytes = require("@ethersproject/bytes");

var _properties = require("@ethersproject/properties");

/**
 * var basex = require("base-x");
 *
 * This implementation is heavily based on base-x. The main reason to
 * deviate was to prevent the dependency of Buffer.
 *
 * Contributors:
 *
 * base-x encoding
 * Forked from https://github.com/cryptocoinjs/bs58
 * Originally written by Mike Hearn for BitcoinJ
 * Copyright (c) 2011 Google Inc
 * Ported to JavaScript by Stefan Thomas
 * Merged Buffer refactorings from base58-native by Stephen Pair
 * Copyright (c) 2013 BitPay Inc
 *
 * The MIT License (MIT)
 *
 * Copyright base-x contributors (c) 2016
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 */
class BaseX {
  constructor(alphabet) {
    (0, _properties.defineReadOnly)(this, "alphabet", alphabet);
    (0, _properties.defineReadOnly)(this, "base", alphabet.length);
    (0, _properties.defineReadOnly)(this, "_alphabetMap", {});
    (0, _properties.defineReadOnly)(this, "_leader", alphabet.charAt(0)); // pre-compute lookup table

    for (let i = 0; i < alphabet.length; i++) {
      this._alphabetMap[alphabet.charAt(i)] = i;
    }
  }

  encode(value) {
    let source = (0, _bytes.arrayify)(value);

    if (source.length === 0) {
      return "";
    }

    let digits = [0];

    for (let i = 0; i < source.length; ++i) {
      let carry = source[i];

      for (let j = 0; j < digits.length; ++j) {
        carry += digits[j] << 8;
        digits[j] = carry % this.base;
        carry = carry / this.base | 0;
      }

      while (carry > 0) {
        digits.push(carry % this.base);
        carry = carry / this.base | 0;
      }
    }

    let string = ""; // deal with leading zeros

    for (let k = 0; source[k] === 0 && k < source.length - 1; ++k) {
      string += this._leader;
    } // convert digits to a string


    for (let q = digits.length - 1; q >= 0; --q) {
      string += this.alphabet[digits[q]];
    }

    return string;
  }

  decode(value) {
    if (typeof value !== "string") {
      throw new TypeError("Expected String");
    }

    let bytes = [];

    if (value.length === 0) {
      return new Uint8Array(bytes);
    }

    bytes.push(0);

    for (let i = 0; i < value.length; i++) {
      let byte = this._alphabetMap[value[i]];

      if (byte === undefined) {
        throw new Error("Non-base" + this.base + " character");
      }

      let carry = byte;

      for (let j = 0; j < bytes.length; ++j) {
        carry += bytes[j] * this.base;
        bytes[j] = carry & 0xff;
        carry >>= 8;
      }

      while (carry > 0) {
        bytes.push(carry & 0xff);
        carry >>= 8;
      }
    } // deal with leading zeros


    for (let k = 0; value[k] === this._leader && k < value.length - 1; ++k) {
      bytes.push(0);
    }

    return (0, _bytes.arrayify)(new Uint8Array(bytes.reverse()));
  }

}

exports.BaseX = BaseX;
const Base32 = new BaseX("abcdefghijklmnopqrstuvwxyz234567");
exports.Base32 = Base32;
const Base58 = new BaseX("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"); //console.log(Base58.decode("Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj"))
//console.log(Base58.encode(Base58.decode("Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj")))

exports.Base58 = Base58;
},{"@ethersproject/bytes":"../../node_modules/@ethersproject/bytes/lib.esm/index.js","@ethersproject/properties":"../../node_modules/@ethersproject/properties/lib.esm/index.js"}],"../../node_modules/@ethersproject/sha2/lib.esm/types.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SupportedAlgorithm = void 0;
var SupportedAlgorithm;
exports.SupportedAlgorithm = SupportedAlgorithm;

(function (SupportedAlgorithm) {
  SupportedAlgorithm["sha256"] = "sha256";
  SupportedAlgorithm["sha512"] = "sha512";
})(SupportedAlgorithm || (exports.SupportedAlgorithm = SupportedAlgorithm = {}));

;
},{}],"../../node_modules/@ethersproject/sha2/lib.esm/_version.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.version = void 0;
const version = "sha2/5.6.0";
exports.version = version;
},{}],"../../node_modules/@ethersproject/sha2/lib.esm/sha2.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.computeHmac = computeHmac;
exports.ripemd160 = ripemd160;
exports.sha256 = sha256;
exports.sha512 = sha512;

var _hash = _interopRequireDefault(require("hash.js"));

var _bytes = require("@ethersproject/bytes");

var _types = require("./types");

var _logger = require("@ethersproject/logger");

var _version = require("./_version");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//const _ripemd160 = _hash.ripemd160;
const logger = new _logger.Logger(_version.version);

function ripemd160(data) {
  return "0x" + _hash.default.ripemd160().update((0, _bytes.arrayify)(data)).digest("hex");
}

function sha256(data) {
  return "0x" + _hash.default.sha256().update((0, _bytes.arrayify)(data)).digest("hex");
}

function sha512(data) {
  return "0x" + _hash.default.sha512().update((0, _bytes.arrayify)(data)).digest("hex");
}

function computeHmac(algorithm, key, data) {
  if (!_types.SupportedAlgorithm[algorithm]) {
    logger.throwError("unsupported algorithm " + algorithm, _logger.Logger.errors.UNSUPPORTED_OPERATION, {
      operation: "hmac",
      algorithm: algorithm
    });
  }

  return "0x" + _hash.default.hmac(_hash.default[algorithm], (0, _bytes.arrayify)(key)).update((0, _bytes.arrayify)(data)).digest("hex");
}
},{"hash.js":"../../node_modules/hash.js/lib/hash.js","@ethersproject/bytes":"../../node_modules/@ethersproject/bytes/lib.esm/index.js","./types":"../../node_modules/@ethersproject/sha2/lib.esm/types.js","@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","./_version":"../../node_modules/@ethersproject/sha2/lib.esm/_version.js"}],"../../node_modules/@ethersproject/sha2/lib.esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "SupportedAlgorithm", {
  enumerable: true,
  get: function () {
    return _types.SupportedAlgorithm;
  }
});
Object.defineProperty(exports, "computeHmac", {
  enumerable: true,
  get: function () {
    return _sha.computeHmac;
  }
});
Object.defineProperty(exports, "ripemd160", {
  enumerable: true,
  get: function () {
    return _sha.ripemd160;
  }
});
Object.defineProperty(exports, "sha256", {
  enumerable: true,
  get: function () {
    return _sha.sha256;
  }
});
Object.defineProperty(exports, "sha512", {
  enumerable: true,
  get: function () {
    return _sha.sha512;
  }
});

var _sha = require("./sha2");

var _types = require("./types");
},{"./sha2":"../../node_modules/@ethersproject/sha2/lib.esm/sha2.js","./types":"../../node_modules/@ethersproject/sha2/lib.esm/types.js"}],"../../node_modules/@ethersproject/pbkdf2/lib.esm/pbkdf2.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pbkdf2 = pbkdf2;

var _bytes = require("@ethersproject/bytes");

var _sha = require("@ethersproject/sha2");

function pbkdf2(password, salt, iterations, keylen, hashAlgorithm) {
  password = (0, _bytes.arrayify)(password);
  salt = (0, _bytes.arrayify)(salt);
  let hLen;
  let l = 1;
  const DK = new Uint8Array(keylen);
  const block1 = new Uint8Array(salt.length + 4);
  block1.set(salt); //salt.copy(block1, 0, 0, salt.length)

  let r;
  let T;

  for (let i = 1; i <= l; i++) {
    //block1.writeUInt32BE(i, salt.length)
    block1[salt.length] = i >> 24 & 0xff;
    block1[salt.length + 1] = i >> 16 & 0xff;
    block1[salt.length + 2] = i >> 8 & 0xff;
    block1[salt.length + 3] = i & 0xff; //let U = createHmac(password).update(block1).digest();

    let U = (0, _bytes.arrayify)((0, _sha.computeHmac)(hashAlgorithm, password, block1));

    if (!hLen) {
      hLen = U.length;
      T = new Uint8Array(hLen);
      l = Math.ceil(keylen / hLen);
      r = keylen - (l - 1) * hLen;
    } //U.copy(T, 0, 0, hLen)


    T.set(U);

    for (let j = 1; j < iterations; j++) {
      //U = createHmac(password).update(U).digest();
      U = (0, _bytes.arrayify)((0, _sha.computeHmac)(hashAlgorithm, password, U));

      for (let k = 0; k < hLen; k++) T[k] ^= U[k];
    }

    const destPos = (i - 1) * hLen;
    const len = i === l ? r : hLen; //T.copy(DK, destPos, 0, len)

    DK.set((0, _bytes.arrayify)(T).slice(0, len), destPos);
  }

  return (0, _bytes.hexlify)(DK);
}
},{"@ethersproject/bytes":"../../node_modules/@ethersproject/bytes/lib.esm/index.js","@ethersproject/sha2":"../../node_modules/@ethersproject/sha2/lib.esm/index.js"}],"../../node_modules/@ethersproject/pbkdf2/lib.esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "pbkdf2", {
  enumerable: true,
  get: function () {
    return _pbkdf.pbkdf2;
  }
});

var _pbkdf = require("./pbkdf2");
},{"./pbkdf2":"../../node_modules/@ethersproject/pbkdf2/lib.esm/pbkdf2.js"}],"../../node_modules/@ethersproject/wordlists/lib.esm/_version.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.version = void 0;
const version = "wordlists/5.6.0";
exports.version = version;
},{}],"../../node_modules/@ethersproject/wordlists/lib.esm/wordlist.js":[function(require,module,exports) {
"use strict"; // This gets overridden by rollup

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logger = exports.Wordlist = void 0;

var _hash = require("@ethersproject/hash");

var _properties = require("@ethersproject/properties");

var _logger = require("@ethersproject/logger");

var _version = require("./_version");

const exportWordlist = false;
const logger = new _logger.Logger(_version.version);
exports.logger = logger;

class Wordlist {
  constructor(locale) {
    logger.checkAbstract(new.target, Wordlist);
    (0, _properties.defineReadOnly)(this, "locale", locale);
  } // Subclasses may override this


  split(mnemonic) {
    return mnemonic.toLowerCase().split(/ +/g);
  } // Subclasses may override this


  join(words) {
    return words.join(" ");
  }

  static check(wordlist) {
    const words = [];

    for (let i = 0; i < 2048; i++) {
      const word = wordlist.getWord(i);
      /* istanbul ignore if */

      if (i !== wordlist.getWordIndex(word)) {
        return "0x";
      }

      words.push(word);
    }

    return (0, _hash.id)(words.join("\n") + "\n");
  }

  static register(lang, name) {
    if (!name) {
      name = lang.locale;
    }
    /* istanbul ignore if */


    if (exportWordlist) {
      try {
        const anyGlobal = window;

        if (anyGlobal._ethers && anyGlobal._ethers.wordlists) {
          if (!anyGlobal._ethers.wordlists[name]) {
            (0, _properties.defineReadOnly)(anyGlobal._ethers.wordlists, name, lang);
          }
        }
      } catch (error) {}
    }
  }

}

exports.Wordlist = Wordlist;
},{"@ethersproject/hash":"../../node_modules/@ethersproject/hash/lib.esm/index.js","@ethersproject/properties":"../../node_modules/@ethersproject/properties/lib.esm/index.js","@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","./_version":"../../node_modules/@ethersproject/wordlists/lib.esm/_version.js"}],"../../node_modules/@ethersproject/wordlists/lib.esm/lang-en.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.langEn = void 0;

var _wordlist = require("./wordlist");

const words = "AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo";
let wordlist = null;

function loadWords(lang) {
  if (wordlist != null) {
    return;
  }

  wordlist = words.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" "); // Verify the computed list matches the official list

  /* istanbul ignore if */

  if (_wordlist.Wordlist.check(lang) !== "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60") {
    wordlist = null;
    throw new Error("BIP39 Wordlist for en (English) FAILED");
  }
}

class LangEn extends _wordlist.Wordlist {
  constructor() {
    super("en");
  }

  getWord(index) {
    loadWords(this);
    return wordlist[index];
  }

  getWordIndex(word) {
    loadWords(this);
    return wordlist.indexOf(word);
  }

}

const langEn = new LangEn();
exports.langEn = langEn;

_wordlist.Wordlist.register(langEn);
},{"./wordlist":"../../node_modules/@ethersproject/wordlists/lib.esm/wordlist.js"}],"../../node_modules/@ethersproject/wordlists/lib.esm/wordlists.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wordlists = void 0;

var _langEn = require("./lang-en");

const wordlists = {
  en: _langEn.langEn
};
exports.wordlists = wordlists;
},{"./lang-en":"../../node_modules/@ethersproject/wordlists/lib.esm/lang-en.js"}],"../../node_modules/@ethersproject/wordlists/lib.esm/index.js":[function(require,module,exports) {
"use strict"; // Wordlists
// See: https://github.com/bitcoin/bips/blob/master/bip-0039/bip-0039-wordlists.md

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Wordlist", {
  enumerable: true,
  get: function () {
    return _wordlist.Wordlist;
  }
});
Object.defineProperty(exports, "logger", {
  enumerable: true,
  get: function () {
    return _wordlist.logger;
  }
});
Object.defineProperty(exports, "wordlists", {
  enumerable: true,
  get: function () {
    return _wordlists.wordlists;
  }
});

var _wordlist = require("./wordlist");

var _wordlists = require("./wordlists");
},{"./wordlist":"../../node_modules/@ethersproject/wordlists/lib.esm/wordlist.js","./wordlists":"../../node_modules/@ethersproject/wordlists/lib.esm/wordlists.js"}],"../../node_modules/@ethersproject/hdnode/lib.esm/_version.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.version = void 0;
const version = "hdnode/5.6.0";
exports.version = version;
},{}],"../../node_modules/@ethersproject/hdnode/lib.esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.defaultPath = exports.HDNode = void 0;
exports.entropyToMnemonic = entropyToMnemonic;
exports.getAccountPath = getAccountPath;
exports.isValidMnemonic = isValidMnemonic;
exports.mnemonicToEntropy = mnemonicToEntropy;
exports.mnemonicToSeed = mnemonicToSeed;

var _basex = require("@ethersproject/basex");

var _bytes = require("@ethersproject/bytes");

var _bignumber = require("@ethersproject/bignumber");

var _strings = require("@ethersproject/strings");

var _pbkdf = require("@ethersproject/pbkdf2");

var _properties = require("@ethersproject/properties");

var _signingKey = require("@ethersproject/signing-key");

var _sha = require("@ethersproject/sha2");

var _transactions = require("@ethersproject/transactions");

var _wordlists = require("@ethersproject/wordlists");

var _logger = require("@ethersproject/logger");

var _version = require("./_version");

const logger = new _logger.Logger(_version.version);

const N = _bignumber.BigNumber.from("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"); // "Bitcoin seed"


const MasterSecret = (0, _strings.toUtf8Bytes)("Bitcoin seed");
const HardenedBit = 0x80000000; // Returns a byte with the MSB bits set

function getUpperMask(bits) {
  return (1 << bits) - 1 << 8 - bits;
} // Returns a byte with the LSB bits set


function getLowerMask(bits) {
  return (1 << bits) - 1;
}

function bytes32(value) {
  return (0, _bytes.hexZeroPad)((0, _bytes.hexlify)(value), 32);
}

function base58check(data) {
  return _basex.Base58.encode((0, _bytes.concat)([data, (0, _bytes.hexDataSlice)((0, _sha.sha256)((0, _sha.sha256)(data)), 0, 4)]));
}

function getWordlist(wordlist) {
  if (wordlist == null) {
    return _wordlists.wordlists["en"];
  }

  if (typeof wordlist === "string") {
    const words = _wordlists.wordlists[wordlist];

    if (words == null) {
      logger.throwArgumentError("unknown locale", "wordlist", wordlist);
    }

    return words;
  }

  return wordlist;
}

const _constructorGuard = {};
const defaultPath = "m/44'/60'/0'/0/0";
exports.defaultPath = defaultPath;
;

class HDNode {
  /**
   *  This constructor should not be called directly.
   *
   *  Please use:
   *   - fromMnemonic
   *   - fromSeed
   */
  constructor(constructorGuard, privateKey, publicKey, parentFingerprint, chainCode, index, depth, mnemonicOrPath) {
    logger.checkNew(new.target, HDNode);
    /* istanbul ignore if */

    if (constructorGuard !== _constructorGuard) {
      throw new Error("HDNode constructor cannot be called directly");
    }

    if (privateKey) {
      const signingKey = new _signingKey.SigningKey(privateKey);
      (0, _properties.defineReadOnly)(this, "privateKey", signingKey.privateKey);
      (0, _properties.defineReadOnly)(this, "publicKey", signingKey.compressedPublicKey);
    } else {
      (0, _properties.defineReadOnly)(this, "privateKey", null);
      (0, _properties.defineReadOnly)(this, "publicKey", (0, _bytes.hexlify)(publicKey));
    }

    (0, _properties.defineReadOnly)(this, "parentFingerprint", parentFingerprint);
    (0, _properties.defineReadOnly)(this, "fingerprint", (0, _bytes.hexDataSlice)((0, _sha.ripemd160)((0, _sha.sha256)(this.publicKey)), 0, 4));
    (0, _properties.defineReadOnly)(this, "address", (0, _transactions.computeAddress)(this.publicKey));
    (0, _properties.defineReadOnly)(this, "chainCode", chainCode);
    (0, _properties.defineReadOnly)(this, "index", index);
    (0, _properties.defineReadOnly)(this, "depth", depth);

    if (mnemonicOrPath == null) {
      // From a source that does not preserve the path (e.g. extended keys)
      (0, _properties.defineReadOnly)(this, "mnemonic", null);
      (0, _properties.defineReadOnly)(this, "path", null);
    } else if (typeof mnemonicOrPath === "string") {
      // From a source that does not preserve the mnemonic (e.g. neutered)
      (0, _properties.defineReadOnly)(this, "mnemonic", null);
      (0, _properties.defineReadOnly)(this, "path", mnemonicOrPath);
    } else {
      // From a fully qualified source
      (0, _properties.defineReadOnly)(this, "mnemonic", mnemonicOrPath);
      (0, _properties.defineReadOnly)(this, "path", mnemonicOrPath.path);
    }
  }

  get extendedKey() {
    // We only support the mainnet values for now, but if anyone needs
    // testnet values, let me know. I believe current sentiment is that
    // we should always use mainnet, and use BIP-44 to derive the network
    //   - Mainnet: public=0x0488B21E, private=0x0488ADE4
    //   - Testnet: public=0x043587CF, private=0x04358394
    if (this.depth >= 256) {
      throw new Error("Depth too large!");
    }

    return base58check((0, _bytes.concat)([this.privateKey != null ? "0x0488ADE4" : "0x0488B21E", (0, _bytes.hexlify)(this.depth), this.parentFingerprint, (0, _bytes.hexZeroPad)((0, _bytes.hexlify)(this.index), 4), this.chainCode, this.privateKey != null ? (0, _bytes.concat)(["0x00", this.privateKey]) : this.publicKey]));
  }

  neuter() {
    return new HDNode(_constructorGuard, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);
  }

  _derive(index) {
    if (index > 0xffffffff) {
      throw new Error("invalid index - " + String(index));
    } // Base path


    let path = this.path;

    if (path) {
      path += "/" + (index & ~HardenedBit);
    }

    const data = new Uint8Array(37);

    if (index & HardenedBit) {
      if (!this.privateKey) {
        throw new Error("cannot derive child of neutered node");
      } // Data = 0x00 || ser_256(k_par)


      data.set((0, _bytes.arrayify)(this.privateKey), 1); // Hardened path

      if (path) {
        path += "'";
      }
    } else {
      // Data = ser_p(point(k_par))
      data.set((0, _bytes.arrayify)(this.publicKey));
    } // Data += ser_32(i)


    for (let i = 24; i >= 0; i -= 8) {
      data[33 + (i >> 3)] = index >> 24 - i & 0xff;
    }

    const I = (0, _bytes.arrayify)((0, _sha.computeHmac)(_sha.SupportedAlgorithm.sha512, this.chainCode, data));
    const IL = I.slice(0, 32);
    const IR = I.slice(32); // The private key

    let ki = null; // The public key

    let Ki = null;

    if (this.privateKey) {
      ki = bytes32(_bignumber.BigNumber.from(IL).add(this.privateKey).mod(N));
    } else {
      const ek = new _signingKey.SigningKey((0, _bytes.hexlify)(IL));
      Ki = ek._addPoint(this.publicKey);
    }

    let mnemonicOrPath = path;
    const srcMnemonic = this.mnemonic;

    if (srcMnemonic) {
      mnemonicOrPath = Object.freeze({
        phrase: srcMnemonic.phrase,
        path: path,
        locale: srcMnemonic.locale || "en"
      });
    }

    return new HDNode(_constructorGuard, ki, Ki, this.fingerprint, bytes32(IR), index, this.depth + 1, mnemonicOrPath);
  }

  derivePath(path) {
    const components = path.split("/");

    if (components.length === 0 || components[0] === "m" && this.depth !== 0) {
      throw new Error("invalid path - " + path);
    }

    if (components[0] === "m") {
      components.shift();
    }

    let result = this;

    for (let i = 0; i < components.length; i++) {
      const component = components[i];

      if (component.match(/^[0-9]+'$/)) {
        const index = parseInt(component.substring(0, component.length - 1));

        if (index >= HardenedBit) {
          throw new Error("invalid path index - " + component);
        }

        result = result._derive(HardenedBit + index);
      } else if (component.match(/^[0-9]+$/)) {
        const index = parseInt(component);

        if (index >= HardenedBit) {
          throw new Error("invalid path index - " + component);
        }

        result = result._derive(index);
      } else {
        throw new Error("invalid path component - " + component);
      }
    }

    return result;
  }

  static _fromSeed(seed, mnemonic) {
    const seedArray = (0, _bytes.arrayify)(seed);

    if (seedArray.length < 16 || seedArray.length > 64) {
      throw new Error("invalid seed");
    }

    const I = (0, _bytes.arrayify)((0, _sha.computeHmac)(_sha.SupportedAlgorithm.sha512, MasterSecret, seedArray));
    return new HDNode(_constructorGuard, bytes32(I.slice(0, 32)), null, "0x00000000", bytes32(I.slice(32)), 0, 0, mnemonic);
  }

  static fromMnemonic(mnemonic, password, wordlist) {
    // If a locale name was passed in, find the associated wordlist
    wordlist = getWordlist(wordlist); // Normalize the case and spacing in the mnemonic (throws if the mnemonic is invalid)

    mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist), wordlist);
    return HDNode._fromSeed(mnemonicToSeed(mnemonic, password), {
      phrase: mnemonic,
      path: "m",
      locale: wordlist.locale
    });
  }

  static fromSeed(seed) {
    return HDNode._fromSeed(seed, null);
  }

  static fromExtendedKey(extendedKey) {
    const bytes = _basex.Base58.decode(extendedKey);

    if (bytes.length !== 82 || base58check(bytes.slice(0, 78)) !== extendedKey) {
      logger.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
    }

    const depth = bytes[4];
    const parentFingerprint = (0, _bytes.hexlify)(bytes.slice(5, 9));
    const index = parseInt((0, _bytes.hexlify)(bytes.slice(9, 13)).substring(2), 16);
    const chainCode = (0, _bytes.hexlify)(bytes.slice(13, 45));
    const key = bytes.slice(45, 78);

    switch ((0, _bytes.hexlify)(bytes.slice(0, 4))) {
      // Public Key
      case "0x0488b21e":
      case "0x043587cf":
        return new HDNode(_constructorGuard, null, (0, _bytes.hexlify)(key), parentFingerprint, chainCode, index, depth, null);
      // Private Key

      case "0x0488ade4":
      case "0x04358394 ":
        if (key[0] !== 0) {
          break;
        }

        return new HDNode(_constructorGuard, (0, _bytes.hexlify)(key.slice(1)), null, parentFingerprint, chainCode, index, depth, null);
    }

    return logger.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
  }

}

exports.HDNode = HDNode;

function mnemonicToSeed(mnemonic, password) {
  if (!password) {
    password = "";
  }

  const salt = (0, _strings.toUtf8Bytes)("mnemonic" + password, _strings.UnicodeNormalizationForm.NFKD);
  return (0, _pbkdf.pbkdf2)((0, _strings.toUtf8Bytes)(mnemonic, _strings.UnicodeNormalizationForm.NFKD), salt, 2048, 64, "sha512");
}

function mnemonicToEntropy(mnemonic, wordlist) {
  wordlist = getWordlist(wordlist);
  logger.checkNormalize();
  const words = wordlist.split(mnemonic);

  if (words.length % 3 !== 0) {
    throw new Error("invalid mnemonic");
  }

  const entropy = (0, _bytes.arrayify)(new Uint8Array(Math.ceil(11 * words.length / 8)));
  let offset = 0;

  for (let i = 0; i < words.length; i++) {
    let index = wordlist.getWordIndex(words[i].normalize("NFKD"));

    if (index === -1) {
      throw new Error("invalid mnemonic");
    }

    for (let bit = 0; bit < 11; bit++) {
      if (index & 1 << 10 - bit) {
        entropy[offset >> 3] |= 1 << 7 - offset % 8;
      }

      offset++;
    }
  }

  const entropyBits = 32 * words.length / 3;
  const checksumBits = words.length / 3;
  const checksumMask = getUpperMask(checksumBits);
  const checksum = (0, _bytes.arrayify)((0, _sha.sha256)(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;

  if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {
    throw new Error("invalid checksum");
  }

  return (0, _bytes.hexlify)(entropy.slice(0, entropyBits / 8));
}

function entropyToMnemonic(entropy, wordlist) {
  wordlist = getWordlist(wordlist);
  entropy = (0, _bytes.arrayify)(entropy);

  if (entropy.length % 4 !== 0 || entropy.length < 16 || entropy.length > 32) {
    throw new Error("invalid entropy");
  }

  const indices = [0];
  let remainingBits = 11;

  for (let i = 0; i < entropy.length; i++) {
    // Consume the whole byte (with still more to go)
    if (remainingBits > 8) {
      indices[indices.length - 1] <<= 8;
      indices[indices.length - 1] |= entropy[i];
      remainingBits -= 8; // This byte will complete an 11-bit index
    } else {
      indices[indices.length - 1] <<= remainingBits;
      indices[indices.length - 1] |= entropy[i] >> 8 - remainingBits; // Start the next word

      indices.push(entropy[i] & getLowerMask(8 - remainingBits));
      remainingBits += 3;
    }
  } // Compute the checksum bits


  const checksumBits = entropy.length / 4;
  const checksum = (0, _bytes.arrayify)((0, _sha.sha256)(entropy))[0] & getUpperMask(checksumBits); // Shift the checksum into the word indices

  indices[indices.length - 1] <<= checksumBits;
  indices[indices.length - 1] |= checksum >> 8 - checksumBits;
  return wordlist.join(indices.map(index => wordlist.getWord(index)));
}

function isValidMnemonic(mnemonic, wordlist) {
  try {
    mnemonicToEntropy(mnemonic, wordlist);
    return true;
  } catch (error) {}

  return false;
}

function getAccountPath(index) {
  if (typeof index !== "number" || index < 0 || index >= HardenedBit || index % 1) {
    logger.throwArgumentError("invalid account index", "index", index);
  }

  return `m/44'/60'/${index}'/0/0`;
}
},{"@ethersproject/basex":"../../node_modules/@ethersproject/basex/lib.esm/index.js","@ethersproject/bytes":"../../node_modules/@ethersproject/bytes/lib.esm/index.js","@ethersproject/bignumber":"../../node_modules/@ethersproject/bignumber/lib.esm/index.js","@ethersproject/strings":"../../node_modules/@ethersproject/strings/lib.esm/index.js","@ethersproject/pbkdf2":"../../node_modules/@ethersproject/pbkdf2/lib.esm/index.js","@ethersproject/properties":"../../node_modules/@ethersproject/properties/lib.esm/index.js","@ethersproject/signing-key":"../../node_modules/@ethersproject/signing-key/lib.esm/index.js","@ethersproject/sha2":"../../node_modules/@ethersproject/sha2/lib.esm/index.js","@ethersproject/transactions":"../../node_modules/@ethersproject/transactions/lib.esm/index.js","@ethersproject/wordlists":"../../node_modules/@ethersproject/wordlists/lib.esm/index.js","@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","./_version":"../../node_modules/@ethersproject/hdnode/lib.esm/_version.js"}],"../../node_modules/@ethersproject/random/lib.esm/_version.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.version = void 0;
const version = "random/5.6.0";
exports.version = version;
},{}],"../../node_modules/@ethersproject/random/lib.esm/random.js":[function(require,module,exports) {
var global = arguments[3];
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.randomBytes = randomBytes;

var _bytes = require("@ethersproject/bytes");

var _logger = require("@ethersproject/logger");

var _version = require("./_version");

const logger = new _logger.Logger(_version.version); // Debugging line for testing browser lib in node
//const window = { crypto: { getRandomValues: () => { } } };
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis

function getGlobal() {
  if (typeof self !== 'undefined') {
    return self;
  }

  if (typeof window !== 'undefined') {
    return window;
  }

  if (typeof global !== 'undefined') {
    return global;
  }

  throw new Error('unable to locate global object');
}

;
const anyGlobal = getGlobal();
let crypto = anyGlobal.crypto || anyGlobal.msCrypto;

if (!crypto || !crypto.getRandomValues) {
  logger.warn("WARNING: Missing strong random number source");
  crypto = {
    getRandomValues: function (buffer) {
      return logger.throwError("no secure random source avaialble", _logger.Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "crypto.getRandomValues"
      });
    }
  };
}

function randomBytes(length) {
  if (length <= 0 || length > 1024 || length % 1 || length != length) {
    logger.throwArgumentError("invalid length", "length", length);
  }

  const result = new Uint8Array(length);
  crypto.getRandomValues(result);
  return (0, _bytes.arrayify)(result);
}

;
},{"@ethersproject/bytes":"../../node_modules/@ethersproject/bytes/lib.esm/index.js","@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","./_version":"../../node_modules/@ethersproject/random/lib.esm/_version.js"}],"../../node_modules/@ethersproject/random/lib.esm/shuffle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shuffled = shuffled;

function shuffled(array) {
  array = array.slice();

  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    const tmp = array[i];
    array[i] = array[j];
    array[j] = tmp;
  }

  return array;
}
},{}],"../../node_modules/@ethersproject/random/lib.esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "randomBytes", {
  enumerable: true,
  get: function () {
    return _random.randomBytes;
  }
});
Object.defineProperty(exports, "shuffled", {
  enumerable: true,
  get: function () {
    return _shuffle.shuffled;
  }
});

var _random = require("./random");

var _shuffle = require("./shuffle");
},{"./random":"../../node_modules/@ethersproject/random/lib.esm/random.js","./shuffle":"../../node_modules/@ethersproject/random/lib.esm/shuffle.js"}],"../../node_modules/aes-js/index.js":[function(require,module,exports) {
var define;
"use strict";

(function(root) {

    function checkInt(value) {
        return (parseInt(value) === value);
    }

    function checkInts(arrayish) {
        if (!checkInt(arrayish.length)) { return false; }

        for (var i = 0; i < arrayish.length; i++) {
            if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) {
                return false;
            }
        }

        return true;
    }

    function coerceArray(arg, copy) {

        // ArrayBuffer view
        if (arg.buffer && ArrayBuffer.isView(arg) && arg.name === 'Uint8Array') {

            if (copy) {
                if (arg.slice) {
                    arg = arg.slice();
                } else {
                    arg = Array.prototype.slice.call(arg);
                }
            }

            return arg;
        }

        // It's an array; check it is a valid representation of a byte
        if (Array.isArray(arg)) {
            if (!checkInts(arg)) {
                throw new Error('Array contains invalid value: ' + arg);
            }

            return new Uint8Array(arg);
        }

        // Something else, but behaves like an array (maybe a Buffer? Arguments?)
        if (checkInt(arg.length) && checkInts(arg)) {
            return new Uint8Array(arg);
        }

        throw new Error('unsupported array-like object');
    }

    function createArray(length) {
        return new Uint8Array(length);
    }

    function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {
        if (sourceStart != null || sourceEnd != null) {
            if (sourceArray.slice) {
                sourceArray = sourceArray.slice(sourceStart, sourceEnd);
            } else {
                sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);
            }
        }
        targetArray.set(sourceArray, targetStart);
    }



    var convertUtf8 = (function() {
        function toBytes(text) {
            var result = [], i = 0;
            text = encodeURI(text);
            while (i < text.length) {
                var c = text.charCodeAt(i++);

                // if it is a % sign, encode the following 2 bytes as a hex value
                if (c === 37) {
                    result.push(parseInt(text.substr(i, 2), 16))
                    i += 2;

                // otherwise, just the actual byte
                } else {
                    result.push(c)
                }
            }

            return coerceArray(result);
        }

        function fromBytes(bytes) {
            var result = [], i = 0;

            while (i < bytes.length) {
                var c = bytes[i];

                if (c < 128) {
                    result.push(String.fromCharCode(c));
                    i++;
                } else if (c > 191 && c < 224) {
                    result.push(String.fromCharCode(((c & 0x1f) << 6) | (bytes[i + 1] & 0x3f)));
                    i += 2;
                } else {
                    result.push(String.fromCharCode(((c & 0x0f) << 12) | ((bytes[i + 1] & 0x3f) << 6) | (bytes[i + 2] & 0x3f)));
                    i += 3;
                }
            }

            return result.join('');
        }

        return {
            toBytes: toBytes,
            fromBytes: fromBytes,
        }
    })();

    var convertHex = (function() {
        function toBytes(text) {
            var result = [];
            for (var i = 0; i < text.length; i += 2) {
                result.push(parseInt(text.substr(i, 2), 16));
            }

            return result;
        }

        // http://ixti.net/development/javascript/2011/11/11/base64-encodedecode-of-utf8-in-browser-with-js.html
        var Hex = '0123456789abcdef';

        function fromBytes(bytes) {
                var result = [];
                for (var i = 0; i < bytes.length; i++) {
                    var v = bytes[i];
                    result.push(Hex[(v & 0xf0) >> 4] + Hex[v & 0x0f]);
                }
                return result.join('');
        }

        return {
            toBytes: toBytes,
            fromBytes: fromBytes,
        }
    })();


    // Number of rounds by keysize
    var numberOfRounds = {16: 10, 24: 12, 32: 14}

    // Round constant words
    var rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91];

    // S-box and Inverse S-box (S is for Substitution)
    var S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];
    var Si =[0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];

    // Transformations for encryption
    var T1 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a];
    var T2 = [0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616];
    var T3 = [0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16];
    var T4 = [0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c];

    // Transformations for decryption
    var T5 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742];
    var T6 = [0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857];
    var T7 = [0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8];
    var T8 = [0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0];

    // Transformations for decryption key expansion
    var U1 = [0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3];
    var U2 = [0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697];
    var U3 = [0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46];
    var U4 = [0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d];

    function convertToInt32(bytes) {
        var result = [];
        for (var i = 0; i < bytes.length; i += 4) {
            result.push(
                (bytes[i    ] << 24) |
                (bytes[i + 1] << 16) |
                (bytes[i + 2] <<  8) |
                 bytes[i + 3]
            );
        }
        return result;
    }

    var AES = function(key) {
        if (!(this instanceof AES)) {
            throw Error('AES must be instanitated with `new`');
        }

        Object.defineProperty(this, 'key', {
            value: coerceArray(key, true)
        });

        this._prepare();
    }


    AES.prototype._prepare = function() {

        var rounds = numberOfRounds[this.key.length];
        if (rounds == null) {
            throw new Error('invalid key size (must be 16, 24 or 32 bytes)');
        }

        // encryption round keys
        this._Ke = [];

        // decryption round keys
        this._Kd = [];

        for (var i = 0; i <= rounds; i++) {
            this._Ke.push([0, 0, 0, 0]);
            this._Kd.push([0, 0, 0, 0]);
        }

        var roundKeyCount = (rounds + 1) * 4;
        var KC = this.key.length / 4;

        // convert the key into ints
        var tk = convertToInt32(this.key);

        // copy values into round key arrays
        var index;
        for (var i = 0; i < KC; i++) {
            index = i >> 2;
            this._Ke[index][i % 4] = tk[i];
            this._Kd[rounds - index][i % 4] = tk[i];
        }

        // key expansion (fips-197 section 5.2)
        var rconpointer = 0;
        var t = KC, tt;
        while (t < roundKeyCount) {
            tt = tk[KC - 1];
            tk[0] ^= ((S[(tt >> 16) & 0xFF] << 24) ^
                      (S[(tt >>  8) & 0xFF] << 16) ^
                      (S[ tt        & 0xFF] <<  8) ^
                       S[(tt >> 24) & 0xFF]        ^
                      (rcon[rconpointer] << 24));
            rconpointer += 1;

            // key expansion (for non-256 bit)
            if (KC != 8) {
                for (var i = 1; i < KC; i++) {
                    tk[i] ^= tk[i - 1];
                }

            // key expansion for 256-bit keys is "slightly different" (fips-197)
            } else {
                for (var i = 1; i < (KC / 2); i++) {
                    tk[i] ^= tk[i - 1];
                }
                tt = tk[(KC / 2) - 1];

                tk[KC / 2] ^= (S[ tt        & 0xFF]        ^
                              (S[(tt >>  8) & 0xFF] <<  8) ^
                              (S[(tt >> 16) & 0xFF] << 16) ^
                              (S[(tt >> 24) & 0xFF] << 24));

                for (var i = (KC / 2) + 1; i < KC; i++) {
                    tk[i] ^= tk[i - 1];
                }
            }

            // copy values into round key arrays
            var i = 0, r, c;
            while (i < KC && t < roundKeyCount) {
                r = t >> 2;
                c = t % 4;
                this._Ke[r][c] = tk[i];
                this._Kd[rounds - r][c] = tk[i++];
                t++;
            }
        }

        // inverse-cipher-ify the decryption round key (fips-197 section 5.3)
        for (var r = 1; r < rounds; r++) {
            for (var c = 0; c < 4; c++) {
                tt = this._Kd[r][c];
                this._Kd[r][c] = (U1[(tt >> 24) & 0xFF] ^
                                  U2[(tt >> 16) & 0xFF] ^
                                  U3[(tt >>  8) & 0xFF] ^
                                  U4[ tt        & 0xFF]);
            }
        }
    }

    AES.prototype.encrypt = function(plaintext) {
        if (plaintext.length != 16) {
            throw new Error('invalid plaintext size (must be 16 bytes)');
        }

        var rounds = this._Ke.length - 1;
        var a = [0, 0, 0, 0];

        // convert plaintext to (ints ^ key)
        var t = convertToInt32(plaintext);
        for (var i = 0; i < 4; i++) {
            t[i] ^= this._Ke[0][i];
        }

        // apply round transforms
        for (var r = 1; r < rounds; r++) {
            for (var i = 0; i < 4; i++) {
                a[i] = (T1[(t[ i         ] >> 24) & 0xff] ^
                        T2[(t[(i + 1) % 4] >> 16) & 0xff] ^
                        T3[(t[(i + 2) % 4] >>  8) & 0xff] ^
                        T4[ t[(i + 3) % 4]        & 0xff] ^
                        this._Ke[r][i]);
            }
            t = a.slice();
        }

        // the last round is special
        var result = createArray(16), tt;
        for (var i = 0; i < 4; i++) {
            tt = this._Ke[rounds][i];
            result[4 * i    ] = (S[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;
            result[4 * i + 1] = (S[(t[(i + 1) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;
            result[4 * i + 2] = (S[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;
            result[4 * i + 3] = (S[ t[(i + 3) % 4]        & 0xff] ^  tt       ) & 0xff;
        }

        return result;
    }

    AES.prototype.decrypt = function(ciphertext) {
        if (ciphertext.length != 16) {
            throw new Error('invalid ciphertext size (must be 16 bytes)');
        }

        var rounds = this._Kd.length - 1;
        var a = [0, 0, 0, 0];

        // convert plaintext to (ints ^ key)
        var t = convertToInt32(ciphertext);
        for (var i = 0; i < 4; i++) {
            t[i] ^= this._Kd[0][i];
        }

        // apply round transforms
        for (var r = 1; r < rounds; r++) {
            for (var i = 0; i < 4; i++) {
                a[i] = (T5[(t[ i          ] >> 24) & 0xff] ^
                        T6[(t[(i + 3) % 4] >> 16) & 0xff] ^
                        T7[(t[(i + 2) % 4] >>  8) & 0xff] ^
                        T8[ t[(i + 1) % 4]        & 0xff] ^
                        this._Kd[r][i]);
            }
            t = a.slice();
        }

        // the last round is special
        var result = createArray(16), tt;
        for (var i = 0; i < 4; i++) {
            tt = this._Kd[rounds][i];
            result[4 * i    ] = (Si[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;
            result[4 * i + 1] = (Si[(t[(i + 3) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;
            result[4 * i + 2] = (Si[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;
            result[4 * i + 3] = (Si[ t[(i + 1) % 4]        & 0xff] ^  tt       ) & 0xff;
        }

        return result;
    }


    /**
     *  Mode Of Operation - Electonic Codebook (ECB)
     */
    var ModeOfOperationECB = function(key) {
        if (!(this instanceof ModeOfOperationECB)) {
            throw Error('AES must be instanitated with `new`');
        }

        this.description = "Electronic Code Block";
        this.name = "ecb";

        this._aes = new AES(key);
    }

    ModeOfOperationECB.prototype.encrypt = function(plaintext) {
        plaintext = coerceArray(plaintext);

        if ((plaintext.length % 16) !== 0) {
            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');
        }

        var ciphertext = createArray(plaintext.length);
        var block = createArray(16);

        for (var i = 0; i < plaintext.length; i += 16) {
            copyArray(plaintext, block, 0, i, i + 16);
            block = this._aes.encrypt(block);
            copyArray(block, ciphertext, i);
        }

        return ciphertext;
    }

    ModeOfOperationECB.prototype.decrypt = function(ciphertext) {
        ciphertext = coerceArray(ciphertext);

        if ((ciphertext.length % 16) !== 0) {
            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');
        }

        var plaintext = createArray(ciphertext.length);
        var block = createArray(16);

        for (var i = 0; i < ciphertext.length; i += 16) {
            copyArray(ciphertext, block, 0, i, i + 16);
            block = this._aes.decrypt(block);
            copyArray(block, plaintext, i);
        }

        return plaintext;
    }


    /**
     *  Mode Of Operation - Cipher Block Chaining (CBC)
     */
    var ModeOfOperationCBC = function(key, iv) {
        if (!(this instanceof ModeOfOperationCBC)) {
            throw Error('AES must be instanitated with `new`');
        }

        this.description = "Cipher Block Chaining";
        this.name = "cbc";

        if (!iv) {
            iv = createArray(16);

        } else if (iv.length != 16) {
            throw new Error('invalid initialation vector size (must be 16 bytes)');
        }

        this._lastCipherblock = coerceArray(iv, true);

        this._aes = new AES(key);
    }

    ModeOfOperationCBC.prototype.encrypt = function(plaintext) {
        plaintext = coerceArray(plaintext);

        if ((plaintext.length % 16) !== 0) {
            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');
        }

        var ciphertext = createArray(plaintext.length);
        var block = createArray(16);

        for (var i = 0; i < plaintext.length; i += 16) {
            copyArray(plaintext, block, 0, i, i + 16);

            for (var j = 0; j < 16; j++) {
                block[j] ^= this._lastCipherblock[j];
            }

            this._lastCipherblock = this._aes.encrypt(block);
            copyArray(this._lastCipherblock, ciphertext, i);
        }

        return ciphertext;
    }

    ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {
        ciphertext = coerceArray(ciphertext);

        if ((ciphertext.length % 16) !== 0) {
            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');
        }

        var plaintext = createArray(ciphertext.length);
        var block = createArray(16);

        for (var i = 0; i < ciphertext.length; i += 16) {
            copyArray(ciphertext, block, 0, i, i + 16);
            block = this._aes.decrypt(block);

            for (var j = 0; j < 16; j++) {
                plaintext[i + j] = block[j] ^ this._lastCipherblock[j];
            }

            copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);
        }

        return plaintext;
    }


    /**
     *  Mode Of Operation - Cipher Feedback (CFB)
     */
    var ModeOfOperationCFB = function(key, iv, segmentSize) {
        if (!(this instanceof ModeOfOperationCFB)) {
            throw Error('AES must be instanitated with `new`');
        }

        this.description = "Cipher Feedback";
        this.name = "cfb";

        if (!iv) {
            iv = createArray(16);

        } else if (iv.length != 16) {
            throw new Error('invalid initialation vector size (must be 16 size)');
        }

        if (!segmentSize) { segmentSize = 1; }

        this.segmentSize = segmentSize;

        this._shiftRegister = coerceArray(iv, true);

        this._aes = new AES(key);
    }

    ModeOfOperationCFB.prototype.encrypt = function(plaintext) {
        if ((plaintext.length % this.segmentSize) != 0) {
            throw new Error('invalid plaintext size (must be segmentSize bytes)');
        }

        var encrypted = coerceArray(plaintext, true);

        var xorSegment;
        for (var i = 0; i < encrypted.length; i += this.segmentSize) {
            xorSegment = this._aes.encrypt(this._shiftRegister);
            for (var j = 0; j < this.segmentSize; j++) {
                encrypted[i + j] ^= xorSegment[j];
            }

            // Shift the register
            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
            copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
        }

        return encrypted;
    }

    ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {
        if ((ciphertext.length % this.segmentSize) != 0) {
            throw new Error('invalid ciphertext size (must be segmentSize bytes)');
        }

        var plaintext = coerceArray(ciphertext, true);

        var xorSegment;
        for (var i = 0; i < plaintext.length; i += this.segmentSize) {
            xorSegment = this._aes.encrypt(this._shiftRegister);

            for (var j = 0; j < this.segmentSize; j++) {
                plaintext[i + j] ^= xorSegment[j];
            }

            // Shift the register
            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
            copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
        }

        return plaintext;
    }

    /**
     *  Mode Of Operation - Output Feedback (OFB)
     */
    var ModeOfOperationOFB = function(key, iv) {
        if (!(this instanceof ModeOfOperationOFB)) {
            throw Error('AES must be instanitated with `new`');
        }

        this.description = "Output Feedback";
        this.name = "ofb";

        if (!iv) {
            iv = createArray(16);

        } else if (iv.length != 16) {
            throw new Error('invalid initialation vector size (must be 16 bytes)');
        }

        this._lastPrecipher = coerceArray(iv, true);
        this._lastPrecipherIndex = 16;

        this._aes = new AES(key);
    }

    ModeOfOperationOFB.prototype.encrypt = function(plaintext) {
        var encrypted = coerceArray(plaintext, true);

        for (var i = 0; i < encrypted.length; i++) {
            if (this._lastPrecipherIndex === 16) {
                this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);
                this._lastPrecipherIndex = 0;
            }
            encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];
        }

        return encrypted;
    }

    // Decryption is symetric
    ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;


    /**
     *  Counter object for CTR common mode of operation
     */
    var Counter = function(initialValue) {
        if (!(this instanceof Counter)) {
            throw Error('Counter must be instanitated with `new`');
        }

        // We allow 0, but anything false-ish uses the default 1
        if (initialValue !== 0 && !initialValue) { initialValue = 1; }

        if (typeof(initialValue) === 'number') {
            this._counter = createArray(16);
            this.setValue(initialValue);

        } else {
            this.setBytes(initialValue);
        }
    }

    Counter.prototype.setValue = function(value) {
        if (typeof(value) !== 'number' || parseInt(value) != value) {
            throw new Error('invalid counter value (must be an integer)');
        }

        for (var index = 15; index >= 0; --index) {
            this._counter[index] = value % 256;
            value = value >> 8;
        }
    }

    Counter.prototype.setBytes = function(bytes) {
        bytes = coerceArray(bytes, true);

        if (bytes.length != 16) {
            throw new Error('invalid counter bytes size (must be 16 bytes)');
        }

        this._counter = bytes;
    };

    Counter.prototype.increment = function() {
        for (var i = 15; i >= 0; i--) {
            if (this._counter[i] === 255) {
                this._counter[i] = 0;
            } else {
                this._counter[i]++;
                break;
            }
        }
    }


    /**
     *  Mode Of Operation - Counter (CTR)
     */
    var ModeOfOperationCTR = function(key, counter) {
        if (!(this instanceof ModeOfOperationCTR)) {
            throw Error('AES must be instanitated with `new`');
        }

        this.description = "Counter";
        this.name = "ctr";

        if (!(counter instanceof Counter)) {
            counter = new Counter(counter)
        }

        this._counter = counter;

        this._remainingCounter = null;
        this._remainingCounterIndex = 16;

        this._aes = new AES(key);
    }

    ModeOfOperationCTR.prototype.encrypt = function(plaintext) {
        var encrypted = coerceArray(plaintext, true);

        for (var i = 0; i < encrypted.length; i++) {
            if (this._remainingCounterIndex === 16) {
                this._remainingCounter = this._aes.encrypt(this._counter._counter);
                this._remainingCounterIndex = 0;
                this._counter.increment();
            }
            encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];
        }

        return encrypted;
    }

    // Decryption is symetric
    ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;


    ///////////////////////
    // Padding

    // See:https://tools.ietf.org/html/rfc2315
    function pkcs7pad(data) {
        data = coerceArray(data, true);
        var padder = 16 - (data.length % 16);
        var result = createArray(data.length + padder);
        copyArray(data, result);
        for (var i = data.length; i < result.length; i++) {
            result[i] = padder;
        }
        return result;
    }

    function pkcs7strip(data) {
        data = coerceArray(data, true);
        if (data.length < 16) { throw new Error('PKCS#7 invalid length'); }

        var padder = data[data.length - 1];
        if (padder > 16) { throw new Error('PKCS#7 padding byte out of range'); }

        var length = data.length - padder;
        for (var i = 0; i < padder; i++) {
            if (data[length + i] !== padder) {
                throw new Error('PKCS#7 invalid padding byte');
            }
        }

        var result = createArray(length);
        copyArray(data, result, 0, 0, length);
        return result;
    }

    ///////////////////////
    // Exporting


    // The block cipher
    var aesjs = {
        AES: AES,
        Counter: Counter,

        ModeOfOperation: {
            ecb: ModeOfOperationECB,
            cbc: ModeOfOperationCBC,
            cfb: ModeOfOperationCFB,
            ofb: ModeOfOperationOFB,
            ctr: ModeOfOperationCTR
        },

        utils: {
            hex: convertHex,
            utf8: convertUtf8
        },

        padding: {
            pkcs7: {
                pad: pkcs7pad,
                strip: pkcs7strip
            }
        },

        _arrayTest: {
            coerceArray: coerceArray,
            createArray: createArray,
            copyArray: copyArray,
        }
    };


    // node.js
    if (typeof exports !== 'undefined') {
        module.exports = aesjs

    // RequireJS/AMD
    // http://www.requirejs.org/docs/api.html
    // https://github.com/amdjs/amdjs-api/wiki/AMD
    } else if (typeof(define) === 'function' && define.amd) {
        define(aesjs);

    // Web Browsers
    } else {

        // If there was an existing library at "aesjs" make sure it's still available
        if (root.aesjs) {
            aesjs._aesjs = root.aesjs;
        }

        root.aesjs = aesjs;
    }


})(this);

},{}],"../../node_modules/@ethersproject/json-wallets/lib.esm/_version.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.version = void 0;
const version = "json-wallets/5.6.0";
exports.version = version;
},{}],"../../node_modules/@ethersproject/json-wallets/lib.esm/utils.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPassword = getPassword;
exports.looseArrayify = looseArrayify;
exports.searchPath = searchPath;
exports.uuidV4 = uuidV4;
exports.zpad = zpad;

var _bytes = require("@ethersproject/bytes");

var _strings = require("@ethersproject/strings");

function looseArrayify(hexString) {
  if (typeof hexString === 'string' && hexString.substring(0, 2) !== '0x') {
    hexString = '0x' + hexString;
  }

  return (0, _bytes.arrayify)(hexString);
}

function zpad(value, length) {
  value = String(value);

  while (value.length < length) {
    value = '0' + value;
  }

  return value;
}

function getPassword(password) {
  if (typeof password === 'string') {
    return (0, _strings.toUtf8Bytes)(password, _strings.UnicodeNormalizationForm.NFKC);
  }

  return (0, _bytes.arrayify)(password);
}

function searchPath(object, path) {
  let currentChild = object;
  const comps = path.toLowerCase().split('/');

  for (let i = 0; i < comps.length; i++) {
    // Search for a child object with a case-insensitive matching key
    let matchingChild = null;

    for (const key in currentChild) {
      if (key.toLowerCase() === comps[i]) {
        matchingChild = currentChild[key];
        break;
      }
    } // Didn't find one. :'(


    if (matchingChild === null) {
      return null;
    } // Now check this child...


    currentChild = matchingChild;
  }

  return currentChild;
} // See: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)


function uuidV4(randomBytes) {
  const bytes = (0, _bytes.arrayify)(randomBytes); // Section: 4.1.3:
  // - time_hi_and_version[12:16] = 0b0100

  bytes[6] = bytes[6] & 0x0f | 0x40; // Section 4.4
  // - clock_seq_hi_and_reserved[6] = 0b0
  // - clock_seq_hi_and_reserved[7] = 0b1

  bytes[8] = bytes[8] & 0x3f | 0x80;
  const value = (0, _bytes.hexlify)(bytes);
  return [value.substring(2, 10), value.substring(10, 14), value.substring(14, 18), value.substring(18, 22), value.substring(22, 34)].join("-");
}
},{"@ethersproject/bytes":"../../node_modules/@ethersproject/bytes/lib.esm/index.js","@ethersproject/strings":"../../node_modules/@ethersproject/strings/lib.esm/index.js"}],"../../node_modules/@ethersproject/json-wallets/lib.esm/crowdsale.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CrowdsaleAccount = void 0;
exports.decrypt = decrypt;

var _aesJs = _interopRequireDefault(require("aes-js"));

var _address = require("@ethersproject/address");

var _bytes = require("@ethersproject/bytes");

var _keccak = require("@ethersproject/keccak256");

var _pbkdf = require("@ethersproject/pbkdf2");

var _strings = require("@ethersproject/strings");

var _properties = require("@ethersproject/properties");

var _logger = require("@ethersproject/logger");

var _version = require("./_version");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const logger = new _logger.Logger(_version.version);

class CrowdsaleAccount extends _properties.Description {
  isCrowdsaleAccount(value) {
    return !!(value && value._isCrowdsaleAccount);
  }

} // See: https://github.com/ethereum/pyethsaletool


exports.CrowdsaleAccount = CrowdsaleAccount;

function decrypt(json, password) {
  const data = JSON.parse(json);
  password = (0, _utils.getPassword)(password); // Ethereum Address

  const ethaddr = (0, _address.getAddress)((0, _utils.searchPath)(data, "ethaddr")); // Encrypted Seed

  const encseed = (0, _utils.looseArrayify)((0, _utils.searchPath)(data, "encseed"));

  if (!encseed || encseed.length % 16 !== 0) {
    logger.throwArgumentError("invalid encseed", "json", json);
  }

  const key = (0, _bytes.arrayify)((0, _pbkdf.pbkdf2)(password, password, 2000, 32, "sha256")).slice(0, 16);
  const iv = encseed.slice(0, 16);
  const encryptedSeed = encseed.slice(16); // Decrypt the seed

  const aesCbc = new _aesJs.default.ModeOfOperation.cbc(key, iv);

  const seed = _aesJs.default.padding.pkcs7.strip((0, _bytes.arrayify)(aesCbc.decrypt(encryptedSeed))); // This wallet format is weird... Convert the binary encoded hex to a string.


  let seedHex = "";

  for (let i = 0; i < seed.length; i++) {
    seedHex += String.fromCharCode(seed[i]);
  }

  const seedHexBytes = (0, _strings.toUtf8Bytes)(seedHex);
  const privateKey = (0, _keccak.keccak256)(seedHexBytes);
  return new CrowdsaleAccount({
    _isCrowdsaleAccount: true,
    address: ethaddr,
    privateKey: privateKey
  });
}
},{"aes-js":"../../node_modules/aes-js/index.js","@ethersproject/address":"../../node_modules/@ethersproject/address/lib.esm/index.js","@ethersproject/bytes":"../../node_modules/@ethersproject/bytes/lib.esm/index.js","@ethersproject/keccak256":"../../node_modules/@ethersproject/keccak256/lib.esm/index.js","@ethersproject/pbkdf2":"../../node_modules/@ethersproject/pbkdf2/lib.esm/index.js","@ethersproject/strings":"../../node_modules/@ethersproject/strings/lib.esm/index.js","@ethersproject/properties":"../../node_modules/@ethersproject/properties/lib.esm/index.js","@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","./_version":"../../node_modules/@ethersproject/json-wallets/lib.esm/_version.js","./utils":"../../node_modules/@ethersproject/json-wallets/lib.esm/utils.js"}],"../../node_modules/@ethersproject/json-wallets/lib.esm/inspect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getJsonWalletAddress = getJsonWalletAddress;
exports.isCrowdsaleWallet = isCrowdsaleWallet;
exports.isKeystoreWallet = isKeystoreWallet;

var _address = require("@ethersproject/address");

function isCrowdsaleWallet(json) {
  let data = null;

  try {
    data = JSON.parse(json);
  } catch (error) {
    return false;
  }

  return data.encseed && data.ethaddr;
}

function isKeystoreWallet(json) {
  let data = null;

  try {
    data = JSON.parse(json);
  } catch (error) {
    return false;
  }

  if (!data.version || parseInt(data.version) !== data.version || parseInt(data.version) !== 3) {
    return false;
  } // @TODO: Put more checks to make sure it has kdf, iv and all that good stuff


  return true;
} //export function isJsonWallet(json: string): boolean {
//    return (isSecretStorageWallet(json) || isCrowdsaleWallet(json));
//}


function getJsonWalletAddress(json) {
  if (isCrowdsaleWallet(json)) {
    try {
      return (0, _address.getAddress)(JSON.parse(json).ethaddr);
    } catch (error) {
      return null;
    }
  }

  if (isKeystoreWallet(json)) {
    try {
      return (0, _address.getAddress)(JSON.parse(json).address);
    } catch (error) {
      return null;
    }
  }

  return null;
}
},{"@ethersproject/address":"../../node_modules/@ethersproject/address/lib.esm/index.js"}],"../../node_modules/scrypt-js/scrypt.js":[function(require,module,exports) {
var define;
"use strict";

(function(root) {
    const MAX_VALUE = 0x7fffffff;

    // The SHA256 and PBKDF2 implementation are from scrypt-async-js:
    // See: https://github.com/dchest/scrypt-async-js
    function SHA256(m) {
        const K = new Uint32Array([
           0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,
           0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,
           0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,
           0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
           0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,
           0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,
           0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,
           0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
           0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,
           0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,
           0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,
           0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
           0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
       ]);

        let h0 = 0x6a09e667, h1 = 0xbb67ae85, h2 = 0x3c6ef372, h3 = 0xa54ff53a;
        let h4 = 0x510e527f, h5 = 0x9b05688c, h6 = 0x1f83d9ab, h7 = 0x5be0cd19;
        const w = new Uint32Array(64);

        function blocks(p) {
            let off = 0, len = p.length;
            while (len >= 64) {
                let a = h0, b = h1, c = h2, d = h3, e = h4, f = h5, g = h6, h = h7, u, i, j, t1, t2;

                for (i = 0; i < 16; i++) {
                    j = off + i*4;
                    w[i] = ((p[j] & 0xff)<<24) | ((p[j+1] & 0xff)<<16) |
                    ((p[j+2] & 0xff)<<8) | (p[j+3] & 0xff);
                }

                for (i = 16; i < 64; i++) {
                    u = w[i-2];
                    t1 = ((u>>>17) | (u<<(32-17))) ^ ((u>>>19) | (u<<(32-19))) ^ (u>>>10);

                    u = w[i-15];
                    t2 = ((u>>>7) | (u<<(32-7))) ^ ((u>>>18) | (u<<(32-18))) ^ (u>>>3);

                    w[i] = (((t1 + w[i-7]) | 0) + ((t2 + w[i-16]) | 0)) | 0;
                }

                for (i = 0; i < 64; i++) {
                    t1 = ((((((e>>>6) | (e<<(32-6))) ^ ((e>>>11) | (e<<(32-11))) ^
                             ((e>>>25) | (e<<(32-25)))) + ((e & f) ^ (~e & g))) | 0) +
                          ((h + ((K[i] + w[i]) | 0)) | 0)) | 0;

                    t2 = ((((a>>>2) | (a<<(32-2))) ^ ((a>>>13) | (a<<(32-13))) ^
                           ((a>>>22) | (a<<(32-22)))) + ((a & b) ^ (a & c) ^ (b & c))) | 0;

                    h = g;
                    g = f;
                    f = e;
                    e = (d + t1) | 0;
                    d = c;
                    c = b;
                    b = a;
                    a = (t1 + t2) | 0;
                }

                h0 = (h0 + a) | 0;
                h1 = (h1 + b) | 0;
                h2 = (h2 + c) | 0;
                h3 = (h3 + d) | 0;
                h4 = (h4 + e) | 0;
                h5 = (h5 + f) | 0;
                h6 = (h6 + g) | 0;
                h7 = (h7 + h) | 0;

                off += 64;
                len -= 64;
            }
        }

        blocks(m);

        let i, bytesLeft = m.length % 64,
        bitLenHi = (m.length / 0x20000000) | 0,
        bitLenLo = m.length << 3,
        numZeros = (bytesLeft < 56) ? 56 : 120,
        p = m.slice(m.length - bytesLeft, m.length);

        p.push(0x80);
        for (i = bytesLeft + 1; i < numZeros; i++) { p.push(0); }
        p.push((bitLenHi >>> 24) & 0xff);
        p.push((bitLenHi >>> 16) & 0xff);
        p.push((bitLenHi >>> 8)  & 0xff);
        p.push((bitLenHi >>> 0)  & 0xff);
        p.push((bitLenLo >>> 24) & 0xff);
        p.push((bitLenLo >>> 16) & 0xff);
        p.push((bitLenLo >>> 8)  & 0xff);
        p.push((bitLenLo >>> 0)  & 0xff);

        blocks(p);

        return [
            (h0 >>> 24) & 0xff, (h0 >>> 16) & 0xff, (h0 >>> 8) & 0xff, (h0 >>> 0) & 0xff,
            (h1 >>> 24) & 0xff, (h1 >>> 16) & 0xff, (h1 >>> 8) & 0xff, (h1 >>> 0) & 0xff,
            (h2 >>> 24) & 0xff, (h2 >>> 16) & 0xff, (h2 >>> 8) & 0xff, (h2 >>> 0) & 0xff,
            (h3 >>> 24) & 0xff, (h3 >>> 16) & 0xff, (h3 >>> 8) & 0xff, (h3 >>> 0) & 0xff,
            (h4 >>> 24) & 0xff, (h4 >>> 16) & 0xff, (h4 >>> 8) & 0xff, (h4 >>> 0) & 0xff,
            (h5 >>> 24) & 0xff, (h5 >>> 16) & 0xff, (h5 >>> 8) & 0xff, (h5 >>> 0) & 0xff,
            (h6 >>> 24) & 0xff, (h6 >>> 16) & 0xff, (h6 >>> 8) & 0xff, (h6 >>> 0) & 0xff,
            (h7 >>> 24) & 0xff, (h7 >>> 16) & 0xff, (h7 >>> 8) & 0xff, (h7 >>> 0) & 0xff
        ];
    }

    function PBKDF2_HMAC_SHA256_OneIter(password, salt, dkLen) {
        // compress password if it's longer than hash block length
        password = (password.length <= 64) ? password : SHA256(password);

        const innerLen = 64 + salt.length + 4;
        const inner = new Array(innerLen);
        const outerKey = new Array(64);

        let i;
        let dk = [];

        // inner = (password ^ ipad) || salt || counter
        for (i = 0; i < 64; i++) { inner[i] = 0x36; }
        for (i = 0; i < password.length; i++) { inner[i] ^= password[i]; }
        for (i = 0; i < salt.length; i++) { inner[64 + i] = salt[i]; }
        for (i = innerLen - 4; i < innerLen; i++) { inner[i] = 0; }

        // outerKey = password ^ opad
        for (i = 0; i < 64; i++) outerKey[i] = 0x5c;
        for (i = 0; i < password.length; i++) outerKey[i] ^= password[i];

        // increments counter inside inner
        function incrementCounter() {
            for (let i = innerLen - 1; i >= innerLen - 4; i--) {
                inner[i]++;
                if (inner[i] <= 0xff) return;
                inner[i] = 0;
            }
        }

        // output blocks = SHA256(outerKey || SHA256(inner)) ...
        while (dkLen >= 32) {
            incrementCounter();
            dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))));
            dkLen -= 32;
        }
        if (dkLen > 0) {
            incrementCounter();
            dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))).slice(0, dkLen));
        }

        return dk;
    }

    // The following is an adaptation of scryptsy
    // See: https://www.npmjs.com/package/scryptsy
    function blockmix_salsa8(BY, Yi, r, x, _X) {
        let i;

        arraycopy(BY, (2 * r - 1) * 16, _X, 0, 16);
        for (i = 0; i < 2 * r; i++) {
            blockxor(BY, i * 16, _X, 16);
            salsa20_8(_X, x);
            arraycopy(_X, 0, BY, Yi + (i * 16), 16);
        }

        for (i = 0; i < r; i++) {
            arraycopy(BY, Yi + (i * 2) * 16, BY, (i * 16), 16);
        }

        for (i = 0; i < r; i++) {
            arraycopy(BY, Yi + (i * 2 + 1) * 16, BY, (i + r) * 16, 16);
        }
    }

    function R(a, b) {
        return (a << b) | (a >>> (32 - b));
    }

    function salsa20_8(B, x) {
        arraycopy(B, 0, x, 0, 16);

        for (let i = 8; i > 0; i -= 2) {
            x[ 4] ^= R(x[ 0] + x[12], 7);
            x[ 8] ^= R(x[ 4] + x[ 0], 9);
            x[12] ^= R(x[ 8] + x[ 4], 13);
            x[ 0] ^= R(x[12] + x[ 8], 18);
            x[ 9] ^= R(x[ 5] + x[ 1], 7);
            x[13] ^= R(x[ 9] + x[ 5], 9);
            x[ 1] ^= R(x[13] + x[ 9], 13);
            x[ 5] ^= R(x[ 1] + x[13], 18);
            x[14] ^= R(x[10] + x[ 6], 7);
            x[ 2] ^= R(x[14] + x[10], 9);
            x[ 6] ^= R(x[ 2] + x[14], 13);
            x[10] ^= R(x[ 6] + x[ 2], 18);
            x[ 3] ^= R(x[15] + x[11], 7);
            x[ 7] ^= R(x[ 3] + x[15], 9);
            x[11] ^= R(x[ 7] + x[ 3], 13);
            x[15] ^= R(x[11] + x[ 7], 18);
            x[ 1] ^= R(x[ 0] + x[ 3], 7);
            x[ 2] ^= R(x[ 1] + x[ 0], 9);
            x[ 3] ^= R(x[ 2] + x[ 1], 13);
            x[ 0] ^= R(x[ 3] + x[ 2], 18);
            x[ 6] ^= R(x[ 5] + x[ 4], 7);
            x[ 7] ^= R(x[ 6] + x[ 5], 9);
            x[ 4] ^= R(x[ 7] + x[ 6], 13);
            x[ 5] ^= R(x[ 4] + x[ 7], 18);
            x[11] ^= R(x[10] + x[ 9], 7);
            x[ 8] ^= R(x[11] + x[10], 9);
            x[ 9] ^= R(x[ 8] + x[11], 13);
            x[10] ^= R(x[ 9] + x[ 8], 18);
            x[12] ^= R(x[15] + x[14], 7);
            x[13] ^= R(x[12] + x[15], 9);
            x[14] ^= R(x[13] + x[12], 13);
            x[15] ^= R(x[14] + x[13], 18);
        }

        for (let i = 0; i < 16; ++i) {
            B[i] += x[i];
        }
    }

    // naive approach... going back to loop unrolling may yield additional performance
    function blockxor(S, Si, D, len) {
        for (let i = 0; i < len; i++) {
            D[i] ^= S[Si + i]
        }
    }

    function arraycopy(src, srcPos, dest, destPos, length) {
        while (length--) {
            dest[destPos++] = src[srcPos++];
        }
    }

    function checkBufferish(o) {
        if (!o || typeof(o.length) !== 'number') { return false; }

        for (let i = 0; i < o.length; i++) {
            const v = o[i];
            if (typeof(v) !== 'number' || v % 1 || v < 0 || v >= 256) {
                return false;
            }
        }

        return true;
    }

    function ensureInteger(value, name) {
        if (typeof(value) !== "number" || (value % 1)) { throw new Error('invalid ' + name); }
        return value;
    }

    // N = Cpu cost, r = Memory cost, p = parallelization cost
    // callback(error, progress, key)
    function _scrypt(password, salt, N, r, p, dkLen, callback) {

        N = ensureInteger(N, 'N');
        r = ensureInteger(r, 'r');
        p = ensureInteger(p, 'p');

        dkLen = ensureInteger(dkLen, 'dkLen');

        if (N === 0 || (N & (N - 1)) !== 0) { throw new Error('N must be power of 2'); }

        if (N > MAX_VALUE / 128 / r) { throw new Error('N too large'); }
        if (r > MAX_VALUE / 128 / p) { throw new Error('r too large'); }

        if (!checkBufferish(password)) {
            throw new Error('password must be an array or buffer');
        }
        password = Array.prototype.slice.call(password);

        if (!checkBufferish(salt)) {
            throw new Error('salt must be an array or buffer');
        }
        salt = Array.prototype.slice.call(salt);

        let b = PBKDF2_HMAC_SHA256_OneIter(password, salt, p * 128 * r);
        const B = new Uint32Array(p * 32 * r)
        for (let i = 0; i < B.length; i++) {
            const j = i * 4;
            B[i] = ((b[j + 3] & 0xff) << 24) |
                   ((b[j + 2] & 0xff) << 16) |
                   ((b[j + 1] & 0xff) << 8) |
                   ((b[j + 0] & 0xff) << 0);
        }

        const XY = new Uint32Array(64 * r);
        const V = new Uint32Array(32 * r * N);

        const Yi = 32 * r;

        // scratch space
        const x = new Uint32Array(16);       // salsa20_8
        const _X = new Uint32Array(16);      // blockmix_salsa8

        const totalOps = p * N * 2;
        let currentOp = 0;
        let lastPercent10 = null;

        // Set this to true to abandon the scrypt on the next step
        let stop = false;

        // State information
        let state = 0;
        let i0 = 0, i1;
        let Bi;

        // How many blockmix_salsa8 can we do per step?
        const limit = callback ? parseInt(1000 / r): 0xffffffff;

        // Trick from scrypt-async; if there is a setImmediate shim in place, use it
        const nextTick = (typeof(setImmediate) !== 'undefined') ? setImmediate : setTimeout;

        // This is really all I changed; making scryptsy a state machine so we occasionally
        // stop and give other evnts on the evnt loop a chance to run. ~RicMoo
        const incrementalSMix = function() {
            if (stop) {
                return callback(new Error('cancelled'), currentOp / totalOps);
            }

            let steps;

            switch (state) {
                case 0:
                    // for (var i = 0; i < p; i++)...
                    Bi = i0 * 32 * r;

                    arraycopy(B, Bi, XY, 0, Yi);                       // ROMix - 1

                    state = 1;                                         // Move to ROMix 2
                    i1 = 0;

                    // Fall through

                case 1:

                    // Run up to 1000 steps of the first inner smix loop
                    steps = N - i1;
                    if (steps > limit) { steps = limit; }
                    for (let i = 0; i < steps; i++) {                  // ROMix - 2
                        arraycopy(XY, 0, V, (i1 + i) * Yi, Yi)         // ROMix - 3
                        blockmix_salsa8(XY, Yi, r, x, _X);             // ROMix - 4
                    }

                    // for (var i = 0; i < N; i++)
                    i1 += steps;
                    currentOp += steps;

                    if (callback) {
                        // Call the callback with the progress (optionally stopping us)
                        const percent10 = parseInt(1000 * currentOp / totalOps);
                        if (percent10 !== lastPercent10) {
                            stop = callback(null, currentOp / totalOps);
                            if (stop) { break; }
                            lastPercent10 = percent10;
                        }
                    }

                    if (i1 < N) { break; }

                    i1 = 0;                                          // Move to ROMix 6
                    state = 2;

                    // Fall through

                case 2:

                    // Run up to 1000 steps of the second inner smix loop
                    steps = N - i1;
                    if (steps > limit) { steps = limit; }
                    for (let i = 0; i < steps; i++) {                // ROMix - 6
                        const offset = (2 * r - 1) * 16;             // ROMix - 7
                        const j = XY[offset] & (N - 1);
                        blockxor(V, j * Yi, XY, Yi);                 // ROMix - 8 (inner)
                        blockmix_salsa8(XY, Yi, r, x, _X);           // ROMix - 9 (outer)
                    }

                    // for (var i = 0; i < N; i++)...
                    i1 += steps;
                    currentOp += steps;

                    // Call the callback with the progress (optionally stopping us)
                    if (callback) {
                        const percent10 = parseInt(1000 * currentOp / totalOps);
                        if (percent10 !== lastPercent10) {
                            stop = callback(null, currentOp / totalOps);
                            if (stop) { break; }
                            lastPercent10 = percent10;
                        }
                    }

                    if (i1 < N) { break; }

                    arraycopy(XY, 0, B, Bi, Yi);                     // ROMix - 10

                    // for (var i = 0; i < p; i++)...
                    i0++;
                    if (i0 < p) {
                        state = 0;
                        break;
                    }

                    b = [];
                    for (let i = 0; i < B.length; i++) {
                        b.push((B[i] >>  0) & 0xff);
                        b.push((B[i] >>  8) & 0xff);
                        b.push((B[i] >> 16) & 0xff);
                        b.push((B[i] >> 24) & 0xff);
                    }

                    const derivedKey = PBKDF2_HMAC_SHA256_OneIter(password, b, dkLen);

                    // Send the result to the callback
                    if (callback) { callback(null, 1.0, derivedKey); }

                    // Done; don't break (which would reschedule)
                    return derivedKey;
            }

            // Schedule the next steps
            if (callback) { nextTick(incrementalSMix); }
        }

        // Run the smix state machine until completion
        if (!callback) {
            while (true) {
                const derivedKey = incrementalSMix();
                if (derivedKey != undefined) { return derivedKey; }
            }
        }

        // Bootstrap the async incremental smix
        incrementalSMix();
    }

    const lib = {
        scrypt: function(password, salt, N, r, p, dkLen, progressCallback) {
            return new Promise(function(resolve, reject) {
                let lastProgress = 0;
                if (progressCallback) { progressCallback(0); }
                _scrypt(password, salt, N, r, p, dkLen, function(error, progress, key) {
                    if (error) {
                        reject(error);
                    } else if (key) {
                        if (progressCallback && lastProgress !== 1) {
                            progressCallback(1);
                        }
                        resolve(new Uint8Array(key));
                    } else if (progressCallback && progress !== lastProgress) {
                        lastProgress = progress;
                        return progressCallback(progress);
                    }
                });
            });
        },
        syncScrypt: function(password, salt, N, r, p, dkLen) {
            return new Uint8Array(_scrypt(password, salt, N, r, p, dkLen));
        }
    };

    // node.js
    if (typeof(exports) !== 'undefined') {
       module.exports = lib;

    // RequireJS/AMD
    // http://www.requirejs.org/docs/api.html
    // https://github.com/amdjs/amdjs-api/wiki/AMD
    } else if (typeof(define) === 'function' && define.amd) {
        define(lib);

    // Web Browsers
    } else if (root) {

        // If there was an existing library "scrypt", make sure it is still available
        if (root.scrypt) {
            root._scrypt = root.scrypt;
        }

        root.scrypt = lib;
    }

})(this);

},{}],"../../node_modules/@ethersproject/json-wallets/lib.esm/keystore.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.KeystoreAccount = void 0;
exports.decrypt = decrypt;
exports.decryptSync = decryptSync;
exports.encrypt = encrypt;

var _aesJs = _interopRequireDefault(require("aes-js"));

var _scryptJs = _interopRequireDefault(require("scrypt-js"));

var _address = require("@ethersproject/address");

var _bytes = require("@ethersproject/bytes");

var _hdnode = require("@ethersproject/hdnode");

var _keccak = require("@ethersproject/keccak256");

var _pbkdf = require("@ethersproject/pbkdf2");

var _random = require("@ethersproject/random");

var _properties = require("@ethersproject/properties");

var _transactions = require("@ethersproject/transactions");

var _utils = require("./utils");

var _logger = require("@ethersproject/logger");

var _version = require("./_version");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

const logger = new _logger.Logger(_version.version); // Exported Types

function hasMnemonic(value) {
  return value != null && value.mnemonic && value.mnemonic.phrase;
}

class KeystoreAccount extends _properties.Description {
  isKeystoreAccount(value) {
    return !!(value && value._isKeystoreAccount);
  }

}

exports.KeystoreAccount = KeystoreAccount;

function _decrypt(data, key, ciphertext) {
  const cipher = (0, _utils.searchPath)(data, "crypto/cipher");

  if (cipher === "aes-128-ctr") {
    const iv = (0, _utils.looseArrayify)((0, _utils.searchPath)(data, "crypto/cipherparams/iv"));
    const counter = new _aesJs.default.Counter(iv);
    const aesCtr = new _aesJs.default.ModeOfOperation.ctr(key, counter);
    return (0, _bytes.arrayify)(aesCtr.decrypt(ciphertext));
  }

  return null;
}

function _getAccount(data, key) {
  const ciphertext = (0, _utils.looseArrayify)((0, _utils.searchPath)(data, "crypto/ciphertext"));
  const computedMAC = (0, _bytes.hexlify)((0, _keccak.keccak256)((0, _bytes.concat)([key.slice(16, 32), ciphertext]))).substring(2);

  if (computedMAC !== (0, _utils.searchPath)(data, "crypto/mac").toLowerCase()) {
    throw new Error("invalid password");
  }

  const privateKey = _decrypt(data, key.slice(0, 16), ciphertext);

  if (!privateKey) {
    logger.throwError("unsupported cipher", _logger.Logger.errors.UNSUPPORTED_OPERATION, {
      operation: "decrypt"
    });
  }

  const mnemonicKey = key.slice(32, 64);
  const address = (0, _transactions.computeAddress)(privateKey);

  if (data.address) {
    let check = data.address.toLowerCase();

    if (check.substring(0, 2) !== "0x") {
      check = "0x" + check;
    }

    if ((0, _address.getAddress)(check) !== address) {
      throw new Error("address mismatch");
    }
  }

  const account = {
    _isKeystoreAccount: true,
    address: address,
    privateKey: (0, _bytes.hexlify)(privateKey)
  }; // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase

  if ((0, _utils.searchPath)(data, "x-ethers/version") === "0.1") {
    const mnemonicCiphertext = (0, _utils.looseArrayify)((0, _utils.searchPath)(data, "x-ethers/mnemonicCiphertext"));
    const mnemonicIv = (0, _utils.looseArrayify)((0, _utils.searchPath)(data, "x-ethers/mnemonicCounter"));
    const mnemonicCounter = new _aesJs.default.Counter(mnemonicIv);
    const mnemonicAesCtr = new _aesJs.default.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);

    const path = (0, _utils.searchPath)(data, "x-ethers/path") || _hdnode.defaultPath;

    const locale = (0, _utils.searchPath)(data, "x-ethers/locale") || "en";
    const entropy = (0, _bytes.arrayify)(mnemonicAesCtr.decrypt(mnemonicCiphertext));

    try {
      const mnemonic = (0, _hdnode.entropyToMnemonic)(entropy, locale);

      const node = _hdnode.HDNode.fromMnemonic(mnemonic, null, locale).derivePath(path);

      if (node.privateKey != account.privateKey) {
        throw new Error("mnemonic mismatch");
      }

      account.mnemonic = node.mnemonic;
    } catch (error) {
      // If we don't have the locale wordlist installed to
      // read this mnemonic, just bail and don't set the
      // mnemonic
      if (error.code !== _logger.Logger.errors.INVALID_ARGUMENT || error.argument !== "wordlist") {
        throw error;
      }
    }
  }

  return new KeystoreAccount(account);
}

function pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc) {
  return (0, _bytes.arrayify)((0, _pbkdf.pbkdf2)(passwordBytes, salt, count, dkLen, prfFunc));
}

function pbkdf2(passwordBytes, salt, count, dkLen, prfFunc) {
  return Promise.resolve(pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc));
}

function _computeKdfKey(data, password, pbkdf2Func, scryptFunc, progressCallback) {
  const passwordBytes = (0, _utils.getPassword)(password);
  const kdf = (0, _utils.searchPath)(data, "crypto/kdf");

  if (kdf && typeof kdf === "string") {
    const throwError = function (name, value) {
      return logger.throwArgumentError("invalid key-derivation function parameters", name, value);
    };

    if (kdf.toLowerCase() === "scrypt") {
      const salt = (0, _utils.looseArrayify)((0, _utils.searchPath)(data, "crypto/kdfparams/salt"));
      const N = parseInt((0, _utils.searchPath)(data, "crypto/kdfparams/n"));
      const r = parseInt((0, _utils.searchPath)(data, "crypto/kdfparams/r"));
      const p = parseInt((0, _utils.searchPath)(data, "crypto/kdfparams/p")); // Check for all required parameters

      if (!N || !r || !p) {
        throwError("kdf", kdf);
      } // Make sure N is a power of 2


      if ((N & N - 1) !== 0) {
        throwError("N", N);
      }

      const dkLen = parseInt((0, _utils.searchPath)(data, "crypto/kdfparams/dklen"));

      if (dkLen !== 32) {
        throwError("dklen", dkLen);
      }

      return scryptFunc(passwordBytes, salt, N, r, p, 64, progressCallback);
    } else if (kdf.toLowerCase() === "pbkdf2") {
      const salt = (0, _utils.looseArrayify)((0, _utils.searchPath)(data, "crypto/kdfparams/salt"));
      let prfFunc = null;
      const prf = (0, _utils.searchPath)(data, "crypto/kdfparams/prf");

      if (prf === "hmac-sha256") {
        prfFunc = "sha256";
      } else if (prf === "hmac-sha512") {
        prfFunc = "sha512";
      } else {
        throwError("prf", prf);
      }

      const count = parseInt((0, _utils.searchPath)(data, "crypto/kdfparams/c"));
      const dkLen = parseInt((0, _utils.searchPath)(data, "crypto/kdfparams/dklen"));

      if (dkLen !== 32) {
        throwError("dklen", dkLen);
      }

      return pbkdf2Func(passwordBytes, salt, count, dkLen, prfFunc);
    }
  }

  return logger.throwArgumentError("unsupported key-derivation function", "kdf", kdf);
}

function decryptSync(json, password) {
  const data = JSON.parse(json);

  const key = _computeKdfKey(data, password, pbkdf2Sync, _scryptJs.default.syncScrypt);

  return _getAccount(data, key);
}

function decrypt(json, password, progressCallback) {
  return __awaiter(this, void 0, void 0, function* () {
    const data = JSON.parse(json);
    const key = yield _computeKdfKey(data, password, pbkdf2, _scryptJs.default.scrypt, progressCallback);
    return _getAccount(data, key);
  });
}

function encrypt(account, password, options, progressCallback) {
  try {
    // Check the address matches the private key
    if ((0, _address.getAddress)(account.address) !== (0, _transactions.computeAddress)(account.privateKey)) {
      throw new Error("address/privateKey mismatch");
    } // Check the mnemonic (if any) matches the private key


    if (hasMnemonic(account)) {
      const mnemonic = account.mnemonic;

      const node = _hdnode.HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path || _hdnode.defaultPath);

      if (node.privateKey != account.privateKey) {
        throw new Error("mnemonic mismatch");
      }
    }
  } catch (e) {
    return Promise.reject(e);
  } // The options are optional, so adjust the call as needed


  if (typeof options === "function" && !progressCallback) {
    progressCallback = options;
    options = {};
  }

  if (!options) {
    options = {};
  }

  const privateKey = (0, _bytes.arrayify)(account.privateKey);
  const passwordBytes = (0, _utils.getPassword)(password);
  let entropy = null;
  let path = null;
  let locale = null;

  if (hasMnemonic(account)) {
    const srcMnemonic = account.mnemonic;
    entropy = (0, _bytes.arrayify)((0, _hdnode.mnemonicToEntropy)(srcMnemonic.phrase, srcMnemonic.locale || "en"));
    path = srcMnemonic.path || _hdnode.defaultPath;
    locale = srcMnemonic.locale || "en";
  }

  let client = options.client;

  if (!client) {
    client = "ethers.js";
  } // Check/generate the salt


  let salt = null;

  if (options.salt) {
    salt = (0, _bytes.arrayify)(options.salt);
  } else {
    salt = (0, _random.randomBytes)(32);
    ;
  } // Override initialization vector


  let iv = null;

  if (options.iv) {
    iv = (0, _bytes.arrayify)(options.iv);

    if (iv.length !== 16) {
      throw new Error("invalid iv");
    }
  } else {
    iv = (0, _random.randomBytes)(16);
  } // Override the uuid


  let uuidRandom = null;

  if (options.uuid) {
    uuidRandom = (0, _bytes.arrayify)(options.uuid);

    if (uuidRandom.length !== 16) {
      throw new Error("invalid uuid");
    }
  } else {
    uuidRandom = (0, _random.randomBytes)(16);
  } // Override the scrypt password-based key derivation function parameters


  let N = 1 << 17,
      r = 8,
      p = 1;

  if (options.scrypt) {
    if (options.scrypt.N) {
      N = options.scrypt.N;
    }

    if (options.scrypt.r) {
      r = options.scrypt.r;
    }

    if (options.scrypt.p) {
      p = options.scrypt.p;
    }
  } // We take 64 bytes:
  //   - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)
  //   - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)


  return _scryptJs.default.scrypt(passwordBytes, salt, N, r, p, 64, progressCallback).then(key => {
    key = (0, _bytes.arrayify)(key); // This will be used to encrypt the wallet (as per Web3 secret storage)

    const derivedKey = key.slice(0, 16);
    const macPrefix = key.slice(16, 32); // This will be used to encrypt the mnemonic phrase (if any)

    const mnemonicKey = key.slice(32, 64); // Encrypt the private key

    const counter = new _aesJs.default.Counter(iv);
    const aesCtr = new _aesJs.default.ModeOfOperation.ctr(derivedKey, counter);
    const ciphertext = (0, _bytes.arrayify)(aesCtr.encrypt(privateKey)); // Compute the message authentication code, used to check the password

    const mac = (0, _keccak.keccak256)((0, _bytes.concat)([macPrefix, ciphertext])); // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition

    const data = {
      address: account.address.substring(2).toLowerCase(),
      id: (0, _utils.uuidV4)(uuidRandom),
      version: 3,
      Crypto: {
        cipher: "aes-128-ctr",
        cipherparams: {
          iv: (0, _bytes.hexlify)(iv).substring(2)
        },
        ciphertext: (0, _bytes.hexlify)(ciphertext).substring(2),
        kdf: "scrypt",
        kdfparams: {
          salt: (0, _bytes.hexlify)(salt).substring(2),
          n: N,
          dklen: 32,
          p: p,
          r: r
        },
        mac: mac.substring(2)
      }
    }; // If we have a mnemonic, encrypt it into the JSON wallet

    if (entropy) {
      const mnemonicIv = (0, _random.randomBytes)(16);
      const mnemonicCounter = new _aesJs.default.Counter(mnemonicIv);
      const mnemonicAesCtr = new _aesJs.default.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
      const mnemonicCiphertext = (0, _bytes.arrayify)(mnemonicAesCtr.encrypt(entropy));
      const now = new Date();
      const timestamp = now.getUTCFullYear() + "-" + (0, _utils.zpad)(now.getUTCMonth() + 1, 2) + "-" + (0, _utils.zpad)(now.getUTCDate(), 2) + "T" + (0, _utils.zpad)(now.getUTCHours(), 2) + "-" + (0, _utils.zpad)(now.getUTCMinutes(), 2) + "-" + (0, _utils.zpad)(now.getUTCSeconds(), 2) + ".0Z";
      data["x-ethers"] = {
        client: client,
        gethFilename: "UTC--" + timestamp + "--" + data.address,
        mnemonicCounter: (0, _bytes.hexlify)(mnemonicIv).substring(2),
        mnemonicCiphertext: (0, _bytes.hexlify)(mnemonicCiphertext).substring(2),
        path: path,
        locale: locale,
        version: "0.1"
      };
    }

    return JSON.stringify(data);
  });
}
},{"aes-js":"../../node_modules/aes-js/index.js","scrypt-js":"../../node_modules/scrypt-js/scrypt.js","@ethersproject/address":"../../node_modules/@ethersproject/address/lib.esm/index.js","@ethersproject/bytes":"../../node_modules/@ethersproject/bytes/lib.esm/index.js","@ethersproject/hdnode":"../../node_modules/@ethersproject/hdnode/lib.esm/index.js","@ethersproject/keccak256":"../../node_modules/@ethersproject/keccak256/lib.esm/index.js","@ethersproject/pbkdf2":"../../node_modules/@ethersproject/pbkdf2/lib.esm/index.js","@ethersproject/random":"../../node_modules/@ethersproject/random/lib.esm/index.js","@ethersproject/properties":"../../node_modules/@ethersproject/properties/lib.esm/index.js","@ethersproject/transactions":"../../node_modules/@ethersproject/transactions/lib.esm/index.js","./utils":"../../node_modules/@ethersproject/json-wallets/lib.esm/utils.js","@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","./_version":"../../node_modules/@ethersproject/json-wallets/lib.esm/_version.js"}],"../../node_modules/@ethersproject/json-wallets/lib.esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "decryptCrowdsale", {
  enumerable: true,
  get: function () {
    return _crowdsale.decrypt;
  }
});
exports.decryptJsonWallet = decryptJsonWallet;
exports.decryptJsonWalletSync = decryptJsonWalletSync;
Object.defineProperty(exports, "decryptKeystore", {
  enumerable: true,
  get: function () {
    return _keystore.decrypt;
  }
});
Object.defineProperty(exports, "decryptKeystoreSync", {
  enumerable: true,
  get: function () {
    return _keystore.decryptSync;
  }
});
Object.defineProperty(exports, "encryptKeystore", {
  enumerable: true,
  get: function () {
    return _keystore.encrypt;
  }
});
Object.defineProperty(exports, "getJsonWalletAddress", {
  enumerable: true,
  get: function () {
    return _inspect.getJsonWalletAddress;
  }
});
Object.defineProperty(exports, "isCrowdsaleWallet", {
  enumerable: true,
  get: function () {
    return _inspect.isCrowdsaleWallet;
  }
});
Object.defineProperty(exports, "isKeystoreWallet", {
  enumerable: true,
  get: function () {
    return _inspect.isKeystoreWallet;
  }
});

var _crowdsale = require("./crowdsale");

var _inspect = require("./inspect");

var _keystore = require("./keystore");

function decryptJsonWallet(json, password, progressCallback) {
  if ((0, _inspect.isCrowdsaleWallet)(json)) {
    if (progressCallback) {
      progressCallback(0);
    }

    const account = (0, _crowdsale.decrypt)(json, password);

    if (progressCallback) {
      progressCallback(1);
    }

    return Promise.resolve(account);
  }

  if ((0, _inspect.isKeystoreWallet)(json)) {
    return (0, _keystore.decrypt)(json, password, progressCallback);
  }

  return Promise.reject(new Error("invalid JSON wallet"));
}

function decryptJsonWalletSync(json, password) {
  if ((0, _inspect.isCrowdsaleWallet)(json)) {
    return (0, _crowdsale.decrypt)(json, password);
  }

  if ((0, _inspect.isKeystoreWallet)(json)) {
    return (0, _keystore.decryptSync)(json, password);
  }

  throw new Error("invalid JSON wallet");
}
},{"./crowdsale":"../../node_modules/@ethersproject/json-wallets/lib.esm/crowdsale.js","./inspect":"../../node_modules/@ethersproject/json-wallets/lib.esm/inspect.js","./keystore":"../../node_modules/@ethersproject/json-wallets/lib.esm/keystore.js"}],"../../node_modules/@ethersproject/wallet/lib.esm/_version.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.version = void 0;
const version = "wallet/5.6.0";
exports.version = version;
},{}],"../../node_modules/@ethersproject/wallet/lib.esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Wallet = void 0;
exports.verifyMessage = verifyMessage;
exports.verifyTypedData = verifyTypedData;

var _address = require("@ethersproject/address");

var _abstractProvider = require("@ethersproject/abstract-provider");

var _abstractSigner = require("@ethersproject/abstract-signer");

var _bytes = require("@ethersproject/bytes");

var _hash = require("@ethersproject/hash");

var _hdnode = require("@ethersproject/hdnode");

var _keccak = require("@ethersproject/keccak256");

var _properties = require("@ethersproject/properties");

var _random = require("@ethersproject/random");

var _signingKey = require("@ethersproject/signing-key");

var _jsonWallets = require("@ethersproject/json-wallets");

var _transactions = require("@ethersproject/transactions");

var _logger = require("@ethersproject/logger");

var _version = require("./_version");

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

const logger = new _logger.Logger(_version.version);

function isAccount(value) {
  return value != null && (0, _bytes.isHexString)(value.privateKey, 32) && value.address != null;
}

function hasMnemonic(value) {
  const mnemonic = value.mnemonic;
  return mnemonic && mnemonic.phrase;
}

class Wallet extends _abstractSigner.Signer {
  constructor(privateKey, provider) {
    logger.checkNew(new.target, Wallet);
    super();

    if (isAccount(privateKey)) {
      const signingKey = new _signingKey.SigningKey(privateKey.privateKey);
      (0, _properties.defineReadOnly)(this, "_signingKey", () => signingKey);
      (0, _properties.defineReadOnly)(this, "address", (0, _transactions.computeAddress)(this.publicKey));

      if (this.address !== (0, _address.getAddress)(privateKey.address)) {
        logger.throwArgumentError("privateKey/address mismatch", "privateKey", "[REDACTED]");
      }

      if (hasMnemonic(privateKey)) {
        const srcMnemonic = privateKey.mnemonic;
        (0, _properties.defineReadOnly)(this, "_mnemonic", () => ({
          phrase: srcMnemonic.phrase,
          path: srcMnemonic.path || _hdnode.defaultPath,
          locale: srcMnemonic.locale || "en"
        }));
        const mnemonic = this.mnemonic;

        const node = _hdnode.HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);

        if ((0, _transactions.computeAddress)(node.privateKey) !== this.address) {
          logger.throwArgumentError("mnemonic/address mismatch", "privateKey", "[REDACTED]");
        }
      } else {
        (0, _properties.defineReadOnly)(this, "_mnemonic", () => null);
      }
    } else {
      if (_signingKey.SigningKey.isSigningKey(privateKey)) {
        /* istanbul ignore if */
        if (privateKey.curve !== "secp256k1") {
          logger.throwArgumentError("unsupported curve; must be secp256k1", "privateKey", "[REDACTED]");
        }

        (0, _properties.defineReadOnly)(this, "_signingKey", () => privateKey);
      } else {
        // A lot of common tools do not prefix private keys with a 0x (see: #1166)
        if (typeof privateKey === "string") {
          if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {
            privateKey = "0x" + privateKey;
          }
        }

        const signingKey = new _signingKey.SigningKey(privateKey);
        (0, _properties.defineReadOnly)(this, "_signingKey", () => signingKey);
      }

      (0, _properties.defineReadOnly)(this, "_mnemonic", () => null);
      (0, _properties.defineReadOnly)(this, "address", (0, _transactions.computeAddress)(this.publicKey));
    }
    /* istanbul ignore if */


    if (provider && !_abstractProvider.Provider.isProvider(provider)) {
      logger.throwArgumentError("invalid provider", "provider", provider);
    }

    (0, _properties.defineReadOnly)(this, "provider", provider || null);
  }

  get mnemonic() {
    return this._mnemonic();
  }

  get privateKey() {
    return this._signingKey().privateKey;
  }

  get publicKey() {
    return this._signingKey().publicKey;
  }

  getAddress() {
    return Promise.resolve(this.address);
  }

  connect(provider) {
    return new Wallet(this, provider);
  }

  signTransaction(transaction) {
    return (0, _properties.resolveProperties)(transaction).then(tx => {
      if (tx.from != null) {
        if ((0, _address.getAddress)(tx.from) !== this.address) {
          logger.throwArgumentError("transaction from address mismatch", "transaction.from", transaction.from);
        }

        delete tx.from;
      }

      const signature = this._signingKey().signDigest((0, _keccak.keccak256)((0, _transactions.serialize)(tx)));

      return (0, _transactions.serialize)(tx, signature);
    });
  }

  signMessage(message) {
    return __awaiter(this, void 0, void 0, function* () {
      return (0, _bytes.joinSignature)(this._signingKey().signDigest((0, _hash.hashMessage)(message)));
    });
  }

  _signTypedData(domain, types, value) {
    return __awaiter(this, void 0, void 0, function* () {
      // Populate any ENS names
      const populated = yield _hash._TypedDataEncoder.resolveNames(domain, types, value, name => {
        if (this.provider == null) {
          logger.throwError("cannot resolve ENS names without a provider", _logger.Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "resolveName",
            value: name
          });
        }

        return this.provider.resolveName(name);
      });
      return (0, _bytes.joinSignature)(this._signingKey().signDigest(_hash._TypedDataEncoder.hash(populated.domain, types, populated.value)));
    });
  }

  encrypt(password, options, progressCallback) {
    if (typeof options === "function" && !progressCallback) {
      progressCallback = options;
      options = {};
    }

    if (progressCallback && typeof progressCallback !== "function") {
      throw new Error("invalid callback");
    }

    if (!options) {
      options = {};
    }

    return (0, _jsonWallets.encryptKeystore)(this, password, options, progressCallback);
  }
  /**
   *  Static methods to create Wallet instances.
   */


  static createRandom(options) {
    let entropy = (0, _random.randomBytes)(16);

    if (!options) {
      options = {};
    }

    if (options.extraEntropy) {
      entropy = (0, _bytes.arrayify)((0, _bytes.hexDataSlice)((0, _keccak.keccak256)((0, _bytes.concat)([entropy, options.extraEntropy])), 0, 16));
    }

    const mnemonic = (0, _hdnode.entropyToMnemonic)(entropy, options.locale);
    return Wallet.fromMnemonic(mnemonic, options.path, options.locale);
  }

  static fromEncryptedJson(json, password, progressCallback) {
    return (0, _jsonWallets.decryptJsonWallet)(json, password, progressCallback).then(account => {
      return new Wallet(account);
    });
  }

  static fromEncryptedJsonSync(json, password) {
    return new Wallet((0, _jsonWallets.decryptJsonWalletSync)(json, password));
  }

  static fromMnemonic(mnemonic, path, wordlist) {
    if (!path) {
      path = _hdnode.defaultPath;
    }

    return new Wallet(_hdnode.HDNode.fromMnemonic(mnemonic, null, wordlist).derivePath(path));
  }

}

exports.Wallet = Wallet;

function verifyMessage(message, signature) {
  return (0, _transactions.recoverAddress)((0, _hash.hashMessage)(message), signature);
}

function verifyTypedData(domain, types, value, signature) {
  return (0, _transactions.recoverAddress)(_hash._TypedDataEncoder.hash(domain, types, value), signature);
}
},{"@ethersproject/address":"../../node_modules/@ethersproject/address/lib.esm/index.js","@ethersproject/abstract-provider":"../../node_modules/@ethersproject/abstract-provider/lib.esm/index.js","@ethersproject/abstract-signer":"../../node_modules/@ethersproject/abstract-signer/lib.esm/index.js","@ethersproject/bytes":"../../node_modules/@ethersproject/bytes/lib.esm/index.js","@ethersproject/hash":"../../node_modules/@ethersproject/hash/lib.esm/index.js","@ethersproject/hdnode":"../../node_modules/@ethersproject/hdnode/lib.esm/index.js","@ethersproject/keccak256":"../../node_modules/@ethersproject/keccak256/lib.esm/index.js","@ethersproject/properties":"../../node_modules/@ethersproject/properties/lib.esm/index.js","@ethersproject/random":"../../node_modules/@ethersproject/random/lib.esm/index.js","@ethersproject/signing-key":"../../node_modules/@ethersproject/signing-key/lib.esm/index.js","@ethersproject/json-wallets":"../../node_modules/@ethersproject/json-wallets/lib.esm/index.js","@ethersproject/transactions":"../../node_modules/@ethersproject/transactions/lib.esm/index.js","@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","./_version":"../../node_modules/@ethersproject/wallet/lib.esm/_version.js"}],"../../node_modules/@ethersproject/networks/lib.esm/_version.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.version = void 0;
const version = "networks/5.6.2";
exports.version = version;
},{}],"../../node_modules/@ethersproject/networks/lib.esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getNetwork = getNetwork;

var _logger = require("@ethersproject/logger");

var _version = require("./_version");

const logger = new _logger.Logger(_version.version);
;

function isRenetworkable(value) {
  return value && typeof value.renetwork === "function";
}

function ethDefaultProvider(network) {
  const func = function (providers, options) {
    if (options == null) {
      options = {};
    }

    const providerList = [];

    if (providers.InfuraProvider && options.infura !== "-") {
      try {
        providerList.push(new providers.InfuraProvider(network, options.infura));
      } catch (error) {}
    }

    if (providers.EtherscanProvider && options.etherscan !== "-") {
      try {
        providerList.push(new providers.EtherscanProvider(network, options.etherscan));
      } catch (error) {}
    }

    if (providers.AlchemyProvider && options.alchemy !== "-") {
      try {
        providerList.push(new providers.AlchemyProvider(network, options.alchemy));
      } catch (error) {}
    }

    if (providers.PocketProvider && options.pocket !== "-") {
      // These networks are currently faulty on Pocket as their
      // network does not handle the Berlin hardfork, which is
      // live on these ones.
      // @TODO: This goes away once Pocket has upgraded their nodes
      const skip = ["goerli", "ropsten", "rinkeby"];

      try {
        const provider = new providers.PocketProvider(network, options.pocket);

        if (provider.network && skip.indexOf(provider.network.name) === -1) {
          providerList.push(provider);
        }
      } catch (error) {}
    }

    if (providers.CloudflareProvider && options.cloudflare !== "-") {
      try {
        providerList.push(new providers.CloudflareProvider(network));
      } catch (error) {}
    }

    if (providers.AnkrProvider && options.ankr !== "-") {
      try {
        providerList.push(new providers.AnkrProvider(network, options.ankr));
      } catch (error) {}
    }

    if (providerList.length === 0) {
      return null;
    }

    if (providers.FallbackProvider) {
      let quorum = 1;

      if (options.quorum != null) {
        quorum = options.quorum;
      } else if (network === "homestead") {
        quorum = 2;
      }

      return new providers.FallbackProvider(providerList, quorum);
    }

    return providerList[0];
  };

  func.renetwork = function (network) {
    return ethDefaultProvider(network);
  };

  return func;
}

function etcDefaultProvider(url, network) {
  const func = function (providers, options) {
    if (providers.JsonRpcProvider) {
      return new providers.JsonRpcProvider(url, network);
    }

    return null;
  };

  func.renetwork = function (network) {
    return etcDefaultProvider(url, network);
  };

  return func;
}

const homestead = {
  chainId: 1,
  ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
  name: "homestead",
  _defaultProvider: ethDefaultProvider("homestead")
};
const ropsten = {
  chainId: 3,
  ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
  name: "ropsten",
  _defaultProvider: ethDefaultProvider("ropsten")
};
const classicMordor = {
  chainId: 63,
  name: "classicMordor",
  _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/mordor", "classicMordor")
}; // See: https://chainlist.org

const networks = {
  unspecified: {
    chainId: 0,
    name: "unspecified"
  },
  homestead: homestead,
  mainnet: homestead,
  morden: {
    chainId: 2,
    name: "morden"
  },
  ropsten: ropsten,
  testnet: ropsten,
  rinkeby: {
    chainId: 4,
    ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
    name: "rinkeby",
    _defaultProvider: ethDefaultProvider("rinkeby")
  },
  kovan: {
    chainId: 42,
    name: "kovan",
    _defaultProvider: ethDefaultProvider("kovan")
  },
  goerli: {
    chainId: 5,
    ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
    name: "goerli",
    _defaultProvider: ethDefaultProvider("goerli")
  },
  kintsugi: {
    chainId: 1337702,
    name: "kintsugi"
  },
  // ETC (See: #351)
  classic: {
    chainId: 61,
    name: "classic",
    _defaultProvider: etcDefaultProvider("https:/\/www.ethercluster.com/etc", "classic")
  },
  classicMorden: {
    chainId: 62,
    name: "classicMorden"
  },
  classicMordor: classicMordor,
  classicTestnet: classicMordor,
  classicKotti: {
    chainId: 6,
    name: "classicKotti",
    _defaultProvider: etcDefaultProvider("https:/\/www.ethercluster.com/kotti", "classicKotti")
  },
  xdai: {
    chainId: 100,
    name: "xdai"
  },
  matic: {
    chainId: 137,
    name: "matic"
  },
  maticmum: {
    chainId: 80001,
    name: "maticmum"
  },
  optimism: {
    chainId: 10,
    name: "optimism"
  },
  "optimism-kovan": {
    chainId: 69,
    name: "optimism-kovan"
  },
  "optimism-goerli": {
    chainId: 420,
    name: "optimism-goerli"
  },
  arbitrum: {
    chainId: 42161,
    name: "arbitrum"
  },
  "arbitrum-rinkeby": {
    chainId: 421611,
    name: "arbitrum-rinkeby"
  },
  bnb: {
    chainId: 56,
    name: "bnb"
  },
  bnbt: {
    chainId: 97,
    name: "bnbt"
  }
};
/**
 *  getNetwork
 *
 *  Converts a named common networks or chain ID (network ID) to a Network
 *  and verifies a network is a valid Network..
 */

function getNetwork(network) {
  // No network (null)
  if (network == null) {
    return null;
  }

  if (typeof network === "number") {
    for (const name in networks) {
      const standard = networks[name];

      if (standard.chainId === network) {
        return {
          name: standard.name,
          chainId: standard.chainId,
          ensAddress: standard.ensAddress || null,
          _defaultProvider: standard._defaultProvider || null
        };
      }
    }

    return {
      chainId: network,
      name: "unknown"
    };
  }

  if (typeof network === "string") {
    const standard = networks[network];

    if (standard == null) {
      return null;
    }

    return {
      name: standard.name,
      chainId: standard.chainId,
      ensAddress: standard.ensAddress,
      _defaultProvider: standard._defaultProvider || null
    };
  }

  const standard = networks[network.name]; // Not a standard network; check that it is a valid network in general

  if (!standard) {
    if (typeof network.chainId !== "number") {
      logger.throwArgumentError("invalid network chainId", "network", network);
    }

    return network;
  } // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)


  if (network.chainId !== 0 && network.chainId !== standard.chainId) {
    logger.throwArgumentError("network chainId mismatch", "network", network);
  } // @TODO: In the next major version add an attach function to a defaultProvider
  // class and move the _defaultProvider internal to this file (extend Network)


  let defaultProvider = network._defaultProvider || null;

  if (defaultProvider == null && standard._defaultProvider) {
    if (isRenetworkable(standard._defaultProvider)) {
      defaultProvider = standard._defaultProvider.renetwork(network);
    } else {
      defaultProvider = standard._defaultProvider;
    }
  } // Standard Network (allow overriding the ENS address)


  return {
    name: network.name,
    chainId: standard.chainId,
    ensAddress: network.ensAddress || standard.ensAddress || null,
    _defaultProvider: defaultProvider
  };
}
},{"@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","./_version":"../../node_modules/@ethersproject/networks/lib.esm/_version.js"}],"../../node_modules/@ethersproject/base64/lib.esm/base64.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decode = decode;
exports.encode = encode;

var _bytes = require("@ethersproject/bytes");

function decode(textData) {
  textData = atob(textData);
  const data = [];

  for (let i = 0; i < textData.length; i++) {
    data.push(textData.charCodeAt(i));
  }

  return (0, _bytes.arrayify)(data);
}

function encode(data) {
  data = (0, _bytes.arrayify)(data);
  let textData = "";

  for (let i = 0; i < data.length; i++) {
    textData += String.fromCharCode(data[i]);
  }

  return btoa(textData);
}
},{"@ethersproject/bytes":"../../node_modules/@ethersproject/bytes/lib.esm/index.js"}],"../../node_modules/@ethersproject/base64/lib.esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "decode", {
  enumerable: true,
  get: function () {
    return _base.decode;
  }
});
Object.defineProperty(exports, "encode", {
  enumerable: true,
  get: function () {
    return _base.encode;
  }
});

var _base = require("./base64");
},{"./base64":"../../node_modules/@ethersproject/base64/lib.esm/base64.js"}],"../../node_modules/@ethersproject/web/lib.esm/_version.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.version = void 0;
const version = "web/5.6.0";
exports.version = version;
},{}],"../../node_modules/@ethersproject/web/lib.esm/geturl.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getUrl = getUrl;

var _bytes = require("@ethersproject/bytes");

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

function getUrl(href, options) {
  return __awaiter(this, void 0, void 0, function* () {
    if (options == null) {
      options = {};
    }

    const request = {
      method: options.method || "GET",
      headers: options.headers || {},
      body: options.body || undefined
    };

    if (options.skipFetchSetup !== true) {
      request.mode = "cors"; // no-cors, cors, *same-origin

      request.cache = "no-cache"; // *default, no-cache, reload, force-cache, only-if-cached

      request.credentials = "same-origin"; // include, *same-origin, omit

      request.redirect = "follow"; // manual, *follow, error

      request.referrer = "client"; // no-referrer, *client
    }

    ;
    const response = yield fetch(href, request);
    const body = yield response.arrayBuffer();
    const headers = {};

    if (response.headers.forEach) {
      response.headers.forEach((value, key) => {
        headers[key.toLowerCase()] = value;
      });
    } else {
      response.headers.keys().forEach(key => {
        headers[key.toLowerCase()] = response.headers.get(key);
      });
    }

    return {
      headers: headers,
      statusCode: response.status,
      statusMessage: response.statusText,
      body: (0, _bytes.arrayify)(new Uint8Array(body))
    };
  });
}
},{"@ethersproject/bytes":"../../node_modules/@ethersproject/bytes/lib.esm/index.js"}],"../../node_modules/@ethersproject/web/lib.esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._fetchData = _fetchData;
exports.fetchJson = fetchJson;
exports.poll = poll;

var _base = require("@ethersproject/base64");

var _bytes = require("@ethersproject/bytes");

var _properties = require("@ethersproject/properties");

var _strings = require("@ethersproject/strings");

var _logger = require("@ethersproject/logger");

var _version = require("./_version");

var _geturl = require("./geturl");

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

const logger = new _logger.Logger(_version.version);

function staller(duration) {
  return new Promise(resolve => {
    setTimeout(resolve, duration);
  });
}

function bodyify(value, type) {
  if (value == null) {
    return null;
  }

  if (typeof value === "string") {
    return value;
  }

  if ((0, _bytes.isBytesLike)(value)) {
    if (type && (type.split("/")[0] === "text" || type.split(";")[0].trim() === "application/json")) {
      try {
        return (0, _strings.toUtf8String)(value);
      } catch (error) {}

      ;
    }

    return (0, _bytes.hexlify)(value);
  }

  return value;
} // This API is still a work in progress; the future changes will likely be:
// - ConnectionInfo => FetchDataRequest<T = any>
// - FetchDataRequest.body? = string | Uint8Array | { contentType: string, data: string | Uint8Array }
//   - If string => text/plain, Uint8Array => application/octet-stream (if content-type unspecified)
// - FetchDataRequest.processFunc = (body: Uint8Array, response: FetchDataResponse) => T
// For this reason, it should be considered internal until the API is finalized


function _fetchData(connection, body, processFunc) {
  // How many times to retry in the event of a throttle
  const attemptLimit = typeof connection === "object" && connection.throttleLimit != null ? connection.throttleLimit : 12;
  logger.assertArgument(attemptLimit > 0 && attemptLimit % 1 === 0, "invalid connection throttle limit", "connection.throttleLimit", attemptLimit);
  const throttleCallback = typeof connection === "object" ? connection.throttleCallback : null;
  const throttleSlotInterval = typeof connection === "object" && typeof connection.throttleSlotInterval === "number" ? connection.throttleSlotInterval : 100;
  logger.assertArgument(throttleSlotInterval > 0 && throttleSlotInterval % 1 === 0, "invalid connection throttle slot interval", "connection.throttleSlotInterval", throttleSlotInterval);
  const errorPassThrough = typeof connection === "object" ? !!connection.errorPassThrough : false;
  const headers = {};
  let url = null; // @TODO: Allow ConnectionInfo to override some of these values

  const options = {
    method: "GET"
  };
  let allow304 = false;
  let timeout = 2 * 60 * 1000;

  if (typeof connection === "string") {
    url = connection;
  } else if (typeof connection === "object") {
    if (connection == null || connection.url == null) {
      logger.throwArgumentError("missing URL", "connection.url", connection);
    }

    url = connection.url;

    if (typeof connection.timeout === "number" && connection.timeout > 0) {
      timeout = connection.timeout;
    }

    if (connection.headers) {
      for (const key in connection.headers) {
        headers[key.toLowerCase()] = {
          key: key,
          value: String(connection.headers[key])
        };

        if (["if-none-match", "if-modified-since"].indexOf(key.toLowerCase()) >= 0) {
          allow304 = true;
        }
      }
    }

    options.allowGzip = !!connection.allowGzip;

    if (connection.user != null && connection.password != null) {
      if (url.substring(0, 6) !== "https:" && connection.allowInsecureAuthentication !== true) {
        logger.throwError("basic authentication requires a secure https url", _logger.Logger.errors.INVALID_ARGUMENT, {
          argument: "url",
          url: url,
          user: connection.user,
          password: "[REDACTED]"
        });
      }

      const authorization = connection.user + ":" + connection.password;
      headers["authorization"] = {
        key: "Authorization",
        value: "Basic " + (0, _base.encode)((0, _strings.toUtf8Bytes)(authorization))
      };
    }

    if (connection.skipFetchSetup != null) {
      options.skipFetchSetup = !!connection.skipFetchSetup;
    }
  }

  const reData = new RegExp("^data:([a-z0-9-]+/[a-z0-9-]+);base64,(.*)$", "i");
  const dataMatch = url ? url.match(reData) : null;

  if (dataMatch) {
    try {
      const response = {
        statusCode: 200,
        statusMessage: "OK",
        headers: {
          "content-type": dataMatch[1]
        },
        body: (0, _base.decode)(dataMatch[2])
      };
      let result = response.body;

      if (processFunc) {
        result = processFunc(response.body, response);
      }

      return Promise.resolve(result);
    } catch (error) {
      logger.throwError("processing response error", _logger.Logger.errors.SERVER_ERROR, {
        body: bodyify(dataMatch[1], dataMatch[2]),
        error: error,
        requestBody: null,
        requestMethod: "GET",
        url: url
      });
    }
  }

  if (body) {
    options.method = "POST";
    options.body = body;

    if (headers["content-type"] == null) {
      headers["content-type"] = {
        key: "Content-Type",
        value: "application/octet-stream"
      };
    }

    if (headers["content-length"] == null) {
      headers["content-length"] = {
        key: "Content-Length",
        value: String(body.length)
      };
    }
  }

  const flatHeaders = {};
  Object.keys(headers).forEach(key => {
    const header = headers[key];
    flatHeaders[header.key] = header.value;
  });
  options.headers = flatHeaders;

  const runningTimeout = function () {
    let timer = null;
    const promise = new Promise(function (resolve, reject) {
      if (timeout) {
        timer = setTimeout(() => {
          if (timer == null) {
            return;
          }

          timer = null;
          reject(logger.makeError("timeout", _logger.Logger.errors.TIMEOUT, {
            requestBody: bodyify(options.body, flatHeaders["content-type"]),
            requestMethod: options.method,
            timeout: timeout,
            url: url
          }));
        }, timeout);
      }
    });

    const cancel = function () {
      if (timer == null) {
        return;
      }

      clearTimeout(timer);
      timer = null;
    };

    return {
      promise,
      cancel
    };
  }();

  const runningFetch = function () {
    return __awaiter(this, void 0, void 0, function* () {
      for (let attempt = 0; attempt < attemptLimit; attempt++) {
        let response = null;

        try {
          response = yield (0, _geturl.getUrl)(url, options);

          if (attempt < attemptLimit) {
            if (response.statusCode === 301 || response.statusCode === 302) {
              // Redirection; for now we only support absolute locataions
              const location = response.headers.location || "";

              if (options.method === "GET" && location.match(/^https:/)) {
                url = response.headers.location;
                continue;
              }
            } else if (response.statusCode === 429) {
              // Exponential back-off throttling
              let tryAgain = true;

              if (throttleCallback) {
                tryAgain = yield throttleCallback(attempt, url);
              }

              if (tryAgain) {
                let stall = 0;
                const retryAfter = response.headers["retry-after"];

                if (typeof retryAfter === "string" && retryAfter.match(/^[1-9][0-9]*$/)) {
                  stall = parseInt(retryAfter) * 1000;
                } else {
                  stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                } //console.log("Stalling 429");


                yield staller(stall);
                continue;
              }
            }
          }
        } catch (error) {
          response = error.response;

          if (response == null) {
            runningTimeout.cancel();
            logger.throwError("missing response", _logger.Logger.errors.SERVER_ERROR, {
              requestBody: bodyify(options.body, flatHeaders["content-type"]),
              requestMethod: options.method,
              serverError: error,
              url: url
            });
          }
        }

        let body = response.body;

        if (allow304 && response.statusCode === 304) {
          body = null;
        } else if (!errorPassThrough && (response.statusCode < 200 || response.statusCode >= 300)) {
          runningTimeout.cancel();
          logger.throwError("bad response", _logger.Logger.errors.SERVER_ERROR, {
            status: response.statusCode,
            headers: response.headers,
            body: bodyify(body, response.headers ? response.headers["content-type"] : null),
            requestBody: bodyify(options.body, flatHeaders["content-type"]),
            requestMethod: options.method,
            url: url
          });
        }

        if (processFunc) {
          try {
            const result = yield processFunc(body, response);
            runningTimeout.cancel();
            return result;
          } catch (error) {
            // Allow the processFunc to trigger a throttle
            if (error.throttleRetry && attempt < attemptLimit) {
              let tryAgain = true;

              if (throttleCallback) {
                tryAgain = yield throttleCallback(attempt, url);
              }

              if (tryAgain) {
                const timeout = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt))); //console.log("Stalling callback");

                yield staller(timeout);
                continue;
              }
            }

            runningTimeout.cancel();
            logger.throwError("processing response error", _logger.Logger.errors.SERVER_ERROR, {
              body: bodyify(body, response.headers ? response.headers["content-type"] : null),
              error: error,
              requestBody: bodyify(options.body, flatHeaders["content-type"]),
              requestMethod: options.method,
              url: url
            });
          }
        }

        runningTimeout.cancel(); // If we had a processFunc, it either returned a T or threw above.
        // The "body" is now a Uint8Array.

        return body;
      }

      return logger.throwError("failed response", _logger.Logger.errors.SERVER_ERROR, {
        requestBody: bodyify(options.body, flatHeaders["content-type"]),
        requestMethod: options.method,
        url: url
      });
    });
  }();

  return Promise.race([runningTimeout.promise, runningFetch]);
}

function fetchJson(connection, json, processFunc) {
  let processJsonFunc = (value, response) => {
    let result = null;

    if (value != null) {
      try {
        result = JSON.parse((0, _strings.toUtf8String)(value));
      } catch (error) {
        logger.throwError("invalid JSON", _logger.Logger.errors.SERVER_ERROR, {
          body: value,
          error: error
        });
      }
    }

    if (processFunc) {
      result = processFunc(result, response);
    }

    return result;
  }; // If we have json to send, we must
  // - add content-type of application/json (unless already overridden)
  // - convert the json to bytes


  let body = null;

  if (json != null) {
    body = (0, _strings.toUtf8Bytes)(json); // Create a connection with the content-type set for JSON

    const updated = typeof connection === "string" ? {
      url: connection
    } : (0, _properties.shallowCopy)(connection);

    if (updated.headers) {
      const hasContentType = Object.keys(updated.headers).filter(k => k.toLowerCase() === "content-type").length !== 0;

      if (!hasContentType) {
        updated.headers = (0, _properties.shallowCopy)(updated.headers);
        updated.headers["content-type"] = "application/json";
      }
    } else {
      updated.headers = {
        "content-type": "application/json"
      };
    }

    connection = updated;
  }

  return _fetchData(connection, body, processJsonFunc);
}

function poll(func, options) {
  if (!options) {
    options = {};
  }

  options = (0, _properties.shallowCopy)(options);

  if (options.floor == null) {
    options.floor = 0;
  }

  if (options.ceiling == null) {
    options.ceiling = 10000;
  }

  if (options.interval == null) {
    options.interval = 250;
  }

  return new Promise(function (resolve, reject) {
    let timer = null;
    let done = false; // Returns true if cancel was successful. Unsuccessful cancel means we're already done.

    const cancel = () => {
      if (done) {
        return false;
      }

      done = true;

      if (timer) {
        clearTimeout(timer);
      }

      return true;
    };

    if (options.timeout) {
      timer = setTimeout(() => {
        if (cancel()) {
          reject(new Error("timeout"));
        }
      }, options.timeout);
    }

    const retryLimit = options.retryLimit;
    let attempt = 0;

    function check() {
      return func().then(function (result) {
        // If we have a result, or are allowed null then we're done
        if (result !== undefined) {
          if (cancel()) {
            resolve(result);
          }
        } else if (options.oncePoll) {
          options.oncePoll.once("poll", check);
        } else if (options.onceBlock) {
          options.onceBlock.once("block", check); // Otherwise, exponential back-off (up to 10s) our next request
        } else if (!done) {
          attempt++;

          if (attempt > retryLimit) {
            if (cancel()) {
              reject(new Error("retry limit reached"));
            }

            return;
          }

          let timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));

          if (timeout < options.floor) {
            timeout = options.floor;
          }

          if (timeout > options.ceiling) {
            timeout = options.ceiling;
          }

          setTimeout(check, timeout);
        }

        return null;
      }, function (error) {
        if (cancel()) {
          reject(error);
        }
      });
    }

    check();
  });
}
},{"@ethersproject/base64":"../../node_modules/@ethersproject/base64/lib.esm/index.js","@ethersproject/bytes":"../../node_modules/@ethersproject/bytes/lib.esm/index.js","@ethersproject/properties":"../../node_modules/@ethersproject/properties/lib.esm/index.js","@ethersproject/strings":"../../node_modules/@ethersproject/strings/lib.esm/index.js","@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","./_version":"../../node_modules/@ethersproject/web/lib.esm/_version.js","./geturl":"../../node_modules/@ethersproject/web/lib.esm/geturl.js"}],"../../node_modules/bech32/index.js":[function(require,module,exports) {
'use strict'
var ALPHABET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l'

// pre-compute lookup table
var ALPHABET_MAP = {}
for (var z = 0; z < ALPHABET.length; z++) {
  var x = ALPHABET.charAt(z)

  if (ALPHABET_MAP[x] !== undefined) throw new TypeError(x + ' is ambiguous')
  ALPHABET_MAP[x] = z
}

function polymodStep (pre) {
  var b = pre >> 25
  return ((pre & 0x1FFFFFF) << 5) ^
    (-((b >> 0) & 1) & 0x3b6a57b2) ^
    (-((b >> 1) & 1) & 0x26508e6d) ^
    (-((b >> 2) & 1) & 0x1ea119fa) ^
    (-((b >> 3) & 1) & 0x3d4233dd) ^
    (-((b >> 4) & 1) & 0x2a1462b3)
}

function prefixChk (prefix) {
  var chk = 1
  for (var i = 0; i < prefix.length; ++i) {
    var c = prefix.charCodeAt(i)
    if (c < 33 || c > 126) return 'Invalid prefix (' + prefix + ')'

    chk = polymodStep(chk) ^ (c >> 5)
  }
  chk = polymodStep(chk)

  for (i = 0; i < prefix.length; ++i) {
    var v = prefix.charCodeAt(i)
    chk = polymodStep(chk) ^ (v & 0x1f)
  }
  return chk
}

function encode (prefix, words, LIMIT) {
  LIMIT = LIMIT || 90
  if ((prefix.length + 7 + words.length) > LIMIT) throw new TypeError('Exceeds length limit')

  prefix = prefix.toLowerCase()

  // determine chk mod
  var chk = prefixChk(prefix)
  if (typeof chk === 'string') throw new Error(chk)

  var result = prefix + '1'
  for (var i = 0; i < words.length; ++i) {
    var x = words[i]
    if ((x >> 5) !== 0) throw new Error('Non 5-bit word')

    chk = polymodStep(chk) ^ x
    result += ALPHABET.charAt(x)
  }

  for (i = 0; i < 6; ++i) {
    chk = polymodStep(chk)
  }
  chk ^= 1

  for (i = 0; i < 6; ++i) {
    var v = (chk >> ((5 - i) * 5)) & 0x1f
    result += ALPHABET.charAt(v)
  }

  return result
}

function __decode (str, LIMIT) {
  LIMIT = LIMIT || 90
  if (str.length < 8) return str + ' too short'
  if (str.length > LIMIT) return 'Exceeds length limit'

  // don't allow mixed case
  var lowered = str.toLowerCase()
  var uppered = str.toUpperCase()
  if (str !== lowered && str !== uppered) return 'Mixed-case string ' + str
  str = lowered

  var split = str.lastIndexOf('1')
  if (split === -1) return 'No separator character for ' + str
  if (split === 0) return 'Missing prefix for ' + str

  var prefix = str.slice(0, split)
  var wordChars = str.slice(split + 1)
  if (wordChars.length < 6) return 'Data too short'

  var chk = prefixChk(prefix)
  if (typeof chk === 'string') return chk

  var words = []
  for (var i = 0; i < wordChars.length; ++i) {
    var c = wordChars.charAt(i)
    var v = ALPHABET_MAP[c]
    if (v === undefined) return 'Unknown character ' + c
    chk = polymodStep(chk) ^ v

    // not in the checksum?
    if (i + 6 >= wordChars.length) continue
    words.push(v)
  }

  if (chk !== 1) return 'Invalid checksum for ' + str
  return { prefix: prefix, words: words }
}

function decodeUnsafe () {
  var res = __decode.apply(null, arguments)
  if (typeof res === 'object') return res
}

function decode (str) {
  var res = __decode.apply(null, arguments)
  if (typeof res === 'object') return res

  throw new Error(res)
}

function convert (data, inBits, outBits, pad) {
  var value = 0
  var bits = 0
  var maxV = (1 << outBits) - 1

  var result = []
  for (var i = 0; i < data.length; ++i) {
    value = (value << inBits) | data[i]
    bits += inBits

    while (bits >= outBits) {
      bits -= outBits
      result.push((value >> bits) & maxV)
    }
  }

  if (pad) {
    if (bits > 0) {
      result.push((value << (outBits - bits)) & maxV)
    }
  } else {
    if (bits >= inBits) return 'Excess padding'
    if ((value << (outBits - bits)) & maxV) return 'Non-zero padding'
  }

  return result
}

function toWordsUnsafe (bytes) {
  var res = convert(bytes, 8, 5, true)
  if (Array.isArray(res)) return res
}

function toWords (bytes) {
  var res = convert(bytes, 8, 5, true)
  if (Array.isArray(res)) return res

  throw new Error(res)
}

function fromWordsUnsafe (words) {
  var res = convert(words, 5, 8, false)
  if (Array.isArray(res)) return res
}

function fromWords (words) {
  var res = convert(words, 5, 8, false)
  if (Array.isArray(res)) return res

  throw new Error(res)
}

module.exports = {
  decodeUnsafe: decodeUnsafe,
  decode: decode,
  encode: encode,
  toWordsUnsafe: toWordsUnsafe,
  toWords: toWords,
  fromWordsUnsafe: fromWordsUnsafe,
  fromWords: fromWords
}

},{}],"../../node_modules/@ethersproject/providers/lib.esm/_version.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.version = void 0;
const version = "providers/5.6.4";
exports.version = version;
},{}],"../../node_modules/@ethersproject/providers/lib.esm/formatter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Formatter = void 0;
exports.isCommunityResourcable = isCommunityResourcable;
exports.isCommunityResource = isCommunityResource;
exports.showThrottleMessage = showThrottleMessage;

var _address = require("@ethersproject/address");

var _bignumber = require("@ethersproject/bignumber");

var _bytes = require("@ethersproject/bytes");

var _constants = require("@ethersproject/constants");

var _properties = require("@ethersproject/properties");

var _transactions = require("@ethersproject/transactions");

var _logger = require("@ethersproject/logger");

var _version = require("./_version");

const logger = new _logger.Logger(_version.version);

class Formatter {
  constructor() {
    logger.checkNew(new.target, Formatter);
    this.formats = this.getDefaultFormats();
  }

  getDefaultFormats() {
    const formats = {};
    const address = this.address.bind(this);
    const bigNumber = this.bigNumber.bind(this);
    const blockTag = this.blockTag.bind(this);
    const data = this.data.bind(this);
    const hash = this.hash.bind(this);
    const hex = this.hex.bind(this);
    const number = this.number.bind(this);
    const type = this.type.bind(this);

    const strictData = v => {
      return this.data(v, true);
    };

    formats.transaction = {
      hash: hash,
      type: type,
      accessList: Formatter.allowNull(this.accessList.bind(this), null),
      blockHash: Formatter.allowNull(hash, null),
      blockNumber: Formatter.allowNull(number, null),
      transactionIndex: Formatter.allowNull(number, null),
      confirmations: Formatter.allowNull(number, null),
      from: address,
      // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)
      // must be set
      gasPrice: Formatter.allowNull(bigNumber),
      maxPriorityFeePerGas: Formatter.allowNull(bigNumber),
      maxFeePerGas: Formatter.allowNull(bigNumber),
      gasLimit: bigNumber,
      to: Formatter.allowNull(address, null),
      value: bigNumber,
      nonce: number,
      data: data,
      r: Formatter.allowNull(this.uint256),
      s: Formatter.allowNull(this.uint256),
      v: Formatter.allowNull(number),
      creates: Formatter.allowNull(address, null),
      raw: Formatter.allowNull(data)
    };
    formats.transactionRequest = {
      from: Formatter.allowNull(address),
      nonce: Formatter.allowNull(number),
      gasLimit: Formatter.allowNull(bigNumber),
      gasPrice: Formatter.allowNull(bigNumber),
      maxPriorityFeePerGas: Formatter.allowNull(bigNumber),
      maxFeePerGas: Formatter.allowNull(bigNumber),
      to: Formatter.allowNull(address),
      value: Formatter.allowNull(bigNumber),
      data: Formatter.allowNull(strictData),
      type: Formatter.allowNull(number),
      accessList: Formatter.allowNull(this.accessList.bind(this), null)
    };
    formats.receiptLog = {
      transactionIndex: number,
      blockNumber: number,
      transactionHash: hash,
      address: address,
      topics: Formatter.arrayOf(hash),
      data: data,
      logIndex: number,
      blockHash: hash
    };
    formats.receipt = {
      to: Formatter.allowNull(this.address, null),
      from: Formatter.allowNull(this.address, null),
      contractAddress: Formatter.allowNull(address, null),
      transactionIndex: number,
      // should be allowNull(hash), but broken-EIP-658 support is handled in receipt
      root: Formatter.allowNull(hex),
      gasUsed: bigNumber,
      logsBloom: Formatter.allowNull(data),
      blockHash: hash,
      transactionHash: hash,
      logs: Formatter.arrayOf(this.receiptLog.bind(this)),
      blockNumber: number,
      confirmations: Formatter.allowNull(number, null),
      cumulativeGasUsed: bigNumber,
      effectiveGasPrice: Formatter.allowNull(bigNumber),
      status: Formatter.allowNull(number),
      type: type
    };
    formats.block = {
      hash: Formatter.allowNull(hash),
      parentHash: hash,
      number: number,
      timestamp: number,
      nonce: Formatter.allowNull(hex),
      difficulty: this.difficulty.bind(this),
      gasLimit: bigNumber,
      gasUsed: bigNumber,
      miner: Formatter.allowNull(address),
      extraData: data,
      transactions: Formatter.allowNull(Formatter.arrayOf(hash)),
      baseFeePerGas: Formatter.allowNull(bigNumber)
    };
    formats.blockWithTransactions = (0, _properties.shallowCopy)(formats.block);
    formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));
    formats.filter = {
      fromBlock: Formatter.allowNull(blockTag, undefined),
      toBlock: Formatter.allowNull(blockTag, undefined),
      blockHash: Formatter.allowNull(hash, undefined),
      address: Formatter.allowNull(address, undefined),
      topics: Formatter.allowNull(this.topics.bind(this), undefined)
    };
    formats.filterLog = {
      blockNumber: Formatter.allowNull(number),
      blockHash: Formatter.allowNull(hash),
      transactionIndex: number,
      removed: Formatter.allowNull(this.boolean.bind(this)),
      address: address,
      data: Formatter.allowFalsish(data, "0x"),
      topics: Formatter.arrayOf(hash),
      transactionHash: hash,
      logIndex: number
    };
    return formats;
  }

  accessList(accessList) {
    return (0, _transactions.accessListify)(accessList || []);
  } // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number
  // Strict! Used on input.


  number(number) {
    if (number === "0x") {
      return 0;
    }

    return _bignumber.BigNumber.from(number).toNumber();
  }

  type(number) {
    if (number === "0x" || number == null) {
      return 0;
    }

    return _bignumber.BigNumber.from(number).toNumber();
  } // Strict! Used on input.


  bigNumber(value) {
    return _bignumber.BigNumber.from(value);
  } // Requires a boolean, "true" or  "false"; returns a boolean


  boolean(value) {
    if (typeof value === "boolean") {
      return value;
    }

    if (typeof value === "string") {
      value = value.toLowerCase();

      if (value === "true") {
        return true;
      }

      if (value === "false") {
        return false;
      }
    }

    throw new Error("invalid boolean - " + value);
  }

  hex(value, strict) {
    if (typeof value === "string") {
      if (!strict && value.substring(0, 2) !== "0x") {
        value = "0x" + value;
      }

      if ((0, _bytes.isHexString)(value)) {
        return value.toLowerCase();
      }
    }

    return logger.throwArgumentError("invalid hash", "value", value);
  }

  data(value, strict) {
    const result = this.hex(value, strict);

    if (result.length % 2 !== 0) {
      throw new Error("invalid data; odd-length - " + value);
    }

    return result;
  } // Requires an address
  // Strict! Used on input.


  address(value) {
    return (0, _address.getAddress)(value);
  }

  callAddress(value) {
    if (!(0, _bytes.isHexString)(value, 32)) {
      return null;
    }

    const address = (0, _address.getAddress)((0, _bytes.hexDataSlice)(value, 12));
    return address === _constants.AddressZero ? null : address;
  }

  contractAddress(value) {
    return (0, _address.getContractAddress)(value);
  } // Strict! Used on input.


  blockTag(blockTag) {
    if (blockTag == null) {
      return "latest";
    }

    if (blockTag === "earliest") {
      return "0x0";
    }

    if (blockTag === "latest" || blockTag === "pending") {
      return blockTag;
    }

    if (typeof blockTag === "number" || (0, _bytes.isHexString)(blockTag)) {
      return (0, _bytes.hexValue)(blockTag);
    }

    throw new Error("invalid blockTag");
  } // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.


  hash(value, strict) {
    const result = this.hex(value, strict);

    if ((0, _bytes.hexDataLength)(result) !== 32) {
      return logger.throwArgumentError("invalid hash", "value", value);
    }

    return result;
  } // Returns the difficulty as a number, or if too large (i.e. PoA network) null


  difficulty(value) {
    if (value == null) {
      return null;
    }

    const v = _bignumber.BigNumber.from(value);

    try {
      return v.toNumber();
    } catch (error) {}

    return null;
  }

  uint256(value) {
    if (!(0, _bytes.isHexString)(value)) {
      throw new Error("invalid uint256");
    }

    return (0, _bytes.hexZeroPad)(value, 32);
  }

  _block(value, format) {
    if (value.author != null && value.miner == null) {
      value.miner = value.author;
    } // The difficulty may need to come from _difficulty in recursed blocks


    const difficulty = value._difficulty != null ? value._difficulty : value.difficulty;
    const result = Formatter.check(format, value);
    result._difficulty = difficulty == null ? null : _bignumber.BigNumber.from(difficulty);
    return result;
  }

  block(value) {
    return this._block(value, this.formats.block);
  }

  blockWithTransactions(value) {
    return this._block(value, this.formats.blockWithTransactions);
  } // Strict! Used on input.


  transactionRequest(value) {
    return Formatter.check(this.formats.transactionRequest, value);
  }

  transactionResponse(transaction) {
    // Rename gas to gasLimit
    if (transaction.gas != null && transaction.gasLimit == null) {
      transaction.gasLimit = transaction.gas;
    } // Some clients (TestRPC) do strange things like return 0x0 for the
    // 0 address; correct this to be a real address


    if (transaction.to && _bignumber.BigNumber.from(transaction.to).isZero()) {
      transaction.to = "0x0000000000000000000000000000000000000000";
    } // Rename input to data


    if (transaction.input != null && transaction.data == null) {
      transaction.data = transaction.input;
    } // If to and creates are empty, populate the creates from the transaction


    if (transaction.to == null && transaction.creates == null) {
      transaction.creates = this.contractAddress(transaction);
    }

    if ((transaction.type === 1 || transaction.type === 2) && transaction.accessList == null) {
      transaction.accessList = [];
    }

    const result = Formatter.check(this.formats.transaction, transaction);

    if (transaction.chainId != null) {
      let chainId = transaction.chainId;

      if ((0, _bytes.isHexString)(chainId)) {
        chainId = _bignumber.BigNumber.from(chainId).toNumber();
      }

      result.chainId = chainId;
    } else {
      let chainId = transaction.networkId; // geth-etc returns chainId

      if (chainId == null && result.v == null) {
        chainId = transaction.chainId;
      }

      if ((0, _bytes.isHexString)(chainId)) {
        chainId = _bignumber.BigNumber.from(chainId).toNumber();
      }

      if (typeof chainId !== "number" && result.v != null) {
        chainId = (result.v - 35) / 2;

        if (chainId < 0) {
          chainId = 0;
        }

        chainId = parseInt(chainId);
      }

      if (typeof chainId !== "number") {
        chainId = 0;
      }

      result.chainId = chainId;
    } // 0x0000... should actually be null


    if (result.blockHash && result.blockHash.replace(/0/g, "") === "x") {
      result.blockHash = null;
    }

    return result;
  }

  transaction(value) {
    return (0, _transactions.parse)(value);
  }

  receiptLog(value) {
    return Formatter.check(this.formats.receiptLog, value);
  }

  receipt(value) {
    const result = Formatter.check(this.formats.receipt, value); // RSK incorrectly implemented EIP-658, so we munge things a bit here for it

    if (result.root != null) {
      if (result.root.length <= 4) {
        // Could be 0x00, 0x0, 0x01 or 0x1
        const value = _bignumber.BigNumber.from(result.root).toNumber();

        if (value === 0 || value === 1) {
          // Make sure if both are specified, they match
          if (result.status != null && result.status !== value) {
            logger.throwArgumentError("alt-root-status/status mismatch", "value", {
              root: result.root,
              status: result.status
            });
          }

          result.status = value;
          delete result.root;
        } else {
          logger.throwArgumentError("invalid alt-root-status", "value.root", result.root);
        }
      } else if (result.root.length !== 66) {
        // Must be a valid bytes32
        logger.throwArgumentError("invalid root hash", "value.root", result.root);
      }
    }

    if (result.status != null) {
      result.byzantium = true;
    }

    return result;
  }

  topics(value) {
    if (Array.isArray(value)) {
      return value.map(v => this.topics(v));
    } else if (value != null) {
      return this.hash(value, true);
    }

    return null;
  }

  filter(value) {
    return Formatter.check(this.formats.filter, value);
  }

  filterLog(value) {
    return Formatter.check(this.formats.filterLog, value);
  }

  static check(format, object) {
    const result = {};

    for (const key in format) {
      try {
        const value = format[key](object[key]);

        if (value !== undefined) {
          result[key] = value;
        }
      } catch (error) {
        error.checkKey = key;
        error.checkValue = object[key];
        throw error;
      }
    }

    return result;
  } // if value is null-ish, nullValue is returned


  static allowNull(format, nullValue) {
    return function (value) {
      if (value == null) {
        return nullValue;
      }

      return format(value);
    };
  } // If value is false-ish, replaceValue is returned


  static allowFalsish(format, replaceValue) {
    return function (value) {
      if (!value) {
        return replaceValue;
      }

      return format(value);
    };
  } // Requires an Array satisfying check


  static arrayOf(format) {
    return function (array) {
      if (!Array.isArray(array)) {
        throw new Error("not an array");
      }

      const result = [];
      array.forEach(function (value) {
        result.push(format(value));
      });
      return result;
    };
  }

}

exports.Formatter = Formatter;

function isCommunityResourcable(value) {
  return value && typeof value.isCommunityResource === "function";
}

function isCommunityResource(value) {
  return isCommunityResourcable(value) && value.isCommunityResource();
} // Show the throttle message only once


let throttleMessage = false;

function showThrottleMessage() {
  if (throttleMessage) {
    return;
  }

  throttleMessage = true;
  console.log("========= NOTICE =========");
  console.log("Request-Rate Exceeded  (this message will not be repeated)");
  console.log("");
  console.log("The default API keys for each service are provided as a highly-throttled,");
  console.log("community resource for low-traffic projects and early prototyping.");
  console.log("");
  console.log("While your application will continue to function, we highly recommended");
  console.log("signing up for your own API keys to improve performance, increase your");
  console.log("request rate/limit and enable other perks, such as metrics and advanced APIs.");
  console.log("");
  console.log("For more details: https:/\/docs.ethers.io/api-keys/");
  console.log("==========================");
}
},{"@ethersproject/address":"../../node_modules/@ethersproject/address/lib.esm/index.js","@ethersproject/bignumber":"../../node_modules/@ethersproject/bignumber/lib.esm/index.js","@ethersproject/bytes":"../../node_modules/@ethersproject/bytes/lib.esm/index.js","@ethersproject/constants":"../../node_modules/@ethersproject/constants/lib.esm/index.js","@ethersproject/properties":"../../node_modules/@ethersproject/properties/lib.esm/index.js","@ethersproject/transactions":"../../node_modules/@ethersproject/transactions/lib.esm/index.js","@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","./_version":"../../node_modules/@ethersproject/providers/lib.esm/_version.js"}],"../../node_modules/@ethersproject/providers/lib.esm/base-provider.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Resolver = exports.Event = exports.BaseProvider = void 0;

var _abstractProvider = require("@ethersproject/abstract-provider");

var _basex = require("@ethersproject/basex");

var _bignumber = require("@ethersproject/bignumber");

var _bytes = require("@ethersproject/bytes");

var _constants = require("@ethersproject/constants");

var _hash = require("@ethersproject/hash");

var _networks = require("@ethersproject/networks");

var _properties = require("@ethersproject/properties");

var _sha = require("@ethersproject/sha2");

var _strings = require("@ethersproject/strings");

var _web = require("@ethersproject/web");

var _bech = _interopRequireDefault(require("bech32"));

var _logger = require("@ethersproject/logger");

var _version = require("./_version");

var _formatter = require("./formatter");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

const logger = new _logger.Logger(_version.version);
const MAX_CCIP_REDIRECTS = 10; //////////////////////////////
// Event Serializeing

function checkTopic(topic) {
  if (topic == null) {
    return "null";
  }

  if ((0, _bytes.hexDataLength)(topic) !== 32) {
    logger.throwArgumentError("invalid topic", "topic", topic);
  }

  return topic.toLowerCase();
}

function serializeTopics(topics) {
  // Remove trailing null AND-topics; they are redundant
  topics = topics.slice();

  while (topics.length > 0 && topics[topics.length - 1] == null) {
    topics.pop();
  }

  return topics.map(topic => {
    if (Array.isArray(topic)) {
      // Only track unique OR-topics
      const unique = {};
      topic.forEach(topic => {
        unique[checkTopic(topic)] = true;
      }); // The order of OR-topics does not matter

      const sorted = Object.keys(unique);
      sorted.sort();
      return sorted.join("|");
    } else {
      return checkTopic(topic);
    }
  }).join("&");
}

function deserializeTopics(data) {
  if (data === "") {
    return [];
  }

  return data.split(/&/g).map(topic => {
    if (topic === "") {
      return [];
    }

    const comps = topic.split("|").map(topic => {
      return topic === "null" ? null : topic;
    });
    return comps.length === 1 ? comps[0] : comps;
  });
}

function getEventTag(eventName) {
  if (typeof eventName === "string") {
    eventName = eventName.toLowerCase();

    if ((0, _bytes.hexDataLength)(eventName) === 32) {
      return "tx:" + eventName;
    }

    if (eventName.indexOf(":") === -1) {
      return eventName;
    }
  } else if (Array.isArray(eventName)) {
    return "filter:*:" + serializeTopics(eventName);
  } else if (_abstractProvider.ForkEvent.isForkEvent(eventName)) {
    logger.warn("not implemented");
    throw new Error("not implemented");
  } else if (eventName && typeof eventName === "object") {
    return "filter:" + (eventName.address || "*") + ":" + serializeTopics(eventName.topics || []);
  }

  throw new Error("invalid event - " + eventName);
} //////////////////////////////
// Helper Object


function getTime() {
  return new Date().getTime();
}

function stall(duration) {
  return new Promise(resolve => {
    setTimeout(resolve, duration);
  });
} //////////////////////////////
// Provider Object

/**
 *  EventType
 *   - "block"
 *   - "poll"
 *   - "didPoll"
 *   - "pending"
 *   - "error"
 *   - "network"
 *   - filter
 *   - topics array
 *   - transaction hash
 */


const PollableEvents = ["block", "network", "pending", "poll"];

class Event {
  constructor(tag, listener, once) {
    (0, _properties.defineReadOnly)(this, "tag", tag);
    (0, _properties.defineReadOnly)(this, "listener", listener);
    (0, _properties.defineReadOnly)(this, "once", once);
    this._lastBlockNumber = -2;
    this._inflight = false;
  }

  get event() {
    switch (this.type) {
      case "tx":
        return this.hash;

      case "filter":
        return this.filter;
    }

    return this.tag;
  }

  get type() {
    return this.tag.split(":")[0];
  }

  get hash() {
    const comps = this.tag.split(":");

    if (comps[0] !== "tx") {
      return null;
    }

    return comps[1];
  }

  get filter() {
    const comps = this.tag.split(":");

    if (comps[0] !== "filter") {
      return null;
    }

    const address = comps[1];
    const topics = deserializeTopics(comps[2]);
    const filter = {};

    if (topics.length > 0) {
      filter.topics = topics;
    }

    if (address && address !== "*") {
      filter.address = address;
    }

    return filter;
  }

  pollable() {
    return this.tag.indexOf(":") >= 0 || PollableEvents.indexOf(this.tag) >= 0;
  }

}

exports.Event = Event;
; // https://github.com/satoshilabs/slips/blob/master/slip-0044.md

const coinInfos = {
  "0": {
    symbol: "btc",
    p2pkh: 0x00,
    p2sh: 0x05,
    prefix: "bc"
  },
  "2": {
    symbol: "ltc",
    p2pkh: 0x30,
    p2sh: 0x32,
    prefix: "ltc"
  },
  "3": {
    symbol: "doge",
    p2pkh: 0x1e,
    p2sh: 0x16
  },
  "60": {
    symbol: "eth",
    ilk: "eth"
  },
  "61": {
    symbol: "etc",
    ilk: "eth"
  },
  "700": {
    symbol: "xdai",
    ilk: "eth"
  }
};

function bytes32ify(value) {
  return (0, _bytes.hexZeroPad)(_bignumber.BigNumber.from(value).toHexString(), 32);
} // Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)


function base58Encode(data) {
  return _basex.Base58.encode((0, _bytes.concat)([data, (0, _bytes.hexDataSlice)((0, _sha.sha256)((0, _sha.sha256)(data)), 0, 4)]));
}

const matcherIpfs = new RegExp("^(ipfs):/\/(.*)$", "i");
const matchers = [new RegExp("^(https):/\/(.*)$", "i"), new RegExp("^(data):(.*)$", "i"), matcherIpfs, new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$", "i")];

function _parseString(result, start) {
  try {
    return (0, _strings.toUtf8String)(_parseBytes(result, start));
  } catch (error) {}

  return null;
}

function _parseBytes(result, start) {
  if (result === "0x") {
    return null;
  }

  const offset = _bignumber.BigNumber.from((0, _bytes.hexDataSlice)(result, start, start + 32)).toNumber();

  const length = _bignumber.BigNumber.from((0, _bytes.hexDataSlice)(result, offset, offset + 32)).toNumber();

  return (0, _bytes.hexDataSlice)(result, offset + 32, offset + 32 + length);
} // Trim off the ipfs:// prefix and return the default gateway URL


function getIpfsLink(link) {
  if (link.match(/^ipfs:\/\/ipfs\//i)) {
    link = link.substring(12);
  } else if (link.match(/^ipfs:\/\//i)) {
    link = link.substring(7);
  } else {
    logger.throwArgumentError("unsupported IPFS format", "link", link);
  }

  return `https:/\/gateway.ipfs.io/ipfs/${link}`;
}

function numPad(value) {
  const result = (0, _bytes.arrayify)(value);

  if (result.length > 32) {
    throw new Error("internal; should not happen");
  }

  const padded = new Uint8Array(32);
  padded.set(result, 32 - result.length);
  return padded;
}

function bytesPad(value) {
  if (value.length % 32 === 0) {
    return value;
  }

  const result = new Uint8Array(Math.ceil(value.length / 32) * 32);
  result.set(value);
  return result;
} // ABI Encodes a series of (bytes, bytes, ...)


function encodeBytes(datas) {
  const result = [];
  let byteCount = 0; // Add place-holders for pointers as we add items

  for (let i = 0; i < datas.length; i++) {
    result.push(null);
    byteCount += 32;
  }

  for (let i = 0; i < datas.length; i++) {
    const data = (0, _bytes.arrayify)(datas[i]); // Update the bytes offset

    result[i] = numPad(byteCount); // The length and padded value of data

    result.push(numPad(data.length));
    result.push(bytesPad(data));
    byteCount += 32 + Math.ceil(data.length / 32) * 32;
  }

  return (0, _bytes.hexConcat)(result);
}

class Resolver {
  // The resolvedAddress is only for creating a ReverseLookup resolver
  constructor(provider, address, name, resolvedAddress) {
    (0, _properties.defineReadOnly)(this, "provider", provider);
    (0, _properties.defineReadOnly)(this, "name", name);
    (0, _properties.defineReadOnly)(this, "address", provider.formatter.address(address));
    (0, _properties.defineReadOnly)(this, "_resolvedAddress", resolvedAddress);
  }

  supportsWildcard() {
    if (!this._supportsEip2544) {
      // supportsInterface(bytes4 = selector("resolve(bytes,bytes)"))
      this._supportsEip2544 = this.provider.call({
        to: this.address,
        data: "0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000"
      }).then(result => {
        return _bignumber.BigNumber.from(result).eq(1);
      }).catch(error => {
        if (error.code === _logger.Logger.errors.CALL_EXCEPTION) {
          return false;
        } // Rethrow the error: link is down, etc. Let future attempts retry.


        this._supportsEip2544 = null;
        throw error;
      });
    }

    return this._supportsEip2544;
  }

  _fetch(selector, parameters) {
    return __awaiter(this, void 0, void 0, function* () {
      // e.g. keccak256("addr(bytes32,uint256)")
      const tx = {
        to: this.address,
        ccipReadEnabled: true,
        data: (0, _bytes.hexConcat)([selector, (0, _hash.namehash)(this.name), parameters || "0x"])
      }; // Wildcard support; use EIP-2544 to resolve the request

      let parseBytes = false;

      if (yield this.supportsWildcard()) {
        parseBytes = true; // selector("resolve(bytes,bytes)")

        tx.data = (0, _bytes.hexConcat)(["0x9061b923", encodeBytes([(0, _hash.dnsEncode)(this.name), tx.data])]);
      }

      try {
        let result = yield this.provider.call(tx);

        if ((0, _bytes.arrayify)(result).length % 32 === 4) {
          logger.throwError("resolver threw error", _logger.Logger.errors.CALL_EXCEPTION, {
            transaction: tx,
            data: result
          });
        }

        if (parseBytes) {
          result = _parseBytes(result, 0);
        }

        return result;
      } catch (error) {
        if (error.code === _logger.Logger.errors.CALL_EXCEPTION) {
          return null;
        }

        throw error;
      }
    });
  }

  _fetchBytes(selector, parameters) {
    return __awaiter(this, void 0, void 0, function* () {
      const result = yield this._fetch(selector, parameters);

      if (result != null) {
        return _parseBytes(result, 0);
      }

      return null;
    });
  }

  _getAddress(coinType, hexBytes) {
    const coinInfo = coinInfos[String(coinType)];

    if (coinInfo == null) {
      logger.throwError(`unsupported coin type: ${coinType}`, _logger.Logger.errors.UNSUPPORTED_OPERATION, {
        operation: `getAddress(${coinType})`
      });
    }

    if (coinInfo.ilk === "eth") {
      return this.provider.formatter.address(hexBytes);
    }

    const bytes = (0, _bytes.arrayify)(hexBytes); // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG

    if (coinInfo.p2pkh != null) {
      const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);

      if (p2pkh) {
        const length = parseInt(p2pkh[1], 16);

        if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {
          return base58Encode((0, _bytes.concat)([[coinInfo.p2pkh], "0x" + p2pkh[2]]));
        }
      }
    } // P2SH: OP_HASH160 <scriptHash> OP_EQUAL


    if (coinInfo.p2sh != null) {
      const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);

      if (p2sh) {
        const length = parseInt(p2sh[1], 16);

        if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {
          return base58Encode((0, _bytes.concat)([[coinInfo.p2sh], "0x" + p2sh[2]]));
        }
      }
    } // Bech32


    if (coinInfo.prefix != null) {
      const length = bytes[1]; // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program

      let version = bytes[0];

      if (version === 0x00) {
        if (length !== 20 && length !== 32) {
          version = -1;
        }
      } else {
        version = -1;
      }

      if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {
        const words = _bech.default.toWords(bytes.slice(2));

        words.unshift(version);
        return _bech.default.encode(coinInfo.prefix, words);
      }
    }

    return null;
  }

  getAddress(coinType) {
    return __awaiter(this, void 0, void 0, function* () {
      if (coinType == null) {
        coinType = 60;
      } // If Ethereum, use the standard `addr(bytes32)`


      if (coinType === 60) {
        try {
          // keccak256("addr(bytes32)")
          const result = yield this._fetch("0x3b3b57de"); // No address

          if (result === "0x" || result === _constants.HashZero) {
            return null;
          }

          return this.provider.formatter.callAddress(result);
        } catch (error) {
          if (error.code === _logger.Logger.errors.CALL_EXCEPTION) {
            return null;
          }

          throw error;
        }
      } // keccak256("addr(bytes32,uint256")


      const hexBytes = yield this._fetchBytes("0xf1cb7e06", bytes32ify(coinType)); // No address

      if (hexBytes == null || hexBytes === "0x") {
        return null;
      } // Compute the address


      const address = this._getAddress(coinType, hexBytes);

      if (address == null) {
        logger.throwError(`invalid or unsupported coin data`, _logger.Logger.errors.UNSUPPORTED_OPERATION, {
          operation: `getAddress(${coinType})`,
          coinType: coinType,
          data: hexBytes
        });
      }

      return address;
    });
  }

  getAvatar() {
    return __awaiter(this, void 0, void 0, function* () {
      const linkage = [{
        type: "name",
        content: this.name
      }];

      try {
        // test data for ricmoo.eth
        //const avatar = "eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233";
        const avatar = yield this.getText("avatar");

        if (avatar == null) {
          return null;
        }

        for (let i = 0; i < matchers.length; i++) {
          const match = avatar.match(matchers[i]);

          if (match == null) {
            continue;
          }

          const scheme = match[1].toLowerCase();

          switch (scheme) {
            case "https":
              linkage.push({
                type: "url",
                content: avatar
              });
              return {
                linkage,
                url: avatar
              };

            case "data":
              linkage.push({
                type: "data",
                content: avatar
              });
              return {
                linkage,
                url: avatar
              };

            case "ipfs":
              linkage.push({
                type: "ipfs",
                content: avatar
              });
              return {
                linkage,
                url: getIpfsLink(avatar)
              };

            case "erc721":
            case "erc1155":
              {
                // Depending on the ERC type, use tokenURI(uint256) or url(uint256)
                const selector = scheme === "erc721" ? "0xc87b56dd" : "0x0e89341c";
                linkage.push({
                  type: scheme,
                  content: avatar
                }); // The owner of this name

                const owner = this._resolvedAddress || (yield this.getAddress());
                const comps = (match[2] || "").split("/");

                if (comps.length !== 2) {
                  return null;
                }

                const addr = yield this.provider.formatter.address(comps[0]);
                const tokenId = (0, _bytes.hexZeroPad)(_bignumber.BigNumber.from(comps[1]).toHexString(), 32); // Check that this account owns the token

                if (scheme === "erc721") {
                  // ownerOf(uint256 tokenId)
                  const tokenOwner = this.provider.formatter.callAddress(yield this.provider.call({
                    to: addr,
                    data: (0, _bytes.hexConcat)(["0x6352211e", tokenId])
                  }));

                  if (owner !== tokenOwner) {
                    return null;
                  }

                  linkage.push({
                    type: "owner",
                    content: tokenOwner
                  });
                } else if (scheme === "erc1155") {
                  // balanceOf(address owner, uint256 tokenId)
                  const balance = _bignumber.BigNumber.from(yield this.provider.call({
                    to: addr,
                    data: (0, _bytes.hexConcat)(["0x00fdd58e", (0, _bytes.hexZeroPad)(owner, 32), tokenId])
                  }));

                  if (balance.isZero()) {
                    return null;
                  }

                  linkage.push({
                    type: "balance",
                    content: balance.toString()
                  });
                } // Call the token contract for the metadata URL


                const tx = {
                  to: this.provider.formatter.address(comps[0]),
                  data: (0, _bytes.hexConcat)([selector, tokenId])
                };

                let metadataUrl = _parseString(yield this.provider.call(tx), 0);

                if (metadataUrl == null) {
                  return null;
                }

                linkage.push({
                  type: "metadata-url-base",
                  content: metadataUrl
                }); // ERC-1155 allows a generic {id} in the URL

                if (scheme === "erc1155") {
                  metadataUrl = metadataUrl.replace("{id}", tokenId.substring(2));
                  linkage.push({
                    type: "metadata-url-expanded",
                    content: metadataUrl
                  });
                } // Transform IPFS metadata links


                if (metadataUrl.match(/^ipfs:/i)) {
                  metadataUrl = getIpfsLink(metadataUrl);
                }

                linkage.push({
                  type: "metadata-url",
                  content: metadataUrl
                }); // Get the token metadata

                const metadata = yield (0, _web.fetchJson)(metadataUrl);

                if (!metadata) {
                  return null;
                }

                linkage.push({
                  type: "metadata",
                  content: JSON.stringify(metadata)
                }); // Pull the image URL out

                let imageUrl = metadata.image;

                if (typeof imageUrl !== "string") {
                  return null;
                }

                if (imageUrl.match(/^(https:\/\/|data:)/i)) {// Allow
                } else {
                  // Transform IPFS link to gateway
                  const ipfs = imageUrl.match(matcherIpfs);

                  if (ipfs == null) {
                    return null;
                  }

                  linkage.push({
                    type: "url-ipfs",
                    content: imageUrl
                  });
                  imageUrl = getIpfsLink(imageUrl);
                }

                linkage.push({
                  type: "url",
                  content: imageUrl
                });
                return {
                  linkage,
                  url: imageUrl
                };
              }
          }
        }
      } catch (error) {}

      return null;
    });
  }

  getContentHash() {
    return __awaiter(this, void 0, void 0, function* () {
      // keccak256("contenthash()")
      const hexBytes = yield this._fetchBytes("0xbc1c58d1"); // No contenthash

      if (hexBytes == null || hexBytes === "0x") {
        return null;
      } // IPFS (CID: 1, Type: DAG-PB)


      const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);

      if (ipfs) {
        const length = parseInt(ipfs[3], 16);

        if (ipfs[4].length === length * 2) {
          return "ipfs:/\/" + _basex.Base58.encode("0x" + ipfs[1]);
        }
      } // IPNS (CID: 1, Type: libp2p-key)


      const ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);

      if (ipns) {
        const length = parseInt(ipns[3], 16);

        if (ipns[4].length === length * 2) {
          return "ipns:/\/" + _basex.Base58.encode("0x" + ipns[1]);
        }
      } // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)


      const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);

      if (swarm) {
        if (swarm[1].length === 32 * 2) {
          return "bzz:/\/" + swarm[1];
        }
      }

      return logger.throwError(`invalid or unsupported content hash data`, _logger.Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "getContentHash()",
        data: hexBytes
      });
    });
  }

  getText(key) {
    return __awaiter(this, void 0, void 0, function* () {
      // The key encoded as parameter to fetchBytes
      let keyBytes = (0, _strings.toUtf8Bytes)(key); // The nodehash consumes the first slot, so the string pointer targets
      // offset 64, with the length at offset 64 and data starting at offset 96

      keyBytes = (0, _bytes.concat)([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]); // Pad to word-size (32 bytes)

      if (keyBytes.length % 32 !== 0) {
        keyBytes = (0, _bytes.concat)([keyBytes, (0, _bytes.hexZeroPad)("0x", 32 - key.length % 32)]);
      }

      const hexBytes = yield this._fetchBytes("0x59d1d43c", (0, _bytes.hexlify)(keyBytes));

      if (hexBytes == null || hexBytes === "0x") {
        return null;
      }

      return (0, _strings.toUtf8String)(hexBytes);
    });
  }

}

exports.Resolver = Resolver;
let defaultFormatter = null;
let nextPollId = 1;

class BaseProvider extends _abstractProvider.Provider {
  /**
   *  ready
   *
   *  A Promise<Network> that resolves only once the provider is ready.
   *
   *  Sub-classes that call the super with a network without a chainId
   *  MUST set this. Standard named networks have a known chainId.
   *
   */
  constructor(network) {
    logger.checkNew(new.target, _abstractProvider.Provider);
    super(); // Events being listened to

    this._events = [];
    this._emitted = {
      block: -2
    };
    this.disableCcipRead = false;
    this.formatter = new.target.getFormatter(); // If network is any, this Provider allows the underlying
    // network to change dynamically, and we auto-detect the
    // current network

    (0, _properties.defineReadOnly)(this, "anyNetwork", network === "any");

    if (this.anyNetwork) {
      network = this.detectNetwork();
    }

    if (network instanceof Promise) {
      this._networkPromise = network; // Squash any "unhandled promise" errors; that do not need to be handled

      network.catch(error => {}); // Trigger initial network setting (async)

      this._ready().catch(error => {});
    } else {
      const knownNetwork = (0, _properties.getStatic)(new.target, "getNetwork")(network);

      if (knownNetwork) {
        (0, _properties.defineReadOnly)(this, "_network", knownNetwork);
        this.emit("network", knownNetwork, null);
      } else {
        logger.throwArgumentError("invalid network", "network", network);
      }
    }

    this._maxInternalBlockNumber = -1024;
    this._lastBlockNumber = -2;
    this._maxFilterBlockRange = 10;
    this._pollingInterval = 4000;
    this._fastQueryDate = 0;
  }

  _ready() {
    return __awaiter(this, void 0, void 0, function* () {
      if (this._network == null) {
        let network = null;

        if (this._networkPromise) {
          try {
            network = yield this._networkPromise;
          } catch (error) {}
        } // Try the Provider's network detection (this MUST throw if it cannot)


        if (network == null) {
          network = yield this.detectNetwork();
        } // This should never happen; every Provider sub-class should have
        // suggested a network by here (or have thrown).


        if (!network) {
          logger.throwError("no network detected", _logger.Logger.errors.UNKNOWN_ERROR, {});
        } // Possible this call stacked so do not call defineReadOnly again


        if (this._network == null) {
          if (this.anyNetwork) {
            this._network = network;
          } else {
            (0, _properties.defineReadOnly)(this, "_network", network);
          }

          this.emit("network", network, null);
        }
      }

      return this._network;
    });
  } // This will always return the most recently established network.
  // For "any", this can change (a "network" event is emitted before
  // any change is reflected); otherwise this cannot change


  get ready() {
    return (0, _web.poll)(() => {
      return this._ready().then(network => {
        return network;
      }, error => {
        // If the network isn't running yet, we will wait
        if (error.code === _logger.Logger.errors.NETWORK_ERROR && error.event === "noNetwork") {
          return undefined;
        }

        throw error;
      });
    });
  } // @TODO: Remove this and just create a singleton formatter


  static getFormatter() {
    if (defaultFormatter == null) {
      defaultFormatter = new _formatter.Formatter();
    }

    return defaultFormatter;
  } // @TODO: Remove this and just use getNetwork


  static getNetwork(network) {
    return (0, _networks.getNetwork)(network == null ? "homestead" : network);
  }

  ccipReadFetch(tx, calldata, urls) {
    return __awaiter(this, void 0, void 0, function* () {
      if (this.disableCcipRead || urls.length === 0) {
        return null;
      }

      const sender = tx.to.toLowerCase();
      const data = calldata.toLowerCase();
      const errorMessages = [];

      for (let i = 0; i < urls.length; i++) {
        const url = urls[i]; // URL expansion

        const href = url.replace("{sender}", sender).replace("{data}", data); // If no {data} is present, use POST; otherwise GET

        const json = url.indexOf("{data}") >= 0 ? null : JSON.stringify({
          data,
          sender
        });
        const result = yield (0, _web.fetchJson)({
          url: href,
          errorPassThrough: true
        }, json, (value, response) => {
          value.status = response.statusCode;
          return value;
        });

        if (result.data) {
          return result.data;
        }

        const errorMessage = result.message || "unknown error"; // 4xx indicates the result is not present; stop

        if (result.status >= 400 && result.status < 500) {
          return logger.throwError(`response not found during CCIP fetch: ${errorMessage}`, _logger.Logger.errors.SERVER_ERROR, {
            url,
            errorMessage
          });
        } // 5xx indicates server issue; try the next url


        errorMessages.push(errorMessage);
      }

      return logger.throwError(`error encountered during CCIP fetch: ${errorMessages.map(m => JSON.stringify(m)).join(", ")}`, _logger.Logger.errors.SERVER_ERROR, {
        urls,
        errorMessages
      });
    });
  } // Fetches the blockNumber, but will reuse any result that is less
  // than maxAge old or has been requested since the last request


  _getInternalBlockNumber(maxAge) {
    return __awaiter(this, void 0, void 0, function* () {
      yield this._ready(); // Allowing stale data up to maxAge old

      if (maxAge > 0) {
        // While there are pending internal block requests...
        while (this._internalBlockNumber) {
          // ..."remember" which fetch we started with
          const internalBlockNumber = this._internalBlockNumber;

          try {
            // Check the result is not too stale
            const result = yield internalBlockNumber;

            if (getTime() - result.respTime <= maxAge) {
              return result.blockNumber;
            } // Too old; fetch a new value


            break;
          } catch (error) {
            // The fetch rejected; if we are the first to get the
            // rejection, drop through so we replace it with a new
            // fetch; all others blocked will then get that fetch
            // which won't match the one they "remembered" and loop
            if (this._internalBlockNumber === internalBlockNumber) {
              break;
            }
          }
        }
      }

      const reqTime = getTime();
      const checkInternalBlockNumber = (0, _properties.resolveProperties)({
        blockNumber: this.perform("getBlockNumber", {}),
        networkError: this.getNetwork().then(network => null, error => error)
      }).then(({
        blockNumber,
        networkError
      }) => {
        if (networkError) {
          // Unremember this bad internal block number
          if (this._internalBlockNumber === checkInternalBlockNumber) {
            this._internalBlockNumber = null;
          }

          throw networkError;
        }

        const respTime = getTime();
        blockNumber = _bignumber.BigNumber.from(blockNumber).toNumber();

        if (blockNumber < this._maxInternalBlockNumber) {
          blockNumber = this._maxInternalBlockNumber;
        }

        this._maxInternalBlockNumber = blockNumber;

        this._setFastBlockNumber(blockNumber); // @TODO: Still need this?


        return {
          blockNumber,
          reqTime,
          respTime
        };
      });
      this._internalBlockNumber = checkInternalBlockNumber; // Swallow unhandled exceptions; if needed they are handled else where

      checkInternalBlockNumber.catch(error => {
        // Don't null the dead (rejected) fetch, if it has already been updated
        if (this._internalBlockNumber === checkInternalBlockNumber) {
          this._internalBlockNumber = null;
        }
      });
      return (yield checkInternalBlockNumber).blockNumber;
    });
  }

  poll() {
    return __awaiter(this, void 0, void 0, function* () {
      const pollId = nextPollId++; // Track all running promises, so we can trigger a post-poll once they are complete

      const runners = [];
      let blockNumber = null;

      try {
        blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);
      } catch (error) {
        this.emit("error", error);
        return;
      }

      this._setFastBlockNumber(blockNumber); // Emit a poll event after we have the latest (fast) block number


      this.emit("poll", pollId, blockNumber); // If the block has not changed, meh.

      if (blockNumber === this._lastBlockNumber) {
        this.emit("didPoll", pollId);
        return;
      } // First polling cycle, trigger a "block" events


      if (this._emitted.block === -2) {
        this._emitted.block = blockNumber - 1;
      }

      if (Math.abs(this._emitted.block - blockNumber) > 1000) {
        logger.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${blockNumber})`);
        this.emit("error", logger.makeError("network block skew detected", _logger.Logger.errors.NETWORK_ERROR, {
          blockNumber: blockNumber,
          event: "blockSkew",
          previousBlockNumber: this._emitted.block
        }));
        this.emit("block", blockNumber);
      } else {
        // Notify all listener for each block that has passed
        for (let i = this._emitted.block + 1; i <= blockNumber; i++) {
          this.emit("block", i);
        }
      } // The emitted block was updated, check for obsolete events


      if (this._emitted.block !== blockNumber) {
        this._emitted.block = blockNumber;
        Object.keys(this._emitted).forEach(key => {
          // The block event does not expire
          if (key === "block") {
            return;
          } // The block we were at when we emitted this event


          const eventBlockNumber = this._emitted[key]; // We cannot garbage collect pending transactions or blocks here
          // They should be garbage collected by the Provider when setting
          // "pending" events

          if (eventBlockNumber === "pending") {
            return;
          } // Evict any transaction hashes or block hashes over 12 blocks
          // old, since they should not return null anyways


          if (blockNumber - eventBlockNumber > 12) {
            delete this._emitted[key];
          }
        });
      } // First polling cycle


      if (this._lastBlockNumber === -2) {
        this._lastBlockNumber = blockNumber - 1;
      } // Find all transaction hashes we are waiting on


      this._events.forEach(event => {
        switch (event.type) {
          case "tx":
            {
              const hash = event.hash;
              let runner = this.getTransactionReceipt(hash).then(receipt => {
                if (!receipt || receipt.blockNumber == null) {
                  return null;
                }

                this._emitted["t:" + hash] = receipt.blockNumber;
                this.emit(hash, receipt);
                return null;
              }).catch(error => {
                this.emit("error", error);
              });
              runners.push(runner);
              break;
            }

          case "filter":
            {
              // We only allow a single getLogs to be in-flight at a time
              if (!event._inflight) {
                event._inflight = true; // Filter from the last known event; due to load-balancing
                // and some nodes returning updated block numbers before
                // indexing events, a logs result with 0 entries cannot be
                // trusted and we must retry a range which includes it again

                const filter = event.filter;
                filter.fromBlock = event._lastBlockNumber + 1;
                filter.toBlock = blockNumber; // Prevent fitler ranges from growing too wild

                if (filter.toBlock - this._maxFilterBlockRange > filter.fromBlock) {
                  filter.fromBlock = filter.toBlock - this._maxFilterBlockRange;
                }

                const runner = this.getLogs(filter).then(logs => {
                  // Allow the next getLogs
                  event._inflight = false;

                  if (logs.length === 0) {
                    return;
                  }

                  logs.forEach(log => {
                    // Only when we get an event for a given block number
                    // can we trust the events are indexed
                    if (log.blockNumber > event._lastBlockNumber) {
                      event._lastBlockNumber = log.blockNumber;
                    } // Make sure we stall requests to fetch blocks and txs


                    this._emitted["b:" + log.blockHash] = log.blockNumber;
                    this._emitted["t:" + log.transactionHash] = log.blockNumber;
                    this.emit(filter, log);
                  });
                }).catch(error => {
                  this.emit("error", error); // Allow another getLogs (the range was not updated)

                  event._inflight = false;
                });
                runners.push(runner);
              }

              break;
            }
        }
      });

      this._lastBlockNumber = blockNumber; // Once all events for this loop have been processed, emit "didPoll"

      Promise.all(runners).then(() => {
        this.emit("didPoll", pollId);
      }).catch(error => {
        this.emit("error", error);
      });
      return;
    });
  } // Deprecated; do not use this


  resetEventsBlock(blockNumber) {
    this._lastBlockNumber = blockNumber - 1;

    if (this.polling) {
      this.poll();
    }
  }

  get network() {
    return this._network;
  } // This method should query the network if the underlying network
  // can change, such as when connected to a JSON-RPC backend


  detectNetwork() {
    return __awaiter(this, void 0, void 0, function* () {
      return logger.throwError("provider does not support network detection", _logger.Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "provider.detectNetwork"
      });
    });
  }

  getNetwork() {
    return __awaiter(this, void 0, void 0, function* () {
      const network = yield this._ready(); // Make sure we are still connected to the same network; this is
      // only an external call for backends which can have the underlying
      // network change spontaneously

      const currentNetwork = yield this.detectNetwork();

      if (network.chainId !== currentNetwork.chainId) {
        // We are allowing network changes, things can get complex fast;
        // make sure you know what you are doing if you use "any"
        if (this.anyNetwork) {
          this._network = currentNetwork; // Reset all internal block number guards and caches

          this._lastBlockNumber = -2;
          this._fastBlockNumber = null;
          this._fastBlockNumberPromise = null;
          this._fastQueryDate = 0;
          this._emitted.block = -2;
          this._maxInternalBlockNumber = -1024;
          this._internalBlockNumber = null; // The "network" event MUST happen before this method resolves
          // so any events have a chance to unregister, so we stall an
          // additional event loop before returning from /this/ call

          this.emit("network", currentNetwork, network);
          yield stall(0);
          return this._network;
        }

        const error = logger.makeError("underlying network changed", _logger.Logger.errors.NETWORK_ERROR, {
          event: "changed",
          network: network,
          detectedNetwork: currentNetwork
        });
        this.emit("error", error);
        throw error;
      }

      return network;
    });
  }

  get blockNumber() {
    this._getInternalBlockNumber(100 + this.pollingInterval / 2).then(blockNumber => {
      this._setFastBlockNumber(blockNumber);
    }, error => {});

    return this._fastBlockNumber != null ? this._fastBlockNumber : -1;
  }

  get polling() {
    return this._poller != null;
  }

  set polling(value) {
    if (value && !this._poller) {
      this._poller = setInterval(() => {
        this.poll();
      }, this.pollingInterval);

      if (!this._bootstrapPoll) {
        this._bootstrapPoll = setTimeout(() => {
          this.poll(); // We block additional polls until the polling interval
          // is done, to prevent overwhelming the poll function

          this._bootstrapPoll = setTimeout(() => {
            // If polling was disabled, something may require a poke
            // since starting the bootstrap poll and it was disabled
            if (!this._poller) {
              this.poll();
            } // Clear out the bootstrap so we can do another


            this._bootstrapPoll = null;
          }, this.pollingInterval);
        }, 0);
      }
    } else if (!value && this._poller) {
      clearInterval(this._poller);
      this._poller = null;
    }
  }

  get pollingInterval() {
    return this._pollingInterval;
  }

  set pollingInterval(value) {
    if (typeof value !== "number" || value <= 0 || parseInt(String(value)) != value) {
      throw new Error("invalid polling interval");
    }

    this._pollingInterval = value;

    if (this._poller) {
      clearInterval(this._poller);
      this._poller = setInterval(() => {
        this.poll();
      }, this._pollingInterval);
    }
  }

  _getFastBlockNumber() {
    const now = getTime(); // Stale block number, request a newer value

    if (now - this._fastQueryDate > 2 * this._pollingInterval) {
      this._fastQueryDate = now;
      this._fastBlockNumberPromise = this.getBlockNumber().then(blockNumber => {
        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {
          this._fastBlockNumber = blockNumber;
        }

        return this._fastBlockNumber;
      });
    }

    return this._fastBlockNumberPromise;
  }

  _setFastBlockNumber(blockNumber) {
    // Older block, maybe a stale request
    if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {
      return;
    } // Update the time we updated the blocknumber


    this._fastQueryDate = getTime(); // Newer block number, use  it

    if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {
      this._fastBlockNumber = blockNumber;
      this._fastBlockNumberPromise = Promise.resolve(blockNumber);
    }
  }

  waitForTransaction(transactionHash, confirmations, timeout) {
    return __awaiter(this, void 0, void 0, function* () {
      return this._waitForTransaction(transactionHash, confirmations == null ? 1 : confirmations, timeout || 0, null);
    });
  }

  _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {
    return __awaiter(this, void 0, void 0, function* () {
      const receipt = yield this.getTransactionReceipt(transactionHash); // Receipt is already good

      if ((receipt ? receipt.confirmations : 0) >= confirmations) {
        return receipt;
      } // Poll until the receipt is good...


      return new Promise((resolve, reject) => {
        const cancelFuncs = [];
        let done = false;

        const alreadyDone = function () {
          if (done) {
            return true;
          }

          done = true;
          cancelFuncs.forEach(func => {
            func();
          });
          return false;
        };

        const minedHandler = receipt => {
          if (receipt.confirmations < confirmations) {
            return;
          }

          if (alreadyDone()) {
            return;
          }

          resolve(receipt);
        };

        this.on(transactionHash, minedHandler);
        cancelFuncs.push(() => {
          this.removeListener(transactionHash, minedHandler);
        });

        if (replaceable) {
          let lastBlockNumber = replaceable.startBlock;
          let scannedBlock = null;

          const replaceHandler = blockNumber => __awaiter(this, void 0, void 0, function* () {
            if (done) {
              return;
            } // Wait 1 second; this is only used in the case of a fault, so
            // we will trade off a little bit of latency for more consistent
            // results and fewer JSON-RPC calls


            yield stall(1000);
            this.getTransactionCount(replaceable.from).then(nonce => __awaiter(this, void 0, void 0, function* () {
              if (done) {
                return;
              }

              if (nonce <= replaceable.nonce) {
                lastBlockNumber = blockNumber;
              } else {
                // First check if the transaction was mined
                {
                  const mined = yield this.getTransaction(transactionHash);

                  if (mined && mined.blockNumber != null) {
                    return;
                  }
                } // First time scanning. We start a little earlier for some
                // wiggle room here to handle the eventually consistent nature
                // of blockchain (e.g. the getTransactionCount was for a
                // different block)

                if (scannedBlock == null) {
                  scannedBlock = lastBlockNumber - 3;

                  if (scannedBlock < replaceable.startBlock) {
                    scannedBlock = replaceable.startBlock;
                  }
                }

                while (scannedBlock <= blockNumber) {
                  if (done) {
                    return;
                  }

                  const block = yield this.getBlockWithTransactions(scannedBlock);

                  for (let ti = 0; ti < block.transactions.length; ti++) {
                    const tx = block.transactions[ti]; // Successfully mined!

                    if (tx.hash === transactionHash) {
                      return;
                    } // Matches our transaction from and nonce; its a replacement


                    if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {
                      if (done) {
                        return;
                      } // Get the receipt of the replacement


                      const receipt = yield this.waitForTransaction(tx.hash, confirmations); // Already resolved or rejected (prolly a timeout)

                      if (alreadyDone()) {
                        return;
                      } // The reason we were replaced


                      let reason = "replaced";

                      if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {
                        reason = "repriced";
                      } else if (tx.data === "0x" && tx.from === tx.to && tx.value.isZero()) {
                        reason = "cancelled";
                      } // Explain why we were replaced


                      reject(logger.makeError("transaction was replaced", _logger.Logger.errors.TRANSACTION_REPLACED, {
                        cancelled: reason === "replaced" || reason === "cancelled",
                        reason,
                        replacement: this._wrapTransaction(tx),
                        hash: transactionHash,
                        receipt
                      }));
                      return;
                    }
                  }

                  scannedBlock++;
                }
              }

              if (done) {
                return;
              }

              this.once("block", replaceHandler);
            }), error => {
              if (done) {
                return;
              }

              this.once("block", replaceHandler);
            });
          });

          if (done) {
            return;
          }

          this.once("block", replaceHandler);
          cancelFuncs.push(() => {
            this.removeListener("block", replaceHandler);
          });
        }

        if (typeof timeout === "number" && timeout > 0) {
          const timer = setTimeout(() => {
            if (alreadyDone()) {
              return;
            }

            reject(logger.makeError("timeout exceeded", _logger.Logger.errors.TIMEOUT, {
              timeout: timeout
            }));
          }, timeout);

          if (timer.unref) {
            timer.unref();
          }

          cancelFuncs.push(() => {
            clearTimeout(timer);
          });
        }
      });
    });
  }

  getBlockNumber() {
    return __awaiter(this, void 0, void 0, function* () {
      return this._getInternalBlockNumber(0);
    });
  }

  getGasPrice() {
    return __awaiter(this, void 0, void 0, function* () {
      yield this.getNetwork();
      const result = yield this.perform("getGasPrice", {});

      try {
        return _bignumber.BigNumber.from(result);
      } catch (error) {
        return logger.throwError("bad result from backend", _logger.Logger.errors.SERVER_ERROR, {
          method: "getGasPrice",
          result,
          error
        });
      }
    });
  }

  getBalance(addressOrName, blockTag) {
    return __awaiter(this, void 0, void 0, function* () {
      yield this.getNetwork();
      const params = yield (0, _properties.resolveProperties)({
        address: this._getAddress(addressOrName),
        blockTag: this._getBlockTag(blockTag)
      });
      const result = yield this.perform("getBalance", params);

      try {
        return _bignumber.BigNumber.from(result);
      } catch (error) {
        return logger.throwError("bad result from backend", _logger.Logger.errors.SERVER_ERROR, {
          method: "getBalance",
          params,
          result,
          error
        });
      }
    });
  }

  getTransactionCount(addressOrName, blockTag) {
    return __awaiter(this, void 0, void 0, function* () {
      yield this.getNetwork();
      const params = yield (0, _properties.resolveProperties)({
        address: this._getAddress(addressOrName),
        blockTag: this._getBlockTag(blockTag)
      });
      const result = yield this.perform("getTransactionCount", params);

      try {
        return _bignumber.BigNumber.from(result).toNumber();
      } catch (error) {
        return logger.throwError("bad result from backend", _logger.Logger.errors.SERVER_ERROR, {
          method: "getTransactionCount",
          params,
          result,
          error
        });
      }
    });
  }

  getCode(addressOrName, blockTag) {
    return __awaiter(this, void 0, void 0, function* () {
      yield this.getNetwork();
      const params = yield (0, _properties.resolveProperties)({
        address: this._getAddress(addressOrName),
        blockTag: this._getBlockTag(blockTag)
      });
      const result = yield this.perform("getCode", params);

      try {
        return (0, _bytes.hexlify)(result);
      } catch (error) {
        return logger.throwError("bad result from backend", _logger.Logger.errors.SERVER_ERROR, {
          method: "getCode",
          params,
          result,
          error
        });
      }
    });
  }

  getStorageAt(addressOrName, position, blockTag) {
    return __awaiter(this, void 0, void 0, function* () {
      yield this.getNetwork();
      const params = yield (0, _properties.resolveProperties)({
        address: this._getAddress(addressOrName),
        blockTag: this._getBlockTag(blockTag),
        position: Promise.resolve(position).then(p => (0, _bytes.hexValue)(p))
      });
      const result = yield this.perform("getStorageAt", params);

      try {
        return (0, _bytes.hexlify)(result);
      } catch (error) {
        return logger.throwError("bad result from backend", _logger.Logger.errors.SERVER_ERROR, {
          method: "getStorageAt",
          params,
          result,
          error
        });
      }
    });
  } // This should be called by any subclass wrapping a TransactionResponse


  _wrapTransaction(tx, hash, startBlock) {
    if (hash != null && (0, _bytes.hexDataLength)(hash) !== 32) {
      throw new Error("invalid response - sendTransaction");
    }

    const result = tx; // Check the hash we expect is the same as the hash the server reported

    if (hash != null && tx.hash !== hash) {
      logger.throwError("Transaction hash mismatch from Provider.sendTransaction.", _logger.Logger.errors.UNKNOWN_ERROR, {
        expectedHash: tx.hash,
        returnedHash: hash
      });
    }

    result.wait = (confirms, timeout) => __awaiter(this, void 0, void 0, function* () {
      if (confirms == null) {
        confirms = 1;
      }

      if (timeout == null) {
        timeout = 0;
      } // Get the details to detect replacement


      let replacement = undefined;

      if (confirms !== 0 && startBlock != null) {
        replacement = {
          data: tx.data,
          from: tx.from,
          nonce: tx.nonce,
          to: tx.to,
          value: tx.value,
          startBlock
        };
      }

      const receipt = yield this._waitForTransaction(tx.hash, confirms, timeout, replacement);

      if (receipt == null && confirms === 0) {
        return null;
      } // No longer pending, allow the polling loop to garbage collect this


      this._emitted["t:" + tx.hash] = receipt.blockNumber;

      if (receipt.status === 0) {
        logger.throwError("transaction failed", _logger.Logger.errors.CALL_EXCEPTION, {
          transactionHash: tx.hash,
          transaction: tx,
          receipt: receipt
        });
      }

      return receipt;
    });

    return result;
  }

  sendTransaction(signedTransaction) {
    return __awaiter(this, void 0, void 0, function* () {
      yield this.getNetwork();
      const hexTx = yield Promise.resolve(signedTransaction).then(t => (0, _bytes.hexlify)(t));
      const tx = this.formatter.transaction(signedTransaction);

      if (tx.confirmations == null) {
        tx.confirmations = 0;
      }

      const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);

      try {
        const hash = yield this.perform("sendTransaction", {
          signedTransaction: hexTx
        });
        return this._wrapTransaction(tx, hash, blockNumber);
      } catch (error) {
        error.transaction = tx;
        error.transactionHash = tx.hash;
        throw error;
      }
    });
  }

  _getTransactionRequest(transaction) {
    return __awaiter(this, void 0, void 0, function* () {
      const values = yield transaction;
      const tx = {};
      ["from", "to"].forEach(key => {
        if (values[key] == null) {
          return;
        }

        tx[key] = Promise.resolve(values[key]).then(v => v ? this._getAddress(v) : null);
      });
      ["gasLimit", "gasPrice", "maxFeePerGas", "maxPriorityFeePerGas", "value"].forEach(key => {
        if (values[key] == null) {
          return;
        }

        tx[key] = Promise.resolve(values[key]).then(v => v ? _bignumber.BigNumber.from(v) : null);
      });
      ["type"].forEach(key => {
        if (values[key] == null) {
          return;
        }

        tx[key] = Promise.resolve(values[key]).then(v => v != null ? v : null);
      });

      if (values.accessList) {
        tx.accessList = this.formatter.accessList(values.accessList);
      }

      ["data"].forEach(key => {
        if (values[key] == null) {
          return;
        }

        tx[key] = Promise.resolve(values[key]).then(v => v ? (0, _bytes.hexlify)(v) : null);
      });
      return this.formatter.transactionRequest(yield (0, _properties.resolveProperties)(tx));
    });
  }

  _getFilter(filter) {
    return __awaiter(this, void 0, void 0, function* () {
      filter = yield filter;
      const result = {};

      if (filter.address != null) {
        result.address = this._getAddress(filter.address);
      }

      ["blockHash", "topics"].forEach(key => {
        if (filter[key] == null) {
          return;
        }

        result[key] = filter[key];
      });
      ["fromBlock", "toBlock"].forEach(key => {
        if (filter[key] == null) {
          return;
        }

        result[key] = this._getBlockTag(filter[key]);
      });
      return this.formatter.filter(yield (0, _properties.resolveProperties)(result));
    });
  }

  _call(transaction, blockTag, attempt) {
    return __awaiter(this, void 0, void 0, function* () {
      if (attempt >= MAX_CCIP_REDIRECTS) {
        logger.throwError("CCIP read exceeded maximum redirections", _logger.Logger.errors.SERVER_ERROR, {
          redirects: attempt,
          transaction
        });
      }

      const txSender = transaction.to;
      const result = yield this.perform("call", {
        transaction,
        blockTag
      }); // CCIP Read request via OffchainLookup(address,string[],bytes,bytes4,bytes)

      if (attempt >= 0 && blockTag === "latest" && txSender != null && result.substring(0, 10) === "0x556f1830" && (0, _bytes.hexDataLength)(result) % 32 === 4) {
        try {
          const data = (0, _bytes.hexDataSlice)(result, 4); // Check the sender of the OffchainLookup matches the transaction

          const sender = (0, _bytes.hexDataSlice)(data, 0, 32);

          if (!_bignumber.BigNumber.from(sender).eq(txSender)) {
            logger.throwError("CCIP Read sender did not match", _logger.Logger.errors.CALL_EXCEPTION, {
              name: "OffchainLookup",
              signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
              transaction,
              data: result
            });
          } // Read the URLs from the response


          const urls = [];

          const urlsOffset = _bignumber.BigNumber.from((0, _bytes.hexDataSlice)(data, 32, 64)).toNumber();

          const urlsLength = _bignumber.BigNumber.from((0, _bytes.hexDataSlice)(data, urlsOffset, urlsOffset + 32)).toNumber();

          const urlsData = (0, _bytes.hexDataSlice)(data, urlsOffset + 32);

          for (let u = 0; u < urlsLength; u++) {
            const url = _parseString(urlsData, u * 32);

            if (url == null) {
              logger.throwError("CCIP Read contained corrupt URL string", _logger.Logger.errors.CALL_EXCEPTION, {
                name: "OffchainLookup",
                signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                transaction,
                data: result
              });
            }

            urls.push(url);
          } // Get the CCIP calldata to forward


          const calldata = _parseBytes(data, 64); // Get the callbackSelector (bytes4)


          if (!_bignumber.BigNumber.from((0, _bytes.hexDataSlice)(data, 100, 128)).isZero()) {
            logger.throwError("CCIP Read callback selector included junk", _logger.Logger.errors.CALL_EXCEPTION, {
              name: "OffchainLookup",
              signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
              transaction,
              data: result
            });
          }

          const callbackSelector = (0, _bytes.hexDataSlice)(data, 96, 100); // Get the extra data to send back to the contract as context

          const extraData = _parseBytes(data, 128);

          const ccipResult = yield this.ccipReadFetch(transaction, calldata, urls);

          if (ccipResult == null) {
            logger.throwError("CCIP Read disabled or provided no URLs", _logger.Logger.errors.CALL_EXCEPTION, {
              name: "OffchainLookup",
              signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
              transaction,
              data: result
            });
          }

          const tx = {
            to: txSender,
            data: (0, _bytes.hexConcat)([callbackSelector, encodeBytes([ccipResult, extraData])])
          };
          return this._call(tx, blockTag, attempt + 1);
        } catch (error) {
          if (error.code === _logger.Logger.errors.SERVER_ERROR) {
            throw error;
          }
        }
      }

      try {
        return (0, _bytes.hexlify)(result);
      } catch (error) {
        return logger.throwError("bad result from backend", _logger.Logger.errors.SERVER_ERROR, {
          method: "call",
          params: {
            transaction,
            blockTag
          },
          result,
          error
        });
      }
    });
  }

  call(transaction, blockTag) {
    return __awaiter(this, void 0, void 0, function* () {
      yield this.getNetwork();
      const resolved = yield (0, _properties.resolveProperties)({
        transaction: this._getTransactionRequest(transaction),
        blockTag: this._getBlockTag(blockTag),
        ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)
      });
      return this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0 : -1);
    });
  }

  estimateGas(transaction) {
    return __awaiter(this, void 0, void 0, function* () {
      yield this.getNetwork();
      const params = yield (0, _properties.resolveProperties)({
        transaction: this._getTransactionRequest(transaction)
      });
      const result = yield this.perform("estimateGas", params);

      try {
        return _bignumber.BigNumber.from(result);
      } catch (error) {
        return logger.throwError("bad result from backend", _logger.Logger.errors.SERVER_ERROR, {
          method: "estimateGas",
          params,
          result,
          error
        });
      }
    });
  }

  _getAddress(addressOrName) {
    return __awaiter(this, void 0, void 0, function* () {
      addressOrName = yield addressOrName;

      if (typeof addressOrName !== "string") {
        logger.throwArgumentError("invalid address or ENS name", "name", addressOrName);
      }

      const address = yield this.resolveName(addressOrName);

      if (address == null) {
        logger.throwError("ENS name not configured", _logger.Logger.errors.UNSUPPORTED_OPERATION, {
          operation: `resolveName(${JSON.stringify(addressOrName)})`
        });
      }

      return address;
    });
  }

  _getBlock(blockHashOrBlockTag, includeTransactions) {
    return __awaiter(this, void 0, void 0, function* () {
      yield this.getNetwork();
      blockHashOrBlockTag = yield blockHashOrBlockTag; // If blockTag is a number (not "latest", etc), this is the block number

      let blockNumber = -128;
      const params = {
        includeTransactions: !!includeTransactions
      };

      if ((0, _bytes.isHexString)(blockHashOrBlockTag, 32)) {
        params.blockHash = blockHashOrBlockTag;
      } else {
        try {
          params.blockTag = yield this._getBlockTag(blockHashOrBlockTag);

          if ((0, _bytes.isHexString)(params.blockTag)) {
            blockNumber = parseInt(params.blockTag.substring(2), 16);
          }
        } catch (error) {
          logger.throwArgumentError("invalid block hash or block tag", "blockHashOrBlockTag", blockHashOrBlockTag);
        }
      }

      return (0, _web.poll)(() => __awaiter(this, void 0, void 0, function* () {
        const block = yield this.perform("getBlock", params); // Block was not found

        if (block == null) {
          // For blockhashes, if we didn't say it existed, that blockhash may
          // not exist. If we did see it though, perhaps from a log, we know
          // it exists, and this node is just not caught up yet.
          if (params.blockHash != null) {
            if (this._emitted["b:" + params.blockHash] == null) {
              return null;
            }
          } // For block tags, if we are asking for a future block, we return null


          if (params.blockTag != null) {
            if (blockNumber > this._emitted.block) {
              return null;
            }
          } // Retry on the next block


          return undefined;
        } // Add transactions


        if (includeTransactions) {
          let blockNumber = null;

          for (let i = 0; i < block.transactions.length; i++) {
            const tx = block.transactions[i];

            if (tx.blockNumber == null) {
              tx.confirmations = 0;
            } else if (tx.confirmations == null) {
              if (blockNumber == null) {
                blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
              } // Add the confirmations using the fast block number (pessimistic)


              let confirmations = blockNumber - tx.blockNumber + 1;

              if (confirmations <= 0) {
                confirmations = 1;
              }

              tx.confirmations = confirmations;
            }
          }

          const blockWithTxs = this.formatter.blockWithTransactions(block);
          blockWithTxs.transactions = blockWithTxs.transactions.map(tx => this._wrapTransaction(tx));
          return blockWithTxs;
        }

        return this.formatter.block(block);
      }), {
        oncePoll: this
      });
    });
  }

  getBlock(blockHashOrBlockTag) {
    return this._getBlock(blockHashOrBlockTag, false);
  }

  getBlockWithTransactions(blockHashOrBlockTag) {
    return this._getBlock(blockHashOrBlockTag, true);
  }

  getTransaction(transactionHash) {
    return __awaiter(this, void 0, void 0, function* () {
      yield this.getNetwork();
      transactionHash = yield transactionHash;
      const params = {
        transactionHash: this.formatter.hash(transactionHash, true)
      };
      return (0, _web.poll)(() => __awaiter(this, void 0, void 0, function* () {
        const result = yield this.perform("getTransaction", params);

        if (result == null) {
          if (this._emitted["t:" + transactionHash] == null) {
            return null;
          }

          return undefined;
        }

        const tx = this.formatter.transactionResponse(result);

        if (tx.blockNumber == null) {
          tx.confirmations = 0;
        } else if (tx.confirmations == null) {
          const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval); // Add the confirmations using the fast block number (pessimistic)

          let confirmations = blockNumber - tx.blockNumber + 1;

          if (confirmations <= 0) {
            confirmations = 1;
          }

          tx.confirmations = confirmations;
        }

        return this._wrapTransaction(tx);
      }), {
        oncePoll: this
      });
    });
  }

  getTransactionReceipt(transactionHash) {
    return __awaiter(this, void 0, void 0, function* () {
      yield this.getNetwork();
      transactionHash = yield transactionHash;
      const params = {
        transactionHash: this.formatter.hash(transactionHash, true)
      };
      return (0, _web.poll)(() => __awaiter(this, void 0, void 0, function* () {
        const result = yield this.perform("getTransactionReceipt", params);

        if (result == null) {
          if (this._emitted["t:" + transactionHash] == null) {
            return null;
          }

          return undefined;
        } // "geth-etc" returns receipts before they are ready


        if (result.blockHash == null) {
          return undefined;
        }

        const receipt = this.formatter.receipt(result);

        if (receipt.blockNumber == null) {
          receipt.confirmations = 0;
        } else if (receipt.confirmations == null) {
          const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval); // Add the confirmations using the fast block number (pessimistic)

          let confirmations = blockNumber - receipt.blockNumber + 1;

          if (confirmations <= 0) {
            confirmations = 1;
          }

          receipt.confirmations = confirmations;
        }

        return receipt;
      }), {
        oncePoll: this
      });
    });
  }

  getLogs(filter) {
    return __awaiter(this, void 0, void 0, function* () {
      yield this.getNetwork();
      const params = yield (0, _properties.resolveProperties)({
        filter: this._getFilter(filter)
      });
      const logs = yield this.perform("getLogs", params);
      logs.forEach(log => {
        if (log.removed == null) {
          log.removed = false;
        }
      });
      return _formatter.Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);
    });
  }

  getEtherPrice() {
    return __awaiter(this, void 0, void 0, function* () {
      yield this.getNetwork();
      return this.perform("getEtherPrice", {});
    });
  }

  _getBlockTag(blockTag) {
    return __awaiter(this, void 0, void 0, function* () {
      blockTag = yield blockTag;

      if (typeof blockTag === "number" && blockTag < 0) {
        if (blockTag % 1) {
          logger.throwArgumentError("invalid BlockTag", "blockTag", blockTag);
        }

        let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
        blockNumber += blockTag;

        if (blockNumber < 0) {
          blockNumber = 0;
        }

        return this.formatter.blockTag(blockNumber);
      }

      return this.formatter.blockTag(blockTag);
    });
  }

  getResolver(name) {
    return __awaiter(this, void 0, void 0, function* () {
      let currentName = name;

      while (true) {
        if (currentName === "" || currentName === ".") {
          return null;
        } // Optimization since the eth node cannot change and does
        // not have a wildcar resolver


        if (name !== "eth" && currentName === "eth") {
          return null;
        } // Check the current node for a resolver


        const addr = yield this._getResolver(currentName, "getResolver"); // Found a resolver!

        if (addr != null) {
          const resolver = new Resolver(this, addr, name); // Legacy resolver found, using EIP-2544 so it isn't safe to use

          if (currentName !== name && !(yield resolver.supportsWildcard())) {
            return null;
          }

          return resolver;
        } // Get the parent node


        currentName = currentName.split(".").slice(1).join(".");
      }
    });
  }

  _getResolver(name, operation) {
    return __awaiter(this, void 0, void 0, function* () {
      if (operation == null) {
        operation = "ENS";
      }

      const network = yield this.getNetwork(); // No ENS...

      if (!network.ensAddress) {
        logger.throwError("network does not support ENS", _logger.Logger.errors.UNSUPPORTED_OPERATION, {
          operation,
          network: network.name
        });
      }

      try {
        // keccak256("resolver(bytes32)")
        const addrData = yield this.call({
          to: network.ensAddress,
          data: "0x0178b8bf" + (0, _hash.namehash)(name).substring(2)
        });
        return this.formatter.callAddress(addrData);
      } catch (error) {// ENS registry cannot throw errors on resolver(bytes32)
      }

      return null;
    });
  }

  resolveName(name) {
    return __awaiter(this, void 0, void 0, function* () {
      name = yield name; // If it is already an address, nothing to resolve

      try {
        return Promise.resolve(this.formatter.address(name));
      } catch (error) {
        // If is is a hexstring, the address is bad (See #694)
        if ((0, _bytes.isHexString)(name)) {
          throw error;
        }
      }

      if (typeof name !== "string") {
        logger.throwArgumentError("invalid ENS name", "name", name);
      } // Get the addr from the resovler


      const resolver = yield this.getResolver(name);

      if (!resolver) {
        return null;
      }

      return yield resolver.getAddress();
    });
  }

  lookupAddress(address) {
    return __awaiter(this, void 0, void 0, function* () {
      address = yield address;
      address = this.formatter.address(address);
      const node = address.substring(2).toLowerCase() + ".addr.reverse";
      const resolverAddr = yield this._getResolver(node, "lookupAddress");

      if (resolverAddr == null) {
        return null;
      } // keccak("name(bytes32)")


      const name = _parseString(yield this.call({
        to: resolverAddr,
        data: "0x691f3431" + (0, _hash.namehash)(node).substring(2)
      }), 0);

      const addr = yield this.resolveName(name);

      if (addr != address) {
        return null;
      }

      return name;
    });
  }

  getAvatar(nameOrAddress) {
    return __awaiter(this, void 0, void 0, function* () {
      let resolver = null;

      if ((0, _bytes.isHexString)(nameOrAddress)) {
        // Address; reverse lookup
        const address = this.formatter.address(nameOrAddress);
        const node = address.substring(2).toLowerCase() + ".addr.reverse";
        const resolverAddress = yield this._getResolver(node, "getAvatar");

        if (!resolverAddress) {
          return null;
        } // Try resolving the avatar against the addr.reverse resolver


        resolver = new Resolver(this, resolverAddress, node);

        try {
          const avatar = yield resolver.getAvatar();

          if (avatar) {
            return avatar.url;
          }
        } catch (error) {
          if (error.code !== _logger.Logger.errors.CALL_EXCEPTION) {
            throw error;
          }
        } // Try getting the name and performing forward lookup; allowing wildcards


        try {
          // keccak("name(bytes32)")
          const name = _parseString(yield this.call({
            to: resolverAddress,
            data: "0x691f3431" + (0, _hash.namehash)(node).substring(2)
          }), 0);

          resolver = yield this.getResolver(name);
        } catch (error) {
          if (error.code !== _logger.Logger.errors.CALL_EXCEPTION) {
            throw error;
          }

          return null;
        }
      } else {
        // ENS name; forward lookup with wildcard
        resolver = yield this.getResolver(nameOrAddress);

        if (!resolver) {
          return null;
        }
      }

      const avatar = yield resolver.getAvatar();

      if (avatar == null) {
        return null;
      }

      return avatar.url;
    });
  }

  perform(method, params) {
    return logger.throwError(method + " not implemented", _logger.Logger.errors.NOT_IMPLEMENTED, {
      operation: method
    });
  }

  _startEvent(event) {
    this.polling = this._events.filter(e => e.pollable()).length > 0;
  }

  _stopEvent(event) {
    this.polling = this._events.filter(e => e.pollable()).length > 0;
  }

  _addEventListener(eventName, listener, once) {
    const event = new Event(getEventTag(eventName), listener, once);

    this._events.push(event);

    this._startEvent(event);

    return this;
  }

  on(eventName, listener) {
    return this._addEventListener(eventName, listener, false);
  }

  once(eventName, listener) {
    return this._addEventListener(eventName, listener, true);
  }

  emit(eventName, ...args) {
    let result = false;
    let stopped = [];
    let eventTag = getEventTag(eventName);
    this._events = this._events.filter(event => {
      if (event.tag !== eventTag) {
        return true;
      }

      setTimeout(() => {
        event.listener.apply(this, args);
      }, 0);
      result = true;

      if (event.once) {
        stopped.push(event);
        return false;
      }

      return true;
    });
    stopped.forEach(event => {
      this._stopEvent(event);
    });
    return result;
  }

  listenerCount(eventName) {
    if (!eventName) {
      return this._events.length;
    }

    let eventTag = getEventTag(eventName);
    return this._events.filter(event => {
      return event.tag === eventTag;
    }).length;
  }

  listeners(eventName) {
    if (eventName == null) {
      return this._events.map(event => event.listener);
    }

    let eventTag = getEventTag(eventName);
    return this._events.filter(event => event.tag === eventTag).map(event => event.listener);
  }

  off(eventName, listener) {
    if (listener == null) {
      return this.removeAllListeners(eventName);
    }

    const stopped = [];
    let found = false;
    let eventTag = getEventTag(eventName);
    this._events = this._events.filter(event => {
      if (event.tag !== eventTag || event.listener != listener) {
        return true;
      }

      if (found) {
        return true;
      }

      found = true;
      stopped.push(event);
      return false;
    });
    stopped.forEach(event => {
      this._stopEvent(event);
    });
    return this;
  }

  removeAllListeners(eventName) {
    let stopped = [];

    if (eventName == null) {
      stopped = this._events;
      this._events = [];
    } else {
      const eventTag = getEventTag(eventName);
      this._events = this._events.filter(event => {
        if (event.tag !== eventTag) {
          return true;
        }

        stopped.push(event);
        return false;
      });
    }

    stopped.forEach(event => {
      this._stopEvent(event);
    });
    return this;
  }

}

exports.BaseProvider = BaseProvider;
},{"@ethersproject/abstract-provider":"../../node_modules/@ethersproject/abstract-provider/lib.esm/index.js","@ethersproject/basex":"../../node_modules/@ethersproject/basex/lib.esm/index.js","@ethersproject/bignumber":"../../node_modules/@ethersproject/bignumber/lib.esm/index.js","@ethersproject/bytes":"../../node_modules/@ethersproject/bytes/lib.esm/index.js","@ethersproject/constants":"../../node_modules/@ethersproject/constants/lib.esm/index.js","@ethersproject/hash":"../../node_modules/@ethersproject/hash/lib.esm/index.js","@ethersproject/networks":"../../node_modules/@ethersproject/networks/lib.esm/index.js","@ethersproject/properties":"../../node_modules/@ethersproject/properties/lib.esm/index.js","@ethersproject/sha2":"../../node_modules/@ethersproject/sha2/lib.esm/index.js","@ethersproject/strings":"../../node_modules/@ethersproject/strings/lib.esm/index.js","@ethersproject/web":"../../node_modules/@ethersproject/web/lib.esm/index.js","bech32":"../../node_modules/bech32/index.js","@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","./_version":"../../node_modules/@ethersproject/providers/lib.esm/_version.js","./formatter":"../../node_modules/@ethersproject/providers/lib.esm/formatter.js"}],"../../node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JsonRpcSigner = exports.JsonRpcProvider = void 0;

var _abstractSigner = require("@ethersproject/abstract-signer");

var _bignumber = require("@ethersproject/bignumber");

var _bytes = require("@ethersproject/bytes");

var _hash = require("@ethersproject/hash");

var _properties = require("@ethersproject/properties");

var _strings = require("@ethersproject/strings");

var _transactions = require("@ethersproject/transactions");

var _web = require("@ethersproject/web");

var _logger = require("@ethersproject/logger");

var _version = require("./_version");

var _baseProvider = require("./base-provider");

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

const logger = new _logger.Logger(_version.version);
const errorGas = ["call", "estimateGas"];

function spelunk(value) {
  if (value == null) {
    return null;
  } // These *are* the droids we're looking for.


  if (typeof value.message === "string" && value.message.match("reverted") && (0, _bytes.isHexString)(value.data)) {
    return {
      message: value.message,
      data: value.data
    };
  } // Spelunk further...


  if (typeof value === "object") {
    for (const key in value) {
      const result = spelunk(value[key]);

      if (result) {
        return result;
      }
    }

    return null;
  } // Might be a JSON string we can further descend...


  if (typeof value === "string") {
    try {
      return spelunk(JSON.parse(value));
    } catch (error) {}
  }

  return null;
}

function checkError(method, error, params) {
  // Undo the "convenience" some nodes are attempting to prevent backwards
  // incompatibility; maybe for v6 consider forwarding reverts as errors
  if (method === "call") {
    const result = spelunk(error);

    if (result) {
      return result.data;
    }

    logger.throwError("missing revert data in call exception; Transaction reverted without a reason string", _logger.Logger.errors.CALL_EXCEPTION, {
      error,
      data: "0x"
    });
  } // @TODO: Should we spelunk for message too?


  let message = error.message;

  if (error.code === _logger.Logger.errors.SERVER_ERROR && error.error && typeof error.error.message === "string") {
    message = error.error.message;
  } else if (typeof error.body === "string") {
    message = error.body;
  } else if (typeof error.responseText === "string") {
    message = error.responseText;
  }

  message = (message || "").toLowerCase();
  const transaction = params.transaction || params.signedTransaction; // "insufficient funds for gas * price + value + cost(data)"

  if (message.match(/insufficient funds|base fee exceeds gas limit/)) {
    logger.throwError("insufficient funds for intrinsic transaction cost", _logger.Logger.errors.INSUFFICIENT_FUNDS, {
      error,
      method,
      transaction
    });
  } // "nonce too low"


  if (message.match(/nonce (is )?too low/)) {
    logger.throwError("nonce has already been used", _logger.Logger.errors.NONCE_EXPIRED, {
      error,
      method,
      transaction
    });
  } // "replacement transaction underpriced"


  if (message.match(/replacement transaction underpriced/)) {
    logger.throwError("replacement fee too low", _logger.Logger.errors.REPLACEMENT_UNDERPRICED, {
      error,
      method,
      transaction
    });
  } // "replacement transaction underpriced"


  if (message.match(/only replay-protected/)) {
    logger.throwError("legacy pre-eip-155 transactions not supported", _logger.Logger.errors.UNSUPPORTED_OPERATION, {
      error,
      method,
      transaction
    });
  }

  if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted/)) {
    logger.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", _logger.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
      error,
      method,
      transaction
    });
  }

  throw error;
}

function timer(timeout) {
  return new Promise(function (resolve) {
    setTimeout(resolve, timeout);
  });
}

function getResult(payload) {
  if (payload.error) {
    // @TODO: not any
    const error = new Error(payload.error.message);
    error.code = payload.error.code;
    error.data = payload.error.data;
    throw error;
  }

  return payload.result;
}

function getLowerCase(value) {
  if (value) {
    return value.toLowerCase();
  }

  return value;
}

const _constructorGuard = {};

class JsonRpcSigner extends _abstractSigner.Signer {
  constructor(constructorGuard, provider, addressOrIndex) {
    logger.checkNew(new.target, JsonRpcSigner);
    super();

    if (constructorGuard !== _constructorGuard) {
      throw new Error("do not call the JsonRpcSigner constructor directly; use provider.getSigner");
    }

    (0, _properties.defineReadOnly)(this, "provider", provider);

    if (addressOrIndex == null) {
      addressOrIndex = 0;
    }

    if (typeof addressOrIndex === "string") {
      (0, _properties.defineReadOnly)(this, "_address", this.provider.formatter.address(addressOrIndex));
      (0, _properties.defineReadOnly)(this, "_index", null);
    } else if (typeof addressOrIndex === "number") {
      (0, _properties.defineReadOnly)(this, "_index", addressOrIndex);
      (0, _properties.defineReadOnly)(this, "_address", null);
    } else {
      logger.throwArgumentError("invalid address or index", "addressOrIndex", addressOrIndex);
    }
  }

  connect(provider) {
    return logger.throwError("cannot alter JSON-RPC Signer connection", _logger.Logger.errors.UNSUPPORTED_OPERATION, {
      operation: "connect"
    });
  }

  connectUnchecked() {
    return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);
  }

  getAddress() {
    if (this._address) {
      return Promise.resolve(this._address);
    }

    return this.provider.send("eth_accounts", []).then(accounts => {
      if (accounts.length <= this._index) {
        logger.throwError("unknown account #" + this._index, _logger.Logger.errors.UNSUPPORTED_OPERATION, {
          operation: "getAddress"
        });
      }

      return this.provider.formatter.address(accounts[this._index]);
    });
  }

  sendUncheckedTransaction(transaction) {
    transaction = (0, _properties.shallowCopy)(transaction);
    const fromAddress = this.getAddress().then(address => {
      if (address) {
        address = address.toLowerCase();
      }

      return address;
    }); // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user
    // wishes to use this, it is easy to specify explicitly, otherwise
    // we look it up for them.

    if (transaction.gasLimit == null) {
      const estimate = (0, _properties.shallowCopy)(transaction);
      estimate.from = fromAddress;
      transaction.gasLimit = this.provider.estimateGas(estimate);
    }

    if (transaction.to != null) {
      transaction.to = Promise.resolve(transaction.to).then(to => __awaiter(this, void 0, void 0, function* () {
        if (to == null) {
          return null;
        }

        const address = yield this.provider.resolveName(to);

        if (address == null) {
          logger.throwArgumentError("provided ENS name resolves to null", "tx.to", to);
        }

        return address;
      }));
    }

    return (0, _properties.resolveProperties)({
      tx: (0, _properties.resolveProperties)(transaction),
      sender: fromAddress
    }).then(({
      tx,
      sender
    }) => {
      if (tx.from != null) {
        if (tx.from.toLowerCase() !== sender) {
          logger.throwArgumentError("from address mismatch", "transaction", transaction);
        }
      } else {
        tx.from = sender;
      }

      const hexTx = this.provider.constructor.hexlifyTransaction(tx, {
        from: true
      });
      return this.provider.send("eth_sendTransaction", [hexTx]).then(hash => {
        return hash;
      }, error => {
        return checkError("sendTransaction", error, hexTx);
      });
    });
  }

  signTransaction(transaction) {
    return logger.throwError("signing transactions is unsupported", _logger.Logger.errors.UNSUPPORTED_OPERATION, {
      operation: "signTransaction"
    });
  }

  sendTransaction(transaction) {
    return __awaiter(this, void 0, void 0, function* () {
      // This cannot be mined any earlier than any recent block
      const blockNumber = yield this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval); // Send the transaction

      const hash = yield this.sendUncheckedTransaction(transaction);

      try {
        // Unfortunately, JSON-RPC only provides and opaque transaction hash
        // for a response, and we need the actual transaction, so we poll
        // for it; it should show up very quickly
        return yield (0, _web.poll)(() => __awaiter(this, void 0, void 0, function* () {
          const tx = yield this.provider.getTransaction(hash);

          if (tx === null) {
            return undefined;
          }

          return this.provider._wrapTransaction(tx, hash, blockNumber);
        }), {
          oncePoll: this.provider
        });
      } catch (error) {
        error.transactionHash = hash;
        throw error;
      }
    });
  }

  signMessage(message) {
    return __awaiter(this, void 0, void 0, function* () {
      const data = typeof message === "string" ? (0, _strings.toUtf8Bytes)(message) : message;
      const address = yield this.getAddress();
      return yield this.provider.send("personal_sign", [(0, _bytes.hexlify)(data), address.toLowerCase()]);
    });
  }

  _legacySignMessage(message) {
    return __awaiter(this, void 0, void 0, function* () {
      const data = typeof message === "string" ? (0, _strings.toUtf8Bytes)(message) : message;
      const address = yield this.getAddress(); // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign

      return yield this.provider.send("eth_sign", [address.toLowerCase(), (0, _bytes.hexlify)(data)]);
    });
  }

  _signTypedData(domain, types, value) {
    return __awaiter(this, void 0, void 0, function* () {
      // Populate any ENS names (in-place)
      const populated = yield _hash._TypedDataEncoder.resolveNames(domain, types, value, name => {
        return this.provider.resolveName(name);
      });
      const address = yield this.getAddress();
      return yield this.provider.send("eth_signTypedData_v4", [address.toLowerCase(), JSON.stringify(_hash._TypedDataEncoder.getPayload(populated.domain, types, populated.value))]);
    });
  }

  unlock(password) {
    return __awaiter(this, void 0, void 0, function* () {
      const provider = this.provider;
      const address = yield this.getAddress();
      return provider.send("personal_unlockAccount", [address.toLowerCase(), password, null]);
    });
  }

}

exports.JsonRpcSigner = JsonRpcSigner;

class UncheckedJsonRpcSigner extends JsonRpcSigner {
  sendTransaction(transaction) {
    return this.sendUncheckedTransaction(transaction).then(hash => {
      return {
        hash: hash,
        nonce: null,
        gasLimit: null,
        gasPrice: null,
        data: null,
        value: null,
        chainId: null,
        confirmations: 0,
        from: null,
        wait: confirmations => {
          return this.provider.waitForTransaction(hash, confirmations);
        }
      };
    });
  }

}

const allowedTransactionKeys = {
  chainId: true,
  data: true,
  gasLimit: true,
  gasPrice: true,
  nonce: true,
  to: true,
  value: true,
  type: true,
  accessList: true,
  maxFeePerGas: true,
  maxPriorityFeePerGas: true
};

class JsonRpcProvider extends _baseProvider.BaseProvider {
  constructor(url, network) {
    logger.checkNew(new.target, JsonRpcProvider);
    let networkOrReady = network; // The network is unknown, query the JSON-RPC for it

    if (networkOrReady == null) {
      networkOrReady = new Promise((resolve, reject) => {
        setTimeout(() => {
          this.detectNetwork().then(network => {
            resolve(network);
          }, error => {
            reject(error);
          });
        }, 0);
      });
    }

    super(networkOrReady); // Default URL

    if (!url) {
      url = (0, _properties.getStatic)(this.constructor, "defaultUrl")();
    }

    if (typeof url === "string") {
      (0, _properties.defineReadOnly)(this, "connection", Object.freeze({
        url: url
      }));
    } else {
      (0, _properties.defineReadOnly)(this, "connection", Object.freeze((0, _properties.shallowCopy)(url)));
    }

    this._nextId = 42;
  }

  get _cache() {
    if (this._eventLoopCache == null) {
      this._eventLoopCache = {};
    }

    return this._eventLoopCache;
  }

  static defaultUrl() {
    return "http:/\/localhost:8545";
  }

  detectNetwork() {
    if (!this._cache["detectNetwork"]) {
      this._cache["detectNetwork"] = this._uncachedDetectNetwork(); // Clear this cache at the beginning of the next event loop

      setTimeout(() => {
        this._cache["detectNetwork"] = null;
      }, 0);
    }

    return this._cache["detectNetwork"];
  }

  _uncachedDetectNetwork() {
    return __awaiter(this, void 0, void 0, function* () {
      yield timer(0);
      let chainId = null;

      try {
        chainId = yield this.send("eth_chainId", []);
      } catch (error) {
        try {
          chainId = yield this.send("net_version", []);
        } catch (error) {}
      }

      if (chainId != null) {
        const getNetwork = (0, _properties.getStatic)(this.constructor, "getNetwork");

        try {
          return getNetwork(_bignumber.BigNumber.from(chainId).toNumber());
        } catch (error) {
          return logger.throwError("could not detect network", _logger.Logger.errors.NETWORK_ERROR, {
            chainId: chainId,
            event: "invalidNetwork",
            serverError: error
          });
        }
      }

      return logger.throwError("could not detect network", _logger.Logger.errors.NETWORK_ERROR, {
        event: "noNetwork"
      });
    });
  }

  getSigner(addressOrIndex) {
    return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);
  }

  getUncheckedSigner(addressOrIndex) {
    return this.getSigner(addressOrIndex).connectUnchecked();
  }

  listAccounts() {
    return this.send("eth_accounts", []).then(accounts => {
      return accounts.map(a => this.formatter.address(a));
    });
  }

  send(method, params) {
    const request = {
      method: method,
      params: params,
      id: this._nextId++,
      jsonrpc: "2.0"
    };
    this.emit("debug", {
      action: "request",
      request: (0, _properties.deepCopy)(request),
      provider: this
    }); // We can expand this in the future to any call, but for now these
    // are the biggest wins and do not require any serializing parameters.

    const cache = ["eth_chainId", "eth_blockNumber"].indexOf(method) >= 0;

    if (cache && this._cache[method]) {
      return this._cache[method];
    }

    const result = (0, _web.fetchJson)(this.connection, JSON.stringify(request), getResult).then(result => {
      this.emit("debug", {
        action: "response",
        request: request,
        response: result,
        provider: this
      });
      return result;
    }, error => {
      this.emit("debug", {
        action: "response",
        error: error,
        request: request,
        provider: this
      });
      throw error;
    }); // Cache the fetch, but clear it on the next event loop

    if (cache) {
      this._cache[method] = result;
      setTimeout(() => {
        this._cache[method] = null;
      }, 0);
    }

    return result;
  }

  prepareRequest(method, params) {
    switch (method) {
      case "getBlockNumber":
        return ["eth_blockNumber", []];

      case "getGasPrice":
        return ["eth_gasPrice", []];

      case "getBalance":
        return ["eth_getBalance", [getLowerCase(params.address), params.blockTag]];

      case "getTransactionCount":
        return ["eth_getTransactionCount", [getLowerCase(params.address), params.blockTag]];

      case "getCode":
        return ["eth_getCode", [getLowerCase(params.address), params.blockTag]];

      case "getStorageAt":
        return ["eth_getStorageAt", [getLowerCase(params.address), params.position, params.blockTag]];

      case "sendTransaction":
        return ["eth_sendRawTransaction", [params.signedTransaction]];

      case "getBlock":
        if (params.blockTag) {
          return ["eth_getBlockByNumber", [params.blockTag, !!params.includeTransactions]];
        } else if (params.blockHash) {
          return ["eth_getBlockByHash", [params.blockHash, !!params.includeTransactions]];
        }

        return null;

      case "getTransaction":
        return ["eth_getTransactionByHash", [params.transactionHash]];

      case "getTransactionReceipt":
        return ["eth_getTransactionReceipt", [params.transactionHash]];

      case "call":
        {
          const hexlifyTransaction = (0, _properties.getStatic)(this.constructor, "hexlifyTransaction");
          return ["eth_call", [hexlifyTransaction(params.transaction, {
            from: true
          }), params.blockTag]];
        }

      case "estimateGas":
        {
          const hexlifyTransaction = (0, _properties.getStatic)(this.constructor, "hexlifyTransaction");
          return ["eth_estimateGas", [hexlifyTransaction(params.transaction, {
            from: true
          })]];
        }

      case "getLogs":
        if (params.filter && params.filter.address != null) {
          params.filter.address = getLowerCase(params.filter.address);
        }

        return ["eth_getLogs", [params.filter]];

      default:
        break;
    }

    return null;
  }

  perform(method, params) {
    return __awaiter(this, void 0, void 0, function* () {
      // Legacy networks do not like the type field being passed along (which
      // is fair), so we delete type if it is 0 and a non-EIP-1559 network
      if (method === "call" || method === "estimateGas") {
        const tx = params.transaction;

        if (tx && tx.type != null && _bignumber.BigNumber.from(tx.type).isZero()) {
          // If there are no EIP-1559 properties, it might be non-EIP-a559
          if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {
            const feeData = yield this.getFeeData();

            if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {
              // Network doesn't know about EIP-1559 (and hence type)
              params = (0, _properties.shallowCopy)(params);
              params.transaction = (0, _properties.shallowCopy)(tx);
              delete params.transaction.type;
            }
          }
        }
      }

      const args = this.prepareRequest(method, params);

      if (args == null) {
        logger.throwError(method + " not implemented", _logger.Logger.errors.NOT_IMPLEMENTED, {
          operation: method
        });
      }

      try {
        return yield this.send(args[0], args[1]);
      } catch (error) {
        return checkError(method, error, params);
      }
    });
  }

  _startEvent(event) {
    if (event.tag === "pending") {
      this._startPending();
    }

    super._startEvent(event);
  }

  _startPending() {
    if (this._pendingFilter != null) {
      return;
    }

    const self = this;
    const pendingFilter = this.send("eth_newPendingTransactionFilter", []);
    this._pendingFilter = pendingFilter;
    pendingFilter.then(function (filterId) {
      function poll() {
        self.send("eth_getFilterChanges", [filterId]).then(function (hashes) {
          if (self._pendingFilter != pendingFilter) {
            return null;
          }

          let seq = Promise.resolve();
          hashes.forEach(function (hash) {
            // @TODO: This should be garbage collected at some point... How? When?
            self._emitted["t:" + hash.toLowerCase()] = "pending";
            seq = seq.then(function () {
              return self.getTransaction(hash).then(function (tx) {
                self.emit("pending", tx);
                return null;
              });
            });
          });
          return seq.then(function () {
            return timer(1000);
          });
        }).then(function () {
          if (self._pendingFilter != pendingFilter) {
            self.send("eth_uninstallFilter", [filterId]);
            return;
          }

          setTimeout(function () {
            poll();
          }, 0);
          return null;
        }).catch(error => {});
      }

      poll();
      return filterId;
    }).catch(error => {});
  }

  _stopEvent(event) {
    if (event.tag === "pending" && this.listenerCount("pending") === 0) {
      this._pendingFilter = null;
    }

    super._stopEvent(event);
  } // Convert an ethers.js transaction into a JSON-RPC transaction
  //  - gasLimit => gas
  //  - All values hexlified
  //  - All numeric values zero-striped
  //  - All addresses are lowercased
  // NOTE: This allows a TransactionRequest, but all values should be resolved
  //       before this is called
  // @TODO: This will likely be removed in future versions and prepareRequest
  //        will be the preferred method for this.


  static hexlifyTransaction(transaction, allowExtra) {
    // Check only allowed properties are given
    const allowed = (0, _properties.shallowCopy)(allowedTransactionKeys);

    if (allowExtra) {
      for (const key in allowExtra) {
        if (allowExtra[key]) {
          allowed[key] = true;
        }
      }
    }

    (0, _properties.checkProperties)(transaction, allowed);
    const result = {}; // JSON-RPC now requires numeric values to be "quantity" values

    ["chainId", "gasLimit", "gasPrice", "type", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "value"].forEach(function (key) {
      if (transaction[key] == null) {
        return;
      }

      const value = (0, _bytes.hexValue)(transaction[key]);

      if (key === "gasLimit") {
        key = "gas";
      }

      result[key] = value;
    });
    ["from", "to", "data"].forEach(function (key) {
      if (transaction[key] == null) {
        return;
      }

      result[key] = (0, _bytes.hexlify)(transaction[key]);
    });

    if (transaction.accessList) {
      result["accessList"] = (0, _transactions.accessListify)(transaction.accessList);
    }

    return result;
  }

}

exports.JsonRpcProvider = JsonRpcProvider;
},{"@ethersproject/abstract-signer":"../../node_modules/@ethersproject/abstract-signer/lib.esm/index.js","@ethersproject/bignumber":"../../node_modules/@ethersproject/bignumber/lib.esm/index.js","@ethersproject/bytes":"../../node_modules/@ethersproject/bytes/lib.esm/index.js","@ethersproject/hash":"../../node_modules/@ethersproject/hash/lib.esm/index.js","@ethersproject/properties":"../../node_modules/@ethersproject/properties/lib.esm/index.js","@ethersproject/strings":"../../node_modules/@ethersproject/strings/lib.esm/index.js","@ethersproject/transactions":"../../node_modules/@ethersproject/transactions/lib.esm/index.js","@ethersproject/web":"../../node_modules/@ethersproject/web/lib.esm/index.js","@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","./_version":"../../node_modules/@ethersproject/providers/lib.esm/_version.js","./base-provider":"../../node_modules/@ethersproject/providers/lib.esm/base-provider.js"}],"../../node_modules/@ethersproject/providers/lib.esm/ws.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WebSocket = void 0;

var _logger = require("@ethersproject/logger");

var _version = require("./_version");

let WS = null;
exports.WebSocket = WS;

try {
  exports.WebSocket = WS = WebSocket;

  if (WS == null) {
    throw new Error("inject please");
  }
} catch (error) {
  const logger = new _logger.Logger(_version.version);

  exports.WebSocket = WS = function () {
    logger.throwError("WebSockets not supported in this environment", _logger.Logger.errors.UNSUPPORTED_OPERATION, {
      operation: "new WebSocket()"
    });
  };
} //export default WS;
//module.exports = WS;
},{"@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","./_version":"../../node_modules/@ethersproject/providers/lib.esm/_version.js"}],"../../node_modules/@ethersproject/providers/lib.esm/websocket-provider.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WebSocketProvider = void 0;

var _bignumber = require("@ethersproject/bignumber");

var _properties = require("@ethersproject/properties");

var _jsonRpcProvider = require("./json-rpc-provider");

var _ws = require("./ws");

var _logger = require("@ethersproject/logger");

var _version = require("./_version");

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

const logger = new _logger.Logger(_version.version);
/**
 *  Notes:
 *
 *  This provider differs a bit from the polling providers. One main
 *  difference is how it handles consistency. The polling providers
 *  will stall responses to ensure a consistent state, while this
 *  WebSocket provider assumes the connected backend will manage this.
 *
 *  For example, if a polling provider emits an event which indicates
 *  the event occurred in blockhash XXX, a call to fetch that block by
 *  its hash XXX, if not present will retry until it is present. This
 *  can occur when querying a pool of nodes that are mildly out of sync
 *  with each other.
 */

let NextId = 1; // For more info about the Real-time Event API see:
//   https://geth.ethereum.org/docs/rpc/pubsub

class WebSocketProvider extends _jsonRpcProvider.JsonRpcProvider {
  constructor(url, network) {
    // This will be added in the future; please open an issue to expedite
    if (network === "any") {
      logger.throwError("WebSocketProvider does not support 'any' network yet", _logger.Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "network:any"
      });
    }

    if (typeof url === "string") {
      super(url, network);
    } else {
      super("_websocket", network);
    }

    this._pollingInterval = -1;
    this._wsReady = false;

    if (typeof url === "string") {
      (0, _properties.defineReadOnly)(this, "_websocket", new _ws.WebSocket(this.connection.url));
    } else {
      (0, _properties.defineReadOnly)(this, "_websocket", url);
    }

    (0, _properties.defineReadOnly)(this, "_requests", {});
    (0, _properties.defineReadOnly)(this, "_subs", {});
    (0, _properties.defineReadOnly)(this, "_subIds", {});
    (0, _properties.defineReadOnly)(this, "_detectNetwork", super.detectNetwork()); // Stall sending requests until the socket is open...

    this.websocket.onopen = () => {
      this._wsReady = true;
      Object.keys(this._requests).forEach(id => {
        this.websocket.send(this._requests[id].payload);
      });
    };

    this.websocket.onmessage = messageEvent => {
      const data = messageEvent.data;
      const result = JSON.parse(data);

      if (result.id != null) {
        const id = String(result.id);
        const request = this._requests[id];
        delete this._requests[id];

        if (result.result !== undefined) {
          request.callback(null, result.result);
          this.emit("debug", {
            action: "response",
            request: JSON.parse(request.payload),
            response: result.result,
            provider: this
          });
        } else {
          let error = null;

          if (result.error) {
            error = new Error(result.error.message || "unknown error");
            (0, _properties.defineReadOnly)(error, "code", result.error.code || null);
            (0, _properties.defineReadOnly)(error, "response", data);
          } else {
            error = new Error("unknown error");
          }

          request.callback(error, undefined);
          this.emit("debug", {
            action: "response",
            error: error,
            request: JSON.parse(request.payload),
            provider: this
          });
        }
      } else if (result.method === "eth_subscription") {
        // Subscription...
        const sub = this._subs[result.params.subscription];

        if (sub) {
          //this.emit.apply(this,                  );
          sub.processFunc(result.params.result);
        }
      } else {
        console.warn("this should not happen");
      }
    }; // This Provider does not actually poll, but we want to trigger
    // poll events for things that depend on them (like stalling for
    // block and transaction lookups)


    const fauxPoll = setInterval(() => {
      this.emit("poll");
    }, 1000);

    if (fauxPoll.unref) {
      fauxPoll.unref();
    }
  } // Cannot narrow the type of _websocket, as that is not backwards compatible
  // so we add a getter and let the WebSocket be a public API.


  get websocket() {
    return this._websocket;
  }

  detectNetwork() {
    return this._detectNetwork;
  }

  get pollingInterval() {
    return 0;
  }

  resetEventsBlock(blockNumber) {
    logger.throwError("cannot reset events block on WebSocketProvider", _logger.Logger.errors.UNSUPPORTED_OPERATION, {
      operation: "resetEventBlock"
    });
  }

  set pollingInterval(value) {
    logger.throwError("cannot set polling interval on WebSocketProvider", _logger.Logger.errors.UNSUPPORTED_OPERATION, {
      operation: "setPollingInterval"
    });
  }

  poll() {
    return __awaiter(this, void 0, void 0, function* () {
      return null;
    });
  }

  set polling(value) {
    if (!value) {
      return;
    }

    logger.throwError("cannot set polling on WebSocketProvider", _logger.Logger.errors.UNSUPPORTED_OPERATION, {
      operation: "setPolling"
    });
  }

  send(method, params) {
    const rid = NextId++;
    return new Promise((resolve, reject) => {
      function callback(error, result) {
        if (error) {
          return reject(error);
        }

        return resolve(result);
      }

      const payload = JSON.stringify({
        method: method,
        params: params,
        id: rid,
        jsonrpc: "2.0"
      });
      this.emit("debug", {
        action: "request",
        request: JSON.parse(payload),
        provider: this
      });
      this._requests[String(rid)] = {
        callback,
        payload
      };

      if (this._wsReady) {
        this.websocket.send(payload);
      }
    });
  }

  static defaultUrl() {
    return "ws:/\/localhost:8546";
  }

  _subscribe(tag, param, processFunc) {
    return __awaiter(this, void 0, void 0, function* () {
      let subIdPromise = this._subIds[tag];

      if (subIdPromise == null) {
        subIdPromise = Promise.all(param).then(param => {
          return this.send("eth_subscribe", param);
        });
        this._subIds[tag] = subIdPromise;
      }

      const subId = yield subIdPromise;
      this._subs[subId] = {
        tag,
        processFunc
      };
    });
  }

  _startEvent(event) {
    switch (event.type) {
      case "block":
        this._subscribe("block", ["newHeads"], result => {
          const blockNumber = _bignumber.BigNumber.from(result.number).toNumber();

          this._emitted.block = blockNumber;
          this.emit("block", blockNumber);
        });

        break;

      case "pending":
        this._subscribe("pending", ["newPendingTransactions"], result => {
          this.emit("pending", result);
        });

        break;

      case "filter":
        this._subscribe(event.tag, ["logs", this._getFilter(event.filter)], result => {
          if (result.removed == null) {
            result.removed = false;
          }

          this.emit(event.filter, this.formatter.filterLog(result));
        });

        break;

      case "tx":
        {
          const emitReceipt = event => {
            const hash = event.hash;
            this.getTransactionReceipt(hash).then(receipt => {
              if (!receipt) {
                return;
              }

              this.emit(hash, receipt);
            });
          }; // In case it is already mined


          emitReceipt(event); // To keep things simple, we start up a single newHeads subscription
          // to keep an eye out for transactions we are watching for.
          // Starting a subscription for an event (i.e. "tx") that is already
          // running is (basically) a nop.

          this._subscribe("tx", ["newHeads"], result => {
            this._events.filter(e => e.type === "tx").forEach(emitReceipt);
          });

          break;
        }
      // Nothing is needed

      case "debug":
      case "poll":
      case "willPoll":
      case "didPoll":
      case "error":
        break;

      default:
        console.log("unhandled:", event);
        break;
    }
  }

  _stopEvent(event) {
    let tag = event.tag;

    if (event.type === "tx") {
      // There are remaining transaction event listeners
      if (this._events.filter(e => e.type === "tx").length) {
        return;
      }

      tag = "tx";
    } else if (this.listenerCount(event.event)) {
      // There are remaining event listeners
      return;
    }

    const subId = this._subIds[tag];

    if (!subId) {
      return;
    }

    delete this._subIds[tag];
    subId.then(subId => {
      if (!this._subs[subId]) {
        return;
      }

      delete this._subs[subId];
      this.send("eth_unsubscribe", [subId]);
    });
  }

  destroy() {
    return __awaiter(this, void 0, void 0, function* () {
      // Wait until we have connected before trying to disconnect
      if (this.websocket.readyState === _ws.WebSocket.CONNECTING) {
        yield new Promise(resolve => {
          this.websocket.onopen = function () {
            resolve(true);
          };

          this.websocket.onerror = function () {
            resolve(false);
          };
        });
      } // Hangup
      // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes


      this.websocket.close(1000);
    });
  }

}

exports.WebSocketProvider = WebSocketProvider;
},{"@ethersproject/bignumber":"../../node_modules/@ethersproject/bignumber/lib.esm/index.js","@ethersproject/properties":"../../node_modules/@ethersproject/properties/lib.esm/index.js","./json-rpc-provider":"../../node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js","./ws":"../../node_modules/@ethersproject/providers/lib.esm/ws.js","@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","./_version":"../../node_modules/@ethersproject/providers/lib.esm/_version.js"}],"../../node_modules/@ethersproject/providers/lib.esm/url-json-rpc-provider.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UrlJsonRpcProvider = exports.StaticJsonRpcProvider = void 0;

var _properties = require("@ethersproject/properties");

var _logger = require("@ethersproject/logger");

var _version = require("./_version");

var _jsonRpcProvider = require("./json-rpc-provider");

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

const logger = new _logger.Logger(_version.version);

// A StaticJsonRpcProvider is useful when you *know* for certain that
// the backend will never change, as it never calls eth_chainId to
// verify its backend. However, if the backend does change, the effects
// are undefined and may include:
// - inconsistent results
// - locking up the UI
// - block skew warnings
// - wrong results
// If the network is not explicit (i.e. auto-detection is expected), the
// node MUST be running and available to respond to requests BEFORE this
// is instantiated.
class StaticJsonRpcProvider extends _jsonRpcProvider.JsonRpcProvider {
  detectNetwork() {
    const _super = Object.create(null, {
      detectNetwork: {
        get: () => super.detectNetwork
      }
    });

    return __awaiter(this, void 0, void 0, function* () {
      let network = this.network;

      if (network == null) {
        network = yield _super.detectNetwork.call(this);

        if (!network) {
          logger.throwError("no network detected", _logger.Logger.errors.UNKNOWN_ERROR, {});
        } // If still not set, set it


        if (this._network == null) {
          // A static network does not support "any"
          (0, _properties.defineReadOnly)(this, "_network", network);
          this.emit("network", network, null);
        }
      }

      return network;
    });
  }

}

exports.StaticJsonRpcProvider = StaticJsonRpcProvider;

class UrlJsonRpcProvider extends StaticJsonRpcProvider {
  constructor(network, apiKey) {
    logger.checkAbstract(new.target, UrlJsonRpcProvider); // Normalize the Network and API Key

    network = (0, _properties.getStatic)(new.target, "getNetwork")(network);
    apiKey = (0, _properties.getStatic)(new.target, "getApiKey")(apiKey);
    const connection = (0, _properties.getStatic)(new.target, "getUrl")(network, apiKey);
    super(connection, network);

    if (typeof apiKey === "string") {
      (0, _properties.defineReadOnly)(this, "apiKey", apiKey);
    } else if (apiKey != null) {
      Object.keys(apiKey).forEach(key => {
        (0, _properties.defineReadOnly)(this, key, apiKey[key]);
      });
    }
  }

  _startPending() {
    logger.warn("WARNING: API provider does not support pending filters");
  }

  isCommunityResource() {
    return false;
  }

  getSigner(address) {
    return logger.throwError("API provider does not support signing", _logger.Logger.errors.UNSUPPORTED_OPERATION, {
      operation: "getSigner"
    });
  }

  listAccounts() {
    return Promise.resolve([]);
  } // Return a defaultApiKey if null, otherwise validate the API key


  static getApiKey(apiKey) {
    return apiKey;
  } // Returns the url or connection for the given network and API key. The
  // API key will have been sanitized by the getApiKey first, so any validation
  // or transformations can be done there.


  static getUrl(network, apiKey) {
    return logger.throwError("not implemented; sub-classes must override getUrl", _logger.Logger.errors.NOT_IMPLEMENTED, {
      operation: "getUrl"
    });
  }

}

exports.UrlJsonRpcProvider = UrlJsonRpcProvider;
},{"@ethersproject/properties":"../../node_modules/@ethersproject/properties/lib.esm/index.js","@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","./_version":"../../node_modules/@ethersproject/providers/lib.esm/_version.js","./json-rpc-provider":"../../node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js"}],"../../node_modules/@ethersproject/providers/lib.esm/alchemy-provider.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AlchemyWebSocketProvider = exports.AlchemyProvider = void 0;

var _properties = require("@ethersproject/properties");

var _formatter = require("./formatter");

var _websocketProvider = require("./websocket-provider");

var _logger = require("@ethersproject/logger");

var _version = require("./_version");

var _urlJsonRpcProvider = require("./url-json-rpc-provider");

const logger = new _logger.Logger(_version.version);
// This key was provided to ethers.js by Alchemy to be used by the
// default provider, but it is recommended that for your own
// production environments, that you acquire your own API key at:
//   https://dashboard.alchemyapi.io
const defaultApiKey = "_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC";

class AlchemyWebSocketProvider extends _websocketProvider.WebSocketProvider {
  constructor(network, apiKey) {
    const provider = new AlchemyProvider(network, apiKey);
    const url = provider.connection.url.replace(/^http/i, "ws").replace(".alchemyapi.", ".ws.alchemyapi.");
    super(url, provider.network);
    (0, _properties.defineReadOnly)(this, "apiKey", provider.apiKey);
  }

  isCommunityResource() {
    return this.apiKey === defaultApiKey;
  }

}

exports.AlchemyWebSocketProvider = AlchemyWebSocketProvider;

class AlchemyProvider extends _urlJsonRpcProvider.UrlJsonRpcProvider {
  static getWebSocketProvider(network, apiKey) {
    return new AlchemyWebSocketProvider(network, apiKey);
  }

  static getApiKey(apiKey) {
    if (apiKey == null) {
      return defaultApiKey;
    }

    if (apiKey && typeof apiKey !== "string") {
      logger.throwArgumentError("invalid apiKey", "apiKey", apiKey);
    }

    return apiKey;
  }

  static getUrl(network, apiKey) {
    let host = null;

    switch (network.name) {
      case "homestead":
        host = "eth-mainnet.alchemyapi.io/v2/";
        break;

      case "ropsten":
        host = "eth-ropsten.alchemyapi.io/v2/";
        break;

      case "rinkeby":
        host = "eth-rinkeby.alchemyapi.io/v2/";
        break;

      case "goerli":
        host = "eth-goerli.alchemyapi.io/v2/";
        break;

      case "kovan":
        host = "eth-kovan.alchemyapi.io/v2/";
        break;

      case "matic":
        host = "polygon-mainnet.g.alchemy.com/v2/";
        break;

      case "maticmum":
        host = "polygon-mumbai.g.alchemy.com/v2/";
        break;

      case "arbitrum":
        host = "arb-mainnet.g.alchemy.com/v2/";
        break;

      case "arbitrum-rinkeby":
        host = "arb-rinkeby.g.alchemy.com/v2/";
        break;

      case "optimism":
        host = "opt-mainnet.g.alchemy.com/v2/";
        break;

      case "optimism-kovan":
        host = "opt-kovan.g.alchemy.com/v2/";
        break;

      default:
        logger.throwArgumentError("unsupported network", "network", arguments[0]);
    }

    return {
      allowGzip: true,
      url: "https:/" + "/" + host + apiKey,
      throttleCallback: (attempt, url) => {
        if (apiKey === defaultApiKey) {
          (0, _formatter.showThrottleMessage)();
        }

        return Promise.resolve(true);
      }
    };
  }

  isCommunityResource() {
    return this.apiKey === defaultApiKey;
  }

}

exports.AlchemyProvider = AlchemyProvider;
},{"@ethersproject/properties":"../../node_modules/@ethersproject/properties/lib.esm/index.js","./formatter":"../../node_modules/@ethersproject/providers/lib.esm/formatter.js","./websocket-provider":"../../node_modules/@ethersproject/providers/lib.esm/websocket-provider.js","@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","./_version":"../../node_modules/@ethersproject/providers/lib.esm/_version.js","./url-json-rpc-provider":"../../node_modules/@ethersproject/providers/lib.esm/url-json-rpc-provider.js"}],"../../node_modules/@ethersproject/providers/lib.esm/ankr-provider.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AnkrProvider = void 0;

var _formatter = require("./formatter");

var _urlJsonRpcProvider = require("./url-json-rpc-provider");

var _logger = require("@ethersproject/logger");

var _version = require("./_version");

const logger = new _logger.Logger(_version.version);
const defaultApiKey = "9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972";

function getHost(name) {
  switch (name) {
    case "homestead":
      return "rpc.ankr.com/eth/";

    case "matic":
      return "rpc.ankr.com/polygon/";

    case "arbitrum":
      return "rpc.ankr.com/arbitrum/";
  }

  return logger.throwArgumentError("unsupported network", "name", name);
}

class AnkrProvider extends _urlJsonRpcProvider.UrlJsonRpcProvider {
  isCommunityResource() {
    return this.apiKey === defaultApiKey;
  }

  static getApiKey(apiKey) {
    if (apiKey == null) {
      return defaultApiKey;
    }

    return apiKey;
  }

  static getUrl(network, apiKey) {
    if (apiKey == null) {
      apiKey = defaultApiKey;
    }

    const connection = {
      allowGzip: true,
      url: "https:/\/" + getHost(network.name) + apiKey,
      throttleCallback: (attempt, url) => {
        if (apiKey.apiKey === defaultApiKey) {
          (0, _formatter.showThrottleMessage)();
        }

        return Promise.resolve(true);
      }
    };

    if (apiKey.projectSecret != null) {
      connection.user = "";
      connection.password = apiKey.projectSecret;
    }

    return connection;
  }

}

exports.AnkrProvider = AnkrProvider;
},{"./formatter":"../../node_modules/@ethersproject/providers/lib.esm/formatter.js","./url-json-rpc-provider":"../../node_modules/@ethersproject/providers/lib.esm/url-json-rpc-provider.js","@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","./_version":"../../node_modules/@ethersproject/providers/lib.esm/_version.js"}],"../../node_modules/@ethersproject/providers/lib.esm/cloudflare-provider.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CloudflareProvider = void 0;

var _urlJsonRpcProvider = require("./url-json-rpc-provider");

var _logger = require("@ethersproject/logger");

var _version = require("./_version");

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

const logger = new _logger.Logger(_version.version);

class CloudflareProvider extends _urlJsonRpcProvider.UrlJsonRpcProvider {
  static getApiKey(apiKey) {
    if (apiKey != null) {
      logger.throwArgumentError("apiKey not supported for cloudflare", "apiKey", apiKey);
    }

    return null;
  }

  static getUrl(network, apiKey) {
    let host = null;

    switch (network.name) {
      case "homestead":
        host = "https://cloudflare-eth.com/";
        break;

      default:
        logger.throwArgumentError("unsupported network", "network", arguments[0]);
    }

    return host;
  }

  perform(method, params) {
    const _super = Object.create(null, {
      perform: {
        get: () => super.perform
      }
    });

    return __awaiter(this, void 0, void 0, function* () {
      // The Cloudflare provider does not support eth_blockNumber,
      // so we get the latest block and pull it from that
      if (method === "getBlockNumber") {
        const block = yield _super.perform.call(this, "getBlock", {
          blockTag: "latest"
        });
        return block.number;
      }

      return _super.perform.call(this, method, params);
    });
  }

}

exports.CloudflareProvider = CloudflareProvider;
},{"./url-json-rpc-provider":"../../node_modules/@ethersproject/providers/lib.esm/url-json-rpc-provider.js","@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","./_version":"../../node_modules/@ethersproject/providers/lib.esm/_version.js"}],"../../node_modules/@ethersproject/providers/lib.esm/etherscan-provider.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EtherscanProvider = void 0;

var _bytes = require("@ethersproject/bytes");

var _properties = require("@ethersproject/properties");

var _transactions = require("@ethersproject/transactions");

var _web = require("@ethersproject/web");

var _formatter = require("./formatter");

var _logger = require("@ethersproject/logger");

var _version = require("./_version");

var _baseProvider = require("./base-provider");

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

const logger = new _logger.Logger(_version.version);

// The transaction has already been sanitized by the calls in Provider
function getTransactionPostData(transaction) {
  const result = {};

  for (let key in transaction) {
    if (transaction[key] == null) {
      continue;
    }

    let value = transaction[key];

    if (key === "type" && value === 0) {
      continue;
    } // Quantity-types require no leading zero, unless 0


    if ({
      type: true,
      gasLimit: true,
      gasPrice: true,
      maxFeePerGs: true,
      maxPriorityFeePerGas: true,
      nonce: true,
      value: true
    }[key]) {
      value = (0, _bytes.hexValue)((0, _bytes.hexlify)(value));
    } else if (key === "accessList") {
      value = "[" + (0, _transactions.accessListify)(value).map(set => {
        return `{address:"${set.address}",storageKeys:["${set.storageKeys.join('","')}"]}`;
      }).join(",") + "]";
    } else {
      value = (0, _bytes.hexlify)(value);
    }

    result[key] = value;
  }

  return result;
}

function getResult(result) {
  // getLogs, getHistory have weird success responses
  if (result.status == 0 && (result.message === "No records found" || result.message === "No transactions found")) {
    return result.result;
  }

  if (result.status != 1 || result.message != "OK") {
    const error = new Error("invalid response");
    error.result = JSON.stringify(result);

    if ((result.result || "").toLowerCase().indexOf("rate limit") >= 0) {
      error.throttleRetry = true;
    }

    throw error;
  }

  return result.result;
}

function getJsonResult(result) {
  // This response indicates we are being throttled
  if (result && result.status == 0 && result.message == "NOTOK" && (result.result || "").toLowerCase().indexOf("rate limit") >= 0) {
    const error = new Error("throttled response");
    error.result = JSON.stringify(result);
    error.throttleRetry = true;
    throw error;
  }

  if (result.jsonrpc != "2.0") {
    // @TODO: not any
    const error = new Error("invalid response");
    error.result = JSON.stringify(result);
    throw error;
  }

  if (result.error) {
    // @TODO: not any
    const error = new Error(result.error.message || "unknown error");

    if (result.error.code) {
      error.code = result.error.code;
    }

    if (result.error.data) {
      error.data = result.error.data;
    }

    throw error;
  }

  return result.result;
} // The blockTag was normalized as a string by the Provider pre-perform operations


function checkLogTag(blockTag) {
  if (blockTag === "pending") {
    throw new Error("pending not supported");
  }

  if (blockTag === "latest") {
    return blockTag;
  }

  return parseInt(blockTag.substring(2), 16);
}

const defaultApiKey = "9D13ZE7XSBTJ94N9BNJ2MA33VMAY2YPIRB";

function checkError(method, error, transaction) {
  // Undo the "convenience" some nodes are attempting to prevent backwards
  // incompatibility; maybe for v6 consider forwarding reverts as errors
  if (method === "call" && error.code === _logger.Logger.errors.SERVER_ERROR) {
    const e = error.error; // Etherscan keeps changing their string

    if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {
      // Etherscan prefixes the data like "Reverted 0x1234"
      let data = e.data;

      if (data) {
        data = "0x" + data.replace(/^.*0x/i, "");
      }

      if ((0, _bytes.isHexString)(data)) {
        return data;
      }

      logger.throwError("missing revert data in call exception", _logger.Logger.errors.CALL_EXCEPTION, {
        error,
        data: "0x"
      });
    }
  } // Get the message from any nested error structure


  let message = error.message;

  if (error.code === _logger.Logger.errors.SERVER_ERROR) {
    if (error.error && typeof error.error.message === "string") {
      message = error.error.message;
    } else if (typeof error.body === "string") {
      message = error.body;
    } else if (typeof error.responseText === "string") {
      message = error.responseText;
    }
  }

  message = (message || "").toLowerCase(); // "Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0"

  if (message.match(/insufficient funds/)) {
    logger.throwError("insufficient funds for intrinsic transaction cost", _logger.Logger.errors.INSUFFICIENT_FUNDS, {
      error,
      method,
      transaction
    });
  } // "Transaction with the same hash was already imported."


  if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {
    logger.throwError("nonce has already been used", _logger.Logger.errors.NONCE_EXPIRED, {
      error,
      method,
      transaction
    });
  } // "Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce."


  if (message.match(/another transaction with same nonce/)) {
    logger.throwError("replacement fee too low", _logger.Logger.errors.REPLACEMENT_UNDERPRICED, {
      error,
      method,
      transaction
    });
  }

  if (message.match(/execution failed due to an exception|execution reverted/)) {
    logger.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", _logger.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
      error,
      method,
      transaction
    });
  }

  throw error;
}

class EtherscanProvider extends _baseProvider.BaseProvider {
  constructor(network, apiKey) {
    logger.checkNew(new.target, EtherscanProvider);
    super(network);
    (0, _properties.defineReadOnly)(this, "baseUrl", this.getBaseUrl());
    (0, _properties.defineReadOnly)(this, "apiKey", apiKey || defaultApiKey);
  }

  getBaseUrl() {
    switch (this.network ? this.network.name : "invalid") {
      case "homestead":
        return "https:/\/api.etherscan.io";

      case "ropsten":
        return "https:/\/api-ropsten.etherscan.io";

      case "rinkeby":
        return "https:/\/api-rinkeby.etherscan.io";

      case "kovan":
        return "https:/\/api-kovan.etherscan.io";

      case "goerli":
        return "https:/\/api-goerli.etherscan.io";

      default:
    }

    return logger.throwArgumentError("unsupported network", "network", name);
  }

  getUrl(module, params) {
    const query = Object.keys(params).reduce((accum, key) => {
      const value = params[key];

      if (value != null) {
        accum += `&${key}=${value}`;
      }

      return accum;
    }, "");
    const apiKey = this.apiKey ? `&apikey=${this.apiKey}` : "";
    return `${this.baseUrl}/api?module=${module}${query}${apiKey}`;
  }

  getPostUrl() {
    return `${this.baseUrl}/api`;
  }

  getPostData(module, params) {
    params.module = module;
    params.apikey = this.apiKey;
    return params;
  }

  fetch(module, params, post) {
    return __awaiter(this, void 0, void 0, function* () {
      const url = post ? this.getPostUrl() : this.getUrl(module, params);
      const payload = post ? this.getPostData(module, params) : null;
      const procFunc = module === "proxy" ? getJsonResult : getResult;
      this.emit("debug", {
        action: "request",
        request: url,
        provider: this
      });
      const connection = {
        url: url,
        throttleSlotInterval: 1000,
        throttleCallback: (attempt, url) => {
          if (this.isCommunityResource()) {
            (0, _formatter.showThrottleMessage)();
          }

          return Promise.resolve(true);
        }
      };
      let payloadStr = null;

      if (payload) {
        connection.headers = {
          "content-type": "application/x-www-form-urlencoded; charset=UTF-8"
        };
        payloadStr = Object.keys(payload).map(key => {
          return `${key}=${payload[key]}`;
        }).join("&");
      }

      const result = yield (0, _web.fetchJson)(connection, payloadStr, procFunc || getJsonResult);
      this.emit("debug", {
        action: "response",
        request: url,
        response: (0, _properties.deepCopy)(result),
        provider: this
      });
      return result;
    });
  }

  detectNetwork() {
    return __awaiter(this, void 0, void 0, function* () {
      return this.network;
    });
  }

  perform(method, params) {
    const _super = Object.create(null, {
      perform: {
        get: () => super.perform
      }
    });

    return __awaiter(this, void 0, void 0, function* () {
      switch (method) {
        case "getBlockNumber":
          return this.fetch("proxy", {
            action: "eth_blockNumber"
          });

        case "getGasPrice":
          return this.fetch("proxy", {
            action: "eth_gasPrice"
          });

        case "getBalance":
          // Returns base-10 result
          return this.fetch("account", {
            action: "balance",
            address: params.address,
            tag: params.blockTag
          });

        case "getTransactionCount":
          return this.fetch("proxy", {
            action: "eth_getTransactionCount",
            address: params.address,
            tag: params.blockTag
          });

        case "getCode":
          return this.fetch("proxy", {
            action: "eth_getCode",
            address: params.address,
            tag: params.blockTag
          });

        case "getStorageAt":
          return this.fetch("proxy", {
            action: "eth_getStorageAt",
            address: params.address,
            position: params.position,
            tag: params.blockTag
          });

        case "sendTransaction":
          return this.fetch("proxy", {
            action: "eth_sendRawTransaction",
            hex: params.signedTransaction
          }, true).catch(error => {
            return checkError("sendTransaction", error, params.signedTransaction);
          });

        case "getBlock":
          if (params.blockTag) {
            return this.fetch("proxy", {
              action: "eth_getBlockByNumber",
              tag: params.blockTag,
              boolean: params.includeTransactions ? "true" : "false"
            });
          }

          throw new Error("getBlock by blockHash not implemented");

        case "getTransaction":
          return this.fetch("proxy", {
            action: "eth_getTransactionByHash",
            txhash: params.transactionHash
          });

        case "getTransactionReceipt":
          return this.fetch("proxy", {
            action: "eth_getTransactionReceipt",
            txhash: params.transactionHash
          });

        case "call":
          {
            if (params.blockTag !== "latest") {
              throw new Error("EtherscanProvider does not support blockTag for call");
            }

            const postData = getTransactionPostData(params.transaction);
            postData.module = "proxy";
            postData.action = "eth_call";

            try {
              return yield this.fetch("proxy", postData, true);
            } catch (error) {
              return checkError("call", error, params.transaction);
            }
          }

        case "estimateGas":
          {
            const postData = getTransactionPostData(params.transaction);
            postData.module = "proxy";
            postData.action = "eth_estimateGas";

            try {
              return yield this.fetch("proxy", postData, true);
            } catch (error) {
              return checkError("estimateGas", error, params.transaction);
            }
          }

        case "getLogs":
          {
            const args = {
              action: "getLogs"
            };

            if (params.filter.fromBlock) {
              args.fromBlock = checkLogTag(params.filter.fromBlock);
            }

            if (params.filter.toBlock) {
              args.toBlock = checkLogTag(params.filter.toBlock);
            }

            if (params.filter.address) {
              args.address = params.filter.address;
            } // @TODO: We can handle slightly more complicated logs using the logs API


            if (params.filter.topics && params.filter.topics.length > 0) {
              if (params.filter.topics.length > 1) {
                logger.throwError("unsupported topic count", _logger.Logger.errors.UNSUPPORTED_OPERATION, {
                  topics: params.filter.topics
                });
              }

              if (params.filter.topics.length === 1) {
                const topic0 = params.filter.topics[0];

                if (typeof topic0 !== "string" || topic0.length !== 66) {
                  logger.throwError("unsupported topic format", _logger.Logger.errors.UNSUPPORTED_OPERATION, {
                    topic0: topic0
                  });
                }

                args.topic0 = topic0;
              }
            }

            const logs = yield this.fetch("logs", args); // Cache txHash => blockHash

            let blocks = {}; // Add any missing blockHash to the logs

            for (let i = 0; i < logs.length; i++) {
              const log = logs[i];

              if (log.blockHash != null) {
                continue;
              }

              if (blocks[log.blockNumber] == null) {
                const block = yield this.getBlock(log.blockNumber);

                if (block) {
                  blocks[log.blockNumber] = block.hash;
                }
              }

              log.blockHash = blocks[log.blockNumber];
            }

            return logs;
          }

        case "getEtherPrice":
          if (this.network.name !== "homestead") {
            return 0.0;
          }

          return parseFloat((yield this.fetch("stats", {
            action: "ethprice"
          })).ethusd);

        default:
          break;
      }

      return _super.perform.call(this, method, params);
    });
  } // Note: The `page` page parameter only allows pagination within the
  //       10,000 window available without a page and offset parameter
  //       Error: Result window is too large, PageNo x Offset size must
  //              be less than or equal to 10000


  getHistory(addressOrName, startBlock, endBlock) {
    return __awaiter(this, void 0, void 0, function* () {
      const params = {
        action: "txlist",
        address: yield this.resolveName(addressOrName),
        startblock: startBlock == null ? 0 : startBlock,
        endblock: endBlock == null ? 99999999 : endBlock,
        sort: "asc"
      };
      const result = yield this.fetch("account", params);
      return result.map(tx => {
        ["contractAddress", "to"].forEach(function (key) {
          if (tx[key] == "") {
            delete tx[key];
          }
        });

        if (tx.creates == null && tx.contractAddress != null) {
          tx.creates = tx.contractAddress;
        }

        const item = this.formatter.transactionResponse(tx);

        if (tx.timeStamp) {
          item.timestamp = parseInt(tx.timeStamp);
        }

        return item;
      });
    });
  }

  isCommunityResource() {
    return this.apiKey === defaultApiKey;
  }

}

exports.EtherscanProvider = EtherscanProvider;
},{"@ethersproject/bytes":"../../node_modules/@ethersproject/bytes/lib.esm/index.js","@ethersproject/properties":"../../node_modules/@ethersproject/properties/lib.esm/index.js","@ethersproject/transactions":"../../node_modules/@ethersproject/transactions/lib.esm/index.js","@ethersproject/web":"../../node_modules/@ethersproject/web/lib.esm/index.js","./formatter":"../../node_modules/@ethersproject/providers/lib.esm/formatter.js","@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","./_version":"../../node_modules/@ethersproject/providers/lib.esm/_version.js","./base-provider":"../../node_modules/@ethersproject/providers/lib.esm/base-provider.js"}],"../../node_modules/@ethersproject/providers/lib.esm/fallback-provider.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FallbackProvider = void 0;

var _abstractProvider = require("@ethersproject/abstract-provider");

var _bignumber = require("@ethersproject/bignumber");

var _bytes = require("@ethersproject/bytes");

var _properties = require("@ethersproject/properties");

var _random = require("@ethersproject/random");

var _web = require("@ethersproject/web");

var _baseProvider = require("./base-provider");

var _formatter = require("./formatter");

var _logger = require("@ethersproject/logger");

var _version = require("./_version");

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

const logger = new _logger.Logger(_version.version);

function now() {
  return new Date().getTime();
} // Returns to network as long as all agree, or null if any is null.
// Throws an error if any two networks do not match.


function checkNetworks(networks) {
  let result = null;

  for (let i = 0; i < networks.length; i++) {
    const network = networks[i]; // Null! We do not know our network; bail.

    if (network == null) {
      return null;
    }

    if (result) {
      // Make sure the network matches the previous networks
      if (!(result.name === network.name && result.chainId === network.chainId && (result.ensAddress === network.ensAddress || result.ensAddress == null && network.ensAddress == null))) {
        logger.throwArgumentError("provider mismatch", "networks", networks);
      }
    } else {
      result = network;
    }
  }

  return result;
}

function median(values, maxDelta) {
  values = values.slice().sort();
  const middle = Math.floor(values.length / 2); // Odd length; take the middle

  if (values.length % 2) {
    return values[middle];
  } // Even length; take the average of the two middle


  const a = values[middle - 1],
        b = values[middle];

  if (maxDelta != null && Math.abs(a - b) > maxDelta) {
    return null;
  }

  return (a + b) / 2;
}

function serialize(value) {
  if (value === null) {
    return "null";
  } else if (typeof value === "number" || typeof value === "boolean") {
    return JSON.stringify(value);
  } else if (typeof value === "string") {
    return value;
  } else if (_bignumber.BigNumber.isBigNumber(value)) {
    return value.toString();
  } else if (Array.isArray(value)) {
    return JSON.stringify(value.map(i => serialize(i)));
  } else if (typeof value === "object") {
    const keys = Object.keys(value);
    keys.sort();
    return "{" + keys.map(key => {
      let v = value[key];

      if (typeof v === "function") {
        v = "[function]";
      } else {
        v = serialize(v);
      }

      return JSON.stringify(key) + ":" + v;
    }).join(",") + "}";
  }

  throw new Error("unknown value type: " + typeof value);
} // Next request ID to use for emitting debug info


let nextRid = 1;
;

function stall(duration) {
  let cancel = null;
  let timer = null;
  let promise = new Promise(resolve => {
    cancel = function () {
      if (timer) {
        clearTimeout(timer);
        timer = null;
      }

      resolve();
    };

    timer = setTimeout(cancel, duration);
  });

  const wait = func => {
    promise = promise.then(func);
    return promise;
  };

  function getPromise() {
    return promise;
  }

  return {
    cancel,
    getPromise,
    wait
  };
}

const ForwardErrors = [_logger.Logger.errors.CALL_EXCEPTION, _logger.Logger.errors.INSUFFICIENT_FUNDS, _logger.Logger.errors.NONCE_EXPIRED, _logger.Logger.errors.REPLACEMENT_UNDERPRICED, _logger.Logger.errors.UNPREDICTABLE_GAS_LIMIT];
const ForwardProperties = ["address", "args", "errorArgs", "errorSignature", "method", "transaction"];
;

function exposeDebugConfig(config, now) {
  const result = {
    weight: config.weight
  };
  Object.defineProperty(result, "provider", {
    get: () => config.provider
  });

  if (config.start) {
    result.start = config.start;
  }

  if (now) {
    result.duration = now - config.start;
  }

  if (config.done) {
    if (config.error) {
      result.error = config.error;
    } else {
      result.result = config.result || null;
    }
  }

  return result;
}

function normalizedTally(normalize, quorum) {
  return function (configs) {
    // Count the votes for each result
    const tally = {};
    configs.forEach(c => {
      const value = normalize(c.result);

      if (!tally[value]) {
        tally[value] = {
          count: 0,
          result: c.result
        };
      }

      tally[value].count++;
    }); // Check for a quorum on any given result

    const keys = Object.keys(tally);

    for (let i = 0; i < keys.length; i++) {
      const check = tally[keys[i]];

      if (check.count >= quorum) {
        return check.result;
      }
    } // No quroum


    return undefined;
  };
}

function getProcessFunc(provider, method, params) {
  let normalize = serialize;

  switch (method) {
    case "getBlockNumber":
      // Return the median value, unless there is (median + 1) is also
      // present, in which case that is probably true and the median
      // is going to be stale soon. In the event of a malicious node,
      // the lie will be true soon enough.
      return function (configs) {
        const values = configs.map(c => c.result); // Get the median block number

        let blockNumber = median(configs.map(c => c.result), 2);

        if (blockNumber == null) {
          return undefined;
        }

        blockNumber = Math.ceil(blockNumber); // If the next block height is present, its prolly safe to use

        if (values.indexOf(blockNumber + 1) >= 0) {
          blockNumber++;
        } // Don't ever roll back the blockNumber


        if (blockNumber >= provider._highestBlockNumber) {
          provider._highestBlockNumber = blockNumber;
        }

        return provider._highestBlockNumber;
      };

    case "getGasPrice":
      // Return the middle (round index up) value, similar to median
      // but do not average even entries and choose the higher.
      // Malicious actors must compromise 50% of the nodes to lie.
      return function (configs) {
        const values = configs.map(c => c.result);
        values.sort();
        return values[Math.floor(values.length / 2)];
      };

    case "getEtherPrice":
      // Returns the median price. Malicious actors must compromise at
      // least 50% of the nodes to lie (in a meaningful way).
      return function (configs) {
        return median(configs.map(c => c.result));
      };
    // No additional normalizing required; serialize is enough

    case "getBalance":
    case "getTransactionCount":
    case "getCode":
    case "getStorageAt":
    case "call":
    case "estimateGas":
    case "getLogs":
      break;
    // We drop the confirmations from transactions as it is approximate

    case "getTransaction":
    case "getTransactionReceipt":
      normalize = function (tx) {
        if (tx == null) {
          return null;
        }

        tx = (0, _properties.shallowCopy)(tx);
        tx.confirmations = -1;
        return serialize(tx);
      };

      break;
    // We drop the confirmations from transactions as it is approximate

    case "getBlock":
      // We drop the confirmations from transactions as it is approximate
      if (params.includeTransactions) {
        normalize = function (block) {
          if (block == null) {
            return null;
          }

          block = (0, _properties.shallowCopy)(block);
          block.transactions = block.transactions.map(tx => {
            tx = (0, _properties.shallowCopy)(tx);
            tx.confirmations = -1;
            return tx;
          });
          return serialize(block);
        };
      } else {
        normalize = function (block) {
          if (block == null) {
            return null;
          }

          return serialize(block);
        };
      }

      break;

    default:
      throw new Error("unknown method: " + method);
  } // Return the result if and only if the expected quorum is
  // satisfied and agreed upon for the final result.


  return normalizedTally(normalize, provider.quorum);
} // If we are doing a blockTag query, we need to make sure the backend is
// caught up to the FallbackProvider, before sending a request to it.


function waitForSync(config, blockNumber) {
  return __awaiter(this, void 0, void 0, function* () {
    const provider = config.provider;

    if (provider.blockNumber != null && provider.blockNumber >= blockNumber || blockNumber === -1) {
      return provider;
    }

    return (0, _web.poll)(() => {
      return new Promise((resolve, reject) => {
        setTimeout(function () {
          // We are synced
          if (provider.blockNumber >= blockNumber) {
            return resolve(provider);
          } // We're done; just quit


          if (config.cancelled) {
            return resolve(null);
          } // Try again, next block


          return resolve(undefined);
        }, 0);
      });
    }, {
      oncePoll: provider
    });
  });
}

function getRunner(config, currentBlockNumber, method, params) {
  return __awaiter(this, void 0, void 0, function* () {
    let provider = config.provider;

    switch (method) {
      case "getBlockNumber":
      case "getGasPrice":
        return provider[method]();

      case "getEtherPrice":
        if (provider.getEtherPrice) {
          return provider.getEtherPrice();
        }

        break;

      case "getBalance":
      case "getTransactionCount":
      case "getCode":
        if (params.blockTag && (0, _bytes.isHexString)(params.blockTag)) {
          provider = yield waitForSync(config, currentBlockNumber);
        }

        return provider[method](params.address, params.blockTag || "latest");

      case "getStorageAt":
        if (params.blockTag && (0, _bytes.isHexString)(params.blockTag)) {
          provider = yield waitForSync(config, currentBlockNumber);
        }

        return provider.getStorageAt(params.address, params.position, params.blockTag || "latest");

      case "getBlock":
        if (params.blockTag && (0, _bytes.isHexString)(params.blockTag)) {
          provider = yield waitForSync(config, currentBlockNumber);
        }

        return provider[params.includeTransactions ? "getBlockWithTransactions" : "getBlock"](params.blockTag || params.blockHash);

      case "call":
      case "estimateGas":
        if (params.blockTag && (0, _bytes.isHexString)(params.blockTag)) {
          provider = yield waitForSync(config, currentBlockNumber);
        }

        return provider[method](params.transaction);

      case "getTransaction":
      case "getTransactionReceipt":
        return provider[method](params.transactionHash);

      case "getLogs":
        {
          let filter = params.filter;

          if (filter.fromBlock && (0, _bytes.isHexString)(filter.fromBlock) || filter.toBlock && (0, _bytes.isHexString)(filter.toBlock)) {
            provider = yield waitForSync(config, currentBlockNumber);
          }

          return provider.getLogs(filter);
        }
    }

    return logger.throwError("unknown method error", _logger.Logger.errors.UNKNOWN_ERROR, {
      method: method,
      params: params
    });
  });
}

class FallbackProvider extends _baseProvider.BaseProvider {
  constructor(providers, quorum) {
    logger.checkNew(new.target, FallbackProvider);

    if (providers.length === 0) {
      logger.throwArgumentError("missing providers", "providers", providers);
    }

    const providerConfigs = providers.map((configOrProvider, index) => {
      if (_abstractProvider.Provider.isProvider(configOrProvider)) {
        const stallTimeout = (0, _formatter.isCommunityResource)(configOrProvider) ? 2000 : 750;
        const priority = 1;
        return Object.freeze({
          provider: configOrProvider,
          weight: 1,
          stallTimeout,
          priority
        });
      }

      const config = (0, _properties.shallowCopy)(configOrProvider);

      if (config.priority == null) {
        config.priority = 1;
      }

      if (config.stallTimeout == null) {
        config.stallTimeout = (0, _formatter.isCommunityResource)(configOrProvider) ? 2000 : 750;
      }

      if (config.weight == null) {
        config.weight = 1;
      }

      const weight = config.weight;

      if (weight % 1 || weight > 512 || weight < 1) {
        logger.throwArgumentError("invalid weight; must be integer in [1, 512]", `providers[${index}].weight`, weight);
      }

      return Object.freeze(config);
    });
    const total = providerConfigs.reduce((accum, c) => accum + c.weight, 0);

    if (quorum == null) {
      quorum = total / 2;
    } else if (quorum > total) {
      logger.throwArgumentError("quorum will always fail; larger than total weight", "quorum", quorum);
    } // Are all providers' networks are known


    let networkOrReady = checkNetworks(providerConfigs.map(c => c.provider.network)); // Not all networks are known; we must stall

    if (networkOrReady == null) {
      networkOrReady = new Promise((resolve, reject) => {
        setTimeout(() => {
          this.detectNetwork().then(resolve, reject);
        }, 0);
      });
    }

    super(networkOrReady); // Preserve a copy, so we do not get mutated

    (0, _properties.defineReadOnly)(this, "providerConfigs", Object.freeze(providerConfigs));
    (0, _properties.defineReadOnly)(this, "quorum", quorum);
    this._highestBlockNumber = -1;
  }

  detectNetwork() {
    return __awaiter(this, void 0, void 0, function* () {
      const networks = yield Promise.all(this.providerConfigs.map(c => c.provider.getNetwork()));
      return checkNetworks(networks);
    });
  }

  perform(method, params) {
    return __awaiter(this, void 0, void 0, function* () {
      // Sending transactions is special; always broadcast it to all backends
      if (method === "sendTransaction") {
        const results = yield Promise.all(this.providerConfigs.map(c => {
          return c.provider.sendTransaction(params.signedTransaction).then(result => {
            return result.hash;
          }, error => {
            return error;
          });
        })); // Any success is good enough (other errors are likely "already seen" errors

        for (let i = 0; i < results.length; i++) {
          const result = results[i];

          if (typeof result === "string") {
            return result;
          }
        } // They were all an error; pick the first error


        throw results[0];
      } // We need to make sure we are in sync with our backends, so we need
      // to know this before we can make a lot of calls


      if (this._highestBlockNumber === -1 && method !== "getBlockNumber") {
        yield this.getBlockNumber();
      }

      const processFunc = getProcessFunc(this, method, params); // Shuffle the providers and then sort them by their priority; we
      // shallowCopy them since we will store the result in them too

      const configs = (0, _random.shuffled)(this.providerConfigs.map(_properties.shallowCopy));
      configs.sort((a, b) => a.priority - b.priority);
      const currentBlockNumber = this._highestBlockNumber;
      let i = 0;
      let first = true;

      while (true) {
        const t0 = now(); // Compute the inflight weight (exclude anything past)

        let inflightWeight = configs.filter(c => c.runner && t0 - c.start < c.stallTimeout).reduce((accum, c) => accum + c.weight, 0); // Start running enough to meet quorum

        while (inflightWeight < this.quorum && i < configs.length) {
          const config = configs[i++];
          const rid = nextRid++;
          config.start = now();
          config.staller = stall(config.stallTimeout);
          config.staller.wait(() => {
            config.staller = null;
          });
          config.runner = getRunner(config, currentBlockNumber, method, params).then(result => {
            config.done = true;
            config.result = result;

            if (this.listenerCount("debug")) {
              this.emit("debug", {
                action: "request",
                rid: rid,
                backend: exposeDebugConfig(config, now()),
                request: {
                  method: method,
                  params: (0, _properties.deepCopy)(params)
                },
                provider: this
              });
            }
          }, error => {
            config.done = true;
            config.error = error;

            if (this.listenerCount("debug")) {
              this.emit("debug", {
                action: "request",
                rid: rid,
                backend: exposeDebugConfig(config, now()),
                request: {
                  method: method,
                  params: (0, _properties.deepCopy)(params)
                },
                provider: this
              });
            }
          });

          if (this.listenerCount("debug")) {
            this.emit("debug", {
              action: "request",
              rid: rid,
              backend: exposeDebugConfig(config, null),
              request: {
                method: method,
                params: (0, _properties.deepCopy)(params)
              },
              provider: this
            });
          }

          inflightWeight += config.weight;
        } // Wait for anything meaningful to finish or stall out


        const waiting = [];
        configs.forEach(c => {
          if (c.done || !c.runner) {
            return;
          }

          waiting.push(c.runner);

          if (c.staller) {
            waiting.push(c.staller.getPromise());
          }
        });

        if (waiting.length) {
          yield Promise.race(waiting);
        } // Check the quorum and process the results; the process function
        // may additionally decide the quorum is not met


        const results = configs.filter(c => c.done && c.error == null);

        if (results.length >= this.quorum) {
          const result = processFunc(results);

          if (result !== undefined) {
            // Shut down any stallers
            configs.forEach(c => {
              if (c.staller) {
                c.staller.cancel();
              }

              c.cancelled = true;
            });
            return result;
          }

          if (!first) {
            yield stall(100).getPromise();
          }

          first = false;
        } // No result, check for errors that should be forwarded


        const errors = configs.reduce((accum, c) => {
          if (!c.done || c.error == null) {
            return accum;
          }

          const code = c.error.code;

          if (ForwardErrors.indexOf(code) >= 0) {
            if (!accum[code]) {
              accum[code] = {
                error: c.error,
                weight: 0
              };
            }

            accum[code].weight += c.weight;
          }

          return accum;
        }, {});
        Object.keys(errors).forEach(errorCode => {
          const tally = errors[errorCode];

          if (tally.weight < this.quorum) {
            return;
          } // Shut down any stallers


          configs.forEach(c => {
            if (c.staller) {
              c.staller.cancel();
            }

            c.cancelled = true;
          });
          const e = tally.error;
          const props = {};
          ForwardProperties.forEach(name => {
            if (e[name] == null) {
              return;
            }

            props[name] = e[name];
          });
          logger.throwError(e.reason || e.message, errorCode, props);
        }); // All configs have run to completion; we will never get more data

        if (configs.filter(c => !c.done).length === 0) {
          break;
        }
      } // Shut down any stallers; shouldn't be any


      configs.forEach(c => {
        if (c.staller) {
          c.staller.cancel();
        }

        c.cancelled = true;
      });
      return logger.throwError("failed to meet quorum", _logger.Logger.errors.SERVER_ERROR, {
        method: method,
        params: params,
        //results: configs.map((c) => c.result),
        //errors: configs.map((c) => c.error),
        results: configs.map(c => exposeDebugConfig(c)),
        provider: this
      });
    });
  }

}

exports.FallbackProvider = FallbackProvider;
},{"@ethersproject/abstract-provider":"../../node_modules/@ethersproject/abstract-provider/lib.esm/index.js","@ethersproject/bignumber":"../../node_modules/@ethersproject/bignumber/lib.esm/index.js","@ethersproject/bytes":"../../node_modules/@ethersproject/bytes/lib.esm/index.js","@ethersproject/properties":"../../node_modules/@ethersproject/properties/lib.esm/index.js","@ethersproject/random":"../../node_modules/@ethersproject/random/lib.esm/index.js","@ethersproject/web":"../../node_modules/@ethersproject/web/lib.esm/index.js","./base-provider":"../../node_modules/@ethersproject/providers/lib.esm/base-provider.js","./formatter":"../../node_modules/@ethersproject/providers/lib.esm/formatter.js","@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","./_version":"../../node_modules/@ethersproject/providers/lib.esm/_version.js"}],"../../node_modules/@ethersproject/providers/lib.esm/ipc-provider.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IpcProvider = void 0;
const IpcProvider = null;
exports.IpcProvider = IpcProvider;
},{}],"../../node_modules/@ethersproject/providers/lib.esm/infura-provider.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InfuraWebSocketProvider = exports.InfuraProvider = void 0;

var _properties = require("@ethersproject/properties");

var _websocketProvider = require("./websocket-provider");

var _formatter = require("./formatter");

var _logger = require("@ethersproject/logger");

var _version = require("./_version");

var _urlJsonRpcProvider = require("./url-json-rpc-provider");

const logger = new _logger.Logger(_version.version);
const defaultProjectId = "84842078b09946638c03157f83405213";

class InfuraWebSocketProvider extends _websocketProvider.WebSocketProvider {
  constructor(network, apiKey) {
    const provider = new InfuraProvider(network, apiKey);
    const connection = provider.connection;

    if (connection.password) {
      logger.throwError("INFURA WebSocket project secrets unsupported", _logger.Logger.errors.UNSUPPORTED_OPERATION, {
        operation: "InfuraProvider.getWebSocketProvider()"
      });
    }

    const url = connection.url.replace(/^http/i, "ws").replace("/v3/", "/ws/v3/");
    super(url, network);
    (0, _properties.defineReadOnly)(this, "apiKey", provider.projectId);
    (0, _properties.defineReadOnly)(this, "projectId", provider.projectId);
    (0, _properties.defineReadOnly)(this, "projectSecret", provider.projectSecret);
  }

  isCommunityResource() {
    return this.projectId === defaultProjectId;
  }

}

exports.InfuraWebSocketProvider = InfuraWebSocketProvider;

class InfuraProvider extends _urlJsonRpcProvider.UrlJsonRpcProvider {
  static getWebSocketProvider(network, apiKey) {
    return new InfuraWebSocketProvider(network, apiKey);
  }

  static getApiKey(apiKey) {
    const apiKeyObj = {
      apiKey: defaultProjectId,
      projectId: defaultProjectId,
      projectSecret: null
    };

    if (apiKey == null) {
      return apiKeyObj;
    }

    if (typeof apiKey === "string") {
      apiKeyObj.projectId = apiKey;
    } else if (apiKey.projectSecret != null) {
      logger.assertArgument(typeof apiKey.projectId === "string", "projectSecret requires a projectId", "projectId", apiKey.projectId);
      logger.assertArgument(typeof apiKey.projectSecret === "string", "invalid projectSecret", "projectSecret", "[REDACTED]");
      apiKeyObj.projectId = apiKey.projectId;
      apiKeyObj.projectSecret = apiKey.projectSecret;
    } else if (apiKey.projectId) {
      apiKeyObj.projectId = apiKey.projectId;
    }

    apiKeyObj.apiKey = apiKeyObj.projectId;
    return apiKeyObj;
  }

  static getUrl(network, apiKey) {
    let host = null;

    switch (network ? network.name : "unknown") {
      case "homestead":
        host = "mainnet.infura.io";
        break;

      case "ropsten":
        host = "ropsten.infura.io";
        break;

      case "rinkeby":
        host = "rinkeby.infura.io";
        break;

      case "kovan":
        host = "kovan.infura.io";
        break;

      case "goerli":
        host = "goerli.infura.io";
        break;

      case "matic":
        host = "polygon-mainnet.infura.io";
        break;

      case "maticmum":
        host = "polygon-mumbai.infura.io";
        break;

      case "optimism":
        host = "optimism-mainnet.infura.io";
        break;

      case "optimism-kovan":
        host = "optimism-kovan.infura.io";
        break;

      case "arbitrum":
        host = "arbitrum-mainnet.infura.io";
        break;

      case "arbitrum-rinkeby":
        host = "arbitrum-rinkeby.infura.io";
        break;

      default:
        logger.throwError("unsupported network", _logger.Logger.errors.INVALID_ARGUMENT, {
          argument: "network",
          value: network
        });
    }

    const connection = {
      allowGzip: true,
      url: "https:/" + "/" + host + "/v3/" + apiKey.projectId,
      throttleCallback: (attempt, url) => {
        if (apiKey.projectId === defaultProjectId) {
          (0, _formatter.showThrottleMessage)();
        }

        return Promise.resolve(true);
      }
    };

    if (apiKey.projectSecret != null) {
      connection.user = "";
      connection.password = apiKey.projectSecret;
    }

    return connection;
  }

  isCommunityResource() {
    return this.projectId === defaultProjectId;
  }

}

exports.InfuraProvider = InfuraProvider;
},{"@ethersproject/properties":"../../node_modules/@ethersproject/properties/lib.esm/index.js","./websocket-provider":"../../node_modules/@ethersproject/providers/lib.esm/websocket-provider.js","./formatter":"../../node_modules/@ethersproject/providers/lib.esm/formatter.js","@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","./_version":"../../node_modules/@ethersproject/providers/lib.esm/_version.js","./url-json-rpc-provider":"../../node_modules/@ethersproject/providers/lib.esm/url-json-rpc-provider.js"}],"../../node_modules/@ethersproject/providers/lib.esm/json-rpc-batch-provider.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JsonRpcBatchProvider = void 0;

var _properties = require("@ethersproject/properties");

var _web = require("@ethersproject/web");

var _jsonRpcProvider = require("./json-rpc-provider");

// Experimental
class JsonRpcBatchProvider extends _jsonRpcProvider.JsonRpcProvider {
  send(method, params) {
    const request = {
      method: method,
      params: params,
      id: this._nextId++,
      jsonrpc: "2.0"
    };

    if (this._pendingBatch == null) {
      this._pendingBatch = [];
    }

    const inflightRequest = {
      request,
      resolve: null,
      reject: null
    };
    const promise = new Promise((resolve, reject) => {
      inflightRequest.resolve = resolve;
      inflightRequest.reject = reject;
    });

    this._pendingBatch.push(inflightRequest);

    if (!this._pendingBatchAggregator) {
      // Schedule batch for next event loop + short duration
      this._pendingBatchAggregator = setTimeout(() => {
        // Get teh current batch and clear it, so new requests
        // go into the next batch
        const batch = this._pendingBatch;
        this._pendingBatch = null;
        this._pendingBatchAggregator = null; // Get the request as an array of requests

        const request = batch.map(inflight => inflight.request);
        this.emit("debug", {
          action: "requestBatch",
          request: (0, _properties.deepCopy)(request),
          provider: this
        });
        return (0, _web.fetchJson)(this.connection, JSON.stringify(request)).then(result => {
          this.emit("debug", {
            action: "response",
            request: request,
            response: result,
            provider: this
          }); // For each result, feed it to the correct Promise, depending
          // on whether it was a success or error

          batch.forEach((inflightRequest, index) => {
            const payload = result[index];

            if (payload.error) {
              const error = new Error(payload.error.message);
              error.code = payload.error.code;
              error.data = payload.error.data;
              inflightRequest.reject(error);
            } else {
              inflightRequest.resolve(payload.result);
            }
          });
        }, error => {
          this.emit("debug", {
            action: "response",
            error: error,
            request: request,
            provider: this
          });
          batch.forEach(inflightRequest => {
            inflightRequest.reject(error);
          });
        });
      }, 10);
    }

    return promise;
  }

}

exports.JsonRpcBatchProvider = JsonRpcBatchProvider;
},{"@ethersproject/properties":"../../node_modules/@ethersproject/properties/lib.esm/index.js","@ethersproject/web":"../../node_modules/@ethersproject/web/lib.esm/index.js","./json-rpc-provider":"../../node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js"}],"../../node_modules/@ethersproject/providers/lib.esm/nodesmith-provider.js":[function(require,module,exports) {
/* istanbul ignore file */
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NodesmithProvider = void 0;

var _urlJsonRpcProvider = require("./url-json-rpc-provider");

var _logger = require("@ethersproject/logger");

var _version = require("./_version");

const logger = new _logger.Logger(_version.version); // Special API key provided by Nodesmith for ethers.js

const defaultApiKey = "ETHERS_JS_SHARED";

class NodesmithProvider extends _urlJsonRpcProvider.UrlJsonRpcProvider {
  static getApiKey(apiKey) {
    if (apiKey && typeof apiKey !== "string") {
      logger.throwArgumentError("invalid apiKey", "apiKey", apiKey);
    }

    return apiKey || defaultApiKey;
  }

  static getUrl(network, apiKey) {
    logger.warn("NodeSmith will be discontinued on 2019-12-20; please migrate to another platform.");
    let host = null;

    switch (network.name) {
      case "homestead":
        host = "https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc";
        break;

      case "ropsten":
        host = "https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc";
        break;

      case "rinkeby":
        host = "https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc";
        break;

      case "goerli":
        host = "https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc";
        break;

      case "kovan":
        host = "https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc";
        break;

      default:
        logger.throwArgumentError("unsupported network", "network", arguments[0]);
    }

    return host + "?apiKey=" + apiKey;
  }

}

exports.NodesmithProvider = NodesmithProvider;
},{"./url-json-rpc-provider":"../../node_modules/@ethersproject/providers/lib.esm/url-json-rpc-provider.js","@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","./_version":"../../node_modules/@ethersproject/providers/lib.esm/_version.js"}],"../../node_modules/@ethersproject/providers/lib.esm/pocket-provider.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PocketProvider = void 0;

var _properties = require("@ethersproject/properties");

var _logger = require("@ethersproject/logger");

var _version = require("./_version");

var _urlJsonRpcProvider = require("./url-json-rpc-provider");

const logger = new _logger.Logger(_version.version);
// These are load-balancer-based application IDs
const defaultApplicationIds = {
  homestead: "6004bcd10040261633ade990",
  ropsten: "6004bd4d0040261633ade991",
  rinkeby: "6004bda20040261633ade994",
  goerli: "6004bd860040261633ade992"
};

class PocketProvider extends _urlJsonRpcProvider.UrlJsonRpcProvider {
  constructor(network, apiKey) {
    // We need a bit of creativity in the constructor because
    // Pocket uses different default API keys based on the network
    if (apiKey == null) {
      const n = (0, _properties.getStatic)(new.target, "getNetwork")(network);

      if (n) {
        const applicationId = defaultApplicationIds[n.name];

        if (applicationId) {
          apiKey = {
            applicationId: applicationId,
            loadBalancer: true
          };
        }
      } // If there was any issue above, we don't know this network


      if (apiKey == null) {
        logger.throwError("unsupported network", _logger.Logger.errors.INVALID_ARGUMENT, {
          argument: "network",
          value: network
        });
      }
    }

    super(network, apiKey);
  }

  static getApiKey(apiKey) {
    // Most API Providers allow null to get the default configuration, but
    // Pocket requires the network to decide the default provider, so we
    // rely on hijacking the constructor to add a sensible default for us
    if (apiKey == null) {
      logger.throwArgumentError("PocketProvider.getApiKey does not support null apiKey", "apiKey", apiKey);
    }

    const apiKeyObj = {
      applicationId: null,
      loadBalancer: false,
      applicationSecretKey: null
    }; // Parse applicationId and applicationSecretKey

    if (typeof apiKey === "string") {
      apiKeyObj.applicationId = apiKey;
    } else if (apiKey.applicationSecretKey != null) {
      logger.assertArgument(typeof apiKey.applicationId === "string", "applicationSecretKey requires an applicationId", "applicationId", apiKey.applicationId);
      logger.assertArgument(typeof apiKey.applicationSecretKey === "string", "invalid applicationSecretKey", "applicationSecretKey", "[REDACTED]");
      apiKeyObj.applicationId = apiKey.applicationId;
      apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;
      apiKeyObj.loadBalancer = !!apiKey.loadBalancer;
    } else if (apiKey.applicationId) {
      logger.assertArgument(typeof apiKey.applicationId === "string", "apiKey.applicationId must be a string", "apiKey.applicationId", apiKey.applicationId);
      apiKeyObj.applicationId = apiKey.applicationId;
      apiKeyObj.loadBalancer = !!apiKey.loadBalancer;
    } else {
      logger.throwArgumentError("unsupported PocketProvider apiKey", "apiKey", apiKey);
    }

    return apiKeyObj;
  }

  static getUrl(network, apiKey) {
    let host = null;

    switch (network ? network.name : "unknown") {
      case "homestead":
        host = "eth-mainnet.gateway.pokt.network";
        break;

      case "ropsten":
        host = "eth-ropsten.gateway.pokt.network";
        break;

      case "rinkeby":
        host = "eth-rinkeby.gateway.pokt.network";
        break;

      case "goerli":
        host = "eth-goerli.gateway.pokt.network";
        break;

      default:
        logger.throwError("unsupported network", _logger.Logger.errors.INVALID_ARGUMENT, {
          argument: "network",
          value: network
        });
    }

    let url = null;

    if (apiKey.loadBalancer) {
      url = `https:/\/${host}/v1/lb/${apiKey.applicationId}`;
    } else {
      url = `https:/\/${host}/v1/${apiKey.applicationId}`;
    }

    const connection = {
      url
    }; // Initialize empty headers

    connection.headers = {}; // Apply application secret key

    if (apiKey.applicationSecretKey != null) {
      connection.user = "";
      connection.password = apiKey.applicationSecretKey;
    }

    return connection;
  }

  isCommunityResource() {
    return this.applicationId === defaultApplicationIds[this.network.name];
  }

}

exports.PocketProvider = PocketProvider;
},{"@ethersproject/properties":"../../node_modules/@ethersproject/properties/lib.esm/index.js","@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","./_version":"../../node_modules/@ethersproject/providers/lib.esm/_version.js","./url-json-rpc-provider":"../../node_modules/@ethersproject/providers/lib.esm/url-json-rpc-provider.js"}],"../../node_modules/@ethersproject/providers/lib.esm/web3-provider.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Web3Provider = void 0;

var _properties = require("@ethersproject/properties");

var _logger = require("@ethersproject/logger");

var _version = require("./_version");

var _jsonRpcProvider = require("./json-rpc-provider");

const logger = new _logger.Logger(_version.version);
let _nextId = 1;

function buildWeb3LegacyFetcher(provider, sendFunc) {
  const fetcher = "Web3LegacyFetcher";
  return function (method, params) {
    const request = {
      method: method,
      params: params,
      id: _nextId++,
      jsonrpc: "2.0"
    };
    return new Promise((resolve, reject) => {
      this.emit("debug", {
        action: "request",
        fetcher,
        request: (0, _properties.deepCopy)(request),
        provider: this
      });
      sendFunc(request, (error, response) => {
        if (error) {
          this.emit("debug", {
            action: "response",
            fetcher,
            error,
            request,
            provider: this
          });
          return reject(error);
        }

        this.emit("debug", {
          action: "response",
          fetcher,
          request,
          response,
          provider: this
        });

        if (response.error) {
          const error = new Error(response.error.message);
          error.code = response.error.code;
          error.data = response.error.data;
          return reject(error);
        }

        resolve(response.result);
      });
    });
  };
}

function buildEip1193Fetcher(provider) {
  return function (method, params) {
    if (params == null) {
      params = [];
    }

    const request = {
      method,
      params
    };
    this.emit("debug", {
      action: "request",
      fetcher: "Eip1193Fetcher",
      request: (0, _properties.deepCopy)(request),
      provider: this
    });
    return provider.request(request).then(response => {
      this.emit("debug", {
        action: "response",
        fetcher: "Eip1193Fetcher",
        request,
        response,
        provider: this
      });
      return response;
    }, error => {
      this.emit("debug", {
        action: "response",
        fetcher: "Eip1193Fetcher",
        request,
        error,
        provider: this
      });
      throw error;
    });
  };
}

class Web3Provider extends _jsonRpcProvider.JsonRpcProvider {
  constructor(provider, network) {
    logger.checkNew(new.target, Web3Provider);

    if (provider == null) {
      logger.throwArgumentError("missing provider", "provider", provider);
    }

    let path = null;
    let jsonRpcFetchFunc = null;
    let subprovider = null;

    if (typeof provider === "function") {
      path = "unknown:";
      jsonRpcFetchFunc = provider;
    } else {
      path = provider.host || provider.path || "";

      if (!path && provider.isMetaMask) {
        path = "metamask";
      }

      subprovider = provider;

      if (provider.request) {
        if (path === "") {
          path = "eip-1193:";
        }

        jsonRpcFetchFunc = buildEip1193Fetcher(provider);
      } else if (provider.sendAsync) {
        jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));
      } else if (provider.send) {
        jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));
      } else {
        logger.throwArgumentError("unsupported provider", "provider", provider);
      }

      if (!path) {
        path = "unknown:";
      }
    }

    super(path, network);
    (0, _properties.defineReadOnly)(this, "jsonRpcFetchFunc", jsonRpcFetchFunc);
    (0, _properties.defineReadOnly)(this, "provider", subprovider);
  }

  send(method, params) {
    return this.jsonRpcFetchFunc(method, params);
  }

}

exports.Web3Provider = Web3Provider;
},{"@ethersproject/properties":"../../node_modules/@ethersproject/properties/lib.esm/index.js","@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","./_version":"../../node_modules/@ethersproject/providers/lib.esm/_version.js","./json-rpc-provider":"../../node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js"}],"../../node_modules/@ethersproject/providers/lib.esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "AlchemyProvider", {
  enumerable: true,
  get: function () {
    return _alchemyProvider.AlchemyProvider;
  }
});
Object.defineProperty(exports, "AlchemyWebSocketProvider", {
  enumerable: true,
  get: function () {
    return _alchemyProvider.AlchemyWebSocketProvider;
  }
});
Object.defineProperty(exports, "AnkrProvider", {
  enumerable: true,
  get: function () {
    return _ankrProvider.AnkrProvider;
  }
});
Object.defineProperty(exports, "BaseProvider", {
  enumerable: true,
  get: function () {
    return _baseProvider.BaseProvider;
  }
});
Object.defineProperty(exports, "CloudflareProvider", {
  enumerable: true,
  get: function () {
    return _cloudflareProvider.CloudflareProvider;
  }
});
Object.defineProperty(exports, "EtherscanProvider", {
  enumerable: true,
  get: function () {
    return _etherscanProvider.EtherscanProvider;
  }
});
Object.defineProperty(exports, "FallbackProvider", {
  enumerable: true,
  get: function () {
    return _fallbackProvider.FallbackProvider;
  }
});
Object.defineProperty(exports, "Formatter", {
  enumerable: true,
  get: function () {
    return _formatter.Formatter;
  }
});
Object.defineProperty(exports, "InfuraProvider", {
  enumerable: true,
  get: function () {
    return _infuraProvider.InfuraProvider;
  }
});
Object.defineProperty(exports, "InfuraWebSocketProvider", {
  enumerable: true,
  get: function () {
    return _infuraProvider.InfuraWebSocketProvider;
  }
});
Object.defineProperty(exports, "IpcProvider", {
  enumerable: true,
  get: function () {
    return _ipcProvider.IpcProvider;
  }
});
Object.defineProperty(exports, "JsonRpcBatchProvider", {
  enumerable: true,
  get: function () {
    return _jsonRpcBatchProvider.JsonRpcBatchProvider;
  }
});
Object.defineProperty(exports, "JsonRpcProvider", {
  enumerable: true,
  get: function () {
    return _jsonRpcProvider.JsonRpcProvider;
  }
});
Object.defineProperty(exports, "JsonRpcSigner", {
  enumerable: true,
  get: function () {
    return _jsonRpcProvider.JsonRpcSigner;
  }
});
Object.defineProperty(exports, "NodesmithProvider", {
  enumerable: true,
  get: function () {
    return _nodesmithProvider.NodesmithProvider;
  }
});
Object.defineProperty(exports, "PocketProvider", {
  enumerable: true,
  get: function () {
    return _pocketProvider.PocketProvider;
  }
});
Object.defineProperty(exports, "Provider", {
  enumerable: true,
  get: function () {
    return _abstractProvider.Provider;
  }
});
Object.defineProperty(exports, "Resolver", {
  enumerable: true,
  get: function () {
    return _baseProvider.Resolver;
  }
});
Object.defineProperty(exports, "StaticJsonRpcProvider", {
  enumerable: true,
  get: function () {
    return _urlJsonRpcProvider.StaticJsonRpcProvider;
  }
});
Object.defineProperty(exports, "UrlJsonRpcProvider", {
  enumerable: true,
  get: function () {
    return _urlJsonRpcProvider.UrlJsonRpcProvider;
  }
});
Object.defineProperty(exports, "Web3Provider", {
  enumerable: true,
  get: function () {
    return _web3Provider.Web3Provider;
  }
});
Object.defineProperty(exports, "WebSocketProvider", {
  enumerable: true,
  get: function () {
    return _websocketProvider.WebSocketProvider;
  }
});
exports.getDefaultProvider = getDefaultProvider;
Object.defineProperty(exports, "getNetwork", {
  enumerable: true,
  get: function () {
    return _networks.getNetwork;
  }
});
Object.defineProperty(exports, "isCommunityResourcable", {
  enumerable: true,
  get: function () {
    return _formatter.isCommunityResourcable;
  }
});
Object.defineProperty(exports, "isCommunityResource", {
  enumerable: true,
  get: function () {
    return _formatter.isCommunityResource;
  }
});
Object.defineProperty(exports, "showThrottleMessage", {
  enumerable: true,
  get: function () {
    return _formatter.showThrottleMessage;
  }
});

var _abstractProvider = require("@ethersproject/abstract-provider");

var _networks = require("@ethersproject/networks");

var _baseProvider = require("./base-provider");

var _alchemyProvider = require("./alchemy-provider");

var _ankrProvider = require("./ankr-provider");

var _cloudflareProvider = require("./cloudflare-provider");

var _etherscanProvider = require("./etherscan-provider");

var _fallbackProvider = require("./fallback-provider");

var _ipcProvider = require("./ipc-provider");

var _infuraProvider = require("./infura-provider");

var _jsonRpcProvider = require("./json-rpc-provider");

var _jsonRpcBatchProvider = require("./json-rpc-batch-provider");

var _nodesmithProvider = require("./nodesmith-provider");

var _pocketProvider = require("./pocket-provider");

var _urlJsonRpcProvider = require("./url-json-rpc-provider");

var _web3Provider = require("./web3-provider");

var _websocketProvider = require("./websocket-provider");

var _formatter = require("./formatter");

var _logger = require("@ethersproject/logger");

var _version = require("./_version");

const logger = new _logger.Logger(_version.version); ////////////////////////
// Helper Functions

function getDefaultProvider(network, options) {
  if (network == null) {
    network = "homestead";
  } // If passed a URL, figure out the right type of provider based on the scheme


  if (typeof network === "string") {
    // @TODO: Add support for IpcProvider; maybe if it ends in ".ipc"?
    // Handle http and ws (and their secure variants)
    const match = network.match(/^(ws|http)s?:/i);

    if (match) {
      switch (match[1]) {
        case "http":
          return new _jsonRpcProvider.JsonRpcProvider(network);

        case "ws":
          return new _websocketProvider.WebSocketProvider(network);

        default:
          logger.throwArgumentError("unsupported URL scheme", "network", network);
      }
    }
  }

  const n = (0, _networks.getNetwork)(network);

  if (!n || !n._defaultProvider) {
    logger.throwError("unsupported getDefaultProvider network", _logger.Logger.errors.NETWORK_ERROR, {
      operation: "getDefaultProvider",
      network: network
    });
  }

  return n._defaultProvider({
    FallbackProvider: _fallbackProvider.FallbackProvider,
    AlchemyProvider: _alchemyProvider.AlchemyProvider,
    AnkrProvider: _ankrProvider.AnkrProvider,
    CloudflareProvider: _cloudflareProvider.CloudflareProvider,
    EtherscanProvider: _etherscanProvider.EtherscanProvider,
    InfuraProvider: _infuraProvider.InfuraProvider,
    JsonRpcProvider: _jsonRpcProvider.JsonRpcProvider,
    NodesmithProvider: _nodesmithProvider.NodesmithProvider,
    PocketProvider: _pocketProvider.PocketProvider,
    Web3Provider: _web3Provider.Web3Provider,
    IpcProvider: _ipcProvider.IpcProvider
  }, options);
} ////////////////////////
// Exports
},{"@ethersproject/abstract-provider":"../../node_modules/@ethersproject/abstract-provider/lib.esm/index.js","@ethersproject/networks":"../../node_modules/@ethersproject/networks/lib.esm/index.js","./base-provider":"../../node_modules/@ethersproject/providers/lib.esm/base-provider.js","./alchemy-provider":"../../node_modules/@ethersproject/providers/lib.esm/alchemy-provider.js","./ankr-provider":"../../node_modules/@ethersproject/providers/lib.esm/ankr-provider.js","./cloudflare-provider":"../../node_modules/@ethersproject/providers/lib.esm/cloudflare-provider.js","./etherscan-provider":"../../node_modules/@ethersproject/providers/lib.esm/etherscan-provider.js","./fallback-provider":"../../node_modules/@ethersproject/providers/lib.esm/fallback-provider.js","./ipc-provider":"../../node_modules/@ethersproject/providers/lib.esm/ipc-provider.js","./infura-provider":"../../node_modules/@ethersproject/providers/lib.esm/infura-provider.js","./json-rpc-provider":"../../node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js","./json-rpc-batch-provider":"../../node_modules/@ethersproject/providers/lib.esm/json-rpc-batch-provider.js","./nodesmith-provider":"../../node_modules/@ethersproject/providers/lib.esm/nodesmith-provider.js","./pocket-provider":"../../node_modules/@ethersproject/providers/lib.esm/pocket-provider.js","./url-json-rpc-provider":"../../node_modules/@ethersproject/providers/lib.esm/url-json-rpc-provider.js","./web3-provider":"../../node_modules/@ethersproject/providers/lib.esm/web3-provider.js","./websocket-provider":"../../node_modules/@ethersproject/providers/lib.esm/websocket-provider.js","./formatter":"../../node_modules/@ethersproject/providers/lib.esm/formatter.js","@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","./_version":"../../node_modules/@ethersproject/providers/lib.esm/_version.js"}],"../../node_modules/@ethersproject/solidity/lib.esm/_version.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.version = void 0;
const version = "solidity/5.6.0";
exports.version = version;
},{}],"../../node_modules/@ethersproject/solidity/lib.esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.keccak256 = keccak256;
exports.pack = pack;
exports.sha256 = sha256;

var _bignumber = require("@ethersproject/bignumber");

var _bytes = require("@ethersproject/bytes");

var _keccak = require("@ethersproject/keccak256");

var _sha = require("@ethersproject/sha2");

var _strings = require("@ethersproject/strings");

var _logger = require("@ethersproject/logger");

var _version = require("./_version");

const regexBytes = new RegExp("^bytes([0-9]+)$");
const regexNumber = new RegExp("^(u?int)([0-9]*)$");
const regexArray = new RegExp("^(.*)\\[([0-9]*)\\]$");
const Zeros = "0000000000000000000000000000000000000000000000000000000000000000";
const logger = new _logger.Logger(_version.version);

function _pack(type, value, isArray) {
  switch (type) {
    case "address":
      if (isArray) {
        return (0, _bytes.zeroPad)(value, 32);
      }

      return (0, _bytes.arrayify)(value);

    case "string":
      return (0, _strings.toUtf8Bytes)(value);

    case "bytes":
      return (0, _bytes.arrayify)(value);

    case "bool":
      value = value ? "0x01" : "0x00";

      if (isArray) {
        return (0, _bytes.zeroPad)(value, 32);
      }

      return (0, _bytes.arrayify)(value);
  }

  let match = type.match(regexNumber);

  if (match) {
    //let signed = (match[1] === "int")
    let size = parseInt(match[2] || "256");

    if (match[2] && String(size) !== match[2] || size % 8 !== 0 || size === 0 || size > 256) {
      logger.throwArgumentError("invalid number type", "type", type);
    }

    if (isArray) {
      size = 256;
    }

    value = _bignumber.BigNumber.from(value).toTwos(size);
    return (0, _bytes.zeroPad)(value, size / 8);
  }

  match = type.match(regexBytes);

  if (match) {
    const size = parseInt(match[1]);

    if (String(size) !== match[1] || size === 0 || size > 32) {
      logger.throwArgumentError("invalid bytes type", "type", type);
    }

    if ((0, _bytes.arrayify)(value).byteLength !== size) {
      logger.throwArgumentError(`invalid value for ${type}`, "value", value);
    }

    if (isArray) {
      return (0, _bytes.arrayify)((value + Zeros).substring(0, 66));
    }

    return value;
  }

  match = type.match(regexArray);

  if (match && Array.isArray(value)) {
    const baseType = match[1];
    const count = parseInt(match[2] || String(value.length));

    if (count != value.length) {
      logger.throwArgumentError(`invalid array length for ${type}`, "value", value);
    }

    const result = [];
    value.forEach(function (value) {
      result.push(_pack(baseType, value, true));
    });
    return (0, _bytes.concat)(result);
  }

  return logger.throwArgumentError("invalid type", "type", type);
} // @TODO: Array Enum


function pack(types, values) {
  if (types.length != values.length) {
    logger.throwArgumentError("wrong number of values; expected ${ types.length }", "values", values);
  }

  const tight = [];
  types.forEach(function (type, index) {
    tight.push(_pack(type, values[index]));
  });
  return (0, _bytes.hexlify)((0, _bytes.concat)(tight));
}

function keccak256(types, values) {
  return (0, _keccak.keccak256)(pack(types, values));
}

function sha256(types, values) {
  return (0, _sha.sha256)(pack(types, values));
}
},{"@ethersproject/bignumber":"../../node_modules/@ethersproject/bignumber/lib.esm/index.js","@ethersproject/bytes":"../../node_modules/@ethersproject/bytes/lib.esm/index.js","@ethersproject/keccak256":"../../node_modules/@ethersproject/keccak256/lib.esm/index.js","@ethersproject/sha2":"../../node_modules/@ethersproject/sha2/lib.esm/index.js","@ethersproject/strings":"../../node_modules/@ethersproject/strings/lib.esm/index.js","@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","./_version":"../../node_modules/@ethersproject/solidity/lib.esm/_version.js"}],"../../node_modules/@ethersproject/units/lib.esm/_version.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.version = void 0;
const version = "units/5.6.0";
exports.version = version;
},{}],"../../node_modules/@ethersproject/units/lib.esm/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.commify = commify;
exports.formatEther = formatEther;
exports.formatUnits = formatUnits;
exports.parseEther = parseEther;
exports.parseUnits = parseUnits;

var _bignumber = require("@ethersproject/bignumber");

var _logger = require("@ethersproject/logger");

var _version = require("./_version");

const logger = new _logger.Logger(_version.version);
const names = ["wei", "kwei", "mwei", "gwei", "szabo", "finney", "ether"]; // Some environments have issues with RegEx that contain back-tracking, so we cannot
// use them.

function commify(value) {
  const comps = String(value).split(".");

  if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || comps[1] && !comps[1].match(/^[0-9]*$/) || value === "." || value === "-.") {
    logger.throwArgumentError("invalid value", "value", value);
  } // Make sure we have at least one whole digit (0 if none)


  let whole = comps[0];
  let negative = "";

  if (whole.substring(0, 1) === "-") {
    negative = "-";
    whole = whole.substring(1);
  } // Make sure we have at least 1 whole digit with no leading zeros


  while (whole.substring(0, 1) === "0") {
    whole = whole.substring(1);
  }

  if (whole === "") {
    whole = "0";
  }

  let suffix = "";

  if (comps.length === 2) {
    suffix = "." + (comps[1] || "0");
  }

  while (suffix.length > 2 && suffix[suffix.length - 1] === "0") {
    suffix = suffix.substring(0, suffix.length - 1);
  }

  const formatted = [];

  while (whole.length) {
    if (whole.length <= 3) {
      formatted.unshift(whole);
      break;
    } else {
      const index = whole.length - 3;
      formatted.unshift(whole.substring(index));
      whole = whole.substring(0, index);
    }
  }

  return negative + formatted.join(",") + suffix;
}

function formatUnits(value, unitName) {
  if (typeof unitName === "string") {
    const index = names.indexOf(unitName);

    if (index !== -1) {
      unitName = 3 * index;
    }
  }

  return (0, _bignumber.formatFixed)(value, unitName != null ? unitName : 18);
}

function parseUnits(value, unitName) {
  if (typeof value !== "string") {
    logger.throwArgumentError("value must be a string", "value", value);
  }

  if (typeof unitName === "string") {
    const index = names.indexOf(unitName);

    if (index !== -1) {
      unitName = 3 * index;
    }
  }

  return (0, _bignumber.parseFixed)(value, unitName != null ? unitName : 18);
}

function formatEther(wei) {
  return formatUnits(wei, 18);
}

function parseEther(ether) {
  return parseUnits(ether, 18);
}
},{"@ethersproject/bignumber":"../../node_modules/@ethersproject/bignumber/lib.esm/index.js","@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","./_version":"../../node_modules/@ethersproject/units/lib.esm/_version.js"}],"../../node_modules/ethers/lib.esm/utils.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "AbiCoder", {
  enumerable: true,
  get: function () {
    return _abi.AbiCoder;
  }
});
Object.defineProperty(exports, "ConstructorFragment", {
  enumerable: true,
  get: function () {
    return _abi.ConstructorFragment;
  }
});
Object.defineProperty(exports, "ErrorFragment", {
  enumerable: true,
  get: function () {
    return _abi.ErrorFragment;
  }
});
Object.defineProperty(exports, "EventFragment", {
  enumerable: true,
  get: function () {
    return _abi.EventFragment;
  }
});
Object.defineProperty(exports, "FormatTypes", {
  enumerable: true,
  get: function () {
    return _abi.FormatTypes;
  }
});
Object.defineProperty(exports, "Fragment", {
  enumerable: true,
  get: function () {
    return _abi.Fragment;
  }
});
Object.defineProperty(exports, "FunctionFragment", {
  enumerable: true,
  get: function () {
    return _abi.FunctionFragment;
  }
});
Object.defineProperty(exports, "HDNode", {
  enumerable: true,
  get: function () {
    return _hdnode.HDNode;
  }
});
Object.defineProperty(exports, "Indexed", {
  enumerable: true,
  get: function () {
    return _abi.Indexed;
  }
});
Object.defineProperty(exports, "Interface", {
  enumerable: true,
  get: function () {
    return _abi.Interface;
  }
});
Object.defineProperty(exports, "LogDescription", {
  enumerable: true,
  get: function () {
    return _abi.LogDescription;
  }
});
Object.defineProperty(exports, "Logger", {
  enumerable: true,
  get: function () {
    return _logger.Logger;
  }
});
Object.defineProperty(exports, "ParamType", {
  enumerable: true,
  get: function () {
    return _abi.ParamType;
  }
});
exports.RLP = void 0;
Object.defineProperty(exports, "SigningKey", {
  enumerable: true,
  get: function () {
    return _signingKey.SigningKey;
  }
});
Object.defineProperty(exports, "SupportedAlgorithm", {
  enumerable: true,
  get: function () {
    return _sha.SupportedAlgorithm;
  }
});
Object.defineProperty(exports, "TransactionDescription", {
  enumerable: true,
  get: function () {
    return _abi.TransactionDescription;
  }
});
Object.defineProperty(exports, "TransactionTypes", {
  enumerable: true,
  get: function () {
    return _transactions.TransactionTypes;
  }
});
Object.defineProperty(exports, "UnicodeNormalizationForm", {
  enumerable: true,
  get: function () {
    return _strings.UnicodeNormalizationForm;
  }
});
Object.defineProperty(exports, "Utf8ErrorFuncs", {
  enumerable: true,
  get: function () {
    return _strings.Utf8ErrorFuncs;
  }
});
Object.defineProperty(exports, "Utf8ErrorReason", {
  enumerable: true,
  get: function () {
    return _strings.Utf8ErrorReason;
  }
});
Object.defineProperty(exports, "_TypedDataEncoder", {
  enumerable: true,
  get: function () {
    return _hash._TypedDataEncoder;
  }
});
Object.defineProperty(exports, "_fetchData", {
  enumerable: true,
  get: function () {
    return _web._fetchData;
  }
});
Object.defineProperty(exports, "_toEscapedUtf8String", {
  enumerable: true,
  get: function () {
    return _strings._toEscapedUtf8String;
  }
});
Object.defineProperty(exports, "accessListify", {
  enumerable: true,
  get: function () {
    return _transactions.accessListify;
  }
});
Object.defineProperty(exports, "arrayify", {
  enumerable: true,
  get: function () {
    return _bytes.arrayify;
  }
});
Object.defineProperty(exports, "base58", {
  enumerable: true,
  get: function () {
    return _basex.Base58;
  }
});
exports.base64 = void 0;
Object.defineProperty(exports, "checkProperties", {
  enumerable: true,
  get: function () {
    return _properties.checkProperties;
  }
});
Object.defineProperty(exports, "checkResultErrors", {
  enumerable: true,
  get: function () {
    return _abi.checkResultErrors;
  }
});
Object.defineProperty(exports, "commify", {
  enumerable: true,
  get: function () {
    return _units.commify;
  }
});
Object.defineProperty(exports, "computeAddress", {
  enumerable: true,
  get: function () {
    return _transactions.computeAddress;
  }
});
Object.defineProperty(exports, "computeHmac", {
  enumerable: true,
  get: function () {
    return _sha.computeHmac;
  }
});
Object.defineProperty(exports, "computePublicKey", {
  enumerable: true,
  get: function () {
    return _signingKey.computePublicKey;
  }
});
Object.defineProperty(exports, "concat", {
  enumerable: true,
  get: function () {
    return _bytes.concat;
  }
});
Object.defineProperty(exports, "deepCopy", {
  enumerable: true,
  get: function () {
    return _properties.deepCopy;
  }
});
Object.defineProperty(exports, "defaultAbiCoder", {
  enumerable: true,
  get: function () {
    return _abi.defaultAbiCoder;
  }
});
Object.defineProperty(exports, "defaultPath", {
  enumerable: true,
  get: function () {
    return _hdnode.defaultPath;
  }
});
Object.defineProperty(exports, "defineReadOnly", {
  enumerable: true,
  get: function () {
    return _properties.defineReadOnly;
  }
});
Object.defineProperty(exports, "dnsEncode", {
  enumerable: true,
  get: function () {
    return _hash.dnsEncode;
  }
});
Object.defineProperty(exports, "entropyToMnemonic", {
  enumerable: true,
  get: function () {
    return _hdnode.entropyToMnemonic;
  }
});
Object.defineProperty(exports, "fetchJson", {
  enumerable: true,
  get: function () {
    return _web.fetchJson;
  }
});
Object.defineProperty(exports, "formatBytes32String", {
  enumerable: true,
  get: function () {
    return _strings.formatBytes32String;
  }
});
Object.defineProperty(exports, "formatEther", {
  enumerable: true,
  get: function () {
    return _units.formatEther;
  }
});
Object.defineProperty(exports, "formatUnits", {
  enumerable: true,
  get: function () {
    return _units.formatUnits;
  }
});
Object.defineProperty(exports, "getAccountPath", {
  enumerable: true,
  get: function () {
    return _hdnode.getAccountPath;
  }
});
Object.defineProperty(exports, "getAddress", {
  enumerable: true,
  get: function () {
    return _address.getAddress;
  }
});
Object.defineProperty(exports, "getContractAddress", {
  enumerable: true,
  get: function () {
    return _address.getContractAddress;
  }
});
Object.defineProperty(exports, "getCreate2Address", {
  enumerable: true,
  get: function () {
    return _address.getCreate2Address;
  }
});
Object.defineProperty(exports, "getIcapAddress", {
  enumerable: true,
  get: function () {
    return _address.getIcapAddress;
  }
});
Object.defineProperty(exports, "getJsonWalletAddress", {
  enumerable: true,
  get: function () {
    return _jsonWallets.getJsonWalletAddress;
  }
});
Object.defineProperty(exports, "getStatic", {
  enumerable: true,
  get: function () {
    return _properties.getStatic;
  }
});
Object.defineProperty(exports, "hashMessage", {
  enumerable: true,
  get: function () {
    return _hash.hashMessage;
  }
});
Object.defineProperty(exports, "hexConcat", {
  enumerable: true,
  get: function () {
    return _bytes.hexConcat;
  }
});
Object.defineProperty(exports, "hexDataLength", {
  enumerable: true,
  get: function () {
    return _bytes.hexDataLength;
  }
});
Object.defineProperty(exports, "hexDataSlice", {
  enumerable: true,
  get: function () {
    return _bytes.hexDataSlice;
  }
});
Object.defineProperty(exports, "hexStripZeros", {
  enumerable: true,
  get: function () {
    return _bytes.hexStripZeros;
  }
});
Object.defineProperty(exports, "hexValue", {
  enumerable: true,
  get: function () {
    return _bytes.hexValue;
  }
});
Object.defineProperty(exports, "hexZeroPad", {
  enumerable: true,
  get: function () {
    return _bytes.hexZeroPad;
  }
});
Object.defineProperty(exports, "hexlify", {
  enumerable: true,
  get: function () {
    return _bytes.hexlify;
  }
});
Object.defineProperty(exports, "id", {
  enumerable: true,
  get: function () {
    return _hash.id;
  }
});
Object.defineProperty(exports, "isAddress", {
  enumerable: true,
  get: function () {
    return _address.isAddress;
  }
});
Object.defineProperty(exports, "isBytes", {
  enumerable: true,
  get: function () {
    return _bytes.isBytes;
  }
});
Object.defineProperty(exports, "isBytesLike", {
  enumerable: true,
  get: function () {
    return _bytes.isBytesLike;
  }
});
Object.defineProperty(exports, "isHexString", {
  enumerable: true,
  get: function () {
    return _bytes.isHexString;
  }
});
Object.defineProperty(exports, "isValidMnemonic", {
  enumerable: true,
  get: function () {
    return _hdnode.isValidMnemonic;
  }
});
Object.defineProperty(exports, "isValidName", {
  enumerable: true,
  get: function () {
    return _hash.isValidName;
  }
});
Object.defineProperty(exports, "joinSignature", {
  enumerable: true,
  get: function () {
    return _bytes.joinSignature;
  }
});
Object.defineProperty(exports, "keccak256", {
  enumerable: true,
  get: function () {
    return _keccak.keccak256;
  }
});
Object.defineProperty(exports, "mnemonicToEntropy", {
  enumerable: true,
  get: function () {
    return _hdnode.mnemonicToEntropy;
  }
});
Object.defineProperty(exports, "mnemonicToSeed", {
  enumerable: true,
  get: function () {
    return _hdnode.mnemonicToSeed;
  }
});
Object.defineProperty(exports, "namehash", {
  enumerable: true,
  get: function () {
    return _hash.namehash;
  }
});
Object.defineProperty(exports, "nameprep", {
  enumerable: true,
  get: function () {
    return _strings.nameprep;
  }
});
Object.defineProperty(exports, "parseBytes32String", {
  enumerable: true,
  get: function () {
    return _strings.parseBytes32String;
  }
});
Object.defineProperty(exports, "parseEther", {
  enumerable: true,
  get: function () {
    return _units.parseEther;
  }
});
Object.defineProperty(exports, "parseTransaction", {
  enumerable: true,
  get: function () {
    return _transactions.parse;
  }
});
Object.defineProperty(exports, "parseUnits", {
  enumerable: true,
  get: function () {
    return _units.parseUnits;
  }
});
Object.defineProperty(exports, "poll", {
  enumerable: true,
  get: function () {
    return _web.poll;
  }
});
Object.defineProperty(exports, "randomBytes", {
  enumerable: true,
  get: function () {
    return _random.randomBytes;
  }
});
Object.defineProperty(exports, "recoverAddress", {
  enumerable: true,
  get: function () {
    return _transactions.recoverAddress;
  }
});
Object.defineProperty(exports, "recoverPublicKey", {
  enumerable: true,
  get: function () {
    return _signingKey.recoverPublicKey;
  }
});
Object.defineProperty(exports, "resolveProperties", {
  enumerable: true,
  get: function () {
    return _properties.resolveProperties;
  }
});
Object.defineProperty(exports, "ripemd160", {
  enumerable: true,
  get: function () {
    return _sha.ripemd160;
  }
});
Object.defineProperty(exports, "serializeTransaction", {
  enumerable: true,
  get: function () {
    return _transactions.serialize;
  }
});
Object.defineProperty(exports, "sha256", {
  enumerable: true,
  get: function () {
    return _sha.sha256;
  }
});
Object.defineProperty(exports, "sha512", {
  enumerable: true,
  get: function () {
    return _sha.sha512;
  }
});
Object.defineProperty(exports, "shallowCopy", {
  enumerable: true,
  get: function () {
    return _properties.shallowCopy;
  }
});
Object.defineProperty(exports, "shuffled", {
  enumerable: true,
  get: function () {
    return _random.shuffled;
  }
});
Object.defineProperty(exports, "solidityKeccak256", {
  enumerable: true,
  get: function () {
    return _solidity.keccak256;
  }
});
Object.defineProperty(exports, "solidityPack", {
  enumerable: true,
  get: function () {
    return _solidity.pack;
  }
});
Object.defineProperty(exports, "soliditySha256", {
  enumerable: true,
  get: function () {
    return _solidity.sha256;
  }
});
Object.defineProperty(exports, "splitSignature", {
  enumerable: true,
  get: function () {
    return _bytes.splitSignature;
  }
});
Object.defineProperty(exports, "stripZeros", {
  enumerable: true,
  get: function () {
    return _bytes.stripZeros;
  }
});
Object.defineProperty(exports, "toUtf8Bytes", {
  enumerable: true,
  get: function () {
    return _strings.toUtf8Bytes;
  }
});
Object.defineProperty(exports, "toUtf8CodePoints", {
  enumerable: true,
  get: function () {
    return _strings.toUtf8CodePoints;
  }
});
Object.defineProperty(exports, "toUtf8String", {
  enumerable: true,
  get: function () {
    return _strings.toUtf8String;
  }
});
Object.defineProperty(exports, "verifyMessage", {
  enumerable: true,
  get: function () {
    return _wallet.verifyMessage;
  }
});
Object.defineProperty(exports, "verifyTypedData", {
  enumerable: true,
  get: function () {
    return _wallet.verifyTypedData;
  }
});
Object.defineProperty(exports, "zeroPad", {
  enumerable: true,
  get: function () {
    return _bytes.zeroPad;
  }
});

var _abi = require("@ethersproject/abi");

var _address = require("@ethersproject/address");

var base64 = _interopRequireWildcard(require("@ethersproject/base64"));

exports.base64 = base64;

var _basex = require("@ethersproject/basex");

var _bytes = require("@ethersproject/bytes");

var _hash = require("@ethersproject/hash");

var _hdnode = require("@ethersproject/hdnode");

var _jsonWallets = require("@ethersproject/json-wallets");

var _keccak = require("@ethersproject/keccak256");

var _logger = require("@ethersproject/logger");

var _sha = require("@ethersproject/sha2");

var _solidity = require("@ethersproject/solidity");

var _random = require("@ethersproject/random");

var _properties = require("@ethersproject/properties");

var RLP = _interopRequireWildcard(require("@ethersproject/rlp"));

exports.RLP = RLP;

var _signingKey = require("@ethersproject/signing-key");

var _strings = require("@ethersproject/strings");

var _transactions = require("@ethersproject/transactions");

var _units = require("@ethersproject/units");

var _wallet = require("@ethersproject/wallet");

var _web = require("@ethersproject/web");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
},{"@ethersproject/abi":"../../node_modules/@ethersproject/abi/lib.esm/index.js","@ethersproject/address":"../../node_modules/@ethersproject/address/lib.esm/index.js","@ethersproject/base64":"../../node_modules/@ethersproject/base64/lib.esm/index.js","@ethersproject/basex":"../../node_modules/@ethersproject/basex/lib.esm/index.js","@ethersproject/bytes":"../../node_modules/@ethersproject/bytes/lib.esm/index.js","@ethersproject/hash":"../../node_modules/@ethersproject/hash/lib.esm/index.js","@ethersproject/hdnode":"../../node_modules/@ethersproject/hdnode/lib.esm/index.js","@ethersproject/json-wallets":"../../node_modules/@ethersproject/json-wallets/lib.esm/index.js","@ethersproject/keccak256":"../../node_modules/@ethersproject/keccak256/lib.esm/index.js","@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","@ethersproject/sha2":"../../node_modules/@ethersproject/sha2/lib.esm/index.js","@ethersproject/solidity":"../../node_modules/@ethersproject/solidity/lib.esm/index.js","@ethersproject/random":"../../node_modules/@ethersproject/random/lib.esm/index.js","@ethersproject/properties":"../../node_modules/@ethersproject/properties/lib.esm/index.js","@ethersproject/rlp":"../../node_modules/@ethersproject/rlp/lib.esm/index.js","@ethersproject/signing-key":"../../node_modules/@ethersproject/signing-key/lib.esm/index.js","@ethersproject/strings":"../../node_modules/@ethersproject/strings/lib.esm/index.js","@ethersproject/transactions":"../../node_modules/@ethersproject/transactions/lib.esm/index.js","@ethersproject/units":"../../node_modules/@ethersproject/units/lib.esm/index.js","@ethersproject/wallet":"../../node_modules/@ethersproject/wallet/lib.esm/index.js","@ethersproject/web":"../../node_modules/@ethersproject/web/lib.esm/index.js"}],"../../node_modules/ethers/lib.esm/_version.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.version = void 0;
const version = "ethers/5.6.4";
exports.version = version;
},{}],"../../node_modules/ethers/lib.esm/ethers.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "BaseContract", {
  enumerable: true,
  get: function () {
    return _contracts.BaseContract;
  }
});
Object.defineProperty(exports, "BigNumber", {
  enumerable: true,
  get: function () {
    return _bignumber.BigNumber;
  }
});
Object.defineProperty(exports, "Contract", {
  enumerable: true,
  get: function () {
    return _contracts.Contract;
  }
});
Object.defineProperty(exports, "ContractFactory", {
  enumerable: true,
  get: function () {
    return _contracts.ContractFactory;
  }
});
Object.defineProperty(exports, "FixedNumber", {
  enumerable: true,
  get: function () {
    return _bignumber.FixedNumber;
  }
});
Object.defineProperty(exports, "Signer", {
  enumerable: true,
  get: function () {
    return _abstractSigner.Signer;
  }
});
Object.defineProperty(exports, "VoidSigner", {
  enumerable: true,
  get: function () {
    return _abstractSigner.VoidSigner;
  }
});
Object.defineProperty(exports, "Wallet", {
  enumerable: true,
  get: function () {
    return _wallet.Wallet;
  }
});
Object.defineProperty(exports, "Wordlist", {
  enumerable: true,
  get: function () {
    return _wordlists.Wordlist;
  }
});
exports.constants = void 0;
Object.defineProperty(exports, "errors", {
  enumerable: true,
  get: function () {
    return _logger.ErrorCode;
  }
});
Object.defineProperty(exports, "getDefaultProvider", {
  enumerable: true,
  get: function () {
    return providers.getDefaultProvider;
  }
});
exports.utils = exports.providers = exports.logger = void 0;
Object.defineProperty(exports, "version", {
  enumerable: true,
  get: function () {
    return _version.version;
  }
});
Object.defineProperty(exports, "wordlists", {
  enumerable: true,
  get: function () {
    return _wordlists.wordlists;
  }
});

var _contracts = require("@ethersproject/contracts");

var _bignumber = require("@ethersproject/bignumber");

var _abstractSigner = require("@ethersproject/abstract-signer");

var _wallet = require("@ethersproject/wallet");

var constants = _interopRequireWildcard(require("@ethersproject/constants"));

exports.constants = constants;

var providers = _interopRequireWildcard(require("@ethersproject/providers"));

exports.providers = providers;

var _wordlists = require("@ethersproject/wordlists");

var utils = _interopRequireWildcard(require("./utils"));

exports.utils = utils;

var _logger = require("@ethersproject/logger");

var _version = require("./_version");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

////////////////////////
// Compile-Time Constants
// This is generated by "npm run dist"
const logger = new _logger.Logger(_version.version); ////////////////////////
// Exports

exports.logger = logger;
},{"@ethersproject/contracts":"../../node_modules/@ethersproject/contracts/lib.esm/index.js","@ethersproject/bignumber":"../../node_modules/@ethersproject/bignumber/lib.esm/index.js","@ethersproject/abstract-signer":"../../node_modules/@ethersproject/abstract-signer/lib.esm/index.js","@ethersproject/wallet":"../../node_modules/@ethersproject/wallet/lib.esm/index.js","@ethersproject/constants":"../../node_modules/@ethersproject/constants/lib.esm/index.js","@ethersproject/providers":"../../node_modules/@ethersproject/providers/lib.esm/index.js","@ethersproject/wordlists":"../../node_modules/@ethersproject/wordlists/lib.esm/index.js","./utils":"../../node_modules/ethers/lib.esm/utils.js","@ethersproject/logger":"../../node_modules/@ethersproject/logger/lib.esm/index.js","./_version":"../../node_modules/ethers/lib.esm/_version.js"}],"../../node_modules/ethers/lib.esm/index.js":[function(require,module,exports) {
"use strict"; // To modify this file, you must update ./misc/admin/lib/cmds/update-exports.js

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "BaseContract", {
  enumerable: true,
  get: function () {
    return ethers.BaseContract;
  }
});
Object.defineProperty(exports, "BigNumber", {
  enumerable: true,
  get: function () {
    return ethers.BigNumber;
  }
});
Object.defineProperty(exports, "Contract", {
  enumerable: true,
  get: function () {
    return ethers.Contract;
  }
});
Object.defineProperty(exports, "ContractFactory", {
  enumerable: true,
  get: function () {
    return ethers.ContractFactory;
  }
});
Object.defineProperty(exports, "FixedNumber", {
  enumerable: true,
  get: function () {
    return ethers.FixedNumber;
  }
});
Object.defineProperty(exports, "Signer", {
  enumerable: true,
  get: function () {
    return ethers.Signer;
  }
});
Object.defineProperty(exports, "VoidSigner", {
  enumerable: true,
  get: function () {
    return ethers.VoidSigner;
  }
});
Object.defineProperty(exports, "Wallet", {
  enumerable: true,
  get: function () {
    return ethers.Wallet;
  }
});
Object.defineProperty(exports, "Wordlist", {
  enumerable: true,
  get: function () {
    return ethers.Wordlist;
  }
});
Object.defineProperty(exports, "constants", {
  enumerable: true,
  get: function () {
    return ethers.constants;
  }
});
Object.defineProperty(exports, "errors", {
  enumerable: true,
  get: function () {
    return ethers.errors;
  }
});
exports.ethers = void 0;
Object.defineProperty(exports, "getDefaultProvider", {
  enumerable: true,
  get: function () {
    return ethers.getDefaultProvider;
  }
});
Object.defineProperty(exports, "logger", {
  enumerable: true,
  get: function () {
    return ethers.logger;
  }
});
Object.defineProperty(exports, "providers", {
  enumerable: true,
  get: function () {
    return ethers.providers;
  }
});
Object.defineProperty(exports, "utils", {
  enumerable: true,
  get: function () {
    return ethers.utils;
  }
});
Object.defineProperty(exports, "version", {
  enumerable: true,
  get: function () {
    return ethers.version;
  }
});
Object.defineProperty(exports, "wordlists", {
  enumerable: true,
  get: function () {
    return ethers.wordlists;
  }
});

var ethers = _interopRequireWildcard(require("./ethers"));

exports.ethers = ethers;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

try {
  const anyGlobal = window;

  if (anyGlobal._ethers == null) {
    anyGlobal._ethers = ethers;
  }
} catch (error) {}
},{"./ethers":"../../node_modules/ethers/lib.esm/ethers.js"}],"../build/contracts/ERC721smartcontract.json":[function(require,module,exports) {
module.exports = {
  "contractName": "ERC721SmartContract",
  "abi": [{
    "inputs": [],
    "stateMutability": "nonpayable",
    "type": "constructor"
  }, {
    "anonymous": false,
    "inputs": [{
      "indexed": true,
      "internalType": "address",
      "name": "owner",
      "type": "address"
    }, {
      "indexed": true,
      "internalType": "address",
      "name": "approved",
      "type": "address"
    }, {
      "indexed": true,
      "internalType": "uint256",
      "name": "tokenId",
      "type": "uint256"
    }],
    "name": "Approval",
    "type": "event"
  }, {
    "anonymous": false,
    "inputs": [{
      "indexed": true,
      "internalType": "address",
      "name": "owner",
      "type": "address"
    }, {
      "indexed": true,
      "internalType": "address",
      "name": "operator",
      "type": "address"
    }, {
      "indexed": false,
      "internalType": "bool",
      "name": "approved",
      "type": "bool"
    }],
    "name": "ApprovalForAll",
    "type": "event"
  }, {
    "anonymous": false,
    "inputs": [{
      "indexed": true,
      "internalType": "address",
      "name": "previousOwner",
      "type": "address"
    }, {
      "indexed": true,
      "internalType": "address",
      "name": "newOwner",
      "type": "address"
    }],
    "name": "OwnershipTransferred",
    "type": "event"
  }, {
    "anonymous": false,
    "inputs": [{
      "indexed": true,
      "internalType": "address",
      "name": "from",
      "type": "address"
    }, {
      "indexed": true,
      "internalType": "address",
      "name": "to",
      "type": "address"
    }, {
      "indexed": true,
      "internalType": "uint256",
      "name": "tokenId",
      "type": "uint256"
    }],
    "name": "Transfer",
    "type": "event"
  }, {
    "inputs": [],
    "name": "_initBaseURI",
    "outputs": [{
      "internalType": "string",
      "name": "",
      "type": "string"
    }],
    "stateMutability": "view",
    "type": "function"
  }, {
    "inputs": [],
    "name": "_name",
    "outputs": [{
      "internalType": "string",
      "name": "",
      "type": "string"
    }],
    "stateMutability": "view",
    "type": "function"
  }, {
    "inputs": [],
    "name": "_symbol",
    "outputs": [{
      "internalType": "string",
      "name": "",
      "type": "string"
    }],
    "stateMutability": "view",
    "type": "function"
  }, {
    "inputs": [{
      "internalType": "address",
      "name": "to",
      "type": "address"
    }, {
      "internalType": "uint256",
      "name": "tokenId",
      "type": "uint256"
    }],
    "name": "approve",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  }, {
    "inputs": [{
      "internalType": "address",
      "name": "owner",
      "type": "address"
    }],
    "name": "balanceOf",
    "outputs": [{
      "internalType": "uint256",
      "name": "",
      "type": "uint256"
    }],
    "stateMutability": "view",
    "type": "function"
  }, {
    "inputs": [],
    "name": "baseExtension",
    "outputs": [{
      "internalType": "string",
      "name": "",
      "type": "string"
    }],
    "stateMutability": "view",
    "type": "function"
  }, {
    "inputs": [],
    "name": "baseURI",
    "outputs": [{
      "internalType": "string",
      "name": "",
      "type": "string"
    }],
    "stateMutability": "view",
    "type": "function"
  }, {
    "inputs": [],
    "name": "cost",
    "outputs": [{
      "internalType": "uint256",
      "name": "",
      "type": "uint256"
    }],
    "stateMutability": "view",
    "type": "function"
  }, {
    "inputs": [{
      "internalType": "uint256",
      "name": "tokenId",
      "type": "uint256"
    }],
    "name": "getApproved",
    "outputs": [{
      "internalType": "address",
      "name": "",
      "type": "address"
    }],
    "stateMutability": "view",
    "type": "function"
  }, {
    "inputs": [{
      "internalType": "address",
      "name": "owner",
      "type": "address"
    }, {
      "internalType": "address",
      "name": "operator",
      "type": "address"
    }],
    "name": "isApprovedForAll",
    "outputs": [{
      "internalType": "bool",
      "name": "",
      "type": "bool"
    }],
    "stateMutability": "view",
    "type": "function"
  }, {
    "inputs": [],
    "name": "maxMintAmount",
    "outputs": [{
      "internalType": "uint256",
      "name": "",
      "type": "uint256"
    }],
    "stateMutability": "view",
    "type": "function"
  }, {
    "inputs": [],
    "name": "maxSupply",
    "outputs": [{
      "internalType": "uint256",
      "name": "",
      "type": "uint256"
    }],
    "stateMutability": "view",
    "type": "function"
  }, {
    "inputs": [],
    "name": "name",
    "outputs": [{
      "internalType": "string",
      "name": "",
      "type": "string"
    }],
    "stateMutability": "view",
    "type": "function"
  }, {
    "inputs": [],
    "name": "owner",
    "outputs": [{
      "internalType": "address",
      "name": "",
      "type": "address"
    }],
    "stateMutability": "view",
    "type": "function"
  }, {
    "inputs": [{
      "internalType": "uint256",
      "name": "tokenId",
      "type": "uint256"
    }],
    "name": "ownerOf",
    "outputs": [{
      "internalType": "address",
      "name": "",
      "type": "address"
    }],
    "stateMutability": "view",
    "type": "function"
  }, {
    "inputs": [],
    "name": "paused",
    "outputs": [{
      "internalType": "bool",
      "name": "",
      "type": "bool"
    }],
    "stateMutability": "view",
    "type": "function"
  }, {
    "inputs": [],
    "name": "renounceOwnership",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  }, {
    "inputs": [{
      "internalType": "address",
      "name": "from",
      "type": "address"
    }, {
      "internalType": "address",
      "name": "to",
      "type": "address"
    }, {
      "internalType": "uint256",
      "name": "tokenId",
      "type": "uint256"
    }],
    "name": "safeTransferFrom",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  }, {
    "inputs": [{
      "internalType": "address",
      "name": "from",
      "type": "address"
    }, {
      "internalType": "address",
      "name": "to",
      "type": "address"
    }, {
      "internalType": "uint256",
      "name": "tokenId",
      "type": "uint256"
    }, {
      "internalType": "bytes",
      "name": "_data",
      "type": "bytes"
    }],
    "name": "safeTransferFrom",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  }, {
    "inputs": [{
      "internalType": "address",
      "name": "operator",
      "type": "address"
    }, {
      "internalType": "bool",
      "name": "approved",
      "type": "bool"
    }],
    "name": "setApprovalForAll",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  }, {
    "inputs": [{
      "internalType": "bytes4",
      "name": "interfaceId",
      "type": "bytes4"
    }],
    "name": "supportsInterface",
    "outputs": [{
      "internalType": "bool",
      "name": "",
      "type": "bool"
    }],
    "stateMutability": "view",
    "type": "function"
  }, {
    "inputs": [],
    "name": "symbol",
    "outputs": [{
      "internalType": "string",
      "name": "",
      "type": "string"
    }],
    "stateMutability": "view",
    "type": "function"
  }, {
    "inputs": [{
      "internalType": "uint256",
      "name": "index",
      "type": "uint256"
    }],
    "name": "tokenByIndex",
    "outputs": [{
      "internalType": "uint256",
      "name": "",
      "type": "uint256"
    }],
    "stateMutability": "view",
    "type": "function"
  }, {
    "inputs": [{
      "internalType": "address",
      "name": "owner",
      "type": "address"
    }, {
      "internalType": "uint256",
      "name": "index",
      "type": "uint256"
    }],
    "name": "tokenOfOwnerByIndex",
    "outputs": [{
      "internalType": "uint256",
      "name": "",
      "type": "uint256"
    }],
    "stateMutability": "view",
    "type": "function"
  }, {
    "inputs": [],
    "name": "totalSupply",
    "outputs": [{
      "internalType": "uint256",
      "name": "",
      "type": "uint256"
    }],
    "stateMutability": "view",
    "type": "function"
  }, {
    "inputs": [{
      "internalType": "address",
      "name": "from",
      "type": "address"
    }, {
      "internalType": "address",
      "name": "to",
      "type": "address"
    }, {
      "internalType": "uint256",
      "name": "tokenId",
      "type": "uint256"
    }],
    "name": "transferFrom",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  }, {
    "inputs": [{
      "internalType": "address",
      "name": "newOwner",
      "type": "address"
    }],
    "name": "transferOwnership",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  }, {
    "inputs": [{
      "internalType": "address",
      "name": "",
      "type": "address"
    }],
    "name": "whitelisted",
    "outputs": [{
      "internalType": "bool",
      "name": "",
      "type": "bool"
    }],
    "stateMutability": "view",
    "type": "function"
  }, {
    "inputs": [{
      "internalType": "address",
      "name": "_to",
      "type": "address"
    }, {
      "internalType": "uint256",
      "name": "_mintAmount",
      "type": "uint256"
    }],
    "name": "mint",
    "outputs": [],
    "stateMutability": "payable",
    "type": "function"
  }, {
    "inputs": [{
      "internalType": "address",
      "name": "_owner",
      "type": "address"
    }],
    "name": "walletOfOwner",
    "outputs": [{
      "internalType": "uint256[]",
      "name": "",
      "type": "uint256[]"
    }],
    "stateMutability": "view",
    "type": "function"
  }, {
    "inputs": [{
      "internalType": "uint256",
      "name": "tokenId",
      "type": "uint256"
    }],
    "name": "tokenURI",
    "outputs": [{
      "internalType": "string",
      "name": "",
      "type": "string"
    }],
    "stateMutability": "view",
    "type": "function"
  }, {
    "inputs": [{
      "internalType": "uint256",
      "name": "_newCost",
      "type": "uint256"
    }],
    "name": "setCost",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  }, {
    "inputs": [{
      "internalType": "uint256",
      "name": "_newmaxMintAmount",
      "type": "uint256"
    }],
    "name": "setmaxMintAmount",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  }, {
    "inputs": [{
      "internalType": "string",
      "name": "_newBaseURI",
      "type": "string"
    }],
    "name": "setBaseURI",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  }, {
    "inputs": [{
      "internalType": "string",
      "name": "_newBaseExtension",
      "type": "string"
    }],
    "name": "setBaseExtension",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  }, {
    "inputs": [{
      "internalType": "bool",
      "name": "_state",
      "type": "bool"
    }],
    "name": "pause",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  }, {
    "inputs": [{
      "internalType": "address",
      "name": "_user",
      "type": "address"
    }],
    "name": "whitelistUser",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  }, {
    "inputs": [{
      "internalType": "address",
      "name": "_user",
      "type": "address"
    }],
    "name": "removeWhitelistUser",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  }, {
    "inputs": [],
    "name": "withdraw",
    "outputs": [],
    "stateMutability": "payable",
    "type": "function"
  }],
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_initBaseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseExtension\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"removeWhitelistUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseExtension\",\"type\":\"string\"}],\"name\":\"setBaseExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCost\",\"type\":\"uint256\"}],\"name\":\"setCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newmaxMintAmount\",\"type\":\"uint256\"}],\"name\":\"setmaxMintAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"whitelistUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/SmartContract.sol\":\"ERC721SmartContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/contracts/SmartContract.sol\":{\"keccak256\":\"0x187e87b0eb99cb9082084bfb2ceaafd71d2ea758ee62a449ddbb9684154eeb8a\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://854f2582ca6978b5583a928b46626fcdbc36e85d253ab65408b2711dbae8600d\",\"dweb:/ipfs/QmfLtT6cmjcuLr8fkgPuuKYKhTBTN1BpNFup1vfmHZZnhx\"]}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106102305760003560e01c806355f804b31161012e578063b09f1266116100ab578063d5abeb011161006f578063d5abeb0114610821578063d936547e1461084c578063da3ef23f14610889578063e985e9c5146108b2578063f2fde38b146108ef57610230565b8063b09f12661461073a578063b88d4fde14610765578063c66828621461078e578063c87b56dd146107b9578063d28d8852146107f657610230565b8063715018a6116100f2578063715018a61461067b5780637f00c7a6146106925780638da5cb5b146106bb57806395d89b41146106e6578063a22cb4651461071157610230565b806355f804b3146105825780635c975abb146105ab5780636352211e146105d65780636c0360eb1461061357806370a082311461063e57610230565b806323b872dd116101bc57806342842e0e1161018057806342842e0e1461048d578063438b6300146104b657806344a0d68a146104f35780634a4c560d1461051c5780634f6ccce71461054557610230565b806323b872dd146103d85780632f745c591461040157806330cc7ae01461043e5780633ccfd60b1461046757806340c10f191461047157610230565b8063095ea7b311610203578063095ea7b31461030357806313faede61461032c57806318160ddd146103575780631de18b3614610382578063239c70ae146103ad57610230565b806301ffc9a71461023557806302329a291461027257806306fdde031461029b578063081812fc146102c6575b600080fd5b34801561024157600080fd5b5061025c60048036038101906102579190613018565b610918565b6040516102699190613060565b60405180910390f35b34801561027e57600080fd5b50610299600480360381019061029491906130a7565b610992565b005b3480156102a757600080fd5b506102b0610a2b565b6040516102bd919061316d565b60405180910390f35b3480156102d257600080fd5b506102ed60048036038101906102e891906131c5565b610abd565b6040516102fa9190613233565b60405180910390f35b34801561030f57600080fd5b5061032a6004803603810190610325919061327a565b610b42565b005b34801561033857600080fd5b50610341610c59565b60405161034e91906132c9565b60405180910390f35b34801561036357600080fd5b5061036c610c5f565b60405161037991906132c9565b60405180910390f35b34801561038e57600080fd5b50610397610c6c565b6040516103a4919061316d565b60405180910390f35b3480156103b957600080fd5b506103c2610cfa565b6040516103cf91906132c9565b60405180910390f35b3480156103e457600080fd5b506103ff60048036038101906103fa91906132e4565b610d00565b005b34801561040d57600080fd5b506104286004803603810190610423919061327a565b610d60565b60405161043591906132c9565b60405180910390f35b34801561044a57600080fd5b5061046560048036038101906104609190613337565b610e05565b005b61046f610edc565b005b61048b6004803603810190610486919061327a565b610f98565b005b34801561049957600080fd5b506104b460048036038101906104af91906132e4565b6110c4565b005b3480156104c257600080fd5b506104dd60048036038101906104d89190613337565b6110e4565b6040516104ea9190613422565b60405180910390f35b3480156104ff57600080fd5b5061051a600480360381019061051591906131c5565b611192565b005b34801561052857600080fd5b50610543600480360381019061053e9190613337565b611218565b005b34801561055157600080fd5b5061056c600480360381019061056791906131c5565b6112ef565b60405161057991906132c9565b60405180910390f35b34801561058e57600080fd5b506105a960048036038101906105a49190613579565b611360565b005b3480156105b757600080fd5b506105c06113f6565b6040516105cd9190613060565b60405180910390f35b3480156105e257600080fd5b506105fd60048036038101906105f891906131c5565b611409565b60405161060a9190613233565b60405180910390f35b34801561061f57600080fd5b506106286114ba565b604051610635919061316d565b60405180910390f35b34801561064a57600080fd5b5061066560048036038101906106609190613337565b611548565b60405161067291906132c9565b60405180910390f35b34801561068757600080fd5b506106906115ff565b005b34801561069e57600080fd5b506106b960048036038101906106b491906131c5565b611687565b005b3480156106c757600080fd5b506106d061170d565b6040516106dd9190613233565b60405180910390f35b3480156106f257600080fd5b506106fb611737565b604051610708919061316d565b60405180910390f35b34801561071d57600080fd5b50610738600480360381019061073391906135c2565b6117c9565b005b34801561074657600080fd5b5061074f611949565b60405161075c919061316d565b60405180910390f35b34801561077157600080fd5b5061078c600480360381019061078791906136a3565b6119d7565b005b34801561079a57600080fd5b506107a3611a39565b6040516107b0919061316d565b60405180910390f35b3480156107c557600080fd5b506107e060048036038101906107db91906131c5565b611ac7565b6040516107ed919061316d565b60405180910390f35b34801561080257600080fd5b5061080b611b71565b604051610818919061316d565b60405180910390f35b34801561082d57600080fd5b50610836611bff565b60405161084391906132c9565b60405180910390f35b34801561085857600080fd5b50610873600480360381019061086e9190613337565b611c05565b6040516108809190613060565b60405180910390f35b34801561089557600080fd5b506108b060048036038101906108ab9190613579565b611c25565b005b3480156108be57600080fd5b506108d960048036038101906108d49190613726565b611cbb565b6040516108e69190613060565b60405180910390f35b3480156108fb57600080fd5b5061091660048036038101906109119190613337565b611d4f565b005b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061098b575061098a82611e46565b5b9050919050565b61099a611f28565b73ffffffffffffffffffffffffffffffffffffffff166109b861170d565b73ffffffffffffffffffffffffffffffffffffffff1614610a0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a05906137b2565b60405180910390fd5b80601060006101000a81548160ff02191690831515021790555050565b606060008054610a3a90613801565b80601f0160208091040260200160405190810160405280929190818152602001828054610a6690613801565b8015610ab35780601f10610a8857610100808354040283529160200191610ab3565b820191906000526020600020905b815481529060010190602001808311610a9657829003601f168201915b5050505050905090565b6000610ac882611f30565b610b07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610afe906138a4565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610b4d82611409565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610bbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb490613936565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610bdc611f28565b73ffffffffffffffffffffffffffffffffffffffff161480610c0b5750610c0a81610c05611f28565b611cbb565b5b610c4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c41906139c8565b60405180910390fd5b610c548383611f9c565b505050565b600d5481565b6000600880549050905090565b60138054610c7990613801565b80601f0160208091040260200160405190810160405280929190818152602001828054610ca590613801565b8015610cf25780601f10610cc757610100808354040283529160200191610cf2565b820191906000526020600020905b815481529060010190602001808311610cd557829003601f168201915b505050505081565b600f5481565b610d11610d0b611f28565b82612055565b610d50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4790613a5a565b60405180910390fd5b610d5b838383612133565b505050565b6000610d6b83611548565b8210610dac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da390613aec565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b610e0d611f28565b73ffffffffffffffffffffffffffffffffffffffff16610e2b61170d565b73ffffffffffffffffffffffffffffffffffffffff1614610e81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e78906137b2565b60405180910390fd5b6000601460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b610ee4611f28565b73ffffffffffffffffffffffffffffffffffffffff16610f0261170d565b73ffffffffffffffffffffffffffffffffffffffff1614610f58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4f906137b2565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050610f9657600080fd5b565b6000610fa2610c5f565b905060008211610fb157600080fd5b600f54821115610fc057600080fd5b600e548282610fcf9190613b3b565b1115610fda57600080fd5b610fe261170d565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110885760011515601460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515146110875781600d5461107a9190613b91565b34101561108657600080fd5b5b5b6000600190505b8281116110be576110ab8482846110a69190613b3b565b61238e565b80806110b690613beb565b91505061108f565b50505050565b6110df838383604051806020016040528060008152506119d7565b505050565b606060006110f183611548565b905060008167ffffffffffffffff81111561110f5761110e61344e565b5b60405190808252806020026020018201604052801561113d5781602001602082028036833780820191505090505b50905060005b82811015611187576111558582610d60565b82828151811061116857611167613c33565b5b602002602001018181525050808061117f90613beb565b915050611143565b508092505050919050565b61119a611f28565b73ffffffffffffffffffffffffffffffffffffffff166111b861170d565b73ffffffffffffffffffffffffffffffffffffffff161461120e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611205906137b2565b60405180910390fd5b80600d8190555050565b611220611f28565b73ffffffffffffffffffffffffffffffffffffffff1661123e61170d565b73ffffffffffffffffffffffffffffffffffffffff1614611294576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128b906137b2565b60405180910390fd5b6001601460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60006112f9610c5f565b821061133a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133190613cd4565b60405180910390fd5b6008828154811061134e5761134d613c33565b5b90600052602060002001549050919050565b611368611f28565b73ffffffffffffffffffffffffffffffffffffffff1661138661170d565b73ffffffffffffffffffffffffffffffffffffffff16146113dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d3906137b2565b60405180910390fd5b80600b90805190602001906113f2929190612f09565b5050565b601060009054906101000a900460ff1681565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036114b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a890613d66565b60405180910390fd5b80915050919050565b600b80546114c790613801565b80601f01602080910402602001604051908101604052809291908181526020018280546114f390613801565b80156115405780601f1061151557610100808354040283529160200191611540565b820191906000526020600020905b81548152906001019060200180831161152357829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036115b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115af90613df8565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b611607611f28565b73ffffffffffffffffffffffffffffffffffffffff1661162561170d565b73ffffffffffffffffffffffffffffffffffffffff161461167b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611672906137b2565b60405180910390fd5b61168560006123ac565b565b61168f611f28565b73ffffffffffffffffffffffffffffffffffffffff166116ad61170d565b73ffffffffffffffffffffffffffffffffffffffff1614611703576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116fa906137b2565b60405180910390fd5b80600f8190555050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606001805461174690613801565b80601f016020809104026020016040519081016040528092919081815260200182805461177290613801565b80156117bf5780601f10611794576101008083540402835291602001916117bf565b820191906000526020600020905b8154815290600101906020018083116117a257829003601f168201915b5050505050905090565b6117d1611f28565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361183e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183590613e64565b60405180910390fd5b806005600061184b611f28565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166118f8611f28565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161193d9190613060565b60405180910390a35050565b6012805461195690613801565b80601f016020809104026020016040519081016040528092919081815260200182805461198290613801565b80156119cf5780601f106119a4576101008083540402835291602001916119cf565b820191906000526020600020905b8154815290600101906020018083116119b257829003601f168201915b505050505081565b6119e86119e2611f28565b83612055565b611a27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1e90613a5a565b60405180910390fd5b611a3384848484612472565b50505050565b600c8054611a4690613801565b80601f0160208091040260200160405190810160405280929190818152602001828054611a7290613801565b8015611abf5780601f10611a9457610100808354040283529160200191611abf565b820191906000526020600020905b815481529060010190602001808311611aa257829003601f168201915b505050505081565b6060611ad282611f30565b611b11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b0890613ef6565b60405180910390fd5b6000611b1b6124ce565b90506000815111611b3b5760405180602001604052806000815250611b69565b80611b4584612560565b600c604051602001611b5993929190613fe6565b6040516020818303038152906040525b915050919050565b60118054611b7e90613801565b80601f0160208091040260200160405190810160405280929190818152602001828054611baa90613801565b8015611bf75780601f10611bcc57610100808354040283529160200191611bf7565b820191906000526020600020905b815481529060010190602001808311611bda57829003601f168201915b505050505081565b600e5481565b60146020528060005260406000206000915054906101000a900460ff1681565b611c2d611f28565b73ffffffffffffffffffffffffffffffffffffffff16611c4b61170d565b73ffffffffffffffffffffffffffffffffffffffff1614611ca1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c98906137b2565b60405180910390fd5b80600c9080519060200190611cb7929190612f09565b5050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611d57611f28565b73ffffffffffffffffffffffffffffffffffffffff16611d7561170d565b73ffffffffffffffffffffffffffffffffffffffff1614611dcb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dc2906137b2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611e3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3190614089565b60405180910390fd5b611e43816123ac565b50565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611f1157507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611f215750611f20826126c0565b5b9050919050565b600033905090565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661200f83611409565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061206082611f30565b61209f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120969061411b565b60405180910390fd5b60006120aa83611409565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061211957508373ffffffffffffffffffffffffffffffffffffffff1661210184610abd565b73ffffffffffffffffffffffffffffffffffffffff16145b8061212a57506121298185611cbb565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661215382611409565b73ffffffffffffffffffffffffffffffffffffffff16146121a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121a0906141ad565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612218576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161220f9061423f565b60405180910390fd5b61222383838361272a565b61222e600082611f9c565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461227e919061425f565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546122d59190613b3b565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6123a882826040518060200160405280600081525061283c565b5050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61247d848484612133565b61248984848484612897565b6124c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124bf90614305565b60405180910390fd5b50505050565b6060600b80546124dd90613801565b80601f016020809104026020016040519081016040528092919081815260200182805461250990613801565b80156125565780601f1061252b57610100808354040283529160200191612556565b820191906000526020600020905b81548152906001019060200180831161253957829003601f168201915b5050505050905090565b6060600082036125a7576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506126bb565b600082905060005b600082146125d95780806125c290613beb565b915050600a826125d29190614354565b91506125af565b60008167ffffffffffffffff8111156125f5576125f461344e565b5b6040519080825280601f01601f1916602001820160405280156126275781602001600182028036833780820191505090505b5090505b600085146126b457600182612640919061425f565b9150600a8561264f9190614385565b603061265b9190613b3b565b60f81b81838151811061267157612670613c33565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856126ad9190614354565b945061262b565b8093505050505b919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b612735838383612a1e565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036127775761277281612a23565b6127b6565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146127b5576127b48382612a6c565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036127f8576127f381612bd9565b612837565b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614612836576128358282612caa565b5b5b505050565b6128468383612d29565b6128536000848484612897565b612892576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161288990614305565b60405180910390fd5b505050565b60006128b88473ffffffffffffffffffffffffffffffffffffffff16612ef6565b15612a11578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026128e1611f28565b8786866040518563ffffffff1660e01b8152600401612903949392919061440b565b6020604051808303816000875af192505050801561293f57506040513d601f19601f8201168201806040525081019061293c919061446c565b60015b6129c1573d806000811461296f576040519150601f19603f3d011682016040523d82523d6000602084013e612974565b606091505b5060008151036129b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129b090614305565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612a16565b600190505b949350505050565b505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b60006001612a7984611548565b612a83919061425f565b9050600060076000848152602001908152602001600020549050818114612b68576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b60006001600880549050612bed919061425f565b9050600060096000848152602001908152602001600020549050600060088381548110612c1d57612c1c613c33565b5b906000526020600020015490508060088381548110612c3f57612c3e613c33565b5b906000526020600020018190555081600960008381526020019081526020016000208190555060096000858152602001908152602001600020600090556008805480612c8e57612c8d614499565b5b6001900381819060005260206000200160009055905550505050565b6000612cb583611548565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612d98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d8f90614514565b60405180910390fd5b612da181611f30565b15612de1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612dd890614580565b60405180910390fd5b612ded6000838361272a565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612e3d9190613b3b565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600080823b905060008111915050919050565b828054612f1590613801565b90600052602060002090601f016020900481019282612f375760008555612f7e565b82601f10612f5057805160ff1916838001178555612f7e565b82800160010185558215612f7e579182015b82811115612f7d578251825591602001919060010190612f62565b5b509050612f8b9190612f8f565b5090565b5b80821115612fa8576000816000905550600101612f90565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b612ff581612fc0565b811461300057600080fd5b50565b60008135905061301281612fec565b92915050565b60006020828403121561302e5761302d612fb6565b5b600061303c84828501613003565b91505092915050565b60008115159050919050565b61305a81613045565b82525050565b60006020820190506130756000830184613051565b92915050565b61308481613045565b811461308f57600080fd5b50565b6000813590506130a18161307b565b92915050565b6000602082840312156130bd576130bc612fb6565b5b60006130cb84828501613092565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561310e5780820151818401526020810190506130f3565b8381111561311d576000848401525b50505050565b6000601f19601f8301169050919050565b600061313f826130d4565b61314981856130df565b93506131598185602086016130f0565b61316281613123565b840191505092915050565b600060208201905081810360008301526131878184613134565b905092915050565b6000819050919050565b6131a28161318f565b81146131ad57600080fd5b50565b6000813590506131bf81613199565b92915050565b6000602082840312156131db576131da612fb6565b5b60006131e9848285016131b0565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061321d826131f2565b9050919050565b61322d81613212565b82525050565b60006020820190506132486000830184613224565b92915050565b61325781613212565b811461326257600080fd5b50565b6000813590506132748161324e565b92915050565b6000806040838503121561329157613290612fb6565b5b600061329f85828601613265565b92505060206132b0858286016131b0565b9150509250929050565b6132c38161318f565b82525050565b60006020820190506132de60008301846132ba565b92915050565b6000806000606084860312156132fd576132fc612fb6565b5b600061330b86828701613265565b935050602061331c86828701613265565b925050604061332d868287016131b0565b9150509250925092565b60006020828403121561334d5761334c612fb6565b5b600061335b84828501613265565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6133998161318f565b82525050565b60006133ab8383613390565b60208301905092915050565b6000602082019050919050565b60006133cf82613364565b6133d9818561336f565b93506133e483613380565b8060005b838110156134155781516133fc888261339f565b9750613407836133b7565b9250506001810190506133e8565b5085935050505092915050565b6000602082019050818103600083015261343c81846133c4565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61348682613123565b810181811067ffffffffffffffff821117156134a5576134a461344e565b5b80604052505050565b60006134b8612fac565b90506134c4828261347d565b919050565b600067ffffffffffffffff8211156134e4576134e361344e565b5b6134ed82613123565b9050602081019050919050565b82818337600083830152505050565b600061351c613517846134c9565b6134ae565b90508281526020810184848401111561353857613537613449565b5b6135438482856134fa565b509392505050565b600082601f8301126135605761355f613444565b5b8135613570848260208601613509565b91505092915050565b60006020828403121561358f5761358e612fb6565b5b600082013567ffffffffffffffff8111156135ad576135ac612fbb565b5b6135b98482850161354b565b91505092915050565b600080604083850312156135d9576135d8612fb6565b5b60006135e785828601613265565b92505060206135f885828601613092565b9150509250929050565b600067ffffffffffffffff82111561361d5761361c61344e565b5b61362682613123565b9050602081019050919050565b600061364661364184613602565b6134ae565b90508281526020810184848401111561366257613661613449565b5b61366d8482856134fa565b509392505050565b600082601f83011261368a57613689613444565b5b813561369a848260208601613633565b91505092915050565b600080600080608085870312156136bd576136bc612fb6565b5b60006136cb87828801613265565b94505060206136dc87828801613265565b93505060406136ed878288016131b0565b925050606085013567ffffffffffffffff81111561370e5761370d612fbb565b5b61371a87828801613675565b91505092959194509250565b6000806040838503121561373d5761373c612fb6565b5b600061374b85828601613265565b925050602061375c85828601613265565b9150509250929050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061379c6020836130df565b91506137a782613766565b602082019050919050565b600060208201905081810360008301526137cb8161378f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061381957607f821691505b60208210810361382c5761382b6137d2565b5b50919050565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b600061388e602c836130df565b915061389982613832565b604082019050919050565b600060208201905081810360008301526138bd81613881565b9050919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006139206021836130df565b915061392b826138c4565b604082019050919050565b6000602082019050818103600083015261394f81613913565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b60006139b26038836130df565b91506139bd82613956565b604082019050919050565b600060208201905081810360008301526139e1816139a5565b9050919050565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b6000613a446031836130df565b9150613a4f826139e8565b604082019050919050565b60006020820190508181036000830152613a7381613a37565b9050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b6000613ad6602b836130df565b9150613ae182613a7a565b604082019050919050565b60006020820190508181036000830152613b0581613ac9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613b468261318f565b9150613b518361318f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613b8657613b85613b0c565b5b828201905092915050565b6000613b9c8261318f565b9150613ba78361318f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613be057613bdf613b0c565b5b828202905092915050565b6000613bf68261318f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613c2857613c27613b0c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b6000613cbe602c836130df565b9150613cc982613c62565b604082019050919050565b60006020820190508181036000830152613ced81613cb1565b9050919050565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b6000613d506029836130df565b9150613d5b82613cf4565b604082019050919050565b60006020820190508181036000830152613d7f81613d43565b9050919050565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b6000613de2602a836130df565b9150613ded82613d86565b604082019050919050565b60006020820190508181036000830152613e1181613dd5565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000613e4e6019836130df565b9150613e5982613e18565b602082019050919050565b60006020820190508181036000830152613e7d81613e41565b9050919050565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b6000613ee0602f836130df565b9150613eeb82613e84565b604082019050919050565b60006020820190508181036000830152613f0f81613ed3565b9050919050565b600081905092915050565b6000613f2c826130d4565b613f368185613f16565b9350613f468185602086016130f0565b80840191505092915050565b60008190508160005260206000209050919050565b60008154613f7481613801565b613f7e8186613f16565b94506001821660008114613f995760018114613faa57613fdd565b60ff19831686528186019350613fdd565b613fb385613f52565b60005b83811015613fd557815481890152600182019150602081019050613fb6565b838801955050505b50505092915050565b6000613ff28286613f21565b9150613ffe8285613f21565b915061400a8284613f67565b9150819050949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006140736026836130df565b915061407e82614017565b604082019050919050565b600060208201905081810360008301526140a281614066565b9050919050565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000614105602c836130df565b9150614110826140a9565b604082019050919050565b60006020820190508181036000830152614134816140f8565b9050919050565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b60006141976029836130df565b91506141a28261413b565b604082019050919050565b600060208201905081810360008301526141c68161418a565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006142296024836130df565b9150614234826141cd565b604082019050919050565b600060208201905081810360008301526142588161421c565b9050919050565b600061426a8261318f565b91506142758361318f565b92508282101561428857614287613b0c565b5b828203905092915050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006142ef6032836130df565b91506142fa82614293565b604082019050919050565b6000602082019050818103600083015261431e816142e2565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061435f8261318f565b915061436a8361318f565b92508261437a57614379614325565b5b828204905092915050565b60006143908261318f565b915061439b8361318f565b9250826143ab576143aa614325565b5b828206905092915050565b600081519050919050565b600082825260208201905092915050565b60006143dd826143b6565b6143e781856143c1565b93506143f78185602086016130f0565b61440081613123565b840191505092915050565b60006080820190506144206000830187613224565b61442d6020830186613224565b61443a60408301856132ba565b818103606083015261444c81846143d2565b905095945050505050565b60008151905061446681612fec565b92915050565b60006020828403121561448257614481612fb6565b5b600061449084828501614457565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006144fe6020836130df565b9150614509826144c8565b602082019050919050565b6000602082019050818103600083015261452d816144f1565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b600061456a601c836130df565b915061457582614534565b602082019050919050565b600060208201905081810360008301526145998161455d565b905091905056fea2646970667358221220d512db9e1c805415f9337578ed890b5ae4a1fe0c6b8f90de2b36dec4a024d83164736f6c634300080d0033",
  "immutableReferences": {},
  "generatedSources": [{
    "ast": {
      "nodeType": "YulBlock",
      "src": "0:1676:2",
      "statements": [{
        "body": {
          "nodeType": "YulBlock",
          "src": "35:152:2",
          "statements": [{
            "expression": {
              "arguments": [{
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "52:1:2",
                "type": "",
                "value": "0"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "55:77:2",
                "type": "",
                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "45:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "45:88:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "45:88:2"
          }, {
            "expression": {
              "arguments": [{
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "149:1:2",
                "type": "",
                "value": "4"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "152:4:2",
                "type": "",
                "value": "0x22"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "142:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "142:15:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "142:15:2"
          }, {
            "expression": {
              "arguments": [{
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "173:1:2",
                "type": "",
                "value": "0"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "176:4:2",
                "type": "",
                "value": "0x24"
              }],
              "functionName": {
                "name": "revert",
                "nodeType": "YulIdentifier",
                "src": "166:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "166:15:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "166:15:2"
          }]
        },
        "name": "panic_error_0x22",
        "nodeType": "YulFunctionDefinition",
        "src": "7:180:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "244:269:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "254:22:2",
            "value": {
              "arguments": [{
                "name": "data",
                "nodeType": "YulIdentifier",
                "src": "268:4:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "274:1:2",
                "type": "",
                "value": "2"
              }],
              "functionName": {
                "name": "div",
                "nodeType": "YulIdentifier",
                "src": "264:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "264:12:2"
            },
            "variableNames": [{
              "name": "length",
              "nodeType": "YulIdentifier",
              "src": "254:6:2"
            }]
          }, {
            "nodeType": "YulVariableDeclaration",
            "src": "285:38:2",
            "value": {
              "arguments": [{
                "name": "data",
                "nodeType": "YulIdentifier",
                "src": "315:4:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "321:1:2",
                "type": "",
                "value": "1"
              }],
              "functionName": {
                "name": "and",
                "nodeType": "YulIdentifier",
                "src": "311:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "311:12:2"
            },
            "variables": [{
              "name": "outOfPlaceEncoding",
              "nodeType": "YulTypedName",
              "src": "289:18:2",
              "type": ""
            }]
          }, {
            "body": {
              "nodeType": "YulBlock",
              "src": "362:51:2",
              "statements": [{
                "nodeType": "YulAssignment",
                "src": "376:27:2",
                "value": {
                  "arguments": [{
                    "name": "length",
                    "nodeType": "YulIdentifier",
                    "src": "390:6:2"
                  }, {
                    "kind": "number",
                    "nodeType": "YulLiteral",
                    "src": "398:4:2",
                    "type": "",
                    "value": "0x7f"
                  }],
                  "functionName": {
                    "name": "and",
                    "nodeType": "YulIdentifier",
                    "src": "386:3:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "386:17:2"
                },
                "variableNames": [{
                  "name": "length",
                  "nodeType": "YulIdentifier",
                  "src": "376:6:2"
                }]
              }]
            },
            "condition": {
              "arguments": [{
                "name": "outOfPlaceEncoding",
                "nodeType": "YulIdentifier",
                "src": "342:18:2"
              }],
              "functionName": {
                "name": "iszero",
                "nodeType": "YulIdentifier",
                "src": "335:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "335:26:2"
            },
            "nodeType": "YulIf",
            "src": "332:81:2"
          }, {
            "body": {
              "nodeType": "YulBlock",
              "src": "465:42:2",
              "statements": [{
                "expression": {
                  "arguments": [],
                  "functionName": {
                    "name": "panic_error_0x22",
                    "nodeType": "YulIdentifier",
                    "src": "479:16:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "479:18:2"
                },
                "nodeType": "YulExpressionStatement",
                "src": "479:18:2"
              }]
            },
            "condition": {
              "arguments": [{
                "name": "outOfPlaceEncoding",
                "nodeType": "YulIdentifier",
                "src": "429:18:2"
              }, {
                "arguments": [{
                  "name": "length",
                  "nodeType": "YulIdentifier",
                  "src": "452:6:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "460:2:2",
                  "type": "",
                  "value": "32"
                }],
                "functionName": {
                  "name": "lt",
                  "nodeType": "YulIdentifier",
                  "src": "449:2:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "449:14:2"
              }],
              "functionName": {
                "name": "eq",
                "nodeType": "YulIdentifier",
                "src": "426:2:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "426:38:2"
            },
            "nodeType": "YulIf",
            "src": "423:84:2"
          }]
        },
        "name": "extract_byte_array_length",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "data",
          "nodeType": "YulTypedName",
          "src": "228:4:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "length",
          "nodeType": "YulTypedName",
          "src": "237:6:2",
          "type": ""
        }],
        "src": "193:320:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "615:73:2",
          "statements": [{
            "expression": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "632:3:2"
              }, {
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "637:6:2"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "625:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "625:19:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "625:19:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "653:29:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "672:3:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "677:4:2",
                "type": "",
                "value": "0x20"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "668:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "668:14:2"
            },
            "variableNames": [{
              "name": "updated_pos",
              "nodeType": "YulIdentifier",
              "src": "653:11:2"
            }]
          }]
        },
        "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "pos",
          "nodeType": "YulTypedName",
          "src": "587:3:2",
          "type": ""
        }, {
          "name": "length",
          "nodeType": "YulTypedName",
          "src": "592:6:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "updated_pos",
          "nodeType": "YulTypedName",
          "src": "603:11:2",
          "type": ""
        }],
        "src": "519:169:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "800:76:2",
          "statements": [{
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "memPtr",
                  "nodeType": "YulIdentifier",
                  "src": "822:6:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "830:1:2",
                  "type": "",
                  "value": "0"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "818:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "818:14:2"
              }, {
                "hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
                "kind": "string",
                "nodeType": "YulLiteral",
                "src": "834:34:2",
                "type": "",
                "value": "Ownable: caller is not the owner"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "811:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "811:58:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "811:58:2"
          }]
        },
        "name": "store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "memPtr",
          "nodeType": "YulTypedName",
          "src": "792:6:2",
          "type": ""
        }],
        "src": "694:182:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "1028:220:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "1038:74:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "1104:3:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "1109:2:2",
                "type": "",
                "value": "32"
              }],
              "functionName": {
                "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "1045:58:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "1045:67:2"
            },
            "variableNames": [{
              "name": "pos",
              "nodeType": "YulIdentifier",
              "src": "1038:3:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "1210:3:2"
              }],
              "functionName": {
                "name": "store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
                "nodeType": "YulIdentifier",
                "src": "1121:88:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "1121:93:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "1121:93:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "1223:19:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "1234:3:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "1239:2:2",
                "type": "",
                "value": "32"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "1230:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "1230:12:2"
            },
            "variableNames": [{
              "name": "end",
              "nodeType": "YulIdentifier",
              "src": "1223:3:2"
            }]
          }]
        },
        "name": "abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "pos",
          "nodeType": "YulTypedName",
          "src": "1016:3:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "end",
          "nodeType": "YulTypedName",
          "src": "1024:3:2",
          "type": ""
        }],
        "src": "882:366:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "1425:248:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "1435:26:2",
            "value": {
              "arguments": [{
                "name": "headStart",
                "nodeType": "YulIdentifier",
                "src": "1447:9:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "1458:2:2",
                "type": "",
                "value": "32"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "1443:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "1443:18:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "1435:4:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "1482:9:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "1493:1:2",
                  "type": "",
                  "value": "0"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "1478:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "1478:17:2"
              }, {
                "arguments": [{
                  "name": "tail",
                  "nodeType": "YulIdentifier",
                  "src": "1501:4:2"
                }, {
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "1507:9:2"
                }],
                "functionName": {
                  "name": "sub",
                  "nodeType": "YulIdentifier",
                  "src": "1497:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "1497:20:2"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "1471:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "1471:47:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "1471:47:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "1527:139:2",
            "value": {
              "arguments": [{
                "name": "tail",
                "nodeType": "YulIdentifier",
                "src": "1661:4:2"
              }],
              "functionName": {
                "name": "abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "1535:124:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "1535:131:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "1527:4:2"
            }]
          }]
        },
        "name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "headStart",
          "nodeType": "YulTypedName",
          "src": "1405:9:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "tail",
          "nodeType": "YulTypedName",
          "src": "1420:4:2",
          "type": ""
        }],
        "src": "1254:419:2"
      }]
    },
    "contents": "{\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: caller is not the owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n",
    "id": 2,
    "language": "Yul",
    "name": "#utility.yul"
  }],
  "deployedGeneratedSources": [{
    "ast": {
      "nodeType": "YulBlock",
      "src": "0:39533:2",
      "statements": [{
        "body": {
          "nodeType": "YulBlock",
          "src": "47:35:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "57:19:2",
            "value": {
              "arguments": [{
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "73:2:2",
                "type": "",
                "value": "64"
              }],
              "functionName": {
                "name": "mload",
                "nodeType": "YulIdentifier",
                "src": "67:5:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "67:9:2"
            },
            "variableNames": [{
              "name": "memPtr",
              "nodeType": "YulIdentifier",
              "src": "57:6:2"
            }]
          }]
        },
        "name": "allocate_unbounded",
        "nodeType": "YulFunctionDefinition",
        "returnVariables": [{
          "name": "memPtr",
          "nodeType": "YulTypedName",
          "src": "40:6:2",
          "type": ""
        }],
        "src": "7:75:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "177:28:2",
          "statements": [{
            "expression": {
              "arguments": [{
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "194:1:2",
                "type": "",
                "value": "0"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "197:1:2",
                "type": "",
                "value": "0"
              }],
              "functionName": {
                "name": "revert",
                "nodeType": "YulIdentifier",
                "src": "187:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "187:12:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "187:12:2"
          }]
        },
        "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
        "nodeType": "YulFunctionDefinition",
        "src": "88:117:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "300:28:2",
          "statements": [{
            "expression": {
              "arguments": [{
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "317:1:2",
                "type": "",
                "value": "0"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "320:1:2",
                "type": "",
                "value": "0"
              }],
              "functionName": {
                "name": "revert",
                "nodeType": "YulIdentifier",
                "src": "310:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "310:12:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "310:12:2"
          }]
        },
        "name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
        "nodeType": "YulFunctionDefinition",
        "src": "211:117:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "378:105:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "388:89:2",
            "value": {
              "arguments": [{
                "name": "value",
                "nodeType": "YulIdentifier",
                "src": "403:5:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "410:66:2",
                "type": "",
                "value": "0xffffffff00000000000000000000000000000000000000000000000000000000"
              }],
              "functionName": {
                "name": "and",
                "nodeType": "YulIdentifier",
                "src": "399:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "399:78:2"
            },
            "variableNames": [{
              "name": "cleaned",
              "nodeType": "YulIdentifier",
              "src": "388:7:2"
            }]
          }]
        },
        "name": "cleanup_t_bytes4",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "value",
          "nodeType": "YulTypedName",
          "src": "360:5:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "cleaned",
          "nodeType": "YulTypedName",
          "src": "370:7:2",
          "type": ""
        }],
        "src": "334:149:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "531:78:2",
          "statements": [{
            "body": {
              "nodeType": "YulBlock",
              "src": "587:16:2",
              "statements": [{
                "expression": {
                  "arguments": [{
                    "kind": "number",
                    "nodeType": "YulLiteral",
                    "src": "596:1:2",
                    "type": "",
                    "value": "0"
                  }, {
                    "kind": "number",
                    "nodeType": "YulLiteral",
                    "src": "599:1:2",
                    "type": "",
                    "value": "0"
                  }],
                  "functionName": {
                    "name": "revert",
                    "nodeType": "YulIdentifier",
                    "src": "589:6:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "589:12:2"
                },
                "nodeType": "YulExpressionStatement",
                "src": "589:12:2"
              }]
            },
            "condition": {
              "arguments": [{
                "arguments": [{
                  "name": "value",
                  "nodeType": "YulIdentifier",
                  "src": "554:5:2"
                }, {
                  "arguments": [{
                    "name": "value",
                    "nodeType": "YulIdentifier",
                    "src": "578:5:2"
                  }],
                  "functionName": {
                    "name": "cleanup_t_bytes4",
                    "nodeType": "YulIdentifier",
                    "src": "561:16:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "561:23:2"
                }],
                "functionName": {
                  "name": "eq",
                  "nodeType": "YulIdentifier",
                  "src": "551:2:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "551:34:2"
              }],
              "functionName": {
                "name": "iszero",
                "nodeType": "YulIdentifier",
                "src": "544:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "544:42:2"
            },
            "nodeType": "YulIf",
            "src": "541:62:2"
          }]
        },
        "name": "validator_revert_t_bytes4",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "value",
          "nodeType": "YulTypedName",
          "src": "524:5:2",
          "type": ""
        }],
        "src": "489:120:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "666:86:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "676:29:2",
            "value": {
              "arguments": [{
                "name": "offset",
                "nodeType": "YulIdentifier",
                "src": "698:6:2"
              }],
              "functionName": {
                "name": "calldataload",
                "nodeType": "YulIdentifier",
                "src": "685:12:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "685:20:2"
            },
            "variableNames": [{
              "name": "value",
              "nodeType": "YulIdentifier",
              "src": "676:5:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "name": "value",
                "nodeType": "YulIdentifier",
                "src": "740:5:2"
              }],
              "functionName": {
                "name": "validator_revert_t_bytes4",
                "nodeType": "YulIdentifier",
                "src": "714:25:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "714:32:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "714:32:2"
          }]
        },
        "name": "abi_decode_t_bytes4",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "offset",
          "nodeType": "YulTypedName",
          "src": "644:6:2",
          "type": ""
        }, {
          "name": "end",
          "nodeType": "YulTypedName",
          "src": "652:3:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "value",
          "nodeType": "YulTypedName",
          "src": "660:5:2",
          "type": ""
        }],
        "src": "615:137:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "823:262:2",
          "statements": [{
            "body": {
              "nodeType": "YulBlock",
              "src": "869:83:2",
              "statements": [{
                "expression": {
                  "arguments": [],
                  "functionName": {
                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                    "nodeType": "YulIdentifier",
                    "src": "871:77:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "871:79:2"
                },
                "nodeType": "YulExpressionStatement",
                "src": "871:79:2"
              }]
            },
            "condition": {
              "arguments": [{
                "arguments": [{
                  "name": "dataEnd",
                  "nodeType": "YulIdentifier",
                  "src": "844:7:2"
                }, {
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "853:9:2"
                }],
                "functionName": {
                  "name": "sub",
                  "nodeType": "YulIdentifier",
                  "src": "840:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "840:23:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "865:2:2",
                "type": "",
                "value": "32"
              }],
              "functionName": {
                "name": "slt",
                "nodeType": "YulIdentifier",
                "src": "836:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "836:32:2"
            },
            "nodeType": "YulIf",
            "src": "833:119:2"
          }, {
            "nodeType": "YulBlock",
            "src": "962:116:2",
            "statements": [{
              "nodeType": "YulVariableDeclaration",
              "src": "977:15:2",
              "value": {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "991:1:2",
                "type": "",
                "value": "0"
              },
              "variables": [{
                "name": "offset",
                "nodeType": "YulTypedName",
                "src": "981:6:2",
                "type": ""
              }]
            }, {
              "nodeType": "YulAssignment",
              "src": "1006:62:2",
              "value": {
                "arguments": [{
                  "arguments": [{
                    "name": "headStart",
                    "nodeType": "YulIdentifier",
                    "src": "1040:9:2"
                  }, {
                    "name": "offset",
                    "nodeType": "YulIdentifier",
                    "src": "1051:6:2"
                  }],
                  "functionName": {
                    "name": "add",
                    "nodeType": "YulIdentifier",
                    "src": "1036:3:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "1036:22:2"
                }, {
                  "name": "dataEnd",
                  "nodeType": "YulIdentifier",
                  "src": "1060:7:2"
                }],
                "functionName": {
                  "name": "abi_decode_t_bytes4",
                  "nodeType": "YulIdentifier",
                  "src": "1016:19:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "1016:52:2"
              },
              "variableNames": [{
                "name": "value0",
                "nodeType": "YulIdentifier",
                "src": "1006:6:2"
              }]
            }]
          }]
        },
        "name": "abi_decode_tuple_t_bytes4",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "headStart",
          "nodeType": "YulTypedName",
          "src": "793:9:2",
          "type": ""
        }, {
          "name": "dataEnd",
          "nodeType": "YulTypedName",
          "src": "804:7:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "value0",
          "nodeType": "YulTypedName",
          "src": "816:6:2",
          "type": ""
        }],
        "src": "758:327:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "1133:48:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "1143:32:2",
            "value": {
              "arguments": [{
                "arguments": [{
                  "name": "value",
                  "nodeType": "YulIdentifier",
                  "src": "1168:5:2"
                }],
                "functionName": {
                  "name": "iszero",
                  "nodeType": "YulIdentifier",
                  "src": "1161:6:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "1161:13:2"
              }],
              "functionName": {
                "name": "iszero",
                "nodeType": "YulIdentifier",
                "src": "1154:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "1154:21:2"
            },
            "variableNames": [{
              "name": "cleaned",
              "nodeType": "YulIdentifier",
              "src": "1143:7:2"
            }]
          }]
        },
        "name": "cleanup_t_bool",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "value",
          "nodeType": "YulTypedName",
          "src": "1115:5:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "cleaned",
          "nodeType": "YulTypedName",
          "src": "1125:7:2",
          "type": ""
        }],
        "src": "1091:90:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "1246:50:2",
          "statements": [{
            "expression": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "1263:3:2"
              }, {
                "arguments": [{
                  "name": "value",
                  "nodeType": "YulIdentifier",
                  "src": "1283:5:2"
                }],
                "functionName": {
                  "name": "cleanup_t_bool",
                  "nodeType": "YulIdentifier",
                  "src": "1268:14:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "1268:21:2"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "1256:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "1256:34:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "1256:34:2"
          }]
        },
        "name": "abi_encode_t_bool_to_t_bool_fromStack",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "value",
          "nodeType": "YulTypedName",
          "src": "1234:5:2",
          "type": ""
        }, {
          "name": "pos",
          "nodeType": "YulTypedName",
          "src": "1241:3:2",
          "type": ""
        }],
        "src": "1187:109:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "1394:118:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "1404:26:2",
            "value": {
              "arguments": [{
                "name": "headStart",
                "nodeType": "YulIdentifier",
                "src": "1416:9:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "1427:2:2",
                "type": "",
                "value": "32"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "1412:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "1412:18:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "1404:4:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "name": "value0",
                "nodeType": "YulIdentifier",
                "src": "1478:6:2"
              }, {
                "arguments": [{
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "1491:9:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "1502:1:2",
                  "type": "",
                  "value": "0"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "1487:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "1487:17:2"
              }],
              "functionName": {
                "name": "abi_encode_t_bool_to_t_bool_fromStack",
                "nodeType": "YulIdentifier",
                "src": "1440:37:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "1440:65:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "1440:65:2"
          }]
        },
        "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "headStart",
          "nodeType": "YulTypedName",
          "src": "1366:9:2",
          "type": ""
        }, {
          "name": "value0",
          "nodeType": "YulTypedName",
          "src": "1378:6:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "tail",
          "nodeType": "YulTypedName",
          "src": "1389:4:2",
          "type": ""
        }],
        "src": "1302:210:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "1558:76:2",
          "statements": [{
            "body": {
              "nodeType": "YulBlock",
              "src": "1612:16:2",
              "statements": [{
                "expression": {
                  "arguments": [{
                    "kind": "number",
                    "nodeType": "YulLiteral",
                    "src": "1621:1:2",
                    "type": "",
                    "value": "0"
                  }, {
                    "kind": "number",
                    "nodeType": "YulLiteral",
                    "src": "1624:1:2",
                    "type": "",
                    "value": "0"
                  }],
                  "functionName": {
                    "name": "revert",
                    "nodeType": "YulIdentifier",
                    "src": "1614:6:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "1614:12:2"
                },
                "nodeType": "YulExpressionStatement",
                "src": "1614:12:2"
              }]
            },
            "condition": {
              "arguments": [{
                "arguments": [{
                  "name": "value",
                  "nodeType": "YulIdentifier",
                  "src": "1581:5:2"
                }, {
                  "arguments": [{
                    "name": "value",
                    "nodeType": "YulIdentifier",
                    "src": "1603:5:2"
                  }],
                  "functionName": {
                    "name": "cleanup_t_bool",
                    "nodeType": "YulIdentifier",
                    "src": "1588:14:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "1588:21:2"
                }],
                "functionName": {
                  "name": "eq",
                  "nodeType": "YulIdentifier",
                  "src": "1578:2:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "1578:32:2"
              }],
              "functionName": {
                "name": "iszero",
                "nodeType": "YulIdentifier",
                "src": "1571:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "1571:40:2"
            },
            "nodeType": "YulIf",
            "src": "1568:60:2"
          }]
        },
        "name": "validator_revert_t_bool",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "value",
          "nodeType": "YulTypedName",
          "src": "1551:5:2",
          "type": ""
        }],
        "src": "1518:116:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "1689:84:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "1699:29:2",
            "value": {
              "arguments": [{
                "name": "offset",
                "nodeType": "YulIdentifier",
                "src": "1721:6:2"
              }],
              "functionName": {
                "name": "calldataload",
                "nodeType": "YulIdentifier",
                "src": "1708:12:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "1708:20:2"
            },
            "variableNames": [{
              "name": "value",
              "nodeType": "YulIdentifier",
              "src": "1699:5:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "name": "value",
                "nodeType": "YulIdentifier",
                "src": "1761:5:2"
              }],
              "functionName": {
                "name": "validator_revert_t_bool",
                "nodeType": "YulIdentifier",
                "src": "1737:23:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "1737:30:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "1737:30:2"
          }]
        },
        "name": "abi_decode_t_bool",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "offset",
          "nodeType": "YulTypedName",
          "src": "1667:6:2",
          "type": ""
        }, {
          "name": "end",
          "nodeType": "YulTypedName",
          "src": "1675:3:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "value",
          "nodeType": "YulTypedName",
          "src": "1683:5:2",
          "type": ""
        }],
        "src": "1640:133:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "1842:260:2",
          "statements": [{
            "body": {
              "nodeType": "YulBlock",
              "src": "1888:83:2",
              "statements": [{
                "expression": {
                  "arguments": [],
                  "functionName": {
                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                    "nodeType": "YulIdentifier",
                    "src": "1890:77:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "1890:79:2"
                },
                "nodeType": "YulExpressionStatement",
                "src": "1890:79:2"
              }]
            },
            "condition": {
              "arguments": [{
                "arguments": [{
                  "name": "dataEnd",
                  "nodeType": "YulIdentifier",
                  "src": "1863:7:2"
                }, {
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "1872:9:2"
                }],
                "functionName": {
                  "name": "sub",
                  "nodeType": "YulIdentifier",
                  "src": "1859:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "1859:23:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "1884:2:2",
                "type": "",
                "value": "32"
              }],
              "functionName": {
                "name": "slt",
                "nodeType": "YulIdentifier",
                "src": "1855:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "1855:32:2"
            },
            "nodeType": "YulIf",
            "src": "1852:119:2"
          }, {
            "nodeType": "YulBlock",
            "src": "1981:114:2",
            "statements": [{
              "nodeType": "YulVariableDeclaration",
              "src": "1996:15:2",
              "value": {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "2010:1:2",
                "type": "",
                "value": "0"
              },
              "variables": [{
                "name": "offset",
                "nodeType": "YulTypedName",
                "src": "2000:6:2",
                "type": ""
              }]
            }, {
              "nodeType": "YulAssignment",
              "src": "2025:60:2",
              "value": {
                "arguments": [{
                  "arguments": [{
                    "name": "headStart",
                    "nodeType": "YulIdentifier",
                    "src": "2057:9:2"
                  }, {
                    "name": "offset",
                    "nodeType": "YulIdentifier",
                    "src": "2068:6:2"
                  }],
                  "functionName": {
                    "name": "add",
                    "nodeType": "YulIdentifier",
                    "src": "2053:3:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "2053:22:2"
                }, {
                  "name": "dataEnd",
                  "nodeType": "YulIdentifier",
                  "src": "2077:7:2"
                }],
                "functionName": {
                  "name": "abi_decode_t_bool",
                  "nodeType": "YulIdentifier",
                  "src": "2035:17:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "2035:50:2"
              },
              "variableNames": [{
                "name": "value0",
                "nodeType": "YulIdentifier",
                "src": "2025:6:2"
              }]
            }]
          }]
        },
        "name": "abi_decode_tuple_t_bool",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "headStart",
          "nodeType": "YulTypedName",
          "src": "1812:9:2",
          "type": ""
        }, {
          "name": "dataEnd",
          "nodeType": "YulTypedName",
          "src": "1823:7:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "value0",
          "nodeType": "YulTypedName",
          "src": "1835:6:2",
          "type": ""
        }],
        "src": "1779:323:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "2167:40:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "2178:22:2",
            "value": {
              "arguments": [{
                "name": "value",
                "nodeType": "YulIdentifier",
                "src": "2194:5:2"
              }],
              "functionName": {
                "name": "mload",
                "nodeType": "YulIdentifier",
                "src": "2188:5:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "2188:12:2"
            },
            "variableNames": [{
              "name": "length",
              "nodeType": "YulIdentifier",
              "src": "2178:6:2"
            }]
          }]
        },
        "name": "array_length_t_string_memory_ptr",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "value",
          "nodeType": "YulTypedName",
          "src": "2150:5:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "length",
          "nodeType": "YulTypedName",
          "src": "2160:6:2",
          "type": ""
        }],
        "src": "2108:99:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "2309:73:2",
          "statements": [{
            "expression": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "2326:3:2"
              }, {
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "2331:6:2"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "2319:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "2319:19:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "2319:19:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "2347:29:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "2366:3:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "2371:4:2",
                "type": "",
                "value": "0x20"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "2362:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "2362:14:2"
            },
            "variableNames": [{
              "name": "updated_pos",
              "nodeType": "YulIdentifier",
              "src": "2347:11:2"
            }]
          }]
        },
        "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "pos",
          "nodeType": "YulTypedName",
          "src": "2281:3:2",
          "type": ""
        }, {
          "name": "length",
          "nodeType": "YulTypedName",
          "src": "2286:6:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "updated_pos",
          "nodeType": "YulTypedName",
          "src": "2297:11:2",
          "type": ""
        }],
        "src": "2213:169:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "2437:258:2",
          "statements": [{
            "nodeType": "YulVariableDeclaration",
            "src": "2447:10:2",
            "value": {
              "kind": "number",
              "nodeType": "YulLiteral",
              "src": "2456:1:2",
              "type": "",
              "value": "0"
            },
            "variables": [{
              "name": "i",
              "nodeType": "YulTypedName",
              "src": "2451:1:2",
              "type": ""
            }]
          }, {
            "body": {
              "nodeType": "YulBlock",
              "src": "2516:63:2",
              "statements": [{
                "expression": {
                  "arguments": [{
                    "arguments": [{
                      "name": "dst",
                      "nodeType": "YulIdentifier",
                      "src": "2541:3:2"
                    }, {
                      "name": "i",
                      "nodeType": "YulIdentifier",
                      "src": "2546:1:2"
                    }],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "2537:3:2"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2537:11:2"
                  }, {
                    "arguments": [{
                      "arguments": [{
                        "name": "src",
                        "nodeType": "YulIdentifier",
                        "src": "2560:3:2"
                      }, {
                        "name": "i",
                        "nodeType": "YulIdentifier",
                        "src": "2565:1:2"
                      }],
                      "functionName": {
                        "name": "add",
                        "nodeType": "YulIdentifier",
                        "src": "2556:3:2"
                      },
                      "nodeType": "YulFunctionCall",
                      "src": "2556:11:2"
                    }],
                    "functionName": {
                      "name": "mload",
                      "nodeType": "YulIdentifier",
                      "src": "2550:5:2"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2550:18:2"
                  }],
                  "functionName": {
                    "name": "mstore",
                    "nodeType": "YulIdentifier",
                    "src": "2530:6:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "2530:39:2"
                },
                "nodeType": "YulExpressionStatement",
                "src": "2530:39:2"
              }]
            },
            "condition": {
              "arguments": [{
                "name": "i",
                "nodeType": "YulIdentifier",
                "src": "2477:1:2"
              }, {
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "2480:6:2"
              }],
              "functionName": {
                "name": "lt",
                "nodeType": "YulIdentifier",
                "src": "2474:2:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "2474:13:2"
            },
            "nodeType": "YulForLoop",
            "post": {
              "nodeType": "YulBlock",
              "src": "2488:19:2",
              "statements": [{
                "nodeType": "YulAssignment",
                "src": "2490:15:2",
                "value": {
                  "arguments": [{
                    "name": "i",
                    "nodeType": "YulIdentifier",
                    "src": "2499:1:2"
                  }, {
                    "kind": "number",
                    "nodeType": "YulLiteral",
                    "src": "2502:2:2",
                    "type": "",
                    "value": "32"
                  }],
                  "functionName": {
                    "name": "add",
                    "nodeType": "YulIdentifier",
                    "src": "2495:3:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "2495:10:2"
                },
                "variableNames": [{
                  "name": "i",
                  "nodeType": "YulIdentifier",
                  "src": "2490:1:2"
                }]
              }]
            },
            "pre": {
              "nodeType": "YulBlock",
              "src": "2470:3:2",
              "statements": []
            },
            "src": "2466:113:2"
          }, {
            "body": {
              "nodeType": "YulBlock",
              "src": "2613:76:2",
              "statements": [{
                "expression": {
                  "arguments": [{
                    "arguments": [{
                      "name": "dst",
                      "nodeType": "YulIdentifier",
                      "src": "2663:3:2"
                    }, {
                      "name": "length",
                      "nodeType": "YulIdentifier",
                      "src": "2668:6:2"
                    }],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "2659:3:2"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "2659:16:2"
                  }, {
                    "kind": "number",
                    "nodeType": "YulLiteral",
                    "src": "2677:1:2",
                    "type": "",
                    "value": "0"
                  }],
                  "functionName": {
                    "name": "mstore",
                    "nodeType": "YulIdentifier",
                    "src": "2652:6:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "2652:27:2"
                },
                "nodeType": "YulExpressionStatement",
                "src": "2652:27:2"
              }]
            },
            "condition": {
              "arguments": [{
                "name": "i",
                "nodeType": "YulIdentifier",
                "src": "2594:1:2"
              }, {
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "2597:6:2"
              }],
              "functionName": {
                "name": "gt",
                "nodeType": "YulIdentifier",
                "src": "2591:2:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "2591:13:2"
            },
            "nodeType": "YulIf",
            "src": "2588:101:2"
          }]
        },
        "name": "copy_memory_to_memory",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "src",
          "nodeType": "YulTypedName",
          "src": "2419:3:2",
          "type": ""
        }, {
          "name": "dst",
          "nodeType": "YulTypedName",
          "src": "2424:3:2",
          "type": ""
        }, {
          "name": "length",
          "nodeType": "YulTypedName",
          "src": "2429:6:2",
          "type": ""
        }],
        "src": "2388:307:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "2749:54:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "2759:38:2",
            "value": {
              "arguments": [{
                "arguments": [{
                  "name": "value",
                  "nodeType": "YulIdentifier",
                  "src": "2777:5:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "2784:2:2",
                  "type": "",
                  "value": "31"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "2773:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "2773:14:2"
              }, {
                "arguments": [{
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "2793:2:2",
                  "type": "",
                  "value": "31"
                }],
                "functionName": {
                  "name": "not",
                  "nodeType": "YulIdentifier",
                  "src": "2789:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "2789:7:2"
              }],
              "functionName": {
                "name": "and",
                "nodeType": "YulIdentifier",
                "src": "2769:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "2769:28:2"
            },
            "variableNames": [{
              "name": "result",
              "nodeType": "YulIdentifier",
              "src": "2759:6:2"
            }]
          }]
        },
        "name": "round_up_to_mul_of_32",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "value",
          "nodeType": "YulTypedName",
          "src": "2732:5:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "result",
          "nodeType": "YulTypedName",
          "src": "2742:6:2",
          "type": ""
        }],
        "src": "2701:102:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "2901:272:2",
          "statements": [{
            "nodeType": "YulVariableDeclaration",
            "src": "2911:53:2",
            "value": {
              "arguments": [{
                "name": "value",
                "nodeType": "YulIdentifier",
                "src": "2958:5:2"
              }],
              "functionName": {
                "name": "array_length_t_string_memory_ptr",
                "nodeType": "YulIdentifier",
                "src": "2925:32:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "2925:39:2"
            },
            "variables": [{
              "name": "length",
              "nodeType": "YulTypedName",
              "src": "2915:6:2",
              "type": ""
            }]
          }, {
            "nodeType": "YulAssignment",
            "src": "2973:78:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "3039:3:2"
              }, {
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "3044:6:2"
              }],
              "functionName": {
                "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "2980:58:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "2980:71:2"
            },
            "variableNames": [{
              "name": "pos",
              "nodeType": "YulIdentifier",
              "src": "2973:3:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "value",
                  "nodeType": "YulIdentifier",
                  "src": "3086:5:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "3093:4:2",
                  "type": "",
                  "value": "0x20"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "3082:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "3082:16:2"
              }, {
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "3100:3:2"
              }, {
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "3105:6:2"
              }],
              "functionName": {
                "name": "copy_memory_to_memory",
                "nodeType": "YulIdentifier",
                "src": "3060:21:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "3060:52:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "3060:52:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "3121:46:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "3132:3:2"
              }, {
                "arguments": [{
                  "name": "length",
                  "nodeType": "YulIdentifier",
                  "src": "3159:6:2"
                }],
                "functionName": {
                  "name": "round_up_to_mul_of_32",
                  "nodeType": "YulIdentifier",
                  "src": "3137:21:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "3137:29:2"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "3128:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "3128:39:2"
            },
            "variableNames": [{
              "name": "end",
              "nodeType": "YulIdentifier",
              "src": "3121:3:2"
            }]
          }]
        },
        "name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "value",
          "nodeType": "YulTypedName",
          "src": "2882:5:2",
          "type": ""
        }, {
          "name": "pos",
          "nodeType": "YulTypedName",
          "src": "2889:3:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "end",
          "nodeType": "YulTypedName",
          "src": "2897:3:2",
          "type": ""
        }],
        "src": "2809:364:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "3297:195:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "3307:26:2",
            "value": {
              "arguments": [{
                "name": "headStart",
                "nodeType": "YulIdentifier",
                "src": "3319:9:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "3330:2:2",
                "type": "",
                "value": "32"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "3315:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "3315:18:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "3307:4:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "3354:9:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "3365:1:2",
                  "type": "",
                  "value": "0"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "3350:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "3350:17:2"
              }, {
                "arguments": [{
                  "name": "tail",
                  "nodeType": "YulIdentifier",
                  "src": "3373:4:2"
                }, {
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "3379:9:2"
                }],
                "functionName": {
                  "name": "sub",
                  "nodeType": "YulIdentifier",
                  "src": "3369:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "3369:20:2"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "3343:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "3343:47:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "3343:47:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "3399:86:2",
            "value": {
              "arguments": [{
                "name": "value0",
                "nodeType": "YulIdentifier",
                "src": "3471:6:2"
              }, {
                "name": "tail",
                "nodeType": "YulIdentifier",
                "src": "3480:4:2"
              }],
              "functionName": {
                "name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "3407:63:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "3407:78:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "3399:4:2"
            }]
          }]
        },
        "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "headStart",
          "nodeType": "YulTypedName",
          "src": "3269:9:2",
          "type": ""
        }, {
          "name": "value0",
          "nodeType": "YulTypedName",
          "src": "3281:6:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "tail",
          "nodeType": "YulTypedName",
          "src": "3292:4:2",
          "type": ""
        }],
        "src": "3179:313:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "3543:32:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "3553:16:2",
            "value": {
              "name": "value",
              "nodeType": "YulIdentifier",
              "src": "3564:5:2"
            },
            "variableNames": [{
              "name": "cleaned",
              "nodeType": "YulIdentifier",
              "src": "3553:7:2"
            }]
          }]
        },
        "name": "cleanup_t_uint256",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "value",
          "nodeType": "YulTypedName",
          "src": "3525:5:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "cleaned",
          "nodeType": "YulTypedName",
          "src": "3535:7:2",
          "type": ""
        }],
        "src": "3498:77:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "3624:79:2",
          "statements": [{
            "body": {
              "nodeType": "YulBlock",
              "src": "3681:16:2",
              "statements": [{
                "expression": {
                  "arguments": [{
                    "kind": "number",
                    "nodeType": "YulLiteral",
                    "src": "3690:1:2",
                    "type": "",
                    "value": "0"
                  }, {
                    "kind": "number",
                    "nodeType": "YulLiteral",
                    "src": "3693:1:2",
                    "type": "",
                    "value": "0"
                  }],
                  "functionName": {
                    "name": "revert",
                    "nodeType": "YulIdentifier",
                    "src": "3683:6:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "3683:12:2"
                },
                "nodeType": "YulExpressionStatement",
                "src": "3683:12:2"
              }]
            },
            "condition": {
              "arguments": [{
                "arguments": [{
                  "name": "value",
                  "nodeType": "YulIdentifier",
                  "src": "3647:5:2"
                }, {
                  "arguments": [{
                    "name": "value",
                    "nodeType": "YulIdentifier",
                    "src": "3672:5:2"
                  }],
                  "functionName": {
                    "name": "cleanup_t_uint256",
                    "nodeType": "YulIdentifier",
                    "src": "3654:17:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "3654:24:2"
                }],
                "functionName": {
                  "name": "eq",
                  "nodeType": "YulIdentifier",
                  "src": "3644:2:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "3644:35:2"
              }],
              "functionName": {
                "name": "iszero",
                "nodeType": "YulIdentifier",
                "src": "3637:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "3637:43:2"
            },
            "nodeType": "YulIf",
            "src": "3634:63:2"
          }]
        },
        "name": "validator_revert_t_uint256",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "value",
          "nodeType": "YulTypedName",
          "src": "3617:5:2",
          "type": ""
        }],
        "src": "3581:122:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "3761:87:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "3771:29:2",
            "value": {
              "arguments": [{
                "name": "offset",
                "nodeType": "YulIdentifier",
                "src": "3793:6:2"
              }],
              "functionName": {
                "name": "calldataload",
                "nodeType": "YulIdentifier",
                "src": "3780:12:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "3780:20:2"
            },
            "variableNames": [{
              "name": "value",
              "nodeType": "YulIdentifier",
              "src": "3771:5:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "name": "value",
                "nodeType": "YulIdentifier",
                "src": "3836:5:2"
              }],
              "functionName": {
                "name": "validator_revert_t_uint256",
                "nodeType": "YulIdentifier",
                "src": "3809:26:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "3809:33:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "3809:33:2"
          }]
        },
        "name": "abi_decode_t_uint256",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "offset",
          "nodeType": "YulTypedName",
          "src": "3739:6:2",
          "type": ""
        }, {
          "name": "end",
          "nodeType": "YulTypedName",
          "src": "3747:3:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "value",
          "nodeType": "YulTypedName",
          "src": "3755:5:2",
          "type": ""
        }],
        "src": "3709:139:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "3920:263:2",
          "statements": [{
            "body": {
              "nodeType": "YulBlock",
              "src": "3966:83:2",
              "statements": [{
                "expression": {
                  "arguments": [],
                  "functionName": {
                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                    "nodeType": "YulIdentifier",
                    "src": "3968:77:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "3968:79:2"
                },
                "nodeType": "YulExpressionStatement",
                "src": "3968:79:2"
              }]
            },
            "condition": {
              "arguments": [{
                "arguments": [{
                  "name": "dataEnd",
                  "nodeType": "YulIdentifier",
                  "src": "3941:7:2"
                }, {
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "3950:9:2"
                }],
                "functionName": {
                  "name": "sub",
                  "nodeType": "YulIdentifier",
                  "src": "3937:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "3937:23:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "3962:2:2",
                "type": "",
                "value": "32"
              }],
              "functionName": {
                "name": "slt",
                "nodeType": "YulIdentifier",
                "src": "3933:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "3933:32:2"
            },
            "nodeType": "YulIf",
            "src": "3930:119:2"
          }, {
            "nodeType": "YulBlock",
            "src": "4059:117:2",
            "statements": [{
              "nodeType": "YulVariableDeclaration",
              "src": "4074:15:2",
              "value": {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "4088:1:2",
                "type": "",
                "value": "0"
              },
              "variables": [{
                "name": "offset",
                "nodeType": "YulTypedName",
                "src": "4078:6:2",
                "type": ""
              }]
            }, {
              "nodeType": "YulAssignment",
              "src": "4103:63:2",
              "value": {
                "arguments": [{
                  "arguments": [{
                    "name": "headStart",
                    "nodeType": "YulIdentifier",
                    "src": "4138:9:2"
                  }, {
                    "name": "offset",
                    "nodeType": "YulIdentifier",
                    "src": "4149:6:2"
                  }],
                  "functionName": {
                    "name": "add",
                    "nodeType": "YulIdentifier",
                    "src": "4134:3:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "4134:22:2"
                }, {
                  "name": "dataEnd",
                  "nodeType": "YulIdentifier",
                  "src": "4158:7:2"
                }],
                "functionName": {
                  "name": "abi_decode_t_uint256",
                  "nodeType": "YulIdentifier",
                  "src": "4113:20:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "4113:53:2"
              },
              "variableNames": [{
                "name": "value0",
                "nodeType": "YulIdentifier",
                "src": "4103:6:2"
              }]
            }]
          }]
        },
        "name": "abi_decode_tuple_t_uint256",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "headStart",
          "nodeType": "YulTypedName",
          "src": "3890:9:2",
          "type": ""
        }, {
          "name": "dataEnd",
          "nodeType": "YulTypedName",
          "src": "3901:7:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "value0",
          "nodeType": "YulTypedName",
          "src": "3913:6:2",
          "type": ""
        }],
        "src": "3854:329:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "4234:81:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "4244:65:2",
            "value": {
              "arguments": [{
                "name": "value",
                "nodeType": "YulIdentifier",
                "src": "4259:5:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "4266:42:2",
                "type": "",
                "value": "0xffffffffffffffffffffffffffffffffffffffff"
              }],
              "functionName": {
                "name": "and",
                "nodeType": "YulIdentifier",
                "src": "4255:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "4255:54:2"
            },
            "variableNames": [{
              "name": "cleaned",
              "nodeType": "YulIdentifier",
              "src": "4244:7:2"
            }]
          }]
        },
        "name": "cleanup_t_uint160",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "value",
          "nodeType": "YulTypedName",
          "src": "4216:5:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "cleaned",
          "nodeType": "YulTypedName",
          "src": "4226:7:2",
          "type": ""
        }],
        "src": "4189:126:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "4366:51:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "4376:35:2",
            "value": {
              "arguments": [{
                "name": "value",
                "nodeType": "YulIdentifier",
                "src": "4405:5:2"
              }],
              "functionName": {
                "name": "cleanup_t_uint160",
                "nodeType": "YulIdentifier",
                "src": "4387:17:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "4387:24:2"
            },
            "variableNames": [{
              "name": "cleaned",
              "nodeType": "YulIdentifier",
              "src": "4376:7:2"
            }]
          }]
        },
        "name": "cleanup_t_address",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "value",
          "nodeType": "YulTypedName",
          "src": "4348:5:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "cleaned",
          "nodeType": "YulTypedName",
          "src": "4358:7:2",
          "type": ""
        }],
        "src": "4321:96:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "4488:53:2",
          "statements": [{
            "expression": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "4505:3:2"
              }, {
                "arguments": [{
                  "name": "value",
                  "nodeType": "YulIdentifier",
                  "src": "4528:5:2"
                }],
                "functionName": {
                  "name": "cleanup_t_address",
                  "nodeType": "YulIdentifier",
                  "src": "4510:17:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "4510:24:2"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "4498:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "4498:37:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "4498:37:2"
          }]
        },
        "name": "abi_encode_t_address_to_t_address_fromStack",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "value",
          "nodeType": "YulTypedName",
          "src": "4476:5:2",
          "type": ""
        }, {
          "name": "pos",
          "nodeType": "YulTypedName",
          "src": "4483:3:2",
          "type": ""
        }],
        "src": "4423:118:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "4645:124:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "4655:26:2",
            "value": {
              "arguments": [{
                "name": "headStart",
                "nodeType": "YulIdentifier",
                "src": "4667:9:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "4678:2:2",
                "type": "",
                "value": "32"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "4663:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "4663:18:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "4655:4:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "name": "value0",
                "nodeType": "YulIdentifier",
                "src": "4735:6:2"
              }, {
                "arguments": [{
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "4748:9:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "4759:1:2",
                  "type": "",
                  "value": "0"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "4744:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "4744:17:2"
              }],
              "functionName": {
                "name": "abi_encode_t_address_to_t_address_fromStack",
                "nodeType": "YulIdentifier",
                "src": "4691:43:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "4691:71:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "4691:71:2"
          }]
        },
        "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "headStart",
          "nodeType": "YulTypedName",
          "src": "4617:9:2",
          "type": ""
        }, {
          "name": "value0",
          "nodeType": "YulTypedName",
          "src": "4629:6:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "tail",
          "nodeType": "YulTypedName",
          "src": "4640:4:2",
          "type": ""
        }],
        "src": "4547:222:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "4818:79:2",
          "statements": [{
            "body": {
              "nodeType": "YulBlock",
              "src": "4875:16:2",
              "statements": [{
                "expression": {
                  "arguments": [{
                    "kind": "number",
                    "nodeType": "YulLiteral",
                    "src": "4884:1:2",
                    "type": "",
                    "value": "0"
                  }, {
                    "kind": "number",
                    "nodeType": "YulLiteral",
                    "src": "4887:1:2",
                    "type": "",
                    "value": "0"
                  }],
                  "functionName": {
                    "name": "revert",
                    "nodeType": "YulIdentifier",
                    "src": "4877:6:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "4877:12:2"
                },
                "nodeType": "YulExpressionStatement",
                "src": "4877:12:2"
              }]
            },
            "condition": {
              "arguments": [{
                "arguments": [{
                  "name": "value",
                  "nodeType": "YulIdentifier",
                  "src": "4841:5:2"
                }, {
                  "arguments": [{
                    "name": "value",
                    "nodeType": "YulIdentifier",
                    "src": "4866:5:2"
                  }],
                  "functionName": {
                    "name": "cleanup_t_address",
                    "nodeType": "YulIdentifier",
                    "src": "4848:17:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "4848:24:2"
                }],
                "functionName": {
                  "name": "eq",
                  "nodeType": "YulIdentifier",
                  "src": "4838:2:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "4838:35:2"
              }],
              "functionName": {
                "name": "iszero",
                "nodeType": "YulIdentifier",
                "src": "4831:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "4831:43:2"
            },
            "nodeType": "YulIf",
            "src": "4828:63:2"
          }]
        },
        "name": "validator_revert_t_address",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "value",
          "nodeType": "YulTypedName",
          "src": "4811:5:2",
          "type": ""
        }],
        "src": "4775:122:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "4955:87:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "4965:29:2",
            "value": {
              "arguments": [{
                "name": "offset",
                "nodeType": "YulIdentifier",
                "src": "4987:6:2"
              }],
              "functionName": {
                "name": "calldataload",
                "nodeType": "YulIdentifier",
                "src": "4974:12:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "4974:20:2"
            },
            "variableNames": [{
              "name": "value",
              "nodeType": "YulIdentifier",
              "src": "4965:5:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "name": "value",
                "nodeType": "YulIdentifier",
                "src": "5030:5:2"
              }],
              "functionName": {
                "name": "validator_revert_t_address",
                "nodeType": "YulIdentifier",
                "src": "5003:26:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "5003:33:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "5003:33:2"
          }]
        },
        "name": "abi_decode_t_address",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "offset",
          "nodeType": "YulTypedName",
          "src": "4933:6:2",
          "type": ""
        }, {
          "name": "end",
          "nodeType": "YulTypedName",
          "src": "4941:3:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "value",
          "nodeType": "YulTypedName",
          "src": "4949:5:2",
          "type": ""
        }],
        "src": "4903:139:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "5131:391:2",
          "statements": [{
            "body": {
              "nodeType": "YulBlock",
              "src": "5177:83:2",
              "statements": [{
                "expression": {
                  "arguments": [],
                  "functionName": {
                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                    "nodeType": "YulIdentifier",
                    "src": "5179:77:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "5179:79:2"
                },
                "nodeType": "YulExpressionStatement",
                "src": "5179:79:2"
              }]
            },
            "condition": {
              "arguments": [{
                "arguments": [{
                  "name": "dataEnd",
                  "nodeType": "YulIdentifier",
                  "src": "5152:7:2"
                }, {
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "5161:9:2"
                }],
                "functionName": {
                  "name": "sub",
                  "nodeType": "YulIdentifier",
                  "src": "5148:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "5148:23:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "5173:2:2",
                "type": "",
                "value": "64"
              }],
              "functionName": {
                "name": "slt",
                "nodeType": "YulIdentifier",
                "src": "5144:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "5144:32:2"
            },
            "nodeType": "YulIf",
            "src": "5141:119:2"
          }, {
            "nodeType": "YulBlock",
            "src": "5270:117:2",
            "statements": [{
              "nodeType": "YulVariableDeclaration",
              "src": "5285:15:2",
              "value": {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "5299:1:2",
                "type": "",
                "value": "0"
              },
              "variables": [{
                "name": "offset",
                "nodeType": "YulTypedName",
                "src": "5289:6:2",
                "type": ""
              }]
            }, {
              "nodeType": "YulAssignment",
              "src": "5314:63:2",
              "value": {
                "arguments": [{
                  "arguments": [{
                    "name": "headStart",
                    "nodeType": "YulIdentifier",
                    "src": "5349:9:2"
                  }, {
                    "name": "offset",
                    "nodeType": "YulIdentifier",
                    "src": "5360:6:2"
                  }],
                  "functionName": {
                    "name": "add",
                    "nodeType": "YulIdentifier",
                    "src": "5345:3:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "5345:22:2"
                }, {
                  "name": "dataEnd",
                  "nodeType": "YulIdentifier",
                  "src": "5369:7:2"
                }],
                "functionName": {
                  "name": "abi_decode_t_address",
                  "nodeType": "YulIdentifier",
                  "src": "5324:20:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "5324:53:2"
              },
              "variableNames": [{
                "name": "value0",
                "nodeType": "YulIdentifier",
                "src": "5314:6:2"
              }]
            }]
          }, {
            "nodeType": "YulBlock",
            "src": "5397:118:2",
            "statements": [{
              "nodeType": "YulVariableDeclaration",
              "src": "5412:16:2",
              "value": {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "5426:2:2",
                "type": "",
                "value": "32"
              },
              "variables": [{
                "name": "offset",
                "nodeType": "YulTypedName",
                "src": "5416:6:2",
                "type": ""
              }]
            }, {
              "nodeType": "YulAssignment",
              "src": "5442:63:2",
              "value": {
                "arguments": [{
                  "arguments": [{
                    "name": "headStart",
                    "nodeType": "YulIdentifier",
                    "src": "5477:9:2"
                  }, {
                    "name": "offset",
                    "nodeType": "YulIdentifier",
                    "src": "5488:6:2"
                  }],
                  "functionName": {
                    "name": "add",
                    "nodeType": "YulIdentifier",
                    "src": "5473:3:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "5473:22:2"
                }, {
                  "name": "dataEnd",
                  "nodeType": "YulIdentifier",
                  "src": "5497:7:2"
                }],
                "functionName": {
                  "name": "abi_decode_t_uint256",
                  "nodeType": "YulIdentifier",
                  "src": "5452:20:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "5452:53:2"
              },
              "variableNames": [{
                "name": "value1",
                "nodeType": "YulIdentifier",
                "src": "5442:6:2"
              }]
            }]
          }]
        },
        "name": "abi_decode_tuple_t_addresst_uint256",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "headStart",
          "nodeType": "YulTypedName",
          "src": "5093:9:2",
          "type": ""
        }, {
          "name": "dataEnd",
          "nodeType": "YulTypedName",
          "src": "5104:7:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "value0",
          "nodeType": "YulTypedName",
          "src": "5116:6:2",
          "type": ""
        }, {
          "name": "value1",
          "nodeType": "YulTypedName",
          "src": "5124:6:2",
          "type": ""
        }],
        "src": "5048:474:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "5593:53:2",
          "statements": [{
            "expression": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "5610:3:2"
              }, {
                "arguments": [{
                  "name": "value",
                  "nodeType": "YulIdentifier",
                  "src": "5633:5:2"
                }],
                "functionName": {
                  "name": "cleanup_t_uint256",
                  "nodeType": "YulIdentifier",
                  "src": "5615:17:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "5615:24:2"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "5603:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "5603:37:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "5603:37:2"
          }]
        },
        "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "value",
          "nodeType": "YulTypedName",
          "src": "5581:5:2",
          "type": ""
        }, {
          "name": "pos",
          "nodeType": "YulTypedName",
          "src": "5588:3:2",
          "type": ""
        }],
        "src": "5528:118:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "5750:124:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "5760:26:2",
            "value": {
              "arguments": [{
                "name": "headStart",
                "nodeType": "YulIdentifier",
                "src": "5772:9:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "5783:2:2",
                "type": "",
                "value": "32"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "5768:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "5768:18:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "5760:4:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "name": "value0",
                "nodeType": "YulIdentifier",
                "src": "5840:6:2"
              }, {
                "arguments": [{
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "5853:9:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "5864:1:2",
                  "type": "",
                  "value": "0"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "5849:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "5849:17:2"
              }],
              "functionName": {
                "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                "nodeType": "YulIdentifier",
                "src": "5796:43:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "5796:71:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "5796:71:2"
          }]
        },
        "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "headStart",
          "nodeType": "YulTypedName",
          "src": "5722:9:2",
          "type": ""
        }, {
          "name": "value0",
          "nodeType": "YulTypedName",
          "src": "5734:6:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "tail",
          "nodeType": "YulTypedName",
          "src": "5745:4:2",
          "type": ""
        }],
        "src": "5652:222:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "5980:519:2",
          "statements": [{
            "body": {
              "nodeType": "YulBlock",
              "src": "6026:83:2",
              "statements": [{
                "expression": {
                  "arguments": [],
                  "functionName": {
                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                    "nodeType": "YulIdentifier",
                    "src": "6028:77:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "6028:79:2"
                },
                "nodeType": "YulExpressionStatement",
                "src": "6028:79:2"
              }]
            },
            "condition": {
              "arguments": [{
                "arguments": [{
                  "name": "dataEnd",
                  "nodeType": "YulIdentifier",
                  "src": "6001:7:2"
                }, {
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "6010:9:2"
                }],
                "functionName": {
                  "name": "sub",
                  "nodeType": "YulIdentifier",
                  "src": "5997:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "5997:23:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "6022:2:2",
                "type": "",
                "value": "96"
              }],
              "functionName": {
                "name": "slt",
                "nodeType": "YulIdentifier",
                "src": "5993:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "5993:32:2"
            },
            "nodeType": "YulIf",
            "src": "5990:119:2"
          }, {
            "nodeType": "YulBlock",
            "src": "6119:117:2",
            "statements": [{
              "nodeType": "YulVariableDeclaration",
              "src": "6134:15:2",
              "value": {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "6148:1:2",
                "type": "",
                "value": "0"
              },
              "variables": [{
                "name": "offset",
                "nodeType": "YulTypedName",
                "src": "6138:6:2",
                "type": ""
              }]
            }, {
              "nodeType": "YulAssignment",
              "src": "6163:63:2",
              "value": {
                "arguments": [{
                  "arguments": [{
                    "name": "headStart",
                    "nodeType": "YulIdentifier",
                    "src": "6198:9:2"
                  }, {
                    "name": "offset",
                    "nodeType": "YulIdentifier",
                    "src": "6209:6:2"
                  }],
                  "functionName": {
                    "name": "add",
                    "nodeType": "YulIdentifier",
                    "src": "6194:3:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "6194:22:2"
                }, {
                  "name": "dataEnd",
                  "nodeType": "YulIdentifier",
                  "src": "6218:7:2"
                }],
                "functionName": {
                  "name": "abi_decode_t_address",
                  "nodeType": "YulIdentifier",
                  "src": "6173:20:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "6173:53:2"
              },
              "variableNames": [{
                "name": "value0",
                "nodeType": "YulIdentifier",
                "src": "6163:6:2"
              }]
            }]
          }, {
            "nodeType": "YulBlock",
            "src": "6246:118:2",
            "statements": [{
              "nodeType": "YulVariableDeclaration",
              "src": "6261:16:2",
              "value": {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "6275:2:2",
                "type": "",
                "value": "32"
              },
              "variables": [{
                "name": "offset",
                "nodeType": "YulTypedName",
                "src": "6265:6:2",
                "type": ""
              }]
            }, {
              "nodeType": "YulAssignment",
              "src": "6291:63:2",
              "value": {
                "arguments": [{
                  "arguments": [{
                    "name": "headStart",
                    "nodeType": "YulIdentifier",
                    "src": "6326:9:2"
                  }, {
                    "name": "offset",
                    "nodeType": "YulIdentifier",
                    "src": "6337:6:2"
                  }],
                  "functionName": {
                    "name": "add",
                    "nodeType": "YulIdentifier",
                    "src": "6322:3:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "6322:22:2"
                }, {
                  "name": "dataEnd",
                  "nodeType": "YulIdentifier",
                  "src": "6346:7:2"
                }],
                "functionName": {
                  "name": "abi_decode_t_address",
                  "nodeType": "YulIdentifier",
                  "src": "6301:20:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "6301:53:2"
              },
              "variableNames": [{
                "name": "value1",
                "nodeType": "YulIdentifier",
                "src": "6291:6:2"
              }]
            }]
          }, {
            "nodeType": "YulBlock",
            "src": "6374:118:2",
            "statements": [{
              "nodeType": "YulVariableDeclaration",
              "src": "6389:16:2",
              "value": {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "6403:2:2",
                "type": "",
                "value": "64"
              },
              "variables": [{
                "name": "offset",
                "nodeType": "YulTypedName",
                "src": "6393:6:2",
                "type": ""
              }]
            }, {
              "nodeType": "YulAssignment",
              "src": "6419:63:2",
              "value": {
                "arguments": [{
                  "arguments": [{
                    "name": "headStart",
                    "nodeType": "YulIdentifier",
                    "src": "6454:9:2"
                  }, {
                    "name": "offset",
                    "nodeType": "YulIdentifier",
                    "src": "6465:6:2"
                  }],
                  "functionName": {
                    "name": "add",
                    "nodeType": "YulIdentifier",
                    "src": "6450:3:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "6450:22:2"
                }, {
                  "name": "dataEnd",
                  "nodeType": "YulIdentifier",
                  "src": "6474:7:2"
                }],
                "functionName": {
                  "name": "abi_decode_t_uint256",
                  "nodeType": "YulIdentifier",
                  "src": "6429:20:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "6429:53:2"
              },
              "variableNames": [{
                "name": "value2",
                "nodeType": "YulIdentifier",
                "src": "6419:6:2"
              }]
            }]
          }]
        },
        "name": "abi_decode_tuple_t_addresst_addresst_uint256",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "headStart",
          "nodeType": "YulTypedName",
          "src": "5934:9:2",
          "type": ""
        }, {
          "name": "dataEnd",
          "nodeType": "YulTypedName",
          "src": "5945:7:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "value0",
          "nodeType": "YulTypedName",
          "src": "5957:6:2",
          "type": ""
        }, {
          "name": "value1",
          "nodeType": "YulTypedName",
          "src": "5965:6:2",
          "type": ""
        }, {
          "name": "value2",
          "nodeType": "YulTypedName",
          "src": "5973:6:2",
          "type": ""
        }],
        "src": "5880:619:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "6571:263:2",
          "statements": [{
            "body": {
              "nodeType": "YulBlock",
              "src": "6617:83:2",
              "statements": [{
                "expression": {
                  "arguments": [],
                  "functionName": {
                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                    "nodeType": "YulIdentifier",
                    "src": "6619:77:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "6619:79:2"
                },
                "nodeType": "YulExpressionStatement",
                "src": "6619:79:2"
              }]
            },
            "condition": {
              "arguments": [{
                "arguments": [{
                  "name": "dataEnd",
                  "nodeType": "YulIdentifier",
                  "src": "6592:7:2"
                }, {
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "6601:9:2"
                }],
                "functionName": {
                  "name": "sub",
                  "nodeType": "YulIdentifier",
                  "src": "6588:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "6588:23:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "6613:2:2",
                "type": "",
                "value": "32"
              }],
              "functionName": {
                "name": "slt",
                "nodeType": "YulIdentifier",
                "src": "6584:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "6584:32:2"
            },
            "nodeType": "YulIf",
            "src": "6581:119:2"
          }, {
            "nodeType": "YulBlock",
            "src": "6710:117:2",
            "statements": [{
              "nodeType": "YulVariableDeclaration",
              "src": "6725:15:2",
              "value": {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "6739:1:2",
                "type": "",
                "value": "0"
              },
              "variables": [{
                "name": "offset",
                "nodeType": "YulTypedName",
                "src": "6729:6:2",
                "type": ""
              }]
            }, {
              "nodeType": "YulAssignment",
              "src": "6754:63:2",
              "value": {
                "arguments": [{
                  "arguments": [{
                    "name": "headStart",
                    "nodeType": "YulIdentifier",
                    "src": "6789:9:2"
                  }, {
                    "name": "offset",
                    "nodeType": "YulIdentifier",
                    "src": "6800:6:2"
                  }],
                  "functionName": {
                    "name": "add",
                    "nodeType": "YulIdentifier",
                    "src": "6785:3:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "6785:22:2"
                }, {
                  "name": "dataEnd",
                  "nodeType": "YulIdentifier",
                  "src": "6809:7:2"
                }],
                "functionName": {
                  "name": "abi_decode_t_address",
                  "nodeType": "YulIdentifier",
                  "src": "6764:20:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "6764:53:2"
              },
              "variableNames": [{
                "name": "value0",
                "nodeType": "YulIdentifier",
                "src": "6754:6:2"
              }]
            }]
          }]
        },
        "name": "abi_decode_tuple_t_address",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "headStart",
          "nodeType": "YulTypedName",
          "src": "6541:9:2",
          "type": ""
        }, {
          "name": "dataEnd",
          "nodeType": "YulTypedName",
          "src": "6552:7:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "value0",
          "nodeType": "YulTypedName",
          "src": "6564:6:2",
          "type": ""
        }],
        "src": "6505:329:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "6914:40:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "6925:22:2",
            "value": {
              "arguments": [{
                "name": "value",
                "nodeType": "YulIdentifier",
                "src": "6941:5:2"
              }],
              "functionName": {
                "name": "mload",
                "nodeType": "YulIdentifier",
                "src": "6935:5:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "6935:12:2"
            },
            "variableNames": [{
              "name": "length",
              "nodeType": "YulIdentifier",
              "src": "6925:6:2"
            }]
          }]
        },
        "name": "array_length_t_array$_t_uint256_$dyn_memory_ptr",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "value",
          "nodeType": "YulTypedName",
          "src": "6897:5:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "length",
          "nodeType": "YulTypedName",
          "src": "6907:6:2",
          "type": ""
        }],
        "src": "6840:114:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "7071:73:2",
          "statements": [{
            "expression": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "7088:3:2"
              }, {
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "7093:6:2"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "7081:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "7081:19:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "7081:19:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "7109:29:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "7128:3:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "7133:4:2",
                "type": "",
                "value": "0x20"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "7124:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "7124:14:2"
            },
            "variableNames": [{
              "name": "updated_pos",
              "nodeType": "YulIdentifier",
              "src": "7109:11:2"
            }]
          }]
        },
        "name": "array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "pos",
          "nodeType": "YulTypedName",
          "src": "7043:3:2",
          "type": ""
        }, {
          "name": "length",
          "nodeType": "YulTypedName",
          "src": "7048:6:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "updated_pos",
          "nodeType": "YulTypedName",
          "src": "7059:11:2",
          "type": ""
        }],
        "src": "6960:184:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "7222:60:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "7232:11:2",
            "value": {
              "name": "ptr",
              "nodeType": "YulIdentifier",
              "src": "7240:3:2"
            },
            "variableNames": [{
              "name": "data",
              "nodeType": "YulIdentifier",
              "src": "7232:4:2"
            }]
          }, {
            "nodeType": "YulAssignment",
            "src": "7253:22:2",
            "value": {
              "arguments": [{
                "name": "ptr",
                "nodeType": "YulIdentifier",
                "src": "7265:3:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "7270:4:2",
                "type": "",
                "value": "0x20"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "7261:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "7261:14:2"
            },
            "variableNames": [{
              "name": "data",
              "nodeType": "YulIdentifier",
              "src": "7253:4:2"
            }]
          }]
        },
        "name": "array_dataslot_t_array$_t_uint256_$dyn_memory_ptr",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "ptr",
          "nodeType": "YulTypedName",
          "src": "7209:3:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "data",
          "nodeType": "YulTypedName",
          "src": "7217:4:2",
          "type": ""
        }],
        "src": "7150:132:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "7343:53:2",
          "statements": [{
            "expression": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "7360:3:2"
              }, {
                "arguments": [{
                  "name": "value",
                  "nodeType": "YulIdentifier",
                  "src": "7383:5:2"
                }],
                "functionName": {
                  "name": "cleanup_t_uint256",
                  "nodeType": "YulIdentifier",
                  "src": "7365:17:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "7365:24:2"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "7353:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "7353:37:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "7353:37:2"
          }]
        },
        "name": "abi_encode_t_uint256_to_t_uint256",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "value",
          "nodeType": "YulTypedName",
          "src": "7331:5:2",
          "type": ""
        }, {
          "name": "pos",
          "nodeType": "YulTypedName",
          "src": "7338:3:2",
          "type": ""
        }],
        "src": "7288:108:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "7482:99:2",
          "statements": [{
            "expression": {
              "arguments": [{
                "name": "value0",
                "nodeType": "YulIdentifier",
                "src": "7526:6:2"
              }, {
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "7534:3:2"
              }],
              "functionName": {
                "name": "abi_encode_t_uint256_to_t_uint256",
                "nodeType": "YulIdentifier",
                "src": "7492:33:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "7492:46:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "7492:46:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "7547:28:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "7565:3:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "7570:4:2",
                "type": "",
                "value": "0x20"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "7561:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "7561:14:2"
            },
            "variableNames": [{
              "name": "updatedPos",
              "nodeType": "YulIdentifier",
              "src": "7547:10:2"
            }]
          }]
        },
        "name": "abi_encodeUpdatedPos_t_uint256_to_t_uint256",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "value0",
          "nodeType": "YulTypedName",
          "src": "7455:6:2",
          "type": ""
        }, {
          "name": "pos",
          "nodeType": "YulTypedName",
          "src": "7463:3:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "updatedPos",
          "nodeType": "YulTypedName",
          "src": "7471:10:2",
          "type": ""
        }],
        "src": "7402:179:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "7662:38:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "7672:22:2",
            "value": {
              "arguments": [{
                "name": "ptr",
                "nodeType": "YulIdentifier",
                "src": "7684:3:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "7689:4:2",
                "type": "",
                "value": "0x20"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "7680:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "7680:14:2"
            },
            "variableNames": [{
              "name": "next",
              "nodeType": "YulIdentifier",
              "src": "7672:4:2"
            }]
          }]
        },
        "name": "array_nextElement_t_array$_t_uint256_$dyn_memory_ptr",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "ptr",
          "nodeType": "YulTypedName",
          "src": "7649:3:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "next",
          "nodeType": "YulTypedName",
          "src": "7657:4:2",
          "type": ""
        }],
        "src": "7587:113:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "7860:608:2",
          "statements": [{
            "nodeType": "YulVariableDeclaration",
            "src": "7870:68:2",
            "value": {
              "arguments": [{
                "name": "value",
                "nodeType": "YulIdentifier",
                "src": "7932:5:2"
              }],
              "functionName": {
                "name": "array_length_t_array$_t_uint256_$dyn_memory_ptr",
                "nodeType": "YulIdentifier",
                "src": "7884:47:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "7884:54:2"
            },
            "variables": [{
              "name": "length",
              "nodeType": "YulTypedName",
              "src": "7874:6:2",
              "type": ""
            }]
          }, {
            "nodeType": "YulAssignment",
            "src": "7947:93:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "8028:3:2"
              }, {
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "8033:6:2"
              }],
              "functionName": {
                "name": "array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "7954:73:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "7954:86:2"
            },
            "variableNames": [{
              "name": "pos",
              "nodeType": "YulIdentifier",
              "src": "7947:3:2"
            }]
          }, {
            "nodeType": "YulVariableDeclaration",
            "src": "8049:71:2",
            "value": {
              "arguments": [{
                "name": "value",
                "nodeType": "YulIdentifier",
                "src": "8114:5:2"
              }],
              "functionName": {
                "name": "array_dataslot_t_array$_t_uint256_$dyn_memory_ptr",
                "nodeType": "YulIdentifier",
                "src": "8064:49:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "8064:56:2"
            },
            "variables": [{
              "name": "baseRef",
              "nodeType": "YulTypedName",
              "src": "8053:7:2",
              "type": ""
            }]
          }, {
            "nodeType": "YulVariableDeclaration",
            "src": "8129:21:2",
            "value": {
              "name": "baseRef",
              "nodeType": "YulIdentifier",
              "src": "8143:7:2"
            },
            "variables": [{
              "name": "srcPtr",
              "nodeType": "YulTypedName",
              "src": "8133:6:2",
              "type": ""
            }]
          }, {
            "body": {
              "nodeType": "YulBlock",
              "src": "8219:224:2",
              "statements": [{
                "nodeType": "YulVariableDeclaration",
                "src": "8233:34:2",
                "value": {
                  "arguments": [{
                    "name": "srcPtr",
                    "nodeType": "YulIdentifier",
                    "src": "8260:6:2"
                  }],
                  "functionName": {
                    "name": "mload",
                    "nodeType": "YulIdentifier",
                    "src": "8254:5:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "8254:13:2"
                },
                "variables": [{
                  "name": "elementValue0",
                  "nodeType": "YulTypedName",
                  "src": "8237:13:2",
                  "type": ""
                }]
              }, {
                "nodeType": "YulAssignment",
                "src": "8280:70:2",
                "value": {
                  "arguments": [{
                    "name": "elementValue0",
                    "nodeType": "YulIdentifier",
                    "src": "8331:13:2"
                  }, {
                    "name": "pos",
                    "nodeType": "YulIdentifier",
                    "src": "8346:3:2"
                  }],
                  "functionName": {
                    "name": "abi_encodeUpdatedPos_t_uint256_to_t_uint256",
                    "nodeType": "YulIdentifier",
                    "src": "8287:43:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "8287:63:2"
                },
                "variableNames": [{
                  "name": "pos",
                  "nodeType": "YulIdentifier",
                  "src": "8280:3:2"
                }]
              }, {
                "nodeType": "YulAssignment",
                "src": "8363:70:2",
                "value": {
                  "arguments": [{
                    "name": "srcPtr",
                    "nodeType": "YulIdentifier",
                    "src": "8426:6:2"
                  }],
                  "functionName": {
                    "name": "array_nextElement_t_array$_t_uint256_$dyn_memory_ptr",
                    "nodeType": "YulIdentifier",
                    "src": "8373:52:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "8373:60:2"
                },
                "variableNames": [{
                  "name": "srcPtr",
                  "nodeType": "YulIdentifier",
                  "src": "8363:6:2"
                }]
              }]
            },
            "condition": {
              "arguments": [{
                "name": "i",
                "nodeType": "YulIdentifier",
                "src": "8181:1:2"
              }, {
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "8184:6:2"
              }],
              "functionName": {
                "name": "lt",
                "nodeType": "YulIdentifier",
                "src": "8178:2:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "8178:13:2"
            },
            "nodeType": "YulForLoop",
            "post": {
              "nodeType": "YulBlock",
              "src": "8192:18:2",
              "statements": [{
                "nodeType": "YulAssignment",
                "src": "8194:14:2",
                "value": {
                  "arguments": [{
                    "name": "i",
                    "nodeType": "YulIdentifier",
                    "src": "8203:1:2"
                  }, {
                    "kind": "number",
                    "nodeType": "YulLiteral",
                    "src": "8206:1:2",
                    "type": "",
                    "value": "1"
                  }],
                  "functionName": {
                    "name": "add",
                    "nodeType": "YulIdentifier",
                    "src": "8199:3:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "8199:9:2"
                },
                "variableNames": [{
                  "name": "i",
                  "nodeType": "YulIdentifier",
                  "src": "8194:1:2"
                }]
              }]
            },
            "pre": {
              "nodeType": "YulBlock",
              "src": "8163:14:2",
              "statements": [{
                "nodeType": "YulVariableDeclaration",
                "src": "8165:10:2",
                "value": {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "8174:1:2",
                  "type": "",
                  "value": "0"
                },
                "variables": [{
                  "name": "i",
                  "nodeType": "YulTypedName",
                  "src": "8169:1:2",
                  "type": ""
                }]
              }]
            },
            "src": "8159:284:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "8452:10:2",
            "value": {
              "name": "pos",
              "nodeType": "YulIdentifier",
              "src": "8459:3:2"
            },
            "variableNames": [{
              "name": "end",
              "nodeType": "YulIdentifier",
              "src": "8452:3:2"
            }]
          }]
        },
        "name": "abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "value",
          "nodeType": "YulTypedName",
          "src": "7839:5:2",
          "type": ""
        }, {
          "name": "pos",
          "nodeType": "YulTypedName",
          "src": "7846:3:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "end",
          "nodeType": "YulTypedName",
          "src": "7855:3:2",
          "type": ""
        }],
        "src": "7736:732:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "8622:225:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "8632:26:2",
            "value": {
              "arguments": [{
                "name": "headStart",
                "nodeType": "YulIdentifier",
                "src": "8644:9:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "8655:2:2",
                "type": "",
                "value": "32"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "8640:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "8640:18:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "8632:4:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "8679:9:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "8690:1:2",
                  "type": "",
                  "value": "0"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "8675:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "8675:17:2"
              }, {
                "arguments": [{
                  "name": "tail",
                  "nodeType": "YulIdentifier",
                  "src": "8698:4:2"
                }, {
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "8704:9:2"
                }],
                "functionName": {
                  "name": "sub",
                  "nodeType": "YulIdentifier",
                  "src": "8694:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "8694:20:2"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "8668:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "8668:47:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "8668:47:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "8724:116:2",
            "value": {
              "arguments": [{
                "name": "value0",
                "nodeType": "YulIdentifier",
                "src": "8826:6:2"
              }, {
                "name": "tail",
                "nodeType": "YulIdentifier",
                "src": "8835:4:2"
              }],
              "functionName": {
                "name": "abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "8732:93:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "8732:108:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "8724:4:2"
            }]
          }]
        },
        "name": "abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "headStart",
          "nodeType": "YulTypedName",
          "src": "8594:9:2",
          "type": ""
        }, {
          "name": "value0",
          "nodeType": "YulTypedName",
          "src": "8606:6:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "tail",
          "nodeType": "YulTypedName",
          "src": "8617:4:2",
          "type": ""
        }],
        "src": "8474:373:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "8942:28:2",
          "statements": [{
            "expression": {
              "arguments": [{
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "8959:1:2",
                "type": "",
                "value": "0"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "8962:1:2",
                "type": "",
                "value": "0"
              }],
              "functionName": {
                "name": "revert",
                "nodeType": "YulIdentifier",
                "src": "8952:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "8952:12:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "8952:12:2"
          }]
        },
        "name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
        "nodeType": "YulFunctionDefinition",
        "src": "8853:117:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "9065:28:2",
          "statements": [{
            "expression": {
              "arguments": [{
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "9082:1:2",
                "type": "",
                "value": "0"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "9085:1:2",
                "type": "",
                "value": "0"
              }],
              "functionName": {
                "name": "revert",
                "nodeType": "YulIdentifier",
                "src": "9075:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "9075:12:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "9075:12:2"
          }]
        },
        "name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
        "nodeType": "YulFunctionDefinition",
        "src": "8976:117:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "9127:152:2",
          "statements": [{
            "expression": {
              "arguments": [{
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "9144:1:2",
                "type": "",
                "value": "0"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "9147:77:2",
                "type": "",
                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "9137:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "9137:88:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "9137:88:2"
          }, {
            "expression": {
              "arguments": [{
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "9241:1:2",
                "type": "",
                "value": "4"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "9244:4:2",
                "type": "",
                "value": "0x41"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "9234:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "9234:15:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "9234:15:2"
          }, {
            "expression": {
              "arguments": [{
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "9265:1:2",
                "type": "",
                "value": "0"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "9268:4:2",
                "type": "",
                "value": "0x24"
              }],
              "functionName": {
                "name": "revert",
                "nodeType": "YulIdentifier",
                "src": "9258:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "9258:15:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "9258:15:2"
          }]
        },
        "name": "panic_error_0x41",
        "nodeType": "YulFunctionDefinition",
        "src": "9099:180:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "9328:238:2",
          "statements": [{
            "nodeType": "YulVariableDeclaration",
            "src": "9338:58:2",
            "value": {
              "arguments": [{
                "name": "memPtr",
                "nodeType": "YulIdentifier",
                "src": "9360:6:2"
              }, {
                "arguments": [{
                  "name": "size",
                  "nodeType": "YulIdentifier",
                  "src": "9390:4:2"
                }],
                "functionName": {
                  "name": "round_up_to_mul_of_32",
                  "nodeType": "YulIdentifier",
                  "src": "9368:21:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "9368:27:2"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "9356:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "9356:40:2"
            },
            "variables": [{
              "name": "newFreePtr",
              "nodeType": "YulTypedName",
              "src": "9342:10:2",
              "type": ""
            }]
          }, {
            "body": {
              "nodeType": "YulBlock",
              "src": "9507:22:2",
              "statements": [{
                "expression": {
                  "arguments": [],
                  "functionName": {
                    "name": "panic_error_0x41",
                    "nodeType": "YulIdentifier",
                    "src": "9509:16:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "9509:18:2"
                },
                "nodeType": "YulExpressionStatement",
                "src": "9509:18:2"
              }]
            },
            "condition": {
              "arguments": [{
                "arguments": [{
                  "name": "newFreePtr",
                  "nodeType": "YulIdentifier",
                  "src": "9450:10:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "9462:18:2",
                  "type": "",
                  "value": "0xffffffffffffffff"
                }],
                "functionName": {
                  "name": "gt",
                  "nodeType": "YulIdentifier",
                  "src": "9447:2:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "9447:34:2"
              }, {
                "arguments": [{
                  "name": "newFreePtr",
                  "nodeType": "YulIdentifier",
                  "src": "9486:10:2"
                }, {
                  "name": "memPtr",
                  "nodeType": "YulIdentifier",
                  "src": "9498:6:2"
                }],
                "functionName": {
                  "name": "lt",
                  "nodeType": "YulIdentifier",
                  "src": "9483:2:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "9483:22:2"
              }],
              "functionName": {
                "name": "or",
                "nodeType": "YulIdentifier",
                "src": "9444:2:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "9444:62:2"
            },
            "nodeType": "YulIf",
            "src": "9441:88:2"
          }, {
            "expression": {
              "arguments": [{
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "9545:2:2",
                "type": "",
                "value": "64"
              }, {
                "name": "newFreePtr",
                "nodeType": "YulIdentifier",
                "src": "9549:10:2"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "9538:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "9538:22:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "9538:22:2"
          }]
        },
        "name": "finalize_allocation",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "memPtr",
          "nodeType": "YulTypedName",
          "src": "9314:6:2",
          "type": ""
        }, {
          "name": "size",
          "nodeType": "YulTypedName",
          "src": "9322:4:2",
          "type": ""
        }],
        "src": "9285:281:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "9613:88:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "9623:30:2",
            "value": {
              "arguments": [],
              "functionName": {
                "name": "allocate_unbounded",
                "nodeType": "YulIdentifier",
                "src": "9633:18:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "9633:20:2"
            },
            "variableNames": [{
              "name": "memPtr",
              "nodeType": "YulIdentifier",
              "src": "9623:6:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "name": "memPtr",
                "nodeType": "YulIdentifier",
                "src": "9682:6:2"
              }, {
                "name": "size",
                "nodeType": "YulIdentifier",
                "src": "9690:4:2"
              }],
              "functionName": {
                "name": "finalize_allocation",
                "nodeType": "YulIdentifier",
                "src": "9662:19:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "9662:33:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "9662:33:2"
          }]
        },
        "name": "allocate_memory",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "size",
          "nodeType": "YulTypedName",
          "src": "9597:4:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "memPtr",
          "nodeType": "YulTypedName",
          "src": "9606:6:2",
          "type": ""
        }],
        "src": "9572:129:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "9774:241:2",
          "statements": [{
            "body": {
              "nodeType": "YulBlock",
              "src": "9879:22:2",
              "statements": [{
                "expression": {
                  "arguments": [],
                  "functionName": {
                    "name": "panic_error_0x41",
                    "nodeType": "YulIdentifier",
                    "src": "9881:16:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "9881:18:2"
                },
                "nodeType": "YulExpressionStatement",
                "src": "9881:18:2"
              }]
            },
            "condition": {
              "arguments": [{
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "9851:6:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "9859:18:2",
                "type": "",
                "value": "0xffffffffffffffff"
              }],
              "functionName": {
                "name": "gt",
                "nodeType": "YulIdentifier",
                "src": "9848:2:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "9848:30:2"
            },
            "nodeType": "YulIf",
            "src": "9845:56:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "9911:37:2",
            "value": {
              "arguments": [{
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "9941:6:2"
              }],
              "functionName": {
                "name": "round_up_to_mul_of_32",
                "nodeType": "YulIdentifier",
                "src": "9919:21:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "9919:29:2"
            },
            "variableNames": [{
              "name": "size",
              "nodeType": "YulIdentifier",
              "src": "9911:4:2"
            }]
          }, {
            "nodeType": "YulAssignment",
            "src": "9985:23:2",
            "value": {
              "arguments": [{
                "name": "size",
                "nodeType": "YulIdentifier",
                "src": "9997:4:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "10003:4:2",
                "type": "",
                "value": "0x20"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "9993:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "9993:15:2"
            },
            "variableNames": [{
              "name": "size",
              "nodeType": "YulIdentifier",
              "src": "9985:4:2"
            }]
          }]
        },
        "name": "array_allocation_size_t_string_memory_ptr",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "length",
          "nodeType": "YulTypedName",
          "src": "9758:6:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "size",
          "nodeType": "YulTypedName",
          "src": "9769:4:2",
          "type": ""
        }],
        "src": "9707:308:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "10072:103:2",
          "statements": [{
            "expression": {
              "arguments": [{
                "name": "dst",
                "nodeType": "YulIdentifier",
                "src": "10095:3:2"
              }, {
                "name": "src",
                "nodeType": "YulIdentifier",
                "src": "10100:3:2"
              }, {
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "10105:6:2"
              }],
              "functionName": {
                "name": "calldatacopy",
                "nodeType": "YulIdentifier",
                "src": "10082:12:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "10082:30:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "10082:30:2"
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "dst",
                  "nodeType": "YulIdentifier",
                  "src": "10153:3:2"
                }, {
                  "name": "length",
                  "nodeType": "YulIdentifier",
                  "src": "10158:6:2"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "10149:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "10149:16:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "10167:1:2",
                "type": "",
                "value": "0"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "10142:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "10142:27:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "10142:27:2"
          }]
        },
        "name": "copy_calldata_to_memory",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "src",
          "nodeType": "YulTypedName",
          "src": "10054:3:2",
          "type": ""
        }, {
          "name": "dst",
          "nodeType": "YulTypedName",
          "src": "10059:3:2",
          "type": ""
        }, {
          "name": "length",
          "nodeType": "YulTypedName",
          "src": "10064:6:2",
          "type": ""
        }],
        "src": "10021:154:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "10265:328:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "10275:75:2",
            "value": {
              "arguments": [{
                "arguments": [{
                  "name": "length",
                  "nodeType": "YulIdentifier",
                  "src": "10342:6:2"
                }],
                "functionName": {
                  "name": "array_allocation_size_t_string_memory_ptr",
                  "nodeType": "YulIdentifier",
                  "src": "10300:41:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "10300:49:2"
              }],
              "functionName": {
                "name": "allocate_memory",
                "nodeType": "YulIdentifier",
                "src": "10284:15:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "10284:66:2"
            },
            "variableNames": [{
              "name": "array",
              "nodeType": "YulIdentifier",
              "src": "10275:5:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "name": "array",
                "nodeType": "YulIdentifier",
                "src": "10366:5:2"
              }, {
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "10373:6:2"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "10359:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "10359:21:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "10359:21:2"
          }, {
            "nodeType": "YulVariableDeclaration",
            "src": "10389:27:2",
            "value": {
              "arguments": [{
                "name": "array",
                "nodeType": "YulIdentifier",
                "src": "10404:5:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "10411:4:2",
                "type": "",
                "value": "0x20"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "10400:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "10400:16:2"
            },
            "variables": [{
              "name": "dst",
              "nodeType": "YulTypedName",
              "src": "10393:3:2",
              "type": ""
            }]
          }, {
            "body": {
              "nodeType": "YulBlock",
              "src": "10454:83:2",
              "statements": [{
                "expression": {
                  "arguments": [],
                  "functionName": {
                    "name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
                    "nodeType": "YulIdentifier",
                    "src": "10456:77:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "10456:79:2"
                },
                "nodeType": "YulExpressionStatement",
                "src": "10456:79:2"
              }]
            },
            "condition": {
              "arguments": [{
                "arguments": [{
                  "name": "src",
                  "nodeType": "YulIdentifier",
                  "src": "10435:3:2"
                }, {
                  "name": "length",
                  "nodeType": "YulIdentifier",
                  "src": "10440:6:2"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "10431:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "10431:16:2"
              }, {
                "name": "end",
                "nodeType": "YulIdentifier",
                "src": "10449:3:2"
              }],
              "functionName": {
                "name": "gt",
                "nodeType": "YulIdentifier",
                "src": "10428:2:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "10428:25:2"
            },
            "nodeType": "YulIf",
            "src": "10425:112:2"
          }, {
            "expression": {
              "arguments": [{
                "name": "src",
                "nodeType": "YulIdentifier",
                "src": "10570:3:2"
              }, {
                "name": "dst",
                "nodeType": "YulIdentifier",
                "src": "10575:3:2"
              }, {
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "10580:6:2"
              }],
              "functionName": {
                "name": "copy_calldata_to_memory",
                "nodeType": "YulIdentifier",
                "src": "10546:23:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "10546:41:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "10546:41:2"
          }]
        },
        "name": "abi_decode_available_length_t_string_memory_ptr",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "src",
          "nodeType": "YulTypedName",
          "src": "10238:3:2",
          "type": ""
        }, {
          "name": "length",
          "nodeType": "YulTypedName",
          "src": "10243:6:2",
          "type": ""
        }, {
          "name": "end",
          "nodeType": "YulTypedName",
          "src": "10251:3:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "array",
          "nodeType": "YulTypedName",
          "src": "10259:5:2",
          "type": ""
        }],
        "src": "10181:412:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "10675:278:2",
          "statements": [{
            "body": {
              "nodeType": "YulBlock",
              "src": "10724:83:2",
              "statements": [{
                "expression": {
                  "arguments": [],
                  "functionName": {
                    "name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                    "nodeType": "YulIdentifier",
                    "src": "10726:77:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "10726:79:2"
                },
                "nodeType": "YulExpressionStatement",
                "src": "10726:79:2"
              }]
            },
            "condition": {
              "arguments": [{
                "arguments": [{
                  "arguments": [{
                    "name": "offset",
                    "nodeType": "YulIdentifier",
                    "src": "10703:6:2"
                  }, {
                    "kind": "number",
                    "nodeType": "YulLiteral",
                    "src": "10711:4:2",
                    "type": "",
                    "value": "0x1f"
                  }],
                  "functionName": {
                    "name": "add",
                    "nodeType": "YulIdentifier",
                    "src": "10699:3:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "10699:17:2"
                }, {
                  "name": "end",
                  "nodeType": "YulIdentifier",
                  "src": "10718:3:2"
                }],
                "functionName": {
                  "name": "slt",
                  "nodeType": "YulIdentifier",
                  "src": "10695:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "10695:27:2"
              }],
              "functionName": {
                "name": "iszero",
                "nodeType": "YulIdentifier",
                "src": "10688:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "10688:35:2"
            },
            "nodeType": "YulIf",
            "src": "10685:122:2"
          }, {
            "nodeType": "YulVariableDeclaration",
            "src": "10816:34:2",
            "value": {
              "arguments": [{
                "name": "offset",
                "nodeType": "YulIdentifier",
                "src": "10843:6:2"
              }],
              "functionName": {
                "name": "calldataload",
                "nodeType": "YulIdentifier",
                "src": "10830:12:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "10830:20:2"
            },
            "variables": [{
              "name": "length",
              "nodeType": "YulTypedName",
              "src": "10820:6:2",
              "type": ""
            }]
          }, {
            "nodeType": "YulAssignment",
            "src": "10859:88:2",
            "value": {
              "arguments": [{
                "arguments": [{
                  "name": "offset",
                  "nodeType": "YulIdentifier",
                  "src": "10920:6:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "10928:4:2",
                  "type": "",
                  "value": "0x20"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "10916:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "10916:17:2"
              }, {
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "10935:6:2"
              }, {
                "name": "end",
                "nodeType": "YulIdentifier",
                "src": "10943:3:2"
              }],
              "functionName": {
                "name": "abi_decode_available_length_t_string_memory_ptr",
                "nodeType": "YulIdentifier",
                "src": "10868:47:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "10868:79:2"
            },
            "variableNames": [{
              "name": "array",
              "nodeType": "YulIdentifier",
              "src": "10859:5:2"
            }]
          }]
        },
        "name": "abi_decode_t_string_memory_ptr",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "offset",
          "nodeType": "YulTypedName",
          "src": "10653:6:2",
          "type": ""
        }, {
          "name": "end",
          "nodeType": "YulTypedName",
          "src": "10661:3:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "array",
          "nodeType": "YulTypedName",
          "src": "10669:5:2",
          "type": ""
        }],
        "src": "10613:340:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "11035:433:2",
          "statements": [{
            "body": {
              "nodeType": "YulBlock",
              "src": "11081:83:2",
              "statements": [{
                "expression": {
                  "arguments": [],
                  "functionName": {
                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                    "nodeType": "YulIdentifier",
                    "src": "11083:77:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "11083:79:2"
                },
                "nodeType": "YulExpressionStatement",
                "src": "11083:79:2"
              }]
            },
            "condition": {
              "arguments": [{
                "arguments": [{
                  "name": "dataEnd",
                  "nodeType": "YulIdentifier",
                  "src": "11056:7:2"
                }, {
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "11065:9:2"
                }],
                "functionName": {
                  "name": "sub",
                  "nodeType": "YulIdentifier",
                  "src": "11052:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "11052:23:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "11077:2:2",
                "type": "",
                "value": "32"
              }],
              "functionName": {
                "name": "slt",
                "nodeType": "YulIdentifier",
                "src": "11048:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "11048:32:2"
            },
            "nodeType": "YulIf",
            "src": "11045:119:2"
          }, {
            "nodeType": "YulBlock",
            "src": "11174:287:2",
            "statements": [{
              "nodeType": "YulVariableDeclaration",
              "src": "11189:45:2",
              "value": {
                "arguments": [{
                  "arguments": [{
                    "name": "headStart",
                    "nodeType": "YulIdentifier",
                    "src": "11220:9:2"
                  }, {
                    "kind": "number",
                    "nodeType": "YulLiteral",
                    "src": "11231:1:2",
                    "type": "",
                    "value": "0"
                  }],
                  "functionName": {
                    "name": "add",
                    "nodeType": "YulIdentifier",
                    "src": "11216:3:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "11216:17:2"
                }],
                "functionName": {
                  "name": "calldataload",
                  "nodeType": "YulIdentifier",
                  "src": "11203:12:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "11203:31:2"
              },
              "variables": [{
                "name": "offset",
                "nodeType": "YulTypedName",
                "src": "11193:6:2",
                "type": ""
              }]
            }, {
              "body": {
                "nodeType": "YulBlock",
                "src": "11281:83:2",
                "statements": [{
                  "expression": {
                    "arguments": [],
                    "functionName": {
                      "name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                      "nodeType": "YulIdentifier",
                      "src": "11283:77:2"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "11283:79:2"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "11283:79:2"
                }]
              },
              "condition": {
                "arguments": [{
                  "name": "offset",
                  "nodeType": "YulIdentifier",
                  "src": "11253:6:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "11261:18:2",
                  "type": "",
                  "value": "0xffffffffffffffff"
                }],
                "functionName": {
                  "name": "gt",
                  "nodeType": "YulIdentifier",
                  "src": "11250:2:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "11250:30:2"
              },
              "nodeType": "YulIf",
              "src": "11247:117:2"
            }, {
              "nodeType": "YulAssignment",
              "src": "11378:73:2",
              "value": {
                "arguments": [{
                  "arguments": [{
                    "name": "headStart",
                    "nodeType": "YulIdentifier",
                    "src": "11423:9:2"
                  }, {
                    "name": "offset",
                    "nodeType": "YulIdentifier",
                    "src": "11434:6:2"
                  }],
                  "functionName": {
                    "name": "add",
                    "nodeType": "YulIdentifier",
                    "src": "11419:3:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "11419:22:2"
                }, {
                  "name": "dataEnd",
                  "nodeType": "YulIdentifier",
                  "src": "11443:7:2"
                }],
                "functionName": {
                  "name": "abi_decode_t_string_memory_ptr",
                  "nodeType": "YulIdentifier",
                  "src": "11388:30:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "11388:63:2"
              },
              "variableNames": [{
                "name": "value0",
                "nodeType": "YulIdentifier",
                "src": "11378:6:2"
              }]
            }]
          }]
        },
        "name": "abi_decode_tuple_t_string_memory_ptr",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "headStart",
          "nodeType": "YulTypedName",
          "src": "11005:9:2",
          "type": ""
        }, {
          "name": "dataEnd",
          "nodeType": "YulTypedName",
          "src": "11016:7:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "value0",
          "nodeType": "YulTypedName",
          "src": "11028:6:2",
          "type": ""
        }],
        "src": "10959:509:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "11554:388:2",
          "statements": [{
            "body": {
              "nodeType": "YulBlock",
              "src": "11600:83:2",
              "statements": [{
                "expression": {
                  "arguments": [],
                  "functionName": {
                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                    "nodeType": "YulIdentifier",
                    "src": "11602:77:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "11602:79:2"
                },
                "nodeType": "YulExpressionStatement",
                "src": "11602:79:2"
              }]
            },
            "condition": {
              "arguments": [{
                "arguments": [{
                  "name": "dataEnd",
                  "nodeType": "YulIdentifier",
                  "src": "11575:7:2"
                }, {
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "11584:9:2"
                }],
                "functionName": {
                  "name": "sub",
                  "nodeType": "YulIdentifier",
                  "src": "11571:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "11571:23:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "11596:2:2",
                "type": "",
                "value": "64"
              }],
              "functionName": {
                "name": "slt",
                "nodeType": "YulIdentifier",
                "src": "11567:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "11567:32:2"
            },
            "nodeType": "YulIf",
            "src": "11564:119:2"
          }, {
            "nodeType": "YulBlock",
            "src": "11693:117:2",
            "statements": [{
              "nodeType": "YulVariableDeclaration",
              "src": "11708:15:2",
              "value": {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "11722:1:2",
                "type": "",
                "value": "0"
              },
              "variables": [{
                "name": "offset",
                "nodeType": "YulTypedName",
                "src": "11712:6:2",
                "type": ""
              }]
            }, {
              "nodeType": "YulAssignment",
              "src": "11737:63:2",
              "value": {
                "arguments": [{
                  "arguments": [{
                    "name": "headStart",
                    "nodeType": "YulIdentifier",
                    "src": "11772:9:2"
                  }, {
                    "name": "offset",
                    "nodeType": "YulIdentifier",
                    "src": "11783:6:2"
                  }],
                  "functionName": {
                    "name": "add",
                    "nodeType": "YulIdentifier",
                    "src": "11768:3:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "11768:22:2"
                }, {
                  "name": "dataEnd",
                  "nodeType": "YulIdentifier",
                  "src": "11792:7:2"
                }],
                "functionName": {
                  "name": "abi_decode_t_address",
                  "nodeType": "YulIdentifier",
                  "src": "11747:20:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "11747:53:2"
              },
              "variableNames": [{
                "name": "value0",
                "nodeType": "YulIdentifier",
                "src": "11737:6:2"
              }]
            }]
          }, {
            "nodeType": "YulBlock",
            "src": "11820:115:2",
            "statements": [{
              "nodeType": "YulVariableDeclaration",
              "src": "11835:16:2",
              "value": {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "11849:2:2",
                "type": "",
                "value": "32"
              },
              "variables": [{
                "name": "offset",
                "nodeType": "YulTypedName",
                "src": "11839:6:2",
                "type": ""
              }]
            }, {
              "nodeType": "YulAssignment",
              "src": "11865:60:2",
              "value": {
                "arguments": [{
                  "arguments": [{
                    "name": "headStart",
                    "nodeType": "YulIdentifier",
                    "src": "11897:9:2"
                  }, {
                    "name": "offset",
                    "nodeType": "YulIdentifier",
                    "src": "11908:6:2"
                  }],
                  "functionName": {
                    "name": "add",
                    "nodeType": "YulIdentifier",
                    "src": "11893:3:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "11893:22:2"
                }, {
                  "name": "dataEnd",
                  "nodeType": "YulIdentifier",
                  "src": "11917:7:2"
                }],
                "functionName": {
                  "name": "abi_decode_t_bool",
                  "nodeType": "YulIdentifier",
                  "src": "11875:17:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "11875:50:2"
              },
              "variableNames": [{
                "name": "value1",
                "nodeType": "YulIdentifier",
                "src": "11865:6:2"
              }]
            }]
          }]
        },
        "name": "abi_decode_tuple_t_addresst_bool",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "headStart",
          "nodeType": "YulTypedName",
          "src": "11516:9:2",
          "type": ""
        }, {
          "name": "dataEnd",
          "nodeType": "YulTypedName",
          "src": "11527:7:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "value0",
          "nodeType": "YulTypedName",
          "src": "11539:6:2",
          "type": ""
        }, {
          "name": "value1",
          "nodeType": "YulTypedName",
          "src": "11547:6:2",
          "type": ""
        }],
        "src": "11474:468:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "12014:241:2",
          "statements": [{
            "body": {
              "nodeType": "YulBlock",
              "src": "12119:22:2",
              "statements": [{
                "expression": {
                  "arguments": [],
                  "functionName": {
                    "name": "panic_error_0x41",
                    "nodeType": "YulIdentifier",
                    "src": "12121:16:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "12121:18:2"
                },
                "nodeType": "YulExpressionStatement",
                "src": "12121:18:2"
              }]
            },
            "condition": {
              "arguments": [{
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "12091:6:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "12099:18:2",
                "type": "",
                "value": "0xffffffffffffffff"
              }],
              "functionName": {
                "name": "gt",
                "nodeType": "YulIdentifier",
                "src": "12088:2:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "12088:30:2"
            },
            "nodeType": "YulIf",
            "src": "12085:56:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "12151:37:2",
            "value": {
              "arguments": [{
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "12181:6:2"
              }],
              "functionName": {
                "name": "round_up_to_mul_of_32",
                "nodeType": "YulIdentifier",
                "src": "12159:21:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "12159:29:2"
            },
            "variableNames": [{
              "name": "size",
              "nodeType": "YulIdentifier",
              "src": "12151:4:2"
            }]
          }, {
            "nodeType": "YulAssignment",
            "src": "12225:23:2",
            "value": {
              "arguments": [{
                "name": "size",
                "nodeType": "YulIdentifier",
                "src": "12237:4:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "12243:4:2",
                "type": "",
                "value": "0x20"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "12233:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "12233:15:2"
            },
            "variableNames": [{
              "name": "size",
              "nodeType": "YulIdentifier",
              "src": "12225:4:2"
            }]
          }]
        },
        "name": "array_allocation_size_t_bytes_memory_ptr",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "length",
          "nodeType": "YulTypedName",
          "src": "11998:6:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "size",
          "nodeType": "YulTypedName",
          "src": "12009:4:2",
          "type": ""
        }],
        "src": "11948:307:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "12344:327:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "12354:74:2",
            "value": {
              "arguments": [{
                "arguments": [{
                  "name": "length",
                  "nodeType": "YulIdentifier",
                  "src": "12420:6:2"
                }],
                "functionName": {
                  "name": "array_allocation_size_t_bytes_memory_ptr",
                  "nodeType": "YulIdentifier",
                  "src": "12379:40:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "12379:48:2"
              }],
              "functionName": {
                "name": "allocate_memory",
                "nodeType": "YulIdentifier",
                "src": "12363:15:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "12363:65:2"
            },
            "variableNames": [{
              "name": "array",
              "nodeType": "YulIdentifier",
              "src": "12354:5:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "name": "array",
                "nodeType": "YulIdentifier",
                "src": "12444:5:2"
              }, {
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "12451:6:2"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "12437:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "12437:21:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "12437:21:2"
          }, {
            "nodeType": "YulVariableDeclaration",
            "src": "12467:27:2",
            "value": {
              "arguments": [{
                "name": "array",
                "nodeType": "YulIdentifier",
                "src": "12482:5:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "12489:4:2",
                "type": "",
                "value": "0x20"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "12478:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "12478:16:2"
            },
            "variables": [{
              "name": "dst",
              "nodeType": "YulTypedName",
              "src": "12471:3:2",
              "type": ""
            }]
          }, {
            "body": {
              "nodeType": "YulBlock",
              "src": "12532:83:2",
              "statements": [{
                "expression": {
                  "arguments": [],
                  "functionName": {
                    "name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
                    "nodeType": "YulIdentifier",
                    "src": "12534:77:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "12534:79:2"
                },
                "nodeType": "YulExpressionStatement",
                "src": "12534:79:2"
              }]
            },
            "condition": {
              "arguments": [{
                "arguments": [{
                  "name": "src",
                  "nodeType": "YulIdentifier",
                  "src": "12513:3:2"
                }, {
                  "name": "length",
                  "nodeType": "YulIdentifier",
                  "src": "12518:6:2"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "12509:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "12509:16:2"
              }, {
                "name": "end",
                "nodeType": "YulIdentifier",
                "src": "12527:3:2"
              }],
              "functionName": {
                "name": "gt",
                "nodeType": "YulIdentifier",
                "src": "12506:2:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "12506:25:2"
            },
            "nodeType": "YulIf",
            "src": "12503:112:2"
          }, {
            "expression": {
              "arguments": [{
                "name": "src",
                "nodeType": "YulIdentifier",
                "src": "12648:3:2"
              }, {
                "name": "dst",
                "nodeType": "YulIdentifier",
                "src": "12653:3:2"
              }, {
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "12658:6:2"
              }],
              "functionName": {
                "name": "copy_calldata_to_memory",
                "nodeType": "YulIdentifier",
                "src": "12624:23:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "12624:41:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "12624:41:2"
          }]
        },
        "name": "abi_decode_available_length_t_bytes_memory_ptr",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "src",
          "nodeType": "YulTypedName",
          "src": "12317:3:2",
          "type": ""
        }, {
          "name": "length",
          "nodeType": "YulTypedName",
          "src": "12322:6:2",
          "type": ""
        }, {
          "name": "end",
          "nodeType": "YulTypedName",
          "src": "12330:3:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "array",
          "nodeType": "YulTypedName",
          "src": "12338:5:2",
          "type": ""
        }],
        "src": "12261:410:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "12751:277:2",
          "statements": [{
            "body": {
              "nodeType": "YulBlock",
              "src": "12800:83:2",
              "statements": [{
                "expression": {
                  "arguments": [],
                  "functionName": {
                    "name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                    "nodeType": "YulIdentifier",
                    "src": "12802:77:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "12802:79:2"
                },
                "nodeType": "YulExpressionStatement",
                "src": "12802:79:2"
              }]
            },
            "condition": {
              "arguments": [{
                "arguments": [{
                  "arguments": [{
                    "name": "offset",
                    "nodeType": "YulIdentifier",
                    "src": "12779:6:2"
                  }, {
                    "kind": "number",
                    "nodeType": "YulLiteral",
                    "src": "12787:4:2",
                    "type": "",
                    "value": "0x1f"
                  }],
                  "functionName": {
                    "name": "add",
                    "nodeType": "YulIdentifier",
                    "src": "12775:3:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "12775:17:2"
                }, {
                  "name": "end",
                  "nodeType": "YulIdentifier",
                  "src": "12794:3:2"
                }],
                "functionName": {
                  "name": "slt",
                  "nodeType": "YulIdentifier",
                  "src": "12771:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "12771:27:2"
              }],
              "functionName": {
                "name": "iszero",
                "nodeType": "YulIdentifier",
                "src": "12764:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "12764:35:2"
            },
            "nodeType": "YulIf",
            "src": "12761:122:2"
          }, {
            "nodeType": "YulVariableDeclaration",
            "src": "12892:34:2",
            "value": {
              "arguments": [{
                "name": "offset",
                "nodeType": "YulIdentifier",
                "src": "12919:6:2"
              }],
              "functionName": {
                "name": "calldataload",
                "nodeType": "YulIdentifier",
                "src": "12906:12:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "12906:20:2"
            },
            "variables": [{
              "name": "length",
              "nodeType": "YulTypedName",
              "src": "12896:6:2",
              "type": ""
            }]
          }, {
            "nodeType": "YulAssignment",
            "src": "12935:87:2",
            "value": {
              "arguments": [{
                "arguments": [{
                  "name": "offset",
                  "nodeType": "YulIdentifier",
                  "src": "12995:6:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "13003:4:2",
                  "type": "",
                  "value": "0x20"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "12991:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "12991:17:2"
              }, {
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "13010:6:2"
              }, {
                "name": "end",
                "nodeType": "YulIdentifier",
                "src": "13018:3:2"
              }],
              "functionName": {
                "name": "abi_decode_available_length_t_bytes_memory_ptr",
                "nodeType": "YulIdentifier",
                "src": "12944:46:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "12944:78:2"
            },
            "variableNames": [{
              "name": "array",
              "nodeType": "YulIdentifier",
              "src": "12935:5:2"
            }]
          }]
        },
        "name": "abi_decode_t_bytes_memory_ptr",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "offset",
          "nodeType": "YulTypedName",
          "src": "12729:6:2",
          "type": ""
        }, {
          "name": "end",
          "nodeType": "YulTypedName",
          "src": "12737:3:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "array",
          "nodeType": "YulTypedName",
          "src": "12745:5:2",
          "type": ""
        }],
        "src": "12690:338:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "13160:817:2",
          "statements": [{
            "body": {
              "nodeType": "YulBlock",
              "src": "13207:83:2",
              "statements": [{
                "expression": {
                  "arguments": [],
                  "functionName": {
                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                    "nodeType": "YulIdentifier",
                    "src": "13209:77:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "13209:79:2"
                },
                "nodeType": "YulExpressionStatement",
                "src": "13209:79:2"
              }]
            },
            "condition": {
              "arguments": [{
                "arguments": [{
                  "name": "dataEnd",
                  "nodeType": "YulIdentifier",
                  "src": "13181:7:2"
                }, {
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "13190:9:2"
                }],
                "functionName": {
                  "name": "sub",
                  "nodeType": "YulIdentifier",
                  "src": "13177:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "13177:23:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "13202:3:2",
                "type": "",
                "value": "128"
              }],
              "functionName": {
                "name": "slt",
                "nodeType": "YulIdentifier",
                "src": "13173:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "13173:33:2"
            },
            "nodeType": "YulIf",
            "src": "13170:120:2"
          }, {
            "nodeType": "YulBlock",
            "src": "13300:117:2",
            "statements": [{
              "nodeType": "YulVariableDeclaration",
              "src": "13315:15:2",
              "value": {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "13329:1:2",
                "type": "",
                "value": "0"
              },
              "variables": [{
                "name": "offset",
                "nodeType": "YulTypedName",
                "src": "13319:6:2",
                "type": ""
              }]
            }, {
              "nodeType": "YulAssignment",
              "src": "13344:63:2",
              "value": {
                "arguments": [{
                  "arguments": [{
                    "name": "headStart",
                    "nodeType": "YulIdentifier",
                    "src": "13379:9:2"
                  }, {
                    "name": "offset",
                    "nodeType": "YulIdentifier",
                    "src": "13390:6:2"
                  }],
                  "functionName": {
                    "name": "add",
                    "nodeType": "YulIdentifier",
                    "src": "13375:3:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "13375:22:2"
                }, {
                  "name": "dataEnd",
                  "nodeType": "YulIdentifier",
                  "src": "13399:7:2"
                }],
                "functionName": {
                  "name": "abi_decode_t_address",
                  "nodeType": "YulIdentifier",
                  "src": "13354:20:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "13354:53:2"
              },
              "variableNames": [{
                "name": "value0",
                "nodeType": "YulIdentifier",
                "src": "13344:6:2"
              }]
            }]
          }, {
            "nodeType": "YulBlock",
            "src": "13427:118:2",
            "statements": [{
              "nodeType": "YulVariableDeclaration",
              "src": "13442:16:2",
              "value": {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "13456:2:2",
                "type": "",
                "value": "32"
              },
              "variables": [{
                "name": "offset",
                "nodeType": "YulTypedName",
                "src": "13446:6:2",
                "type": ""
              }]
            }, {
              "nodeType": "YulAssignment",
              "src": "13472:63:2",
              "value": {
                "arguments": [{
                  "arguments": [{
                    "name": "headStart",
                    "nodeType": "YulIdentifier",
                    "src": "13507:9:2"
                  }, {
                    "name": "offset",
                    "nodeType": "YulIdentifier",
                    "src": "13518:6:2"
                  }],
                  "functionName": {
                    "name": "add",
                    "nodeType": "YulIdentifier",
                    "src": "13503:3:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "13503:22:2"
                }, {
                  "name": "dataEnd",
                  "nodeType": "YulIdentifier",
                  "src": "13527:7:2"
                }],
                "functionName": {
                  "name": "abi_decode_t_address",
                  "nodeType": "YulIdentifier",
                  "src": "13482:20:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "13482:53:2"
              },
              "variableNames": [{
                "name": "value1",
                "nodeType": "YulIdentifier",
                "src": "13472:6:2"
              }]
            }]
          }, {
            "nodeType": "YulBlock",
            "src": "13555:118:2",
            "statements": [{
              "nodeType": "YulVariableDeclaration",
              "src": "13570:16:2",
              "value": {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "13584:2:2",
                "type": "",
                "value": "64"
              },
              "variables": [{
                "name": "offset",
                "nodeType": "YulTypedName",
                "src": "13574:6:2",
                "type": ""
              }]
            }, {
              "nodeType": "YulAssignment",
              "src": "13600:63:2",
              "value": {
                "arguments": [{
                  "arguments": [{
                    "name": "headStart",
                    "nodeType": "YulIdentifier",
                    "src": "13635:9:2"
                  }, {
                    "name": "offset",
                    "nodeType": "YulIdentifier",
                    "src": "13646:6:2"
                  }],
                  "functionName": {
                    "name": "add",
                    "nodeType": "YulIdentifier",
                    "src": "13631:3:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "13631:22:2"
                }, {
                  "name": "dataEnd",
                  "nodeType": "YulIdentifier",
                  "src": "13655:7:2"
                }],
                "functionName": {
                  "name": "abi_decode_t_uint256",
                  "nodeType": "YulIdentifier",
                  "src": "13610:20:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "13610:53:2"
              },
              "variableNames": [{
                "name": "value2",
                "nodeType": "YulIdentifier",
                "src": "13600:6:2"
              }]
            }]
          }, {
            "nodeType": "YulBlock",
            "src": "13683:287:2",
            "statements": [{
              "nodeType": "YulVariableDeclaration",
              "src": "13698:46:2",
              "value": {
                "arguments": [{
                  "arguments": [{
                    "name": "headStart",
                    "nodeType": "YulIdentifier",
                    "src": "13729:9:2"
                  }, {
                    "kind": "number",
                    "nodeType": "YulLiteral",
                    "src": "13740:2:2",
                    "type": "",
                    "value": "96"
                  }],
                  "functionName": {
                    "name": "add",
                    "nodeType": "YulIdentifier",
                    "src": "13725:3:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "13725:18:2"
                }],
                "functionName": {
                  "name": "calldataload",
                  "nodeType": "YulIdentifier",
                  "src": "13712:12:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "13712:32:2"
              },
              "variables": [{
                "name": "offset",
                "nodeType": "YulTypedName",
                "src": "13702:6:2",
                "type": ""
              }]
            }, {
              "body": {
                "nodeType": "YulBlock",
                "src": "13791:83:2",
                "statements": [{
                  "expression": {
                    "arguments": [],
                    "functionName": {
                      "name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                      "nodeType": "YulIdentifier",
                      "src": "13793:77:2"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "13793:79:2"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "13793:79:2"
                }]
              },
              "condition": {
                "arguments": [{
                  "name": "offset",
                  "nodeType": "YulIdentifier",
                  "src": "13763:6:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "13771:18:2",
                  "type": "",
                  "value": "0xffffffffffffffff"
                }],
                "functionName": {
                  "name": "gt",
                  "nodeType": "YulIdentifier",
                  "src": "13760:2:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "13760:30:2"
              },
              "nodeType": "YulIf",
              "src": "13757:117:2"
            }, {
              "nodeType": "YulAssignment",
              "src": "13888:72:2",
              "value": {
                "arguments": [{
                  "arguments": [{
                    "name": "headStart",
                    "nodeType": "YulIdentifier",
                    "src": "13932:9:2"
                  }, {
                    "name": "offset",
                    "nodeType": "YulIdentifier",
                    "src": "13943:6:2"
                  }],
                  "functionName": {
                    "name": "add",
                    "nodeType": "YulIdentifier",
                    "src": "13928:3:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "13928:22:2"
                }, {
                  "name": "dataEnd",
                  "nodeType": "YulIdentifier",
                  "src": "13952:7:2"
                }],
                "functionName": {
                  "name": "abi_decode_t_bytes_memory_ptr",
                  "nodeType": "YulIdentifier",
                  "src": "13898:29:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "13898:62:2"
              },
              "variableNames": [{
                "name": "value3",
                "nodeType": "YulIdentifier",
                "src": "13888:6:2"
              }]
            }]
          }]
        },
        "name": "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "headStart",
          "nodeType": "YulTypedName",
          "src": "13106:9:2",
          "type": ""
        }, {
          "name": "dataEnd",
          "nodeType": "YulTypedName",
          "src": "13117:7:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "value0",
          "nodeType": "YulTypedName",
          "src": "13129:6:2",
          "type": ""
        }, {
          "name": "value1",
          "nodeType": "YulTypedName",
          "src": "13137:6:2",
          "type": ""
        }, {
          "name": "value2",
          "nodeType": "YulTypedName",
          "src": "13145:6:2",
          "type": ""
        }, {
          "name": "value3",
          "nodeType": "YulTypedName",
          "src": "13153:6:2",
          "type": ""
        }],
        "src": "13034:943:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "14066:391:2",
          "statements": [{
            "body": {
              "nodeType": "YulBlock",
              "src": "14112:83:2",
              "statements": [{
                "expression": {
                  "arguments": [],
                  "functionName": {
                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                    "nodeType": "YulIdentifier",
                    "src": "14114:77:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "14114:79:2"
                },
                "nodeType": "YulExpressionStatement",
                "src": "14114:79:2"
              }]
            },
            "condition": {
              "arguments": [{
                "arguments": [{
                  "name": "dataEnd",
                  "nodeType": "YulIdentifier",
                  "src": "14087:7:2"
                }, {
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "14096:9:2"
                }],
                "functionName": {
                  "name": "sub",
                  "nodeType": "YulIdentifier",
                  "src": "14083:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "14083:23:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "14108:2:2",
                "type": "",
                "value": "64"
              }],
              "functionName": {
                "name": "slt",
                "nodeType": "YulIdentifier",
                "src": "14079:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "14079:32:2"
            },
            "nodeType": "YulIf",
            "src": "14076:119:2"
          }, {
            "nodeType": "YulBlock",
            "src": "14205:117:2",
            "statements": [{
              "nodeType": "YulVariableDeclaration",
              "src": "14220:15:2",
              "value": {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "14234:1:2",
                "type": "",
                "value": "0"
              },
              "variables": [{
                "name": "offset",
                "nodeType": "YulTypedName",
                "src": "14224:6:2",
                "type": ""
              }]
            }, {
              "nodeType": "YulAssignment",
              "src": "14249:63:2",
              "value": {
                "arguments": [{
                  "arguments": [{
                    "name": "headStart",
                    "nodeType": "YulIdentifier",
                    "src": "14284:9:2"
                  }, {
                    "name": "offset",
                    "nodeType": "YulIdentifier",
                    "src": "14295:6:2"
                  }],
                  "functionName": {
                    "name": "add",
                    "nodeType": "YulIdentifier",
                    "src": "14280:3:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "14280:22:2"
                }, {
                  "name": "dataEnd",
                  "nodeType": "YulIdentifier",
                  "src": "14304:7:2"
                }],
                "functionName": {
                  "name": "abi_decode_t_address",
                  "nodeType": "YulIdentifier",
                  "src": "14259:20:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "14259:53:2"
              },
              "variableNames": [{
                "name": "value0",
                "nodeType": "YulIdentifier",
                "src": "14249:6:2"
              }]
            }]
          }, {
            "nodeType": "YulBlock",
            "src": "14332:118:2",
            "statements": [{
              "nodeType": "YulVariableDeclaration",
              "src": "14347:16:2",
              "value": {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "14361:2:2",
                "type": "",
                "value": "32"
              },
              "variables": [{
                "name": "offset",
                "nodeType": "YulTypedName",
                "src": "14351:6:2",
                "type": ""
              }]
            }, {
              "nodeType": "YulAssignment",
              "src": "14377:63:2",
              "value": {
                "arguments": [{
                  "arguments": [{
                    "name": "headStart",
                    "nodeType": "YulIdentifier",
                    "src": "14412:9:2"
                  }, {
                    "name": "offset",
                    "nodeType": "YulIdentifier",
                    "src": "14423:6:2"
                  }],
                  "functionName": {
                    "name": "add",
                    "nodeType": "YulIdentifier",
                    "src": "14408:3:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "14408:22:2"
                }, {
                  "name": "dataEnd",
                  "nodeType": "YulIdentifier",
                  "src": "14432:7:2"
                }],
                "functionName": {
                  "name": "abi_decode_t_address",
                  "nodeType": "YulIdentifier",
                  "src": "14387:20:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "14387:53:2"
              },
              "variableNames": [{
                "name": "value1",
                "nodeType": "YulIdentifier",
                "src": "14377:6:2"
              }]
            }]
          }]
        },
        "name": "abi_decode_tuple_t_addresst_address",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "headStart",
          "nodeType": "YulTypedName",
          "src": "14028:9:2",
          "type": ""
        }, {
          "name": "dataEnd",
          "nodeType": "YulTypedName",
          "src": "14039:7:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "value0",
          "nodeType": "YulTypedName",
          "src": "14051:6:2",
          "type": ""
        }, {
          "name": "value1",
          "nodeType": "YulTypedName",
          "src": "14059:6:2",
          "type": ""
        }],
        "src": "13983:474:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "14569:76:2",
          "statements": [{
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "memPtr",
                  "nodeType": "YulIdentifier",
                  "src": "14591:6:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "14599:1:2",
                  "type": "",
                  "value": "0"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "14587:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "14587:14:2"
              }, {
                "hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
                "kind": "string",
                "nodeType": "YulLiteral",
                "src": "14603:34:2",
                "type": "",
                "value": "Ownable: caller is not the owner"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "14580:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "14580:58:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "14580:58:2"
          }]
        },
        "name": "store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "memPtr",
          "nodeType": "YulTypedName",
          "src": "14561:6:2",
          "type": ""
        }],
        "src": "14463:182:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "14797:220:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "14807:74:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "14873:3:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "14878:2:2",
                "type": "",
                "value": "32"
              }],
              "functionName": {
                "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "14814:58:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "14814:67:2"
            },
            "variableNames": [{
              "name": "pos",
              "nodeType": "YulIdentifier",
              "src": "14807:3:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "14979:3:2"
              }],
              "functionName": {
                "name": "store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
                "nodeType": "YulIdentifier",
                "src": "14890:88:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "14890:93:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "14890:93:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "14992:19:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "15003:3:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "15008:2:2",
                "type": "",
                "value": "32"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "14999:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "14999:12:2"
            },
            "variableNames": [{
              "name": "end",
              "nodeType": "YulIdentifier",
              "src": "14992:3:2"
            }]
          }]
        },
        "name": "abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "pos",
          "nodeType": "YulTypedName",
          "src": "14785:3:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "end",
          "nodeType": "YulTypedName",
          "src": "14793:3:2",
          "type": ""
        }],
        "src": "14651:366:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "15194:248:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "15204:26:2",
            "value": {
              "arguments": [{
                "name": "headStart",
                "nodeType": "YulIdentifier",
                "src": "15216:9:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "15227:2:2",
                "type": "",
                "value": "32"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "15212:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "15212:18:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "15204:4:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "15251:9:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "15262:1:2",
                  "type": "",
                  "value": "0"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "15247:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "15247:17:2"
              }, {
                "arguments": [{
                  "name": "tail",
                  "nodeType": "YulIdentifier",
                  "src": "15270:4:2"
                }, {
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "15276:9:2"
                }],
                "functionName": {
                  "name": "sub",
                  "nodeType": "YulIdentifier",
                  "src": "15266:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "15266:20:2"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "15240:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "15240:47:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "15240:47:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "15296:139:2",
            "value": {
              "arguments": [{
                "name": "tail",
                "nodeType": "YulIdentifier",
                "src": "15430:4:2"
              }],
              "functionName": {
                "name": "abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "15304:124:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "15304:131:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "15296:4:2"
            }]
          }]
        },
        "name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "headStart",
          "nodeType": "YulTypedName",
          "src": "15174:9:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "tail",
          "nodeType": "YulTypedName",
          "src": "15189:4:2",
          "type": ""
        }],
        "src": "15023:419:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "15476:152:2",
          "statements": [{
            "expression": {
              "arguments": [{
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "15493:1:2",
                "type": "",
                "value": "0"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "15496:77:2",
                "type": "",
                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "15486:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "15486:88:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "15486:88:2"
          }, {
            "expression": {
              "arguments": [{
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "15590:1:2",
                "type": "",
                "value": "4"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "15593:4:2",
                "type": "",
                "value": "0x22"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "15583:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "15583:15:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "15583:15:2"
          }, {
            "expression": {
              "arguments": [{
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "15614:1:2",
                "type": "",
                "value": "0"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "15617:4:2",
                "type": "",
                "value": "0x24"
              }],
              "functionName": {
                "name": "revert",
                "nodeType": "YulIdentifier",
                "src": "15607:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "15607:15:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "15607:15:2"
          }]
        },
        "name": "panic_error_0x22",
        "nodeType": "YulFunctionDefinition",
        "src": "15448:180:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "15685:269:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "15695:22:2",
            "value": {
              "arguments": [{
                "name": "data",
                "nodeType": "YulIdentifier",
                "src": "15709:4:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "15715:1:2",
                "type": "",
                "value": "2"
              }],
              "functionName": {
                "name": "div",
                "nodeType": "YulIdentifier",
                "src": "15705:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "15705:12:2"
            },
            "variableNames": [{
              "name": "length",
              "nodeType": "YulIdentifier",
              "src": "15695:6:2"
            }]
          }, {
            "nodeType": "YulVariableDeclaration",
            "src": "15726:38:2",
            "value": {
              "arguments": [{
                "name": "data",
                "nodeType": "YulIdentifier",
                "src": "15756:4:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "15762:1:2",
                "type": "",
                "value": "1"
              }],
              "functionName": {
                "name": "and",
                "nodeType": "YulIdentifier",
                "src": "15752:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "15752:12:2"
            },
            "variables": [{
              "name": "outOfPlaceEncoding",
              "nodeType": "YulTypedName",
              "src": "15730:18:2",
              "type": ""
            }]
          }, {
            "body": {
              "nodeType": "YulBlock",
              "src": "15803:51:2",
              "statements": [{
                "nodeType": "YulAssignment",
                "src": "15817:27:2",
                "value": {
                  "arguments": [{
                    "name": "length",
                    "nodeType": "YulIdentifier",
                    "src": "15831:6:2"
                  }, {
                    "kind": "number",
                    "nodeType": "YulLiteral",
                    "src": "15839:4:2",
                    "type": "",
                    "value": "0x7f"
                  }],
                  "functionName": {
                    "name": "and",
                    "nodeType": "YulIdentifier",
                    "src": "15827:3:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "15827:17:2"
                },
                "variableNames": [{
                  "name": "length",
                  "nodeType": "YulIdentifier",
                  "src": "15817:6:2"
                }]
              }]
            },
            "condition": {
              "arguments": [{
                "name": "outOfPlaceEncoding",
                "nodeType": "YulIdentifier",
                "src": "15783:18:2"
              }],
              "functionName": {
                "name": "iszero",
                "nodeType": "YulIdentifier",
                "src": "15776:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "15776:26:2"
            },
            "nodeType": "YulIf",
            "src": "15773:81:2"
          }, {
            "body": {
              "nodeType": "YulBlock",
              "src": "15906:42:2",
              "statements": [{
                "expression": {
                  "arguments": [],
                  "functionName": {
                    "name": "panic_error_0x22",
                    "nodeType": "YulIdentifier",
                    "src": "15920:16:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "15920:18:2"
                },
                "nodeType": "YulExpressionStatement",
                "src": "15920:18:2"
              }]
            },
            "condition": {
              "arguments": [{
                "name": "outOfPlaceEncoding",
                "nodeType": "YulIdentifier",
                "src": "15870:18:2"
              }, {
                "arguments": [{
                  "name": "length",
                  "nodeType": "YulIdentifier",
                  "src": "15893:6:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "15901:2:2",
                  "type": "",
                  "value": "32"
                }],
                "functionName": {
                  "name": "lt",
                  "nodeType": "YulIdentifier",
                  "src": "15890:2:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "15890:14:2"
              }],
              "functionName": {
                "name": "eq",
                "nodeType": "YulIdentifier",
                "src": "15867:2:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "15867:38:2"
            },
            "nodeType": "YulIf",
            "src": "15864:84:2"
          }]
        },
        "name": "extract_byte_array_length",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "data",
          "nodeType": "YulTypedName",
          "src": "15669:4:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "length",
          "nodeType": "YulTypedName",
          "src": "15678:6:2",
          "type": ""
        }],
        "src": "15634:320:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "16066:125:2",
          "statements": [{
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "memPtr",
                  "nodeType": "YulIdentifier",
                  "src": "16088:6:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "16096:1:2",
                  "type": "",
                  "value": "0"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "16084:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "16084:14:2"
              }, {
                "hexValue": "4552433732313a20617070726f76656420717565727920666f72206e6f6e6578",
                "kind": "string",
                "nodeType": "YulLiteral",
                "src": "16100:34:2",
                "type": "",
                "value": "ERC721: approved query for nonex"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "16077:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "16077:58:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "16077:58:2"
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "memPtr",
                  "nodeType": "YulIdentifier",
                  "src": "16156:6:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "16164:2:2",
                  "type": "",
                  "value": "32"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "16152:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "16152:15:2"
              }, {
                "hexValue": "697374656e7420746f6b656e",
                "kind": "string",
                "nodeType": "YulLiteral",
                "src": "16169:14:2",
                "type": "",
                "value": "istent token"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "16145:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "16145:39:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "16145:39:2"
          }]
        },
        "name": "store_literal_in_memory_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "memPtr",
          "nodeType": "YulTypedName",
          "src": "16058:6:2",
          "type": ""
        }],
        "src": "15960:231:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "16343:220:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "16353:74:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "16419:3:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "16424:2:2",
                "type": "",
                "value": "44"
              }],
              "functionName": {
                "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "16360:58:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "16360:67:2"
            },
            "variableNames": [{
              "name": "pos",
              "nodeType": "YulIdentifier",
              "src": "16353:3:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "16525:3:2"
              }],
              "functionName": {
                "name": "store_literal_in_memory_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d",
                "nodeType": "YulIdentifier",
                "src": "16436:88:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "16436:93:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "16436:93:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "16538:19:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "16549:3:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "16554:2:2",
                "type": "",
                "value": "64"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "16545:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "16545:12:2"
            },
            "variableNames": [{
              "name": "end",
              "nodeType": "YulIdentifier",
              "src": "16538:3:2"
            }]
          }]
        },
        "name": "abi_encode_t_stringliteral_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d_to_t_string_memory_ptr_fromStack",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "pos",
          "nodeType": "YulTypedName",
          "src": "16331:3:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "end",
          "nodeType": "YulTypedName",
          "src": "16339:3:2",
          "type": ""
        }],
        "src": "16197:366:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "16740:248:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "16750:26:2",
            "value": {
              "arguments": [{
                "name": "headStart",
                "nodeType": "YulIdentifier",
                "src": "16762:9:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "16773:2:2",
                "type": "",
                "value": "32"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "16758:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "16758:18:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "16750:4:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "16797:9:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "16808:1:2",
                  "type": "",
                  "value": "0"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "16793:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "16793:17:2"
              }, {
                "arguments": [{
                  "name": "tail",
                  "nodeType": "YulIdentifier",
                  "src": "16816:4:2"
                }, {
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "16822:9:2"
                }],
                "functionName": {
                  "name": "sub",
                  "nodeType": "YulIdentifier",
                  "src": "16812:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "16812:20:2"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "16786:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "16786:47:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "16786:47:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "16842:139:2",
            "value": {
              "arguments": [{
                "name": "tail",
                "nodeType": "YulIdentifier",
                "src": "16976:4:2"
              }],
              "functionName": {
                "name": "abi_encode_t_stringliteral_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d_to_t_string_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "16850:124:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "16850:131:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "16842:4:2"
            }]
          }]
        },
        "name": "abi_encode_tuple_t_stringliteral_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d__to_t_string_memory_ptr__fromStack_reversed",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "headStart",
          "nodeType": "YulTypedName",
          "src": "16720:9:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "tail",
          "nodeType": "YulTypedName",
          "src": "16735:4:2",
          "type": ""
        }],
        "src": "16569:419:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "17100:114:2",
          "statements": [{
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "memPtr",
                  "nodeType": "YulIdentifier",
                  "src": "17122:6:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "17130:1:2",
                  "type": "",
                  "value": "0"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "17118:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "17118:14:2"
              }, {
                "hexValue": "4552433732313a20617070726f76616c20746f2063757272656e74206f776e65",
                "kind": "string",
                "nodeType": "YulLiteral",
                "src": "17134:34:2",
                "type": "",
                "value": "ERC721: approval to current owne"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "17111:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "17111:58:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "17111:58:2"
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "memPtr",
                  "nodeType": "YulIdentifier",
                  "src": "17190:6:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "17198:2:2",
                  "type": "",
                  "value": "32"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "17186:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "17186:15:2"
              }, {
                "hexValue": "72",
                "kind": "string",
                "nodeType": "YulLiteral",
                "src": "17203:3:2",
                "type": "",
                "value": "r"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "17179:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "17179:28:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "17179:28:2"
          }]
        },
        "name": "store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "memPtr",
          "nodeType": "YulTypedName",
          "src": "17092:6:2",
          "type": ""
        }],
        "src": "16994:220:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "17366:220:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "17376:74:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "17442:3:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "17447:2:2",
                "type": "",
                "value": "33"
              }],
              "functionName": {
                "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "17383:58:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "17383:67:2"
            },
            "variableNames": [{
              "name": "pos",
              "nodeType": "YulIdentifier",
              "src": "17376:3:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "17548:3:2"
              }],
              "functionName": {
                "name": "store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942",
                "nodeType": "YulIdentifier",
                "src": "17459:88:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "17459:93:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "17459:93:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "17561:19:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "17572:3:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "17577:2:2",
                "type": "",
                "value": "64"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "17568:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "17568:12:2"
            },
            "variableNames": [{
              "name": "end",
              "nodeType": "YulIdentifier",
              "src": "17561:3:2"
            }]
          }]
        },
        "name": "abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "pos",
          "nodeType": "YulTypedName",
          "src": "17354:3:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "end",
          "nodeType": "YulTypedName",
          "src": "17362:3:2",
          "type": ""
        }],
        "src": "17220:366:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "17763:248:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "17773:26:2",
            "value": {
              "arguments": [{
                "name": "headStart",
                "nodeType": "YulIdentifier",
                "src": "17785:9:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "17796:2:2",
                "type": "",
                "value": "32"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "17781:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "17781:18:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "17773:4:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "17820:9:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "17831:1:2",
                  "type": "",
                  "value": "0"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "17816:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "17816:17:2"
              }, {
                "arguments": [{
                  "name": "tail",
                  "nodeType": "YulIdentifier",
                  "src": "17839:4:2"
                }, {
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "17845:9:2"
                }],
                "functionName": {
                  "name": "sub",
                  "nodeType": "YulIdentifier",
                  "src": "17835:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "17835:20:2"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "17809:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "17809:47:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "17809:47:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "17865:139:2",
            "value": {
              "arguments": [{
                "name": "tail",
                "nodeType": "YulIdentifier",
                "src": "17999:4:2"
              }],
              "functionName": {
                "name": "abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "17873:124:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "17873:131:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "17865:4:2"
            }]
          }]
        },
        "name": "abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "headStart",
          "nodeType": "YulTypedName",
          "src": "17743:9:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "tail",
          "nodeType": "YulTypedName",
          "src": "17758:4:2",
          "type": ""
        }],
        "src": "17592:419:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "18123:137:2",
          "statements": [{
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "memPtr",
                  "nodeType": "YulIdentifier",
                  "src": "18145:6:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "18153:1:2",
                  "type": "",
                  "value": "0"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "18141:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "18141:14:2"
              }, {
                "hexValue": "4552433732313a20617070726f76652063616c6c6572206973206e6f74206f77",
                "kind": "string",
                "nodeType": "YulLiteral",
                "src": "18157:34:2",
                "type": "",
                "value": "ERC721: approve caller is not ow"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "18134:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "18134:58:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "18134:58:2"
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "memPtr",
                  "nodeType": "YulIdentifier",
                  "src": "18213:6:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "18221:2:2",
                  "type": "",
                  "value": "32"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "18209:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "18209:15:2"
              }, {
                "hexValue": "6e6572206e6f7220617070726f76656420666f7220616c6c",
                "kind": "string",
                "nodeType": "YulLiteral",
                "src": "18226:26:2",
                "type": "",
                "value": "ner nor approved for all"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "18202:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "18202:51:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "18202:51:2"
          }]
        },
        "name": "store_literal_in_memory_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "memPtr",
          "nodeType": "YulTypedName",
          "src": "18115:6:2",
          "type": ""
        }],
        "src": "18017:243:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "18412:220:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "18422:74:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "18488:3:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "18493:2:2",
                "type": "",
                "value": "56"
              }],
              "functionName": {
                "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "18429:58:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "18429:67:2"
            },
            "variableNames": [{
              "name": "pos",
              "nodeType": "YulIdentifier",
              "src": "18422:3:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "18594:3:2"
              }],
              "functionName": {
                "name": "store_literal_in_memory_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d",
                "nodeType": "YulIdentifier",
                "src": "18505:88:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "18505:93:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "18505:93:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "18607:19:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "18618:3:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "18623:2:2",
                "type": "",
                "value": "64"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "18614:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "18614:12:2"
            },
            "variableNames": [{
              "name": "end",
              "nodeType": "YulIdentifier",
              "src": "18607:3:2"
            }]
          }]
        },
        "name": "abi_encode_t_stringliteral_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d_to_t_string_memory_ptr_fromStack",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "pos",
          "nodeType": "YulTypedName",
          "src": "18400:3:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "end",
          "nodeType": "YulTypedName",
          "src": "18408:3:2",
          "type": ""
        }],
        "src": "18266:366:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "18809:248:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "18819:26:2",
            "value": {
              "arguments": [{
                "name": "headStart",
                "nodeType": "YulIdentifier",
                "src": "18831:9:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "18842:2:2",
                "type": "",
                "value": "32"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "18827:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "18827:18:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "18819:4:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "18866:9:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "18877:1:2",
                  "type": "",
                  "value": "0"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "18862:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "18862:17:2"
              }, {
                "arguments": [{
                  "name": "tail",
                  "nodeType": "YulIdentifier",
                  "src": "18885:4:2"
                }, {
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "18891:9:2"
                }],
                "functionName": {
                  "name": "sub",
                  "nodeType": "YulIdentifier",
                  "src": "18881:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "18881:20:2"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "18855:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "18855:47:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "18855:47:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "18911:139:2",
            "value": {
              "arguments": [{
                "name": "tail",
                "nodeType": "YulIdentifier",
                "src": "19045:4:2"
              }],
              "functionName": {
                "name": "abi_encode_t_stringliteral_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d_to_t_string_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "18919:124:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "18919:131:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "18911:4:2"
            }]
          }]
        },
        "name": "abi_encode_tuple_t_stringliteral_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d__to_t_string_memory_ptr__fromStack_reversed",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "headStart",
          "nodeType": "YulTypedName",
          "src": "18789:9:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "tail",
          "nodeType": "YulTypedName",
          "src": "18804:4:2",
          "type": ""
        }],
        "src": "18638:419:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "19169:130:2",
          "statements": [{
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "memPtr",
                  "nodeType": "YulIdentifier",
                  "src": "19191:6:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "19199:1:2",
                  "type": "",
                  "value": "0"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "19187:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "19187:14:2"
              }, {
                "hexValue": "4552433732313a207472616e736665722063616c6c6572206973206e6f74206f",
                "kind": "string",
                "nodeType": "YulLiteral",
                "src": "19203:34:2",
                "type": "",
                "value": "ERC721: transfer caller is not o"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "19180:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "19180:58:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "19180:58:2"
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "memPtr",
                  "nodeType": "YulIdentifier",
                  "src": "19259:6:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "19267:2:2",
                  "type": "",
                  "value": "32"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "19255:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "19255:15:2"
              }, {
                "hexValue": "776e6572206e6f7220617070726f766564",
                "kind": "string",
                "nodeType": "YulLiteral",
                "src": "19272:19:2",
                "type": "",
                "value": "wner nor approved"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "19248:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "19248:44:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "19248:44:2"
          }]
        },
        "name": "store_literal_in_memory_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "memPtr",
          "nodeType": "YulTypedName",
          "src": "19161:6:2",
          "type": ""
        }],
        "src": "19063:236:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "19451:220:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "19461:74:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "19527:3:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "19532:2:2",
                "type": "",
                "value": "49"
              }],
              "functionName": {
                "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "19468:58:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "19468:67:2"
            },
            "variableNames": [{
              "name": "pos",
              "nodeType": "YulIdentifier",
              "src": "19461:3:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "19633:3:2"
              }],
              "functionName": {
                "name": "store_literal_in_memory_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2",
                "nodeType": "YulIdentifier",
                "src": "19544:88:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "19544:93:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "19544:93:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "19646:19:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "19657:3:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "19662:2:2",
                "type": "",
                "value": "64"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "19653:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "19653:12:2"
            },
            "variableNames": [{
              "name": "end",
              "nodeType": "YulIdentifier",
              "src": "19646:3:2"
            }]
          }]
        },
        "name": "abi_encode_t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2_to_t_string_memory_ptr_fromStack",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "pos",
          "nodeType": "YulTypedName",
          "src": "19439:3:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "end",
          "nodeType": "YulTypedName",
          "src": "19447:3:2",
          "type": ""
        }],
        "src": "19305:366:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "19848:248:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "19858:26:2",
            "value": {
              "arguments": [{
                "name": "headStart",
                "nodeType": "YulIdentifier",
                "src": "19870:9:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "19881:2:2",
                "type": "",
                "value": "32"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "19866:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "19866:18:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "19858:4:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "19905:9:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "19916:1:2",
                  "type": "",
                  "value": "0"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "19901:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "19901:17:2"
              }, {
                "arguments": [{
                  "name": "tail",
                  "nodeType": "YulIdentifier",
                  "src": "19924:4:2"
                }, {
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "19930:9:2"
                }],
                "functionName": {
                  "name": "sub",
                  "nodeType": "YulIdentifier",
                  "src": "19920:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "19920:20:2"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "19894:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "19894:47:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "19894:47:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "19950:139:2",
            "value": {
              "arguments": [{
                "name": "tail",
                "nodeType": "YulIdentifier",
                "src": "20084:4:2"
              }],
              "functionName": {
                "name": "abi_encode_t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2_to_t_string_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "19958:124:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "19958:131:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "19950:4:2"
            }]
          }]
        },
        "name": "abi_encode_tuple_t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2__to_t_string_memory_ptr__fromStack_reversed",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "headStart",
          "nodeType": "YulTypedName",
          "src": "19828:9:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "tail",
          "nodeType": "YulTypedName",
          "src": "19843:4:2",
          "type": ""
        }],
        "src": "19677:419:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "20208:124:2",
          "statements": [{
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "memPtr",
                  "nodeType": "YulIdentifier",
                  "src": "20230:6:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "20238:1:2",
                  "type": "",
                  "value": "0"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "20226:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "20226:14:2"
              }, {
                "hexValue": "455243373231456e756d657261626c653a206f776e657220696e646578206f75",
                "kind": "string",
                "nodeType": "YulLiteral",
                "src": "20242:34:2",
                "type": "",
                "value": "ERC721Enumerable: owner index ou"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "20219:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "20219:58:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "20219:58:2"
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "memPtr",
                  "nodeType": "YulIdentifier",
                  "src": "20298:6:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "20306:2:2",
                  "type": "",
                  "value": "32"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "20294:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "20294:15:2"
              }, {
                "hexValue": "74206f6620626f756e6473",
                "kind": "string",
                "nodeType": "YulLiteral",
                "src": "20311:13:2",
                "type": "",
                "value": "t of bounds"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "20287:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "20287:38:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "20287:38:2"
          }]
        },
        "name": "store_literal_in_memory_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "memPtr",
          "nodeType": "YulTypedName",
          "src": "20200:6:2",
          "type": ""
        }],
        "src": "20102:230:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "20484:220:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "20494:74:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "20560:3:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "20565:2:2",
                "type": "",
                "value": "43"
              }],
              "functionName": {
                "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "20501:58:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "20501:67:2"
            },
            "variableNames": [{
              "name": "pos",
              "nodeType": "YulIdentifier",
              "src": "20494:3:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "20666:3:2"
              }],
              "functionName": {
                "name": "store_literal_in_memory_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c",
                "nodeType": "YulIdentifier",
                "src": "20577:88:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "20577:93:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "20577:93:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "20679:19:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "20690:3:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "20695:2:2",
                "type": "",
                "value": "64"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "20686:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "20686:12:2"
            },
            "variableNames": [{
              "name": "end",
              "nodeType": "YulIdentifier",
              "src": "20679:3:2"
            }]
          }]
        },
        "name": "abi_encode_t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c_to_t_string_memory_ptr_fromStack",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "pos",
          "nodeType": "YulTypedName",
          "src": "20472:3:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "end",
          "nodeType": "YulTypedName",
          "src": "20480:3:2",
          "type": ""
        }],
        "src": "20338:366:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "20881:248:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "20891:26:2",
            "value": {
              "arguments": [{
                "name": "headStart",
                "nodeType": "YulIdentifier",
                "src": "20903:9:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "20914:2:2",
                "type": "",
                "value": "32"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "20899:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "20899:18:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "20891:4:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "20938:9:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "20949:1:2",
                  "type": "",
                  "value": "0"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "20934:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "20934:17:2"
              }, {
                "arguments": [{
                  "name": "tail",
                  "nodeType": "YulIdentifier",
                  "src": "20957:4:2"
                }, {
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "20963:9:2"
                }],
                "functionName": {
                  "name": "sub",
                  "nodeType": "YulIdentifier",
                  "src": "20953:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "20953:20:2"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "20927:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "20927:47:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "20927:47:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "20983:139:2",
            "value": {
              "arguments": [{
                "name": "tail",
                "nodeType": "YulIdentifier",
                "src": "21117:4:2"
              }],
              "functionName": {
                "name": "abi_encode_t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c_to_t_string_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "20991:124:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "20991:131:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "20983:4:2"
            }]
          }]
        },
        "name": "abi_encode_tuple_t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c__to_t_string_memory_ptr__fromStack_reversed",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "headStart",
          "nodeType": "YulTypedName",
          "src": "20861:9:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "tail",
          "nodeType": "YulTypedName",
          "src": "20876:4:2",
          "type": ""
        }],
        "src": "20710:419:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "21163:152:2",
          "statements": [{
            "expression": {
              "arguments": [{
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "21180:1:2",
                "type": "",
                "value": "0"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "21183:77:2",
                "type": "",
                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "21173:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "21173:88:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "21173:88:2"
          }, {
            "expression": {
              "arguments": [{
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "21277:1:2",
                "type": "",
                "value": "4"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "21280:4:2",
                "type": "",
                "value": "0x11"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "21270:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "21270:15:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "21270:15:2"
          }, {
            "expression": {
              "arguments": [{
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "21301:1:2",
                "type": "",
                "value": "0"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "21304:4:2",
                "type": "",
                "value": "0x24"
              }],
              "functionName": {
                "name": "revert",
                "nodeType": "YulIdentifier",
                "src": "21294:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "21294:15:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "21294:15:2"
          }]
        },
        "name": "panic_error_0x11",
        "nodeType": "YulFunctionDefinition",
        "src": "21135:180:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "21365:261:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "21375:25:2",
            "value": {
              "arguments": [{
                "name": "x",
                "nodeType": "YulIdentifier",
                "src": "21398:1:2"
              }],
              "functionName": {
                "name": "cleanup_t_uint256",
                "nodeType": "YulIdentifier",
                "src": "21380:17:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "21380:20:2"
            },
            "variableNames": [{
              "name": "x",
              "nodeType": "YulIdentifier",
              "src": "21375:1:2"
            }]
          }, {
            "nodeType": "YulAssignment",
            "src": "21409:25:2",
            "value": {
              "arguments": [{
                "name": "y",
                "nodeType": "YulIdentifier",
                "src": "21432:1:2"
              }],
              "functionName": {
                "name": "cleanup_t_uint256",
                "nodeType": "YulIdentifier",
                "src": "21414:17:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "21414:20:2"
            },
            "variableNames": [{
              "name": "y",
              "nodeType": "YulIdentifier",
              "src": "21409:1:2"
            }]
          }, {
            "body": {
              "nodeType": "YulBlock",
              "src": "21572:22:2",
              "statements": [{
                "expression": {
                  "arguments": [],
                  "functionName": {
                    "name": "panic_error_0x11",
                    "nodeType": "YulIdentifier",
                    "src": "21574:16:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "21574:18:2"
                },
                "nodeType": "YulExpressionStatement",
                "src": "21574:18:2"
              }]
            },
            "condition": {
              "arguments": [{
                "name": "x",
                "nodeType": "YulIdentifier",
                "src": "21493:1:2"
              }, {
                "arguments": [{
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "21500:66:2",
                  "type": "",
                  "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                }, {
                  "name": "y",
                  "nodeType": "YulIdentifier",
                  "src": "21568:1:2"
                }],
                "functionName": {
                  "name": "sub",
                  "nodeType": "YulIdentifier",
                  "src": "21496:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "21496:74:2"
              }],
              "functionName": {
                "name": "gt",
                "nodeType": "YulIdentifier",
                "src": "21490:2:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "21490:81:2"
            },
            "nodeType": "YulIf",
            "src": "21487:107:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "21604:16:2",
            "value": {
              "arguments": [{
                "name": "x",
                "nodeType": "YulIdentifier",
                "src": "21615:1:2"
              }, {
                "name": "y",
                "nodeType": "YulIdentifier",
                "src": "21618:1:2"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "21611:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "21611:9:2"
            },
            "variableNames": [{
              "name": "sum",
              "nodeType": "YulIdentifier",
              "src": "21604:3:2"
            }]
          }]
        },
        "name": "checked_add_t_uint256",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "x",
          "nodeType": "YulTypedName",
          "src": "21352:1:2",
          "type": ""
        }, {
          "name": "y",
          "nodeType": "YulTypedName",
          "src": "21355:1:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "sum",
          "nodeType": "YulTypedName",
          "src": "21361:3:2",
          "type": ""
        }],
        "src": "21321:305:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "21680:300:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "21690:25:2",
            "value": {
              "arguments": [{
                "name": "x",
                "nodeType": "YulIdentifier",
                "src": "21713:1:2"
              }],
              "functionName": {
                "name": "cleanup_t_uint256",
                "nodeType": "YulIdentifier",
                "src": "21695:17:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "21695:20:2"
            },
            "variableNames": [{
              "name": "x",
              "nodeType": "YulIdentifier",
              "src": "21690:1:2"
            }]
          }, {
            "nodeType": "YulAssignment",
            "src": "21724:25:2",
            "value": {
              "arguments": [{
                "name": "y",
                "nodeType": "YulIdentifier",
                "src": "21747:1:2"
              }],
              "functionName": {
                "name": "cleanup_t_uint256",
                "nodeType": "YulIdentifier",
                "src": "21729:17:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "21729:20:2"
            },
            "variableNames": [{
              "name": "y",
              "nodeType": "YulIdentifier",
              "src": "21724:1:2"
            }]
          }, {
            "body": {
              "nodeType": "YulBlock",
              "src": "21922:22:2",
              "statements": [{
                "expression": {
                  "arguments": [],
                  "functionName": {
                    "name": "panic_error_0x11",
                    "nodeType": "YulIdentifier",
                    "src": "21924:16:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "21924:18:2"
                },
                "nodeType": "YulExpressionStatement",
                "src": "21924:18:2"
              }]
            },
            "condition": {
              "arguments": [{
                "arguments": [{
                  "arguments": [{
                    "name": "x",
                    "nodeType": "YulIdentifier",
                    "src": "21834:1:2"
                  }],
                  "functionName": {
                    "name": "iszero",
                    "nodeType": "YulIdentifier",
                    "src": "21827:6:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "21827:9:2"
                }],
                "functionName": {
                  "name": "iszero",
                  "nodeType": "YulIdentifier",
                  "src": "21820:6:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "21820:17:2"
              }, {
                "arguments": [{
                  "name": "y",
                  "nodeType": "YulIdentifier",
                  "src": "21842:1:2"
                }, {
                  "arguments": [{
                    "kind": "number",
                    "nodeType": "YulLiteral",
                    "src": "21849:66:2",
                    "type": "",
                    "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                  }, {
                    "name": "x",
                    "nodeType": "YulIdentifier",
                    "src": "21917:1:2"
                  }],
                  "functionName": {
                    "name": "div",
                    "nodeType": "YulIdentifier",
                    "src": "21845:3:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "21845:74:2"
                }],
                "functionName": {
                  "name": "gt",
                  "nodeType": "YulIdentifier",
                  "src": "21839:2:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "21839:81:2"
              }],
              "functionName": {
                "name": "and",
                "nodeType": "YulIdentifier",
                "src": "21816:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "21816:105:2"
            },
            "nodeType": "YulIf",
            "src": "21813:131:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "21954:20:2",
            "value": {
              "arguments": [{
                "name": "x",
                "nodeType": "YulIdentifier",
                "src": "21969:1:2"
              }, {
                "name": "y",
                "nodeType": "YulIdentifier",
                "src": "21972:1:2"
              }],
              "functionName": {
                "name": "mul",
                "nodeType": "YulIdentifier",
                "src": "21965:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "21965:9:2"
            },
            "variableNames": [{
              "name": "product",
              "nodeType": "YulIdentifier",
              "src": "21954:7:2"
            }]
          }]
        },
        "name": "checked_mul_t_uint256",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "x",
          "nodeType": "YulTypedName",
          "src": "21663:1:2",
          "type": ""
        }, {
          "name": "y",
          "nodeType": "YulTypedName",
          "src": "21666:1:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "product",
          "nodeType": "YulTypedName",
          "src": "21672:7:2",
          "type": ""
        }],
        "src": "21632:348:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "22029:190:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "22039:33:2",
            "value": {
              "arguments": [{
                "name": "value",
                "nodeType": "YulIdentifier",
                "src": "22066:5:2"
              }],
              "functionName": {
                "name": "cleanup_t_uint256",
                "nodeType": "YulIdentifier",
                "src": "22048:17:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "22048:24:2"
            },
            "variableNames": [{
              "name": "value",
              "nodeType": "YulIdentifier",
              "src": "22039:5:2"
            }]
          }, {
            "body": {
              "nodeType": "YulBlock",
              "src": "22162:22:2",
              "statements": [{
                "expression": {
                  "arguments": [],
                  "functionName": {
                    "name": "panic_error_0x11",
                    "nodeType": "YulIdentifier",
                    "src": "22164:16:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "22164:18:2"
                },
                "nodeType": "YulExpressionStatement",
                "src": "22164:18:2"
              }]
            },
            "condition": {
              "arguments": [{
                "name": "value",
                "nodeType": "YulIdentifier",
                "src": "22087:5:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "22094:66:2",
                "type": "",
                "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
              }],
              "functionName": {
                "name": "eq",
                "nodeType": "YulIdentifier",
                "src": "22084:2:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "22084:77:2"
            },
            "nodeType": "YulIf",
            "src": "22081:103:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "22193:20:2",
            "value": {
              "arguments": [{
                "name": "value",
                "nodeType": "YulIdentifier",
                "src": "22204:5:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "22211:1:2",
                "type": "",
                "value": "1"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "22200:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "22200:13:2"
            },
            "variableNames": [{
              "name": "ret",
              "nodeType": "YulIdentifier",
              "src": "22193:3:2"
            }]
          }]
        },
        "name": "increment_t_uint256",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "value",
          "nodeType": "YulTypedName",
          "src": "22015:5:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "ret",
          "nodeType": "YulTypedName",
          "src": "22025:3:2",
          "type": ""
        }],
        "src": "21986:233:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "22253:152:2",
          "statements": [{
            "expression": {
              "arguments": [{
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "22270:1:2",
                "type": "",
                "value": "0"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "22273:77:2",
                "type": "",
                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "22263:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "22263:88:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "22263:88:2"
          }, {
            "expression": {
              "arguments": [{
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "22367:1:2",
                "type": "",
                "value": "4"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "22370:4:2",
                "type": "",
                "value": "0x32"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "22360:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "22360:15:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "22360:15:2"
          }, {
            "expression": {
              "arguments": [{
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "22391:1:2",
                "type": "",
                "value": "0"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "22394:4:2",
                "type": "",
                "value": "0x24"
              }],
              "functionName": {
                "name": "revert",
                "nodeType": "YulIdentifier",
                "src": "22384:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "22384:15:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "22384:15:2"
          }]
        },
        "name": "panic_error_0x32",
        "nodeType": "YulFunctionDefinition",
        "src": "22225:180:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "22517:125:2",
          "statements": [{
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "memPtr",
                  "nodeType": "YulIdentifier",
                  "src": "22539:6:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "22547:1:2",
                  "type": "",
                  "value": "0"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "22535:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "22535:14:2"
              }, {
                "hexValue": "455243373231456e756d657261626c653a20676c6f62616c20696e646578206f",
                "kind": "string",
                "nodeType": "YulLiteral",
                "src": "22551:34:2",
                "type": "",
                "value": "ERC721Enumerable: global index o"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "22528:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "22528:58:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "22528:58:2"
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "memPtr",
                  "nodeType": "YulIdentifier",
                  "src": "22607:6:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "22615:2:2",
                  "type": "",
                  "value": "32"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "22603:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "22603:15:2"
              }, {
                "hexValue": "7574206f6620626f756e6473",
                "kind": "string",
                "nodeType": "YulLiteral",
                "src": "22620:14:2",
                "type": "",
                "value": "ut of bounds"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "22596:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "22596:39:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "22596:39:2"
          }]
        },
        "name": "store_literal_in_memory_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "memPtr",
          "nodeType": "YulTypedName",
          "src": "22509:6:2",
          "type": ""
        }],
        "src": "22411:231:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "22794:220:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "22804:74:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "22870:3:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "22875:2:2",
                "type": "",
                "value": "44"
              }],
              "functionName": {
                "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "22811:58:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "22811:67:2"
            },
            "variableNames": [{
              "name": "pos",
              "nodeType": "YulIdentifier",
              "src": "22804:3:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "22976:3:2"
              }],
              "functionName": {
                "name": "store_literal_in_memory_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc",
                "nodeType": "YulIdentifier",
                "src": "22887:88:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "22887:93:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "22887:93:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "22989:19:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "23000:3:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "23005:2:2",
                "type": "",
                "value": "64"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "22996:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "22996:12:2"
            },
            "variableNames": [{
              "name": "end",
              "nodeType": "YulIdentifier",
              "src": "22989:3:2"
            }]
          }]
        },
        "name": "abi_encode_t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc_to_t_string_memory_ptr_fromStack",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "pos",
          "nodeType": "YulTypedName",
          "src": "22782:3:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "end",
          "nodeType": "YulTypedName",
          "src": "22790:3:2",
          "type": ""
        }],
        "src": "22648:366:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "23191:248:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "23201:26:2",
            "value": {
              "arguments": [{
                "name": "headStart",
                "nodeType": "YulIdentifier",
                "src": "23213:9:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "23224:2:2",
                "type": "",
                "value": "32"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "23209:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "23209:18:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "23201:4:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "23248:9:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "23259:1:2",
                  "type": "",
                  "value": "0"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "23244:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "23244:17:2"
              }, {
                "arguments": [{
                  "name": "tail",
                  "nodeType": "YulIdentifier",
                  "src": "23267:4:2"
                }, {
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "23273:9:2"
                }],
                "functionName": {
                  "name": "sub",
                  "nodeType": "YulIdentifier",
                  "src": "23263:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "23263:20:2"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "23237:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "23237:47:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "23237:47:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "23293:139:2",
            "value": {
              "arguments": [{
                "name": "tail",
                "nodeType": "YulIdentifier",
                "src": "23427:4:2"
              }],
              "functionName": {
                "name": "abi_encode_t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc_to_t_string_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "23301:124:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "23301:131:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "23293:4:2"
            }]
          }]
        },
        "name": "abi_encode_tuple_t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc__to_t_string_memory_ptr__fromStack_reversed",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "headStart",
          "nodeType": "YulTypedName",
          "src": "23171:9:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "tail",
          "nodeType": "YulTypedName",
          "src": "23186:4:2",
          "type": ""
        }],
        "src": "23020:419:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "23551:122:2",
          "statements": [{
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "memPtr",
                  "nodeType": "YulIdentifier",
                  "src": "23573:6:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "23581:1:2",
                  "type": "",
                  "value": "0"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "23569:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "23569:14:2"
              }, {
                "hexValue": "4552433732313a206f776e657220717565727920666f72206e6f6e6578697374",
                "kind": "string",
                "nodeType": "YulLiteral",
                "src": "23585:34:2",
                "type": "",
                "value": "ERC721: owner query for nonexist"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "23562:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "23562:58:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "23562:58:2"
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "memPtr",
                  "nodeType": "YulIdentifier",
                  "src": "23641:6:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "23649:2:2",
                  "type": "",
                  "value": "32"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "23637:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "23637:15:2"
              }, {
                "hexValue": "656e7420746f6b656e",
                "kind": "string",
                "nodeType": "YulLiteral",
                "src": "23654:11:2",
                "type": "",
                "value": "ent token"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "23630:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "23630:36:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "23630:36:2"
          }]
        },
        "name": "store_literal_in_memory_7481f3df2a424c0755a1ad2356614e9a5a358d461ea2eae1f89cb21cbad00397",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "memPtr",
          "nodeType": "YulTypedName",
          "src": "23543:6:2",
          "type": ""
        }],
        "src": "23445:228:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "23825:220:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "23835:74:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "23901:3:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "23906:2:2",
                "type": "",
                "value": "41"
              }],
              "functionName": {
                "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "23842:58:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "23842:67:2"
            },
            "variableNames": [{
              "name": "pos",
              "nodeType": "YulIdentifier",
              "src": "23835:3:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "24007:3:2"
              }],
              "functionName": {
                "name": "store_literal_in_memory_7481f3df2a424c0755a1ad2356614e9a5a358d461ea2eae1f89cb21cbad00397",
                "nodeType": "YulIdentifier",
                "src": "23918:88:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "23918:93:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "23918:93:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "24020:19:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "24031:3:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "24036:2:2",
                "type": "",
                "value": "64"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "24027:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "24027:12:2"
            },
            "variableNames": [{
              "name": "end",
              "nodeType": "YulIdentifier",
              "src": "24020:3:2"
            }]
          }]
        },
        "name": "abi_encode_t_stringliteral_7481f3df2a424c0755a1ad2356614e9a5a358d461ea2eae1f89cb21cbad00397_to_t_string_memory_ptr_fromStack",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "pos",
          "nodeType": "YulTypedName",
          "src": "23813:3:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "end",
          "nodeType": "YulTypedName",
          "src": "23821:3:2",
          "type": ""
        }],
        "src": "23679:366:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "24222:248:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "24232:26:2",
            "value": {
              "arguments": [{
                "name": "headStart",
                "nodeType": "YulIdentifier",
                "src": "24244:9:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "24255:2:2",
                "type": "",
                "value": "32"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "24240:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "24240:18:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "24232:4:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "24279:9:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "24290:1:2",
                  "type": "",
                  "value": "0"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "24275:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "24275:17:2"
              }, {
                "arguments": [{
                  "name": "tail",
                  "nodeType": "YulIdentifier",
                  "src": "24298:4:2"
                }, {
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "24304:9:2"
                }],
                "functionName": {
                  "name": "sub",
                  "nodeType": "YulIdentifier",
                  "src": "24294:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "24294:20:2"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "24268:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "24268:47:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "24268:47:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "24324:139:2",
            "value": {
              "arguments": [{
                "name": "tail",
                "nodeType": "YulIdentifier",
                "src": "24458:4:2"
              }],
              "functionName": {
                "name": "abi_encode_t_stringliteral_7481f3df2a424c0755a1ad2356614e9a5a358d461ea2eae1f89cb21cbad00397_to_t_string_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "24332:124:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "24332:131:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "24324:4:2"
            }]
          }]
        },
        "name": "abi_encode_tuple_t_stringliteral_7481f3df2a424c0755a1ad2356614e9a5a358d461ea2eae1f89cb21cbad00397__to_t_string_memory_ptr__fromStack_reversed",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "headStart",
          "nodeType": "YulTypedName",
          "src": "24202:9:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "tail",
          "nodeType": "YulTypedName",
          "src": "24217:4:2",
          "type": ""
        }],
        "src": "24051:419:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "24582:123:2",
          "statements": [{
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "memPtr",
                  "nodeType": "YulIdentifier",
                  "src": "24604:6:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "24612:1:2",
                  "type": "",
                  "value": "0"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "24600:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "24600:14:2"
              }, {
                "hexValue": "4552433732313a2062616c616e636520717565727920666f7220746865207a65",
                "kind": "string",
                "nodeType": "YulLiteral",
                "src": "24616:34:2",
                "type": "",
                "value": "ERC721: balance query for the ze"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "24593:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "24593:58:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "24593:58:2"
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "memPtr",
                  "nodeType": "YulIdentifier",
                  "src": "24672:6:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "24680:2:2",
                  "type": "",
                  "value": "32"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "24668:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "24668:15:2"
              }, {
                "hexValue": "726f2061646472657373",
                "kind": "string",
                "nodeType": "YulLiteral",
                "src": "24685:12:2",
                "type": "",
                "value": "ro address"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "24661:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "24661:37:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "24661:37:2"
          }]
        },
        "name": "store_literal_in_memory_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "memPtr",
          "nodeType": "YulTypedName",
          "src": "24574:6:2",
          "type": ""
        }],
        "src": "24476:229:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "24857:220:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "24867:74:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "24933:3:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "24938:2:2",
                "type": "",
                "value": "42"
              }],
              "functionName": {
                "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "24874:58:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "24874:67:2"
            },
            "variableNames": [{
              "name": "pos",
              "nodeType": "YulIdentifier",
              "src": "24867:3:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "25039:3:2"
              }],
              "functionName": {
                "name": "store_literal_in_memory_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba",
                "nodeType": "YulIdentifier",
                "src": "24950:88:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "24950:93:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "24950:93:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "25052:19:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "25063:3:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "25068:2:2",
                "type": "",
                "value": "64"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "25059:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "25059:12:2"
            },
            "variableNames": [{
              "name": "end",
              "nodeType": "YulIdentifier",
              "src": "25052:3:2"
            }]
          }]
        },
        "name": "abi_encode_t_stringliteral_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba_to_t_string_memory_ptr_fromStack",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "pos",
          "nodeType": "YulTypedName",
          "src": "24845:3:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "end",
          "nodeType": "YulTypedName",
          "src": "24853:3:2",
          "type": ""
        }],
        "src": "24711:366:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "25254:248:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "25264:26:2",
            "value": {
              "arguments": [{
                "name": "headStart",
                "nodeType": "YulIdentifier",
                "src": "25276:9:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "25287:2:2",
                "type": "",
                "value": "32"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "25272:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "25272:18:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "25264:4:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "25311:9:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "25322:1:2",
                  "type": "",
                  "value": "0"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "25307:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "25307:17:2"
              }, {
                "arguments": [{
                  "name": "tail",
                  "nodeType": "YulIdentifier",
                  "src": "25330:4:2"
                }, {
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "25336:9:2"
                }],
                "functionName": {
                  "name": "sub",
                  "nodeType": "YulIdentifier",
                  "src": "25326:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "25326:20:2"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "25300:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "25300:47:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "25300:47:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "25356:139:2",
            "value": {
              "arguments": [{
                "name": "tail",
                "nodeType": "YulIdentifier",
                "src": "25490:4:2"
              }],
              "functionName": {
                "name": "abi_encode_t_stringliteral_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba_to_t_string_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "25364:124:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "25364:131:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "25356:4:2"
            }]
          }]
        },
        "name": "abi_encode_tuple_t_stringliteral_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba__to_t_string_memory_ptr__fromStack_reversed",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "headStart",
          "nodeType": "YulTypedName",
          "src": "25234:9:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "tail",
          "nodeType": "YulTypedName",
          "src": "25249:4:2",
          "type": ""
        }],
        "src": "25083:419:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "25614:69:2",
          "statements": [{
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "memPtr",
                  "nodeType": "YulIdentifier",
                  "src": "25636:6:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "25644:1:2",
                  "type": "",
                  "value": "0"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "25632:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "25632:14:2"
              }, {
                "hexValue": "4552433732313a20617070726f766520746f2063616c6c6572",
                "kind": "string",
                "nodeType": "YulLiteral",
                "src": "25648:27:2",
                "type": "",
                "value": "ERC721: approve to caller"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "25625:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "25625:51:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "25625:51:2"
          }]
        },
        "name": "store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "memPtr",
          "nodeType": "YulTypedName",
          "src": "25606:6:2",
          "type": ""
        }],
        "src": "25508:175:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "25835:220:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "25845:74:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "25911:3:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "25916:2:2",
                "type": "",
                "value": "25"
              }],
              "functionName": {
                "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "25852:58:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "25852:67:2"
            },
            "variableNames": [{
              "name": "pos",
              "nodeType": "YulIdentifier",
              "src": "25845:3:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "26017:3:2"
              }],
              "functionName": {
                "name": "store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05",
                "nodeType": "YulIdentifier",
                "src": "25928:88:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "25928:93:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "25928:93:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "26030:19:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "26041:3:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "26046:2:2",
                "type": "",
                "value": "32"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "26037:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "26037:12:2"
            },
            "variableNames": [{
              "name": "end",
              "nodeType": "YulIdentifier",
              "src": "26030:3:2"
            }]
          }]
        },
        "name": "abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "pos",
          "nodeType": "YulTypedName",
          "src": "25823:3:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "end",
          "nodeType": "YulTypedName",
          "src": "25831:3:2",
          "type": ""
        }],
        "src": "25689:366:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "26232:248:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "26242:26:2",
            "value": {
              "arguments": [{
                "name": "headStart",
                "nodeType": "YulIdentifier",
                "src": "26254:9:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "26265:2:2",
                "type": "",
                "value": "32"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "26250:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "26250:18:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "26242:4:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "26289:9:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "26300:1:2",
                  "type": "",
                  "value": "0"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "26285:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "26285:17:2"
              }, {
                "arguments": [{
                  "name": "tail",
                  "nodeType": "YulIdentifier",
                  "src": "26308:4:2"
                }, {
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "26314:9:2"
                }],
                "functionName": {
                  "name": "sub",
                  "nodeType": "YulIdentifier",
                  "src": "26304:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "26304:20:2"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "26278:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "26278:47:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "26278:47:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "26334:139:2",
            "value": {
              "arguments": [{
                "name": "tail",
                "nodeType": "YulIdentifier",
                "src": "26468:4:2"
              }],
              "functionName": {
                "name": "abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "26342:124:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "26342:131:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "26334:4:2"
            }]
          }]
        },
        "name": "abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "headStart",
          "nodeType": "YulTypedName",
          "src": "26212:9:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "tail",
          "nodeType": "YulTypedName",
          "src": "26227:4:2",
          "type": ""
        }],
        "src": "26061:419:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "26592:128:2",
          "statements": [{
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "memPtr",
                  "nodeType": "YulIdentifier",
                  "src": "26614:6:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "26622:1:2",
                  "type": "",
                  "value": "0"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "26610:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "26610:14:2"
              }, {
                "hexValue": "4552433732314d657461646174613a2055524920717565727920666f72206e6f",
                "kind": "string",
                "nodeType": "YulLiteral",
                "src": "26626:34:2",
                "type": "",
                "value": "ERC721Metadata: URI query for no"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "26603:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "26603:58:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "26603:58:2"
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "memPtr",
                  "nodeType": "YulIdentifier",
                  "src": "26682:6:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "26690:2:2",
                  "type": "",
                  "value": "32"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "26678:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "26678:15:2"
              }, {
                "hexValue": "6e6578697374656e7420746f6b656e",
                "kind": "string",
                "nodeType": "YulLiteral",
                "src": "26695:17:2",
                "type": "",
                "value": "nexistent token"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "26671:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "26671:42:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "26671:42:2"
          }]
        },
        "name": "store_literal_in_memory_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "memPtr",
          "nodeType": "YulTypedName",
          "src": "26584:6:2",
          "type": ""
        }],
        "src": "26486:234:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "26872:220:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "26882:74:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "26948:3:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "26953:2:2",
                "type": "",
                "value": "47"
              }],
              "functionName": {
                "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "26889:58:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "26889:67:2"
            },
            "variableNames": [{
              "name": "pos",
              "nodeType": "YulIdentifier",
              "src": "26882:3:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "27054:3:2"
              }],
              "functionName": {
                "name": "store_literal_in_memory_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb",
                "nodeType": "YulIdentifier",
                "src": "26965:88:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "26965:93:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "26965:93:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "27067:19:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "27078:3:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "27083:2:2",
                "type": "",
                "value": "64"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "27074:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "27074:12:2"
            },
            "variableNames": [{
              "name": "end",
              "nodeType": "YulIdentifier",
              "src": "27067:3:2"
            }]
          }]
        },
        "name": "abi_encode_t_stringliteral_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb_to_t_string_memory_ptr_fromStack",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "pos",
          "nodeType": "YulTypedName",
          "src": "26860:3:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "end",
          "nodeType": "YulTypedName",
          "src": "26868:3:2",
          "type": ""
        }],
        "src": "26726:366:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "27269:248:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "27279:26:2",
            "value": {
              "arguments": [{
                "name": "headStart",
                "nodeType": "YulIdentifier",
                "src": "27291:9:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "27302:2:2",
                "type": "",
                "value": "32"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "27287:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "27287:18:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "27279:4:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "27326:9:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "27337:1:2",
                  "type": "",
                  "value": "0"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "27322:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "27322:17:2"
              }, {
                "arguments": [{
                  "name": "tail",
                  "nodeType": "YulIdentifier",
                  "src": "27345:4:2"
                }, {
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "27351:9:2"
                }],
                "functionName": {
                  "name": "sub",
                  "nodeType": "YulIdentifier",
                  "src": "27341:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "27341:20:2"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "27315:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "27315:47:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "27315:47:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "27371:139:2",
            "value": {
              "arguments": [{
                "name": "tail",
                "nodeType": "YulIdentifier",
                "src": "27505:4:2"
              }],
              "functionName": {
                "name": "abi_encode_t_stringliteral_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb_to_t_string_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "27379:124:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "27379:131:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "27371:4:2"
            }]
          }]
        },
        "name": "abi_encode_tuple_t_stringliteral_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb__to_t_string_memory_ptr__fromStack_reversed",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "headStart",
          "nodeType": "YulTypedName",
          "src": "27249:9:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "tail",
          "nodeType": "YulTypedName",
          "src": "27264:4:2",
          "type": ""
        }],
        "src": "27098:419:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "27637:34:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "27647:18:2",
            "value": {
              "name": "pos",
              "nodeType": "YulIdentifier",
              "src": "27662:3:2"
            },
            "variableNames": [{
              "name": "updated_pos",
              "nodeType": "YulIdentifier",
              "src": "27647:11:2"
            }]
          }]
        },
        "name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "pos",
          "nodeType": "YulTypedName",
          "src": "27609:3:2",
          "type": ""
        }, {
          "name": "length",
          "nodeType": "YulTypedName",
          "src": "27614:6:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "updated_pos",
          "nodeType": "YulTypedName",
          "src": "27625:11:2",
          "type": ""
        }],
        "src": "27523:148:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "27787:267:2",
          "statements": [{
            "nodeType": "YulVariableDeclaration",
            "src": "27797:53:2",
            "value": {
              "arguments": [{
                "name": "value",
                "nodeType": "YulIdentifier",
                "src": "27844:5:2"
              }],
              "functionName": {
                "name": "array_length_t_string_memory_ptr",
                "nodeType": "YulIdentifier",
                "src": "27811:32:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "27811:39:2"
            },
            "variables": [{
              "name": "length",
              "nodeType": "YulTypedName",
              "src": "27801:6:2",
              "type": ""
            }]
          }, {
            "nodeType": "YulAssignment",
            "src": "27859:96:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "27943:3:2"
              }, {
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "27948:6:2"
              }],
              "functionName": {
                "name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
                "nodeType": "YulIdentifier",
                "src": "27866:76:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "27866:89:2"
            },
            "variableNames": [{
              "name": "pos",
              "nodeType": "YulIdentifier",
              "src": "27859:3:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "value",
                  "nodeType": "YulIdentifier",
                  "src": "27990:5:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "27997:4:2",
                  "type": "",
                  "value": "0x20"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "27986:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "27986:16:2"
              }, {
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "28004:3:2"
              }, {
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "28009:6:2"
              }],
              "functionName": {
                "name": "copy_memory_to_memory",
                "nodeType": "YulIdentifier",
                "src": "27964:21:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "27964:52:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "27964:52:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "28025:23:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "28036:3:2"
              }, {
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "28041:6:2"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "28032:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "28032:16:2"
            },
            "variableNames": [{
              "name": "end",
              "nodeType": "YulIdentifier",
              "src": "28025:3:2"
            }]
          }]
        },
        "name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "value",
          "nodeType": "YulTypedName",
          "src": "27768:5:2",
          "type": ""
        }, {
          "name": "pos",
          "nodeType": "YulTypedName",
          "src": "27775:3:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "end",
          "nodeType": "YulTypedName",
          "src": "27783:3:2",
          "type": ""
        }],
        "src": "27677:377:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "28114:87:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "28124:11:2",
            "value": {
              "name": "ptr",
              "nodeType": "YulIdentifier",
              "src": "28132:3:2"
            },
            "variableNames": [{
              "name": "data",
              "nodeType": "YulIdentifier",
              "src": "28124:4:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "28152:1:2",
                "type": "",
                "value": "0"
              }, {
                "name": "ptr",
                "nodeType": "YulIdentifier",
                "src": "28155:3:2"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "28145:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "28145:14:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "28145:14:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "28168:26:2",
            "value": {
              "arguments": [{
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "28186:1:2",
                "type": "",
                "value": "0"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "28189:4:2",
                "type": "",
                "value": "0x20"
              }],
              "functionName": {
                "name": "keccak256",
                "nodeType": "YulIdentifier",
                "src": "28176:9:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "28176:18:2"
            },
            "variableNames": [{
              "name": "data",
              "nodeType": "YulIdentifier",
              "src": "28168:4:2"
            }]
          }]
        },
        "name": "array_dataslot_t_string_storage",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "ptr",
          "nodeType": "YulTypedName",
          "src": "28101:3:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "data",
          "nodeType": "YulTypedName",
          "src": "28109:4:2",
          "type": ""
        }],
        "src": "28060:141:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "28338:738:2",
          "statements": [{
            "nodeType": "YulVariableDeclaration",
            "src": "28348:29:2",
            "value": {
              "arguments": [{
                "name": "value",
                "nodeType": "YulIdentifier",
                "src": "28371:5:2"
              }],
              "functionName": {
                "name": "sload",
                "nodeType": "YulIdentifier",
                "src": "28365:5:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "28365:12:2"
            },
            "variables": [{
              "name": "slotValue",
              "nodeType": "YulTypedName",
              "src": "28352:9:2",
              "type": ""
            }]
          }, {
            "nodeType": "YulVariableDeclaration",
            "src": "28386:50:2",
            "value": {
              "arguments": [{
                "name": "slotValue",
                "nodeType": "YulIdentifier",
                "src": "28426:9:2"
              }],
              "functionName": {
                "name": "extract_byte_array_length",
                "nodeType": "YulIdentifier",
                "src": "28400:25:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "28400:36:2"
            },
            "variables": [{
              "name": "length",
              "nodeType": "YulTypedName",
              "src": "28390:6:2",
              "type": ""
            }]
          }, {
            "nodeType": "YulAssignment",
            "src": "28445:96:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "28529:3:2"
              }, {
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "28534:6:2"
              }],
              "functionName": {
                "name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
                "nodeType": "YulIdentifier",
                "src": "28452:76:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "28452:89:2"
            },
            "variableNames": [{
              "name": "pos",
              "nodeType": "YulIdentifier",
              "src": "28445:3:2"
            }]
          }, {
            "cases": [{
              "body": {
                "nodeType": "YulBlock",
                "src": "28590:130:2",
                "statements": [{
                  "expression": {
                    "arguments": [{
                      "name": "pos",
                      "nodeType": "YulIdentifier",
                      "src": "28643:3:2"
                    }, {
                      "arguments": [{
                        "name": "slotValue",
                        "nodeType": "YulIdentifier",
                        "src": "28652:9:2"
                      }, {
                        "arguments": [{
                          "kind": "number",
                          "nodeType": "YulLiteral",
                          "src": "28667:4:2",
                          "type": "",
                          "value": "0xff"
                        }],
                        "functionName": {
                          "name": "not",
                          "nodeType": "YulIdentifier",
                          "src": "28663:3:2"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "28663:9:2"
                      }],
                      "functionName": {
                        "name": "and",
                        "nodeType": "YulIdentifier",
                        "src": "28648:3:2"
                      },
                      "nodeType": "YulFunctionCall",
                      "src": "28648:25:2"
                    }],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "28636:6:2"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "28636:38:2"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "28636:38:2"
                }, {
                  "nodeType": "YulAssignment",
                  "src": "28687:23:2",
                  "value": {
                    "arguments": [{
                      "name": "pos",
                      "nodeType": "YulIdentifier",
                      "src": "28698:3:2"
                    }, {
                      "name": "length",
                      "nodeType": "YulIdentifier",
                      "src": "28703:6:2"
                    }],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "28694:3:2"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "28694:16:2"
                  },
                  "variableNames": [{
                    "name": "ret",
                    "nodeType": "YulIdentifier",
                    "src": "28687:3:2"
                  }]
                }]
              },
              "nodeType": "YulCase",
              "src": "28583:137:2",
              "value": {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "28588:1:2",
                "type": "",
                "value": "0"
              }
            }, {
              "body": {
                "nodeType": "YulBlock",
                "src": "28736:334:2",
                "statements": [{
                  "nodeType": "YulVariableDeclaration",
                  "src": "28781:53:2",
                  "value": {
                    "arguments": [{
                      "name": "value",
                      "nodeType": "YulIdentifier",
                      "src": "28828:5:2"
                    }],
                    "functionName": {
                      "name": "array_dataslot_t_string_storage",
                      "nodeType": "YulIdentifier",
                      "src": "28796:31:2"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "28796:38:2"
                  },
                  "variables": [{
                    "name": "dataPos",
                    "nodeType": "YulTypedName",
                    "src": "28785:7:2",
                    "type": ""
                  }]
                }, {
                  "nodeType": "YulVariableDeclaration",
                  "src": "28847:10:2",
                  "value": {
                    "kind": "number",
                    "nodeType": "YulLiteral",
                    "src": "28856:1:2",
                    "type": "",
                    "value": "0"
                  },
                  "variables": [{
                    "name": "i",
                    "nodeType": "YulTypedName",
                    "src": "28851:1:2",
                    "type": ""
                  }]
                }, {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "28914:110:2",
                    "statements": [{
                      "expression": {
                        "arguments": [{
                          "arguments": [{
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "28943:3:2"
                          }, {
                            "name": "i",
                            "nodeType": "YulIdentifier",
                            "src": "28948:1:2"
                          }],
                          "functionName": {
                            "name": "add",
                            "nodeType": "YulIdentifier",
                            "src": "28939:3:2"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "28939:11:2"
                        }, {
                          "arguments": [{
                            "name": "dataPos",
                            "nodeType": "YulIdentifier",
                            "src": "28958:7:2"
                          }],
                          "functionName": {
                            "name": "sload",
                            "nodeType": "YulIdentifier",
                            "src": "28952:5:2"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "28952:14:2"
                        }],
                        "functionName": {
                          "name": "mstore",
                          "nodeType": "YulIdentifier",
                          "src": "28932:6:2"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "28932:35:2"
                      },
                      "nodeType": "YulExpressionStatement",
                      "src": "28932:35:2"
                    }, {
                      "nodeType": "YulAssignment",
                      "src": "28984:26:2",
                      "value": {
                        "arguments": [{
                          "name": "dataPos",
                          "nodeType": "YulIdentifier",
                          "src": "28999:7:2"
                        }, {
                          "kind": "number",
                          "nodeType": "YulLiteral",
                          "src": "29008:1:2",
                          "type": "",
                          "value": "1"
                        }],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "28995:3:2"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "28995:15:2"
                      },
                      "variableNames": [{
                        "name": "dataPos",
                        "nodeType": "YulIdentifier",
                        "src": "28984:7:2"
                      }]
                    }]
                  },
                  "condition": {
                    "arguments": [{
                      "name": "i",
                      "nodeType": "YulIdentifier",
                      "src": "28881:1:2"
                    }, {
                      "name": "length",
                      "nodeType": "YulIdentifier",
                      "src": "28884:6:2"
                    }],
                    "functionName": {
                      "name": "lt",
                      "nodeType": "YulIdentifier",
                      "src": "28878:2:2"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "28878:13:2"
                  },
                  "nodeType": "YulForLoop",
                  "post": {
                    "nodeType": "YulBlock",
                    "src": "28892:21:2",
                    "statements": [{
                      "nodeType": "YulAssignment",
                      "src": "28894:17:2",
                      "value": {
                        "arguments": [{
                          "name": "i",
                          "nodeType": "YulIdentifier",
                          "src": "28903:1:2"
                        }, {
                          "kind": "number",
                          "nodeType": "YulLiteral",
                          "src": "28906:4:2",
                          "type": "",
                          "value": "0x20"
                        }],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "28899:3:2"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "28899:12:2"
                      },
                      "variableNames": [{
                        "name": "i",
                        "nodeType": "YulIdentifier",
                        "src": "28894:1:2"
                      }]
                    }]
                  },
                  "pre": {
                    "nodeType": "YulBlock",
                    "src": "28874:3:2",
                    "statements": []
                  },
                  "src": "28870:154:2"
                }, {
                  "nodeType": "YulAssignment",
                  "src": "29037:23:2",
                  "value": {
                    "arguments": [{
                      "name": "pos",
                      "nodeType": "YulIdentifier",
                      "src": "29048:3:2"
                    }, {
                      "name": "length",
                      "nodeType": "YulIdentifier",
                      "src": "29053:6:2"
                    }],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "29044:3:2"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "29044:16:2"
                  },
                  "variableNames": [{
                    "name": "ret",
                    "nodeType": "YulIdentifier",
                    "src": "29037:3:2"
                  }]
                }]
              },
              "nodeType": "YulCase",
              "src": "28729:341:2",
              "value": {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "28734:1:2",
                "type": "",
                "value": "1"
              }
            }],
            "expression": {
              "arguments": [{
                "name": "slotValue",
                "nodeType": "YulIdentifier",
                "src": "28561:9:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "28572:1:2",
                "type": "",
                "value": "1"
              }],
              "functionName": {
                "name": "and",
                "nodeType": "YulIdentifier",
                "src": "28557:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "28557:17:2"
            },
            "nodeType": "YulSwitch",
            "src": "28550:520:2"
          }]
        },
        "name": "abi_encode_t_string_storage_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "value",
          "nodeType": "YulTypedName",
          "src": "28319:5:2",
          "type": ""
        }, {
          "name": "pos",
          "nodeType": "YulTypedName",
          "src": "28326:3:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "ret",
          "nodeType": "YulTypedName",
          "src": "28334:3:2",
          "type": ""
        }],
        "src": "28231:845:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "29311:360:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "29322:102:2",
            "value": {
              "arguments": [{
                "name": "value0",
                "nodeType": "YulIdentifier",
                "src": "29411:6:2"
              }, {
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "29420:3:2"
              }],
              "functionName": {
                "name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
                "nodeType": "YulIdentifier",
                "src": "29329:81:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "29329:95:2"
            },
            "variableNames": [{
              "name": "pos",
              "nodeType": "YulIdentifier",
              "src": "29322:3:2"
            }]
          }, {
            "nodeType": "YulAssignment",
            "src": "29434:102:2",
            "value": {
              "arguments": [{
                "name": "value1",
                "nodeType": "YulIdentifier",
                "src": "29523:6:2"
              }, {
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "29532:3:2"
              }],
              "functionName": {
                "name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
                "nodeType": "YulIdentifier",
                "src": "29441:81:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "29441:95:2"
            },
            "variableNames": [{
              "name": "pos",
              "nodeType": "YulIdentifier",
              "src": "29434:3:2"
            }]
          }, {
            "nodeType": "YulAssignment",
            "src": "29546:99:2",
            "value": {
              "arguments": [{
                "name": "value2",
                "nodeType": "YulIdentifier",
                "src": "29632:6:2"
              }, {
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "29641:3:2"
              }],
              "functionName": {
                "name": "abi_encode_t_string_storage_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
                "nodeType": "YulIdentifier",
                "src": "29553:78:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "29553:92:2"
            },
            "variableNames": [{
              "name": "pos",
              "nodeType": "YulIdentifier",
              "src": "29546:3:2"
            }]
          }, {
            "nodeType": "YulAssignment",
            "src": "29655:10:2",
            "value": {
              "name": "pos",
              "nodeType": "YulIdentifier",
              "src": "29662:3:2"
            },
            "variableNames": [{
              "name": "end",
              "nodeType": "YulIdentifier",
              "src": "29655:3:2"
            }]
          }]
        },
        "name": "abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr_t_string_storage__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "pos",
          "nodeType": "YulTypedName",
          "src": "29274:3:2",
          "type": ""
        }, {
          "name": "value2",
          "nodeType": "YulTypedName",
          "src": "29280:6:2",
          "type": ""
        }, {
          "name": "value1",
          "nodeType": "YulTypedName",
          "src": "29288:6:2",
          "type": ""
        }, {
          "name": "value0",
          "nodeType": "YulTypedName",
          "src": "29296:6:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "end",
          "nodeType": "YulTypedName",
          "src": "29307:3:2",
          "type": ""
        }],
        "src": "29082:589:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "29783:119:2",
          "statements": [{
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "memPtr",
                  "nodeType": "YulIdentifier",
                  "src": "29805:6:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "29813:1:2",
                  "type": "",
                  "value": "0"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "29801:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "29801:14:2"
              }, {
                "hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061",
                "kind": "string",
                "nodeType": "YulLiteral",
                "src": "29817:34:2",
                "type": "",
                "value": "Ownable: new owner is the zero a"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "29794:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "29794:58:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "29794:58:2"
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "memPtr",
                  "nodeType": "YulIdentifier",
                  "src": "29873:6:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "29881:2:2",
                  "type": "",
                  "value": "32"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "29869:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "29869:15:2"
              }, {
                "hexValue": "646472657373",
                "kind": "string",
                "nodeType": "YulLiteral",
                "src": "29886:8:2",
                "type": "",
                "value": "ddress"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "29862:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "29862:33:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "29862:33:2"
          }]
        },
        "name": "store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "memPtr",
          "nodeType": "YulTypedName",
          "src": "29775:6:2",
          "type": ""
        }],
        "src": "29677:225:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "30054:220:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "30064:74:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "30130:3:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "30135:2:2",
                "type": "",
                "value": "38"
              }],
              "functionName": {
                "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "30071:58:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "30071:67:2"
            },
            "variableNames": [{
              "name": "pos",
              "nodeType": "YulIdentifier",
              "src": "30064:3:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "30236:3:2"
              }],
              "functionName": {
                "name": "store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
                "nodeType": "YulIdentifier",
                "src": "30147:88:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "30147:93:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "30147:93:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "30249:19:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "30260:3:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "30265:2:2",
                "type": "",
                "value": "64"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "30256:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "30256:12:2"
            },
            "variableNames": [{
              "name": "end",
              "nodeType": "YulIdentifier",
              "src": "30249:3:2"
            }]
          }]
        },
        "name": "abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "pos",
          "nodeType": "YulTypedName",
          "src": "30042:3:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "end",
          "nodeType": "YulTypedName",
          "src": "30050:3:2",
          "type": ""
        }],
        "src": "29908:366:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "30451:248:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "30461:26:2",
            "value": {
              "arguments": [{
                "name": "headStart",
                "nodeType": "YulIdentifier",
                "src": "30473:9:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "30484:2:2",
                "type": "",
                "value": "32"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "30469:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "30469:18:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "30461:4:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "30508:9:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "30519:1:2",
                  "type": "",
                  "value": "0"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "30504:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "30504:17:2"
              }, {
                "arguments": [{
                  "name": "tail",
                  "nodeType": "YulIdentifier",
                  "src": "30527:4:2"
                }, {
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "30533:9:2"
                }],
                "functionName": {
                  "name": "sub",
                  "nodeType": "YulIdentifier",
                  "src": "30523:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "30523:20:2"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "30497:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "30497:47:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "30497:47:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "30553:139:2",
            "value": {
              "arguments": [{
                "name": "tail",
                "nodeType": "YulIdentifier",
                "src": "30687:4:2"
              }],
              "functionName": {
                "name": "abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "30561:124:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "30561:131:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "30553:4:2"
            }]
          }]
        },
        "name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "headStart",
          "nodeType": "YulTypedName",
          "src": "30431:9:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "tail",
          "nodeType": "YulTypedName",
          "src": "30446:4:2",
          "type": ""
        }],
        "src": "30280:419:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "30811:125:2",
          "statements": [{
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "memPtr",
                  "nodeType": "YulIdentifier",
                  "src": "30833:6:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "30841:1:2",
                  "type": "",
                  "value": "0"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "30829:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "30829:14:2"
              }, {
                "hexValue": "4552433732313a206f70657261746f7220717565727920666f72206e6f6e6578",
                "kind": "string",
                "nodeType": "YulLiteral",
                "src": "30845:34:2",
                "type": "",
                "value": "ERC721: operator query for nonex"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "30822:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "30822:58:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "30822:58:2"
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "memPtr",
                  "nodeType": "YulIdentifier",
                  "src": "30901:6:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "30909:2:2",
                  "type": "",
                  "value": "32"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "30897:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "30897:15:2"
              }, {
                "hexValue": "697374656e7420746f6b656e",
                "kind": "string",
                "nodeType": "YulLiteral",
                "src": "30914:14:2",
                "type": "",
                "value": "istent token"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "30890:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "30890:39:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "30890:39:2"
          }]
        },
        "name": "store_literal_in_memory_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "memPtr",
          "nodeType": "YulTypedName",
          "src": "30803:6:2",
          "type": ""
        }],
        "src": "30705:231:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "31088:220:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "31098:74:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "31164:3:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "31169:2:2",
                "type": "",
                "value": "44"
              }],
              "functionName": {
                "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "31105:58:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "31105:67:2"
            },
            "variableNames": [{
              "name": "pos",
              "nodeType": "YulIdentifier",
              "src": "31098:3:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "31270:3:2"
              }],
              "functionName": {
                "name": "store_literal_in_memory_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c",
                "nodeType": "YulIdentifier",
                "src": "31181:88:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "31181:93:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "31181:93:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "31283:19:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "31294:3:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "31299:2:2",
                "type": "",
                "value": "64"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "31290:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "31290:12:2"
            },
            "variableNames": [{
              "name": "end",
              "nodeType": "YulIdentifier",
              "src": "31283:3:2"
            }]
          }]
        },
        "name": "abi_encode_t_stringliteral_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c_to_t_string_memory_ptr_fromStack",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "pos",
          "nodeType": "YulTypedName",
          "src": "31076:3:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "end",
          "nodeType": "YulTypedName",
          "src": "31084:3:2",
          "type": ""
        }],
        "src": "30942:366:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "31485:248:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "31495:26:2",
            "value": {
              "arguments": [{
                "name": "headStart",
                "nodeType": "YulIdentifier",
                "src": "31507:9:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "31518:2:2",
                "type": "",
                "value": "32"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "31503:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "31503:18:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "31495:4:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "31542:9:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "31553:1:2",
                  "type": "",
                  "value": "0"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "31538:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "31538:17:2"
              }, {
                "arguments": [{
                  "name": "tail",
                  "nodeType": "YulIdentifier",
                  "src": "31561:4:2"
                }, {
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "31567:9:2"
                }],
                "functionName": {
                  "name": "sub",
                  "nodeType": "YulIdentifier",
                  "src": "31557:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "31557:20:2"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "31531:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "31531:47:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "31531:47:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "31587:139:2",
            "value": {
              "arguments": [{
                "name": "tail",
                "nodeType": "YulIdentifier",
                "src": "31721:4:2"
              }],
              "functionName": {
                "name": "abi_encode_t_stringliteral_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c_to_t_string_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "31595:124:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "31595:131:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "31587:4:2"
            }]
          }]
        },
        "name": "abi_encode_tuple_t_stringliteral_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c__to_t_string_memory_ptr__fromStack_reversed",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "headStart",
          "nodeType": "YulTypedName",
          "src": "31465:9:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "tail",
          "nodeType": "YulTypedName",
          "src": "31480:4:2",
          "type": ""
        }],
        "src": "31314:419:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "31845:122:2",
          "statements": [{
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "memPtr",
                  "nodeType": "YulIdentifier",
                  "src": "31867:6:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "31875:1:2",
                  "type": "",
                  "value": "0"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "31863:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "31863:14:2"
              }, {
                "hexValue": "4552433732313a207472616e73666572206f6620746f6b656e20746861742069",
                "kind": "string",
                "nodeType": "YulLiteral",
                "src": "31879:34:2",
                "type": "",
                "value": "ERC721: transfer of token that i"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "31856:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "31856:58:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "31856:58:2"
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "memPtr",
                  "nodeType": "YulIdentifier",
                  "src": "31935:6:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "31943:2:2",
                  "type": "",
                  "value": "32"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "31931:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "31931:15:2"
              }, {
                "hexValue": "73206e6f74206f776e",
                "kind": "string",
                "nodeType": "YulLiteral",
                "src": "31948:11:2",
                "type": "",
                "value": "s not own"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "31924:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "31924:36:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "31924:36:2"
          }]
        },
        "name": "store_literal_in_memory_a01073130a885d6c1c1af6ac75fc3b1c4f9403c235362962bbf528e2bd87d950",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "memPtr",
          "nodeType": "YulTypedName",
          "src": "31837:6:2",
          "type": ""
        }],
        "src": "31739:228:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "32119:220:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "32129:74:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "32195:3:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "32200:2:2",
                "type": "",
                "value": "41"
              }],
              "functionName": {
                "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "32136:58:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "32136:67:2"
            },
            "variableNames": [{
              "name": "pos",
              "nodeType": "YulIdentifier",
              "src": "32129:3:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "32301:3:2"
              }],
              "functionName": {
                "name": "store_literal_in_memory_a01073130a885d6c1c1af6ac75fc3b1c4f9403c235362962bbf528e2bd87d950",
                "nodeType": "YulIdentifier",
                "src": "32212:88:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "32212:93:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "32212:93:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "32314:19:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "32325:3:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "32330:2:2",
                "type": "",
                "value": "64"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "32321:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "32321:12:2"
            },
            "variableNames": [{
              "name": "end",
              "nodeType": "YulIdentifier",
              "src": "32314:3:2"
            }]
          }]
        },
        "name": "abi_encode_t_stringliteral_a01073130a885d6c1c1af6ac75fc3b1c4f9403c235362962bbf528e2bd87d950_to_t_string_memory_ptr_fromStack",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "pos",
          "nodeType": "YulTypedName",
          "src": "32107:3:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "end",
          "nodeType": "YulTypedName",
          "src": "32115:3:2",
          "type": ""
        }],
        "src": "31973:366:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "32516:248:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "32526:26:2",
            "value": {
              "arguments": [{
                "name": "headStart",
                "nodeType": "YulIdentifier",
                "src": "32538:9:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "32549:2:2",
                "type": "",
                "value": "32"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "32534:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "32534:18:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "32526:4:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "32573:9:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "32584:1:2",
                  "type": "",
                  "value": "0"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "32569:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "32569:17:2"
              }, {
                "arguments": [{
                  "name": "tail",
                  "nodeType": "YulIdentifier",
                  "src": "32592:4:2"
                }, {
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "32598:9:2"
                }],
                "functionName": {
                  "name": "sub",
                  "nodeType": "YulIdentifier",
                  "src": "32588:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "32588:20:2"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "32562:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "32562:47:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "32562:47:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "32618:139:2",
            "value": {
              "arguments": [{
                "name": "tail",
                "nodeType": "YulIdentifier",
                "src": "32752:4:2"
              }],
              "functionName": {
                "name": "abi_encode_t_stringliteral_a01073130a885d6c1c1af6ac75fc3b1c4f9403c235362962bbf528e2bd87d950_to_t_string_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "32626:124:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "32626:131:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "32618:4:2"
            }]
          }]
        },
        "name": "abi_encode_tuple_t_stringliteral_a01073130a885d6c1c1af6ac75fc3b1c4f9403c235362962bbf528e2bd87d950__to_t_string_memory_ptr__fromStack_reversed",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "headStart",
          "nodeType": "YulTypedName",
          "src": "32496:9:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "tail",
          "nodeType": "YulTypedName",
          "src": "32511:4:2",
          "type": ""
        }],
        "src": "32345:419:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "32876:117:2",
          "statements": [{
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "memPtr",
                  "nodeType": "YulIdentifier",
                  "src": "32898:6:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "32906:1:2",
                  "type": "",
                  "value": "0"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "32894:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "32894:14:2"
              }, {
                "hexValue": "4552433732313a207472616e7366657220746f20746865207a65726f20616464",
                "kind": "string",
                "nodeType": "YulLiteral",
                "src": "32910:34:2",
                "type": "",
                "value": "ERC721: transfer to the zero add"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "32887:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "32887:58:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "32887:58:2"
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "memPtr",
                  "nodeType": "YulIdentifier",
                  "src": "32966:6:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "32974:2:2",
                  "type": "",
                  "value": "32"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "32962:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "32962:15:2"
              }, {
                "hexValue": "72657373",
                "kind": "string",
                "nodeType": "YulLiteral",
                "src": "32979:6:2",
                "type": "",
                "value": "ress"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "32955:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "32955:31:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "32955:31:2"
          }]
        },
        "name": "store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "memPtr",
          "nodeType": "YulTypedName",
          "src": "32868:6:2",
          "type": ""
        }],
        "src": "32770:223:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "33145:220:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "33155:74:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "33221:3:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "33226:2:2",
                "type": "",
                "value": "36"
              }],
              "functionName": {
                "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "33162:58:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "33162:67:2"
            },
            "variableNames": [{
              "name": "pos",
              "nodeType": "YulIdentifier",
              "src": "33155:3:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "33327:3:2"
              }],
              "functionName": {
                "name": "store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4",
                "nodeType": "YulIdentifier",
                "src": "33238:88:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "33238:93:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "33238:93:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "33340:19:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "33351:3:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "33356:2:2",
                "type": "",
                "value": "64"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "33347:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "33347:12:2"
            },
            "variableNames": [{
              "name": "end",
              "nodeType": "YulIdentifier",
              "src": "33340:3:2"
            }]
          }]
        },
        "name": "abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "pos",
          "nodeType": "YulTypedName",
          "src": "33133:3:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "end",
          "nodeType": "YulTypedName",
          "src": "33141:3:2",
          "type": ""
        }],
        "src": "32999:366:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "33542:248:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "33552:26:2",
            "value": {
              "arguments": [{
                "name": "headStart",
                "nodeType": "YulIdentifier",
                "src": "33564:9:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "33575:2:2",
                "type": "",
                "value": "32"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "33560:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "33560:18:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "33552:4:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "33599:9:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "33610:1:2",
                  "type": "",
                  "value": "0"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "33595:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "33595:17:2"
              }, {
                "arguments": [{
                  "name": "tail",
                  "nodeType": "YulIdentifier",
                  "src": "33618:4:2"
                }, {
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "33624:9:2"
                }],
                "functionName": {
                  "name": "sub",
                  "nodeType": "YulIdentifier",
                  "src": "33614:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "33614:20:2"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "33588:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "33588:47:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "33588:47:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "33644:139:2",
            "value": {
              "arguments": [{
                "name": "tail",
                "nodeType": "YulIdentifier",
                "src": "33778:4:2"
              }],
              "functionName": {
                "name": "abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "33652:124:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "33652:131:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "33644:4:2"
            }]
          }]
        },
        "name": "abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "headStart",
          "nodeType": "YulTypedName",
          "src": "33522:9:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "tail",
          "nodeType": "YulTypedName",
          "src": "33537:4:2",
          "type": ""
        }],
        "src": "33371:419:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "33841:146:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "33851:25:2",
            "value": {
              "arguments": [{
                "name": "x",
                "nodeType": "YulIdentifier",
                "src": "33874:1:2"
              }],
              "functionName": {
                "name": "cleanup_t_uint256",
                "nodeType": "YulIdentifier",
                "src": "33856:17:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "33856:20:2"
            },
            "variableNames": [{
              "name": "x",
              "nodeType": "YulIdentifier",
              "src": "33851:1:2"
            }]
          }, {
            "nodeType": "YulAssignment",
            "src": "33885:25:2",
            "value": {
              "arguments": [{
                "name": "y",
                "nodeType": "YulIdentifier",
                "src": "33908:1:2"
              }],
              "functionName": {
                "name": "cleanup_t_uint256",
                "nodeType": "YulIdentifier",
                "src": "33890:17:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "33890:20:2"
            },
            "variableNames": [{
              "name": "y",
              "nodeType": "YulIdentifier",
              "src": "33885:1:2"
            }]
          }, {
            "body": {
              "nodeType": "YulBlock",
              "src": "33932:22:2",
              "statements": [{
                "expression": {
                  "arguments": [],
                  "functionName": {
                    "name": "panic_error_0x11",
                    "nodeType": "YulIdentifier",
                    "src": "33934:16:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "33934:18:2"
                },
                "nodeType": "YulExpressionStatement",
                "src": "33934:18:2"
              }]
            },
            "condition": {
              "arguments": [{
                "name": "x",
                "nodeType": "YulIdentifier",
                "src": "33926:1:2"
              }, {
                "name": "y",
                "nodeType": "YulIdentifier",
                "src": "33929:1:2"
              }],
              "functionName": {
                "name": "lt",
                "nodeType": "YulIdentifier",
                "src": "33923:2:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "33923:8:2"
            },
            "nodeType": "YulIf",
            "src": "33920:34:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "33964:17:2",
            "value": {
              "arguments": [{
                "name": "x",
                "nodeType": "YulIdentifier",
                "src": "33976:1:2"
              }, {
                "name": "y",
                "nodeType": "YulIdentifier",
                "src": "33979:1:2"
              }],
              "functionName": {
                "name": "sub",
                "nodeType": "YulIdentifier",
                "src": "33972:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "33972:9:2"
            },
            "variableNames": [{
              "name": "diff",
              "nodeType": "YulIdentifier",
              "src": "33964:4:2"
            }]
          }]
        },
        "name": "checked_sub_t_uint256",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "x",
          "nodeType": "YulTypedName",
          "src": "33827:1:2",
          "type": ""
        }, {
          "name": "y",
          "nodeType": "YulTypedName",
          "src": "33830:1:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "diff",
          "nodeType": "YulTypedName",
          "src": "33836:4:2",
          "type": ""
        }],
        "src": "33796:191:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "34099:131:2",
          "statements": [{
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "memPtr",
                  "nodeType": "YulIdentifier",
                  "src": "34121:6:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "34129:1:2",
                  "type": "",
                  "value": "0"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "34117:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "34117:14:2"
              }, {
                "hexValue": "4552433732313a207472616e7366657220746f206e6f6e204552433732315265",
                "kind": "string",
                "nodeType": "YulLiteral",
                "src": "34133:34:2",
                "type": "",
                "value": "ERC721: transfer to non ERC721Re"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "34110:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "34110:58:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "34110:58:2"
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "memPtr",
                  "nodeType": "YulIdentifier",
                  "src": "34189:6:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "34197:2:2",
                  "type": "",
                  "value": "32"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "34185:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "34185:15:2"
              }, {
                "hexValue": "63656976657220696d706c656d656e746572",
                "kind": "string",
                "nodeType": "YulLiteral",
                "src": "34202:20:2",
                "type": "",
                "value": "ceiver implementer"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "34178:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "34178:45:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "34178:45:2"
          }]
        },
        "name": "store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "memPtr",
          "nodeType": "YulTypedName",
          "src": "34091:6:2",
          "type": ""
        }],
        "src": "33993:237:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "34382:220:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "34392:74:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "34458:3:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "34463:2:2",
                "type": "",
                "value": "50"
              }],
              "functionName": {
                "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "34399:58:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "34399:67:2"
            },
            "variableNames": [{
              "name": "pos",
              "nodeType": "YulIdentifier",
              "src": "34392:3:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "34564:3:2"
              }],
              "functionName": {
                "name": "store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
                "nodeType": "YulIdentifier",
                "src": "34475:88:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "34475:93:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "34475:93:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "34577:19:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "34588:3:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "34593:2:2",
                "type": "",
                "value": "64"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "34584:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "34584:12:2"
            },
            "variableNames": [{
              "name": "end",
              "nodeType": "YulIdentifier",
              "src": "34577:3:2"
            }]
          }]
        },
        "name": "abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "pos",
          "nodeType": "YulTypedName",
          "src": "34370:3:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "end",
          "nodeType": "YulTypedName",
          "src": "34378:3:2",
          "type": ""
        }],
        "src": "34236:366:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "34779:248:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "34789:26:2",
            "value": {
              "arguments": [{
                "name": "headStart",
                "nodeType": "YulIdentifier",
                "src": "34801:9:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "34812:2:2",
                "type": "",
                "value": "32"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "34797:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "34797:18:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "34789:4:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "34836:9:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "34847:1:2",
                  "type": "",
                  "value": "0"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "34832:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "34832:17:2"
              }, {
                "arguments": [{
                  "name": "tail",
                  "nodeType": "YulIdentifier",
                  "src": "34855:4:2"
                }, {
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "34861:9:2"
                }],
                "functionName": {
                  "name": "sub",
                  "nodeType": "YulIdentifier",
                  "src": "34851:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "34851:20:2"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "34825:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "34825:47:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "34825:47:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "34881:139:2",
            "value": {
              "arguments": [{
                "name": "tail",
                "nodeType": "YulIdentifier",
                "src": "35015:4:2"
              }],
              "functionName": {
                "name": "abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "34889:124:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "34889:131:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "34881:4:2"
            }]
          }]
        },
        "name": "abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "headStart",
          "nodeType": "YulTypedName",
          "src": "34759:9:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "tail",
          "nodeType": "YulTypedName",
          "src": "34774:4:2",
          "type": ""
        }],
        "src": "34608:419:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "35061:152:2",
          "statements": [{
            "expression": {
              "arguments": [{
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "35078:1:2",
                "type": "",
                "value": "0"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "35081:77:2",
                "type": "",
                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "35071:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "35071:88:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "35071:88:2"
          }, {
            "expression": {
              "arguments": [{
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "35175:1:2",
                "type": "",
                "value": "4"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "35178:4:2",
                "type": "",
                "value": "0x12"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "35168:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "35168:15:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "35168:15:2"
          }, {
            "expression": {
              "arguments": [{
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "35199:1:2",
                "type": "",
                "value": "0"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "35202:4:2",
                "type": "",
                "value": "0x24"
              }],
              "functionName": {
                "name": "revert",
                "nodeType": "YulIdentifier",
                "src": "35192:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "35192:15:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "35192:15:2"
          }]
        },
        "name": "panic_error_0x12",
        "nodeType": "YulFunctionDefinition",
        "src": "35033:180:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "35261:143:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "35271:25:2",
            "value": {
              "arguments": [{
                "name": "x",
                "nodeType": "YulIdentifier",
                "src": "35294:1:2"
              }],
              "functionName": {
                "name": "cleanup_t_uint256",
                "nodeType": "YulIdentifier",
                "src": "35276:17:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "35276:20:2"
            },
            "variableNames": [{
              "name": "x",
              "nodeType": "YulIdentifier",
              "src": "35271:1:2"
            }]
          }, {
            "nodeType": "YulAssignment",
            "src": "35305:25:2",
            "value": {
              "arguments": [{
                "name": "y",
                "nodeType": "YulIdentifier",
                "src": "35328:1:2"
              }],
              "functionName": {
                "name": "cleanup_t_uint256",
                "nodeType": "YulIdentifier",
                "src": "35310:17:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "35310:20:2"
            },
            "variableNames": [{
              "name": "y",
              "nodeType": "YulIdentifier",
              "src": "35305:1:2"
            }]
          }, {
            "body": {
              "nodeType": "YulBlock",
              "src": "35352:22:2",
              "statements": [{
                "expression": {
                  "arguments": [],
                  "functionName": {
                    "name": "panic_error_0x12",
                    "nodeType": "YulIdentifier",
                    "src": "35354:16:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "35354:18:2"
                },
                "nodeType": "YulExpressionStatement",
                "src": "35354:18:2"
              }]
            },
            "condition": {
              "arguments": [{
                "name": "y",
                "nodeType": "YulIdentifier",
                "src": "35349:1:2"
              }],
              "functionName": {
                "name": "iszero",
                "nodeType": "YulIdentifier",
                "src": "35342:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "35342:9:2"
            },
            "nodeType": "YulIf",
            "src": "35339:35:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "35384:14:2",
            "value": {
              "arguments": [{
                "name": "x",
                "nodeType": "YulIdentifier",
                "src": "35393:1:2"
              }, {
                "name": "y",
                "nodeType": "YulIdentifier",
                "src": "35396:1:2"
              }],
              "functionName": {
                "name": "div",
                "nodeType": "YulIdentifier",
                "src": "35389:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "35389:9:2"
            },
            "variableNames": [{
              "name": "r",
              "nodeType": "YulIdentifier",
              "src": "35384:1:2"
            }]
          }]
        },
        "name": "checked_div_t_uint256",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "x",
          "nodeType": "YulTypedName",
          "src": "35250:1:2",
          "type": ""
        }, {
          "name": "y",
          "nodeType": "YulTypedName",
          "src": "35253:1:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "r",
          "nodeType": "YulTypedName",
          "src": "35259:1:2",
          "type": ""
        }],
        "src": "35219:185:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "35444:142:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "35454:25:2",
            "value": {
              "arguments": [{
                "name": "x",
                "nodeType": "YulIdentifier",
                "src": "35477:1:2"
              }],
              "functionName": {
                "name": "cleanup_t_uint256",
                "nodeType": "YulIdentifier",
                "src": "35459:17:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "35459:20:2"
            },
            "variableNames": [{
              "name": "x",
              "nodeType": "YulIdentifier",
              "src": "35454:1:2"
            }]
          }, {
            "nodeType": "YulAssignment",
            "src": "35488:25:2",
            "value": {
              "arguments": [{
                "name": "y",
                "nodeType": "YulIdentifier",
                "src": "35511:1:2"
              }],
              "functionName": {
                "name": "cleanup_t_uint256",
                "nodeType": "YulIdentifier",
                "src": "35493:17:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "35493:20:2"
            },
            "variableNames": [{
              "name": "y",
              "nodeType": "YulIdentifier",
              "src": "35488:1:2"
            }]
          }, {
            "body": {
              "nodeType": "YulBlock",
              "src": "35535:22:2",
              "statements": [{
                "expression": {
                  "arguments": [],
                  "functionName": {
                    "name": "panic_error_0x12",
                    "nodeType": "YulIdentifier",
                    "src": "35537:16:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "35537:18:2"
                },
                "nodeType": "YulExpressionStatement",
                "src": "35537:18:2"
              }]
            },
            "condition": {
              "arguments": [{
                "name": "y",
                "nodeType": "YulIdentifier",
                "src": "35532:1:2"
              }],
              "functionName": {
                "name": "iszero",
                "nodeType": "YulIdentifier",
                "src": "35525:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "35525:9:2"
            },
            "nodeType": "YulIf",
            "src": "35522:35:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "35566:14:2",
            "value": {
              "arguments": [{
                "name": "x",
                "nodeType": "YulIdentifier",
                "src": "35575:1:2"
              }, {
                "name": "y",
                "nodeType": "YulIdentifier",
                "src": "35578:1:2"
              }],
              "functionName": {
                "name": "mod",
                "nodeType": "YulIdentifier",
                "src": "35571:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "35571:9:2"
            },
            "variableNames": [{
              "name": "r",
              "nodeType": "YulIdentifier",
              "src": "35566:1:2"
            }]
          }]
        },
        "name": "mod_t_uint256",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "x",
          "nodeType": "YulTypedName",
          "src": "35433:1:2",
          "type": ""
        }, {
          "name": "y",
          "nodeType": "YulTypedName",
          "src": "35436:1:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "r",
          "nodeType": "YulTypedName",
          "src": "35442:1:2",
          "type": ""
        }],
        "src": "35410:176:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "35650:40:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "35661:22:2",
            "value": {
              "arguments": [{
                "name": "value",
                "nodeType": "YulIdentifier",
                "src": "35677:5:2"
              }],
              "functionName": {
                "name": "mload",
                "nodeType": "YulIdentifier",
                "src": "35671:5:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "35671:12:2"
            },
            "variableNames": [{
              "name": "length",
              "nodeType": "YulIdentifier",
              "src": "35661:6:2"
            }]
          }]
        },
        "name": "array_length_t_bytes_memory_ptr",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "value",
          "nodeType": "YulTypedName",
          "src": "35633:5:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "length",
          "nodeType": "YulTypedName",
          "src": "35643:6:2",
          "type": ""
        }],
        "src": "35592:98:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "35791:73:2",
          "statements": [{
            "expression": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "35808:3:2"
              }, {
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "35813:6:2"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "35801:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "35801:19:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "35801:19:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "35829:29:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "35848:3:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "35853:4:2",
                "type": "",
                "value": "0x20"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "35844:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "35844:14:2"
            },
            "variableNames": [{
              "name": "updated_pos",
              "nodeType": "YulIdentifier",
              "src": "35829:11:2"
            }]
          }]
        },
        "name": "array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "pos",
          "nodeType": "YulTypedName",
          "src": "35763:3:2",
          "type": ""
        }, {
          "name": "length",
          "nodeType": "YulTypedName",
          "src": "35768:6:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "updated_pos",
          "nodeType": "YulTypedName",
          "src": "35779:11:2",
          "type": ""
        }],
        "src": "35696:168:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "35960:270:2",
          "statements": [{
            "nodeType": "YulVariableDeclaration",
            "src": "35970:52:2",
            "value": {
              "arguments": [{
                "name": "value",
                "nodeType": "YulIdentifier",
                "src": "36016:5:2"
              }],
              "functionName": {
                "name": "array_length_t_bytes_memory_ptr",
                "nodeType": "YulIdentifier",
                "src": "35984:31:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "35984:38:2"
            },
            "variables": [{
              "name": "length",
              "nodeType": "YulTypedName",
              "src": "35974:6:2",
              "type": ""
            }]
          }, {
            "nodeType": "YulAssignment",
            "src": "36031:77:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "36096:3:2"
              }, {
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "36101:6:2"
              }],
              "functionName": {
                "name": "array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "36038:57:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "36038:70:2"
            },
            "variableNames": [{
              "name": "pos",
              "nodeType": "YulIdentifier",
              "src": "36031:3:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "value",
                  "nodeType": "YulIdentifier",
                  "src": "36143:5:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "36150:4:2",
                  "type": "",
                  "value": "0x20"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "36139:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "36139:16:2"
              }, {
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "36157:3:2"
              }, {
                "name": "length",
                "nodeType": "YulIdentifier",
                "src": "36162:6:2"
              }],
              "functionName": {
                "name": "copy_memory_to_memory",
                "nodeType": "YulIdentifier",
                "src": "36117:21:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "36117:52:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "36117:52:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "36178:46:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "36189:3:2"
              }, {
                "arguments": [{
                  "name": "length",
                  "nodeType": "YulIdentifier",
                  "src": "36216:6:2"
                }],
                "functionName": {
                  "name": "round_up_to_mul_of_32",
                  "nodeType": "YulIdentifier",
                  "src": "36194:21:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "36194:29:2"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "36185:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "36185:39:2"
            },
            "variableNames": [{
              "name": "end",
              "nodeType": "YulIdentifier",
              "src": "36178:3:2"
            }]
          }]
        },
        "name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "value",
          "nodeType": "YulTypedName",
          "src": "35941:5:2",
          "type": ""
        }, {
          "name": "pos",
          "nodeType": "YulTypedName",
          "src": "35948:3:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "end",
          "nodeType": "YulTypedName",
          "src": "35956:3:2",
          "type": ""
        }],
        "src": "35870:360:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "36436:440:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "36446:27:2",
            "value": {
              "arguments": [{
                "name": "headStart",
                "nodeType": "YulIdentifier",
                "src": "36458:9:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "36469:3:2",
                "type": "",
                "value": "128"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "36454:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "36454:19:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "36446:4:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "name": "value0",
                "nodeType": "YulIdentifier",
                "src": "36527:6:2"
              }, {
                "arguments": [{
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "36540:9:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "36551:1:2",
                  "type": "",
                  "value": "0"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "36536:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "36536:17:2"
              }],
              "functionName": {
                "name": "abi_encode_t_address_to_t_address_fromStack",
                "nodeType": "YulIdentifier",
                "src": "36483:43:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "36483:71:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "36483:71:2"
          }, {
            "expression": {
              "arguments": [{
                "name": "value1",
                "nodeType": "YulIdentifier",
                "src": "36608:6:2"
              }, {
                "arguments": [{
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "36621:9:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "36632:2:2",
                  "type": "",
                  "value": "32"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "36617:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "36617:18:2"
              }],
              "functionName": {
                "name": "abi_encode_t_address_to_t_address_fromStack",
                "nodeType": "YulIdentifier",
                "src": "36564:43:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "36564:72:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "36564:72:2"
          }, {
            "expression": {
              "arguments": [{
                "name": "value2",
                "nodeType": "YulIdentifier",
                "src": "36690:6:2"
              }, {
                "arguments": [{
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "36703:9:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "36714:2:2",
                  "type": "",
                  "value": "64"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "36699:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "36699:18:2"
              }],
              "functionName": {
                "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                "nodeType": "YulIdentifier",
                "src": "36646:43:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "36646:72:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "36646:72:2"
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "36739:9:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "36750:2:2",
                  "type": "",
                  "value": "96"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "36735:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "36735:18:2"
              }, {
                "arguments": [{
                  "name": "tail",
                  "nodeType": "YulIdentifier",
                  "src": "36759:4:2"
                }, {
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "36765:9:2"
                }],
                "functionName": {
                  "name": "sub",
                  "nodeType": "YulIdentifier",
                  "src": "36755:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "36755:20:2"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "36728:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "36728:48:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "36728:48:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "36785:84:2",
            "value": {
              "arguments": [{
                "name": "value3",
                "nodeType": "YulIdentifier",
                "src": "36855:6:2"
              }, {
                "name": "tail",
                "nodeType": "YulIdentifier",
                "src": "36864:4:2"
              }],
              "functionName": {
                "name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "36793:61:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "36793:76:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "36785:4:2"
            }]
          }]
        },
        "name": "abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "headStart",
          "nodeType": "YulTypedName",
          "src": "36384:9:2",
          "type": ""
        }, {
          "name": "value3",
          "nodeType": "YulTypedName",
          "src": "36396:6:2",
          "type": ""
        }, {
          "name": "value2",
          "nodeType": "YulTypedName",
          "src": "36404:6:2",
          "type": ""
        }, {
          "name": "value1",
          "nodeType": "YulTypedName",
          "src": "36412:6:2",
          "type": ""
        }, {
          "name": "value0",
          "nodeType": "YulTypedName",
          "src": "36420:6:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "tail",
          "nodeType": "YulTypedName",
          "src": "36431:4:2",
          "type": ""
        }],
        "src": "36236:640:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "36944:79:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "36954:22:2",
            "value": {
              "arguments": [{
                "name": "offset",
                "nodeType": "YulIdentifier",
                "src": "36969:6:2"
              }],
              "functionName": {
                "name": "mload",
                "nodeType": "YulIdentifier",
                "src": "36963:5:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "36963:13:2"
            },
            "variableNames": [{
              "name": "value",
              "nodeType": "YulIdentifier",
              "src": "36954:5:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "name": "value",
                "nodeType": "YulIdentifier",
                "src": "37011:5:2"
              }],
              "functionName": {
                "name": "validator_revert_t_bytes4",
                "nodeType": "YulIdentifier",
                "src": "36985:25:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "36985:32:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "36985:32:2"
          }]
        },
        "name": "abi_decode_t_bytes4_fromMemory",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "offset",
          "nodeType": "YulTypedName",
          "src": "36922:6:2",
          "type": ""
        }, {
          "name": "end",
          "nodeType": "YulTypedName",
          "src": "36930:3:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "value",
          "nodeType": "YulTypedName",
          "src": "36938:5:2",
          "type": ""
        }],
        "src": "36882:141:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "37105:273:2",
          "statements": [{
            "body": {
              "nodeType": "YulBlock",
              "src": "37151:83:2",
              "statements": [{
                "expression": {
                  "arguments": [],
                  "functionName": {
                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                    "nodeType": "YulIdentifier",
                    "src": "37153:77:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "37153:79:2"
                },
                "nodeType": "YulExpressionStatement",
                "src": "37153:79:2"
              }]
            },
            "condition": {
              "arguments": [{
                "arguments": [{
                  "name": "dataEnd",
                  "nodeType": "YulIdentifier",
                  "src": "37126:7:2"
                }, {
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "37135:9:2"
                }],
                "functionName": {
                  "name": "sub",
                  "nodeType": "YulIdentifier",
                  "src": "37122:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "37122:23:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "37147:2:2",
                "type": "",
                "value": "32"
              }],
              "functionName": {
                "name": "slt",
                "nodeType": "YulIdentifier",
                "src": "37118:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "37118:32:2"
            },
            "nodeType": "YulIf",
            "src": "37115:119:2"
          }, {
            "nodeType": "YulBlock",
            "src": "37244:127:2",
            "statements": [{
              "nodeType": "YulVariableDeclaration",
              "src": "37259:15:2",
              "value": {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "37273:1:2",
                "type": "",
                "value": "0"
              },
              "variables": [{
                "name": "offset",
                "nodeType": "YulTypedName",
                "src": "37263:6:2",
                "type": ""
              }]
            }, {
              "nodeType": "YulAssignment",
              "src": "37288:73:2",
              "value": {
                "arguments": [{
                  "arguments": [{
                    "name": "headStart",
                    "nodeType": "YulIdentifier",
                    "src": "37333:9:2"
                  }, {
                    "name": "offset",
                    "nodeType": "YulIdentifier",
                    "src": "37344:6:2"
                  }],
                  "functionName": {
                    "name": "add",
                    "nodeType": "YulIdentifier",
                    "src": "37329:3:2"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "37329:22:2"
                }, {
                  "name": "dataEnd",
                  "nodeType": "YulIdentifier",
                  "src": "37353:7:2"
                }],
                "functionName": {
                  "name": "abi_decode_t_bytes4_fromMemory",
                  "nodeType": "YulIdentifier",
                  "src": "37298:30:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "37298:63:2"
              },
              "variableNames": [{
                "name": "value0",
                "nodeType": "YulIdentifier",
                "src": "37288:6:2"
              }]
            }]
          }]
        },
        "name": "abi_decode_tuple_t_bytes4_fromMemory",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "headStart",
          "nodeType": "YulTypedName",
          "src": "37075:9:2",
          "type": ""
        }, {
          "name": "dataEnd",
          "nodeType": "YulTypedName",
          "src": "37086:7:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "value0",
          "nodeType": "YulTypedName",
          "src": "37098:6:2",
          "type": ""
        }],
        "src": "37029:349:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "37412:152:2",
          "statements": [{
            "expression": {
              "arguments": [{
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "37429:1:2",
                "type": "",
                "value": "0"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "37432:77:2",
                "type": "",
                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "37422:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "37422:88:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "37422:88:2"
          }, {
            "expression": {
              "arguments": [{
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "37526:1:2",
                "type": "",
                "value": "4"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "37529:4:2",
                "type": "",
                "value": "0x31"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "37519:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "37519:15:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "37519:15:2"
          }, {
            "expression": {
              "arguments": [{
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "37550:1:2",
                "type": "",
                "value": "0"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "37553:4:2",
                "type": "",
                "value": "0x24"
              }],
              "functionName": {
                "name": "revert",
                "nodeType": "YulIdentifier",
                "src": "37543:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "37543:15:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "37543:15:2"
          }]
        },
        "name": "panic_error_0x31",
        "nodeType": "YulFunctionDefinition",
        "src": "37384:180:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "37676:76:2",
          "statements": [{
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "memPtr",
                  "nodeType": "YulIdentifier",
                  "src": "37698:6:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "37706:1:2",
                  "type": "",
                  "value": "0"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "37694:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "37694:14:2"
              }, {
                "hexValue": "4552433732313a206d696e7420746f20746865207a65726f2061646472657373",
                "kind": "string",
                "nodeType": "YulLiteral",
                "src": "37710:34:2",
                "type": "",
                "value": "ERC721: mint to the zero address"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "37687:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "37687:58:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "37687:58:2"
          }]
        },
        "name": "store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "memPtr",
          "nodeType": "YulTypedName",
          "src": "37668:6:2",
          "type": ""
        }],
        "src": "37570:182:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "37904:220:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "37914:74:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "37980:3:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "37985:2:2",
                "type": "",
                "value": "32"
              }],
              "functionName": {
                "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "37921:58:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "37921:67:2"
            },
            "variableNames": [{
              "name": "pos",
              "nodeType": "YulIdentifier",
              "src": "37914:3:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "38086:3:2"
              }],
              "functionName": {
                "name": "store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6",
                "nodeType": "YulIdentifier",
                "src": "37997:88:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "37997:93:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "37997:93:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "38099:19:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "38110:3:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "38115:2:2",
                "type": "",
                "value": "32"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "38106:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "38106:12:2"
            },
            "variableNames": [{
              "name": "end",
              "nodeType": "YulIdentifier",
              "src": "38099:3:2"
            }]
          }]
        },
        "name": "abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "pos",
          "nodeType": "YulTypedName",
          "src": "37892:3:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "end",
          "nodeType": "YulTypedName",
          "src": "37900:3:2",
          "type": ""
        }],
        "src": "37758:366:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "38301:248:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "38311:26:2",
            "value": {
              "arguments": [{
                "name": "headStart",
                "nodeType": "YulIdentifier",
                "src": "38323:9:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "38334:2:2",
                "type": "",
                "value": "32"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "38319:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "38319:18:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "38311:4:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "38358:9:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "38369:1:2",
                  "type": "",
                  "value": "0"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "38354:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "38354:17:2"
              }, {
                "arguments": [{
                  "name": "tail",
                  "nodeType": "YulIdentifier",
                  "src": "38377:4:2"
                }, {
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "38383:9:2"
                }],
                "functionName": {
                  "name": "sub",
                  "nodeType": "YulIdentifier",
                  "src": "38373:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "38373:20:2"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "38347:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "38347:47:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "38347:47:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "38403:139:2",
            "value": {
              "arguments": [{
                "name": "tail",
                "nodeType": "YulIdentifier",
                "src": "38537:4:2"
              }],
              "functionName": {
                "name": "abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "38411:124:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "38411:131:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "38403:4:2"
            }]
          }]
        },
        "name": "abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "headStart",
          "nodeType": "YulTypedName",
          "src": "38281:9:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "tail",
          "nodeType": "YulTypedName",
          "src": "38296:4:2",
          "type": ""
        }],
        "src": "38130:419:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "38661:72:2",
          "statements": [{
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "memPtr",
                  "nodeType": "YulIdentifier",
                  "src": "38683:6:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "38691:1:2",
                  "type": "",
                  "value": "0"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "38679:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "38679:14:2"
              }, {
                "hexValue": "4552433732313a20746f6b656e20616c7265616479206d696e746564",
                "kind": "string",
                "nodeType": "YulLiteral",
                "src": "38695:30:2",
                "type": "",
                "value": "ERC721: token already minted"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "38672:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "38672:54:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "38672:54:2"
          }]
        },
        "name": "store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "memPtr",
          "nodeType": "YulTypedName",
          "src": "38653:6:2",
          "type": ""
        }],
        "src": "38555:178:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "38885:220:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "38895:74:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "38961:3:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "38966:2:2",
                "type": "",
                "value": "28"
              }],
              "functionName": {
                "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "38902:58:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "38902:67:2"
            },
            "variableNames": [{
              "name": "pos",
              "nodeType": "YulIdentifier",
              "src": "38895:3:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "39067:3:2"
              }],
              "functionName": {
                "name": "store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57",
                "nodeType": "YulIdentifier",
                "src": "38978:88:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "38978:93:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "38978:93:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "39080:19:2",
            "value": {
              "arguments": [{
                "name": "pos",
                "nodeType": "YulIdentifier",
                "src": "39091:3:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "39096:2:2",
                "type": "",
                "value": "32"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "39087:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "39087:12:2"
            },
            "variableNames": [{
              "name": "end",
              "nodeType": "YulIdentifier",
              "src": "39080:3:2"
            }]
          }]
        },
        "name": "abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "pos",
          "nodeType": "YulTypedName",
          "src": "38873:3:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "end",
          "nodeType": "YulTypedName",
          "src": "38881:3:2",
          "type": ""
        }],
        "src": "38739:366:2"
      }, {
        "body": {
          "nodeType": "YulBlock",
          "src": "39282:248:2",
          "statements": [{
            "nodeType": "YulAssignment",
            "src": "39292:26:2",
            "value": {
              "arguments": [{
                "name": "headStart",
                "nodeType": "YulIdentifier",
                "src": "39304:9:2"
              }, {
                "kind": "number",
                "nodeType": "YulLiteral",
                "src": "39315:2:2",
                "type": "",
                "value": "32"
              }],
              "functionName": {
                "name": "add",
                "nodeType": "YulIdentifier",
                "src": "39300:3:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "39300:18:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "39292:4:2"
            }]
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "39339:9:2"
                }, {
                  "kind": "number",
                  "nodeType": "YulLiteral",
                  "src": "39350:1:2",
                  "type": "",
                  "value": "0"
                }],
                "functionName": {
                  "name": "add",
                  "nodeType": "YulIdentifier",
                  "src": "39335:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "39335:17:2"
              }, {
                "arguments": [{
                  "name": "tail",
                  "nodeType": "YulIdentifier",
                  "src": "39358:4:2"
                }, {
                  "name": "headStart",
                  "nodeType": "YulIdentifier",
                  "src": "39364:9:2"
                }],
                "functionName": {
                  "name": "sub",
                  "nodeType": "YulIdentifier",
                  "src": "39354:3:2"
                },
                "nodeType": "YulFunctionCall",
                "src": "39354:20:2"
              }],
              "functionName": {
                "name": "mstore",
                "nodeType": "YulIdentifier",
                "src": "39328:6:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "39328:47:2"
            },
            "nodeType": "YulExpressionStatement",
            "src": "39328:47:2"
          }, {
            "nodeType": "YulAssignment",
            "src": "39384:139:2",
            "value": {
              "arguments": [{
                "name": "tail",
                "nodeType": "YulIdentifier",
                "src": "39518:4:2"
              }],
              "functionName": {
                "name": "abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack",
                "nodeType": "YulIdentifier",
                "src": "39392:124:2"
              },
              "nodeType": "YulFunctionCall",
              "src": "39392:131:2"
            },
            "variableNames": [{
              "name": "tail",
              "nodeType": "YulIdentifier",
              "src": "39384:4:2"
            }]
          }]
        },
        "name": "abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed",
        "nodeType": "YulFunctionDefinition",
        "parameters": [{
          "name": "headStart",
          "nodeType": "YulTypedName",
          "src": "39262:9:2",
          "type": ""
        }],
        "returnVariables": [{
          "name": "tail",
          "nodeType": "YulTypedName",
          "src": "39277:4:2",
          "type": ""
        }],
        "src": "39111:419:2"
      }]
    },
    "contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_array$_t_uint256_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encodeUpdatedPos_t_uint256_to_t_uint256(value0, pos) -> updatedPos {\n        abi_encode_t_uint256_to_t_uint256(value0, pos)\n        updatedPos := add(pos, 0x20)\n    }\n\n    function array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // uint256[] -> uint256[]\n    function abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_uint256_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack(pos, length)\n        let baseRef := array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_uint256_to_t_uint256(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory(src, dst, length) {\n        calldatacopy(dst, src, length)\n        // clear end\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_string_memory_ptr(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_string_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory(src, dst, length)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: caller is not the owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function store_literal_in_memory_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approved query for nonex\")\n\n        mstore(add(memPtr, 32), \"istent token\")\n\n    }\n\n    function abi_encode_t_stringliteral_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 44)\n        store_literal_in_memory_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approval to current owne\")\n\n        mstore(add(memPtr, 32), \"r\")\n\n    }\n\n    function abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\n        store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve caller is not ow\")\n\n        mstore(add(memPtr, 32), \"ner nor approved for all\")\n\n    }\n\n    function abi_encode_t_stringliteral_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 56)\n        store_literal_in_memory_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer caller is not o\")\n\n        mstore(add(memPtr, 32), \"wner nor approved\")\n\n    }\n\n    function abi_encode_t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 49)\n        store_literal_in_memory_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721Enumerable: owner index ou\")\n\n        mstore(add(memPtr, 32), \"t of bounds\")\n\n    }\n\n    function abi_encode_t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 43)\n        store_literal_in_memory_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x > (maxValue - y)\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n        sum := add(x, y)\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x != 0 and y > (maxValue / x)\n        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }\n\n        product := mul(x, y)\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function store_literal_in_memory_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721Enumerable: global index o\")\n\n        mstore(add(memPtr, 32), \"ut of bounds\")\n\n    }\n\n    function abi_encode_t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 44)\n        store_literal_in_memory_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_7481f3df2a424c0755a1ad2356614e9a5a358d461ea2eae1f89cb21cbad00397(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: owner query for nonexist\")\n\n        mstore(add(memPtr, 32), \"ent token\")\n\n    }\n\n    function abi_encode_t_stringliteral_7481f3df2a424c0755a1ad2356614e9a5a358d461ea2eae1f89cb21cbad00397_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 41)\n        store_literal_in_memory_7481f3df2a424c0755a1ad2356614e9a5a358d461ea2eae1f89cb21cbad00397(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_7481f3df2a424c0755a1ad2356614e9a5a358d461ea2eae1f89cb21cbad00397__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7481f3df2a424c0755a1ad2356614e9a5a358d461ea2eae1f89cb21cbad00397_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: balance query for the ze\")\n\n        mstore(add(memPtr, 32), \"ro address\")\n\n    }\n\n    function abi_encode_t_stringliteral_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 42)\n        store_literal_in_memory_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve to caller\")\n\n    }\n\n    function abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 25)\n        store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721Metadata: URI query for no\")\n\n        mstore(add(memPtr, 32), \"nexistent token\")\n\n    }\n\n    function abi_encode_t_stringliteral_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 47)\n        store_literal_in_memory_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    // string -> string\n    function abi_encode_t_string_storage_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> ret {\n        let slotValue := sload(value)\n        let length := extract_byte_array_length(slotValue)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        switch and(slotValue, 1)\n        case 0 {\n            // short byte array\n            mstore(pos, and(slotValue, not(0xff)))\n            ret := add(pos, length)\n        }\n        case 1 {\n            // long byte array\n            let dataPos := array_dataslot_t_string_storage(value)\n            let i := 0\n            for { } lt(i, length) { i := add(i, 0x20) } {\n                mstore(add(pos, i), sload(dataPos))\n                dataPos := add(dataPos, 1)\n            }\n            ret := add(pos, length)\n        }\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr_t_string_storage__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value2, value1, value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        pos := abi_encode_t_string_storage_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value2,  pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(memPtr) {\n\n        mstore(add(memPtr, 0), \"Ownable: new owner is the zero a\")\n\n        mstore(add(memPtr, 32), \"ddress\")\n\n    }\n\n    function abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: operator query for nonex\")\n\n        mstore(add(memPtr, 32), \"istent token\")\n\n    }\n\n    function abi_encode_t_stringliteral_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 44)\n        store_literal_in_memory_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_a01073130a885d6c1c1af6ac75fc3b1c4f9403c235362962bbf528e2bd87d950(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer of token that i\")\n\n        mstore(add(memPtr, 32), \"s not own\")\n\n    }\n\n    function abi_encode_t_stringliteral_a01073130a885d6c1c1af6ac75fc3b1c4f9403c235362962bbf528e2bd87d950_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 41)\n        store_literal_in_memory_a01073130a885d6c1c1af6ac75fc3b1c4f9403c235362962bbf528e2bd87d950(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_a01073130a885d6c1c1af6ac75fc3b1c4f9403c235362962bbf528e2bd87d950__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_a01073130a885d6c1c1af6ac75fc3b1c4f9403c235362962bbf528e2bd87d950_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to the zero add\")\n\n        mstore(add(memPtr, 32), \"ress\")\n\n    }\n\n    function abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        if lt(x, y) { panic_error_0x11() }\n\n        diff := sub(x, y)\n    }\n\n    function store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to non ERC721Re\")\n\n        mstore(add(memPtr, 32), \"ceiver implementer\")\n\n    }\n\n    function abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 50)\n        store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function mod_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value3,  tail)\n\n    }\n\n    function abi_decode_t_bytes4_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x31() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x31)\n        revert(0, 0x24)\n    }\n\n    function store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: mint to the zero address\")\n\n    }\n\n    function abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: token already minted\")\n\n    }\n\n    function abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 28)\n        store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n",
    "id": 2,
    "language": "Yul",
    "name": "#utility.yul"
  }],
  "sourceMap": "43211:2884:1:-:0;;;43332:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;43396:10;43374:32;;43438:4;43411:31;;43478:1;43447:32;;43505:5;43484:26;;;;;;;;;;;;;;;;;;;;43519:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;43551:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;43585:58;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;43700:103;;;;;;;;;;43721:5;21425:116;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;43728:7;21425:116;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21500:5;21492;:13;;;;;;;;;;;;:::i;:::-;;21526:7;21516;:17;;;;;;;;;;;;:::i;:::-;;21425:116;;41692:23;41702:12;:10;;;:12;;:::i;:::-;41692:9;;;:23;;:::i;:::-;43744:24:::1;43755:12;43744:24;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:10;;;:24;;:::i;:::-;43211:2884:::0;;20087:98;20140:7;20167:10;20160:17;;20087:98;:::o;42904:173::-;42960:16;42979:6;;;;;;;;;;;42960:25;;43005:8;42996:6;;:17;;;;;;;;;;;;;;;;;;43060:8;43029:40;;43050:8;43029:40;;;;;;;;;;;;42949:128;42904:173;:::o;45461:98::-;42035:12;:10;;;:12;;:::i;:::-;42024:23;;:7;:5;;;:7;;:::i;:::-;:23;;;42016:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;45542:11:::1;45532:7;:21;;;;;;;;;;;;:::i;:::-;;45461:98:::0;:::o;41804:87::-;41850:7;41877:6;;;;;;;;;;;41870:13;;41804:87;:::o;43211:2884::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:180:2:-;55:77;52:1;45:88;152:4;149:1;142:15;176:4;173:1;166:15;193:320;237:6;274:1;268:4;264:12;254:22;;321:1;315:4;311:12;342:18;332:81;;398:4;390:6;386:17;376:27;;332:81;460:2;452:6;449:14;429:18;426:38;423:84;;479:18;;:::i;:::-;423:84;244:269;193:320;;;:::o;519:169::-;603:11;637:6;632:3;625:19;677:4;672:3;668:14;653:29;;519:169;;;;:::o;694:182::-;834:34;830:1;822:6;818:14;811:58;694:182;:::o;882:366::-;1024:3;1045:67;1109:2;1104:3;1045:67;:::i;:::-;1038:74;;1121:93;1210:3;1121:93;:::i;:::-;1239:2;1234:3;1230:12;1223:19;;882:366;;;:::o;1254:419::-;1420:4;1458:2;1447:9;1443:18;1435:26;;1507:9;1501:4;1497:20;1493:1;1482:9;1478:17;1471:47;1535:131;1661:4;1535:131;:::i;:::-;1527:139;;1254:419;;;:::o;43211:2884:1:-;;;;;;;",
  "deployedSourceMap": "43211:2884:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;34666:224;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;45693:73;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;22558:100;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;24117:221;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;23640:411;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;43374:32;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;35306:113;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;43585:58;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;43447:32;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;25007:339;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;34974:256;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;45872:100;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;45978:114;;;:::i;:::-;;43945:503;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;25417:185;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;44454:348;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;45253:80;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;45772:93;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;35496:233;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;45461:98;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;43484:26;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;22252:239;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;43306:21;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;21982:208;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;42455:94;;;;;;;;;;;;;:::i;:::-;;45339:116;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;41804:87;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;22727:104;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;24410:295;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;43551:29;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;25673:328;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;43332:37;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;44808:423;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;43519:27;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;43411:31;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;43650:43;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;45565:122;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;24776:164;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;42704:192;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;34666:224;34768:4;34807:35;34792:50;;;:11;:50;;;;:90;;;;34846:36;34870:11;34846:23;:36::i;:::-;34792:90;34785:97;;34666:224;;;:::o;45693:73::-;42035:12;:10;:12::i;:::-;42024:23;;:7;:5;:7::i;:::-;:23;;;42016:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;45754:6:::1;45745;;:15;;;;;;;;;;;;;;;;;;45693:73:::0;:::o;22558:100::-;22612:13;22645:5;22638:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;22558:100;:::o;24117:221::-;24193:7;24221:16;24229:7;24221;:16::i;:::-;24213:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;24306:15;:24;24322:7;24306:24;;;;;;;;;;;;;;;;;;;;;24299:31;;24117:221;;;:::o;23640:411::-;23721:13;23737:23;23752:7;23737:14;:23::i;:::-;23721:39;;23785:5;23779:11;;:2;:11;;;23771:57;;;;;;;;;;;;:::i;:::-;;;;;;;;;23879:5;23863:21;;:12;:10;:12::i;:::-;:21;;;:62;;;;23888:37;23905:5;23912:12;:10;:12::i;:::-;23888:16;:37::i;:::-;23863:62;23841:168;;;;;;;;;;;;:::i;:::-;;;;;;;;;24022:21;24031:2;24035:7;24022:8;:21::i;:::-;23710:341;23640:411;;:::o;43374:32::-;;;;:::o;35306:113::-;35367:7;35394:10;:17;;;;35387:24;;35306:113;:::o;43585:58::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;43447:32::-;;;;:::o;25007:339::-;25202:41;25221:12;:10;:12::i;:::-;25235:7;25202:18;:41::i;:::-;25194:103;;;;;;;;;;;;:::i;:::-;;;;;;;;;25310:28;25320:4;25326:2;25330:7;25310:9;:28::i;:::-;25007:339;;;:::o;34974:256::-;35071:7;35107:23;35124:5;35107:16;:23::i;:::-;35099:5;:31;35091:87;;;;;;;;;;;;:::i;:::-;;;;;;;;;35196:12;:19;35209:5;35196:19;;;;;;;;;;;;;;;:26;35216:5;35196:26;;;;;;;;;;;;35189:33;;34974:256;;;;:::o;45872:100::-;42035:12;:10;:12::i;:::-;42024:23;;:7;:5;:7::i;:::-;:23;;;42016:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;45961:5:::1;45940:11;:18;45952:5;45940:18;;;;;;;;;;;;;;;;:26;;;;;;;;;;;;;;;;;;45872:100:::0;:::o;45978:114::-;42035:12;:10;:12::i;:::-;42024:23;;:7;:5;:7::i;:::-;:23;;;42016:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;46046:10:::1;46038:24;;:47;46063:21;46038:47;;;;;;;;;;;;;;;;;;;;;;;46030:56;;;::::0;::::1;;45978:114::o:0;43945:503::-;44015:14;44032:13;:11;:13::i;:::-;44015:30;;44099:1;44085:11;:15;44077:24;;;;;;44131:13;;44116:11;:28;;44108:37;;;;;;44184:9;;44169:11;44160:6;:20;;;;:::i;:::-;:33;;44152:42;;;;;;44221:7;:5;:7::i;:::-;44207:21;;:10;:21;;;44203:146;;44271:4;44244:31;;:11;:23;44256:10;44244:23;;;;;;;;;;;;;;;;;;;;;;;;;:31;;;44241:101;;44318:11;44311:4;;:18;;;;:::i;:::-;44298:9;:31;;44290:40;;;;;;44241:101;44203:146;44362:9;44374:1;44362:13;;44357:86;44382:11;44377:1;:16;44357:86;;44409:26;44419:3;44433:1;44424:6;:10;;;;:::i;:::-;44409:9;:26::i;:::-;44395:3;;;;;:::i;:::-;;;;44357:86;;;;44008:440;43945:503;;:::o;25417:185::-;25555:39;25572:4;25578:2;25582:7;25555:39;;;;;;;;;;;;:16;:39::i;:::-;25417:185;;;:::o;44454:348::-;44529:16;44557:23;44583:17;44593:6;44583:9;:17::i;:::-;44557:43;;44607:25;44649:15;44635:30;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;44607:58;;44677:9;44672:103;44692:15;44688:1;:19;44672:103;;;44737:30;44757:6;44765:1;44737:19;:30::i;:::-;44723:8;44732:1;44723:11;;;;;;;;:::i;:::-;;;;;;;:44;;;;;44709:3;;;;;:::i;:::-;;;;44672:103;;;;44788:8;44781:15;;;;44454:348;;;:::o;45253:80::-;42035:12;:10;:12::i;:::-;42024:23;;:7;:5;:7::i;:::-;:23;;;42016:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;45319:8:::1;45312:4;:15;;;;45253:80:::0;:::o;45772:93::-;42035:12;:10;:12::i;:::-;42024:23;;:7;:5;:7::i;:::-;:23;;;42016:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;45855:4:::1;45834:11;:18;45846:5;45834:18;;;;;;;;;;;;;;;;:25;;;;;;;;;;;;;;;;;;45772:93:::0;:::o;35496:233::-;35571:7;35607:30;:28;:30::i;:::-;35599:5;:38;35591:95;;;;;;;;;;;;:::i;:::-;;;;;;;;;35704:10;35715:5;35704:17;;;;;;;;:::i;:::-;;;;;;;;;;35697:24;;35496:233;;;:::o;45461:98::-;42035:12;:10;:12::i;:::-;42024:23;;:7;:5;:7::i;:::-;:23;;;42016:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;45542:11:::1;45532:7;:21;;;;;;;;;;;;:::i;:::-;;45461:98:::0;:::o;43484:26::-;;;;;;;;;;;;;:::o;22252:239::-;22324:7;22344:13;22360:7;:16;22368:7;22360:16;;;;;;;;;;;;;;;;;;;;;22344:32;;22412:1;22395:19;;:5;:19;;;22387:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;22478:5;22471:12;;;22252:239;;;:::o;43306:21::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;21982:208::-;22054:7;22099:1;22082:19;;:5;:19;;;22074:74;;;;;;;;;;;;:::i;:::-;;;;;;;;;22166:9;:16;22176:5;22166:16;;;;;;;;;;;;;;;;22159:23;;21982:208;;;:::o;42455:94::-;42035:12;:10;:12::i;:::-;42024:23;;:7;:5;:7::i;:::-;:23;;;42016:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;42520:21:::1;42538:1;42520:9;:21::i;:::-;42455:94::o:0;45339:116::-;42035:12;:10;:12::i;:::-;42024:23;;:7;:5;:7::i;:::-;:23;;;42016:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;45432:17:::1;45416:13;:33;;;;45339:116:::0;:::o;41804:87::-;41850:7;41877:6;;;;;;;;;;;41870:13;;41804:87;:::o;22727:104::-;22783:13;22816:7;22809:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;22727:104;:::o;24410:295::-;24525:12;:10;:12::i;:::-;24513:24;;:8;:24;;;24505:62;;;;;;;;;;;;:::i;:::-;;;;;;;;;24625:8;24580:18;:32;24599:12;:10;:12::i;:::-;24580:32;;;;;;;;;;;;;;;:42;24613:8;24580:42;;;;;;;;;;;;;;;;:53;;;;;;;;;;;;;;;;;;24678:8;24649:48;;24664:12;:10;:12::i;:::-;24649:48;;;24688:8;24649:48;;;;;;:::i;:::-;;;;;;;;24410:295;;:::o;43551:29::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;25673:328::-;25848:41;25867:12;:10;:12::i;:::-;25881:7;25848:18;:41::i;:::-;25840:103;;;;;;;;;;;;:::i;:::-;;;;;;;;;25954:39;25968:4;25974:2;25978:7;25987:5;25954:13;:39::i;:::-;25673:328;;;;:::o;43332:37::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;44808:423::-;44906:13;44947:16;44955:7;44947;:16::i;:::-;44931:97;;;;;;;;;;;;:::i;:::-;;;;;;;;;45037:28;45068:10;:8;:10::i;:::-;45037:41;;45123:1;45098:14;45092:28;:32;:133;;;;;;;;;;;;;;;;;45160:14;45176:18;:7;:16;:18::i;:::-;45196:13;45143:67;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;45092:133;45085:140;;;44808:423;;;:::o;43519:27::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;43411:31::-;;;;:::o;43650:43::-;;;;;;;;;;;;;;;;;;;;;;:::o;45565:122::-;42035:12;:10;:12::i;:::-;42024:23;;:7;:5;:7::i;:::-;:23;;;42016:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;45664:17:::1;45648:13;:33;;;;;;;;;;;;:::i;:::-;;45565:122:::0;:::o;24776:164::-;24873:4;24897:18;:25;24916:5;24897:25;;;;;;;;;;;;;;;:35;24923:8;24897:35;;;;;;;;;;;;;;;;;;;;;;;;;24890:42;;24776:164;;;;:::o;42704:192::-;42035:12;:10;:12::i;:::-;42024:23;;:7;:5;:7::i;:::-;:23;;;42016:68;;;;;;;;;;;;:::i;:::-;;;;;;;;;42813:1:::1;42793:22;;:8;:22;;::::0;42785:73:::1;;;;;;;;;;;;:::i;:::-;;;;;;;;;42869:19;42879:8;42869:9;:19::i;:::-;42704:192:::0;:::o;21613:305::-;21715:4;21767:25;21752:40;;;:11;:40;;;;:105;;;;21824:33;21809:48;;;:11;:48;;;;21752:105;:158;;;;21874:36;21898:11;21874:23;:36::i;:::-;21752:158;21732:178;;21613:305;;;:::o;20087:98::-;20140:7;20167:10;20160:17;;20087:98;:::o;27511:127::-;27576:4;27628:1;27600:30;;:7;:16;27608:7;27600:16;;;;;;;;;;;;;;;;;;;;;:30;;;;27593:37;;27511:127;;;:::o;31493:174::-;31595:2;31568:15;:24;31584:7;31568:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;31651:7;31647:2;31613:46;;31622:23;31637:7;31622:14;:23::i;:::-;31613:46;;;;;;;;;;;;31493:174;;:::o;27805:348::-;27898:4;27923:16;27931:7;27923;:16::i;:::-;27915:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;27999:13;28015:23;28030:7;28015:14;:23::i;:::-;27999:39;;28068:5;28057:16;;:7;:16;;;:51;;;;28101:7;28077:31;;:20;28089:7;28077:11;:20::i;:::-;:31;;;28057:51;:87;;;;28112:32;28129:5;28136:7;28112:16;:32::i;:::-;28057:87;28049:96;;;27805:348;;;;:::o;30797:578::-;30956:4;30929:31;;:23;30944:7;30929:14;:23::i;:::-;:31;;;30921:85;;;;;;;;;;;;:::i;:::-;;;;;;;;;31039:1;31025:16;;:2;:16;;;31017:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;31095:39;31116:4;31122:2;31126:7;31095:20;:39::i;:::-;31199:29;31216:1;31220:7;31199:8;:29::i;:::-;31260:1;31241:9;:15;31251:4;31241:15;;;;;;;;;;;;;;;;:20;;;;;;;:::i;:::-;;;;;;;;31289:1;31272:9;:13;31282:2;31272:13;;;;;;;;;;;;;;;;:18;;;;;;;:::i;:::-;;;;;;;;31320:2;31301:7;:16;31309:7;31301:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;31359:7;31355:2;31340:27;;31349:4;31340:27;;;;;;;;;;;;30797:578;;;:::o;28495:110::-;28571:26;28581:2;28585:7;28571:26;;;;;;;;;;;;:9;:26::i;:::-;28495:110;;:::o;42904:173::-;42960:16;42979:6;;;;;;;;;;;42960:25;;43005:8;42996:6;;:17;;;;;;;;;;;;;;;;;;43060:8;43029:40;;43050:8;43029:40;;;;;;;;;;;;42949:128;42904:173;:::o;26883:315::-;27040:28;27050:4;27056:2;27060:7;27040:9;:28::i;:::-;27087:48;27110:4;27116:2;27120:7;27129:5;27087:22;:48::i;:::-;27079:111;;;;;;;;;;;;:::i;:::-;;;;;;;;;26883:315;;;;:::o;43824:102::-;43884:13;43913:7;43906:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;43824:102;:::o;7919:723::-;7975:13;8205:1;8196:5;:10;8192:53;;8223:10;;;;;;;;;;;;;;;;;;;;;8192:53;8255:12;8270:5;8255:20;;8286:14;8311:78;8326:1;8318:4;:9;8311:78;;8344:8;;;;;:::i;:::-;;;;8375:2;8367:10;;;;;:::i;:::-;;;8311:78;;;8399:19;8431:6;8421:17;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8399:39;;8449:154;8465:1;8456:5;:10;8449:154;;8493:1;8483:11;;;;;:::i;:::-;;;8560:2;8552:5;:10;;;;:::i;:::-;8539:2;:24;;;;:::i;:::-;8526:39;;8509:6;8516;8509:14;;;;;;;;:::i;:::-;;;;;:56;;;;;;;;;;;8589:2;8580:11;;;;;:::i;:::-;;;8449:154;;;8627:6;8613:21;;;;;7919:723;;;;:::o;7444:157::-;7529:4;7568:25;7553:40;;;:11;:40;;;;7546:47;;7444:157;;;:::o;36342:589::-;36486:45;36513:4;36519:2;36523:7;36486:26;:45::i;:::-;36564:1;36548:18;;:4;:18;;;36544:187;;36583:40;36615:7;36583:31;:40::i;:::-;36544:187;;;36653:2;36645:10;;:4;:10;;;36641:90;;36672:47;36705:4;36711:7;36672:32;:47::i;:::-;36641:90;36544:187;36759:1;36745:16;;:2;:16;;;36741:183;;36778:45;36815:7;36778:36;:45::i;:::-;36741:183;;;36851:4;36845:10;;:2;:10;;;36841:83;;36872:40;36900:2;36904:7;36872:27;:40::i;:::-;36841:83;36741:183;36342:589;;;:::o;28832:321::-;28962:18;28968:2;28972:7;28962:5;:18::i;:::-;29013:54;29044:1;29048:2;29052:7;29061:5;29013:22;:54::i;:::-;28991:154;;;;;;;;;;;;:::i;:::-;;;;;;;;;28832:321;;;:::o;32232:799::-;32387:4;32408:15;:2;:13;;;:15::i;:::-;32404:620;;;32460:2;32444:36;;;32481:12;:10;:12::i;:::-;32495:4;32501:7;32510:5;32444:72;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;32440:529;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;32703:1;32686:6;:13;:18;32682:272;;32729:60;;;;;;;;;;:::i;:::-;;;;;;;;32682:272;32904:6;32898:13;32889:6;32885:2;32881:15;32874:38;32440:529;32577:41;;;32567:51;;;:6;:51;;;;32560:58;;;;;32404:620;33008:4;33001:11;;32232:799;;;;;;;:::o;33603:126::-;;;;:::o;37654:164::-;37758:10;:17;;;;37731:15;:24;37747:7;37731:24;;;;;;;;;;;:44;;;;37786:10;37802:7;37786:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;37654:164;:::o;38445:988::-;38711:22;38761:1;38736:22;38753:4;38736:16;:22::i;:::-;:26;;;;:::i;:::-;38711:51;;38773:18;38794:17;:26;38812:7;38794:26;;;;;;;;;;;;38773:47;;38941:14;38927:10;:28;38923:328;;38972:19;38994:12;:18;39007:4;38994:18;;;;;;;;;;;;;;;:34;39013:14;38994:34;;;;;;;;;;;;38972:56;;39078:11;39045:12;:18;39058:4;39045:18;;;;;;;;;;;;;;;:30;39064:10;39045:30;;;;;;;;;;;:44;;;;39195:10;39162:17;:30;39180:11;39162:30;;;;;;;;;;;:43;;;;38957:294;38923:328;39347:17;:26;39365:7;39347:26;;;;;;;;;;;39340:33;;;39391:12;:18;39404:4;39391:18;;;;;;;;;;;;;;;:34;39410:14;39391:34;;;;;;;;;;;39384:41;;;38526:907;;38445:988;;:::o;39728:1079::-;39981:22;40026:1;40006:10;:17;;;;:21;;;;:::i;:::-;39981:46;;40038:18;40059:15;:24;40075:7;40059:24;;;;;;;;;;;;40038:45;;40410:19;40432:10;40443:14;40432:26;;;;;;;;:::i;:::-;;;;;;;;;;40410:48;;40496:11;40471:10;40482;40471:22;;;;;;;;:::i;:::-;;;;;;;;;:36;;;;40607:10;40576:15;:28;40592:11;40576:28;;;;;;;;;;;:41;;;;40748:15;:24;40764:7;40748:24;;;;;;;;;;;40741:31;;;40783:10;:16;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;39799:1008;;;39728:1079;:::o;37232:221::-;37317:14;37334:20;37351:2;37334:16;:20::i;:::-;37317:37;;37392:7;37365:12;:16;37378:2;37365:16;;;;;;;;;;;;;;;:24;37382:6;37365:24;;;;;;;;;;;:34;;;;37439:6;37410:17;:26;37428:7;37410:26;;;;;;;;;;;:35;;;;37306:147;37232:221;;:::o;29489:382::-;29583:1;29569:16;;:2;:16;;;29561:61;;;;;;;;;;;;:::i;:::-;;;;;;;;;29642:16;29650:7;29642;:16::i;:::-;29641:17;29633:58;;;;;;;;;;;;:::i;:::-;;;;;;;;;29704:45;29733:1;29737:2;29741:7;29704:20;:45::i;:::-;29779:1;29762:9;:13;29772:2;29762:13;;;;;;;;;;;;;;;;:18;;;;;;;:::i;:::-;;;;;;;;29810:2;29791:7;:16;29799:7;29791:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;29855:7;29851:2;29830:33;;29847:1;29830:33;;;;;;;;;;;;29489:382;;:::o;10444:387::-;10504:4;10712:12;10779:7;10767:20;10759:28;;10822:1;10815:4;:8;10808:15;;;10444:387;;;:::o;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;7:75:2:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:116::-;1588:21;1603:5;1588:21;:::i;:::-;1581:5;1578:32;1568:60;;1624:1;1621;1614:12;1568:60;1518:116;:::o;1640:133::-;1683:5;1721:6;1708:20;1699:29;;1737:30;1761:5;1737:30;:::i;:::-;1640:133;;;;:::o;1779:323::-;1835:6;1884:2;1872:9;1863:7;1859:23;1855:32;1852:119;;;1890:79;;:::i;:::-;1852:119;2010:1;2035:50;2077:7;2068:6;2057:9;2053:22;2035:50;:::i;:::-;2025:60;;1981:114;1779:323;;;;:::o;2108:99::-;2160:6;2194:5;2188:12;2178:22;;2108:99;;;:::o;2213:169::-;2297:11;2331:6;2326:3;2319:19;2371:4;2366:3;2362:14;2347:29;;2213:169;;;;:::o;2388:307::-;2456:1;2466:113;2480:6;2477:1;2474:13;2466:113;;;2565:1;2560:3;2556:11;2550:18;2546:1;2541:3;2537:11;2530:39;2502:2;2499:1;2495:10;2490:15;;2466:113;;;2597:6;2594:1;2591:13;2588:101;;;2677:1;2668:6;2663:3;2659:16;2652:27;2588:101;2437:258;2388:307;;;:::o;2701:102::-;2742:6;2793:2;2789:7;2784:2;2777:5;2773:14;2769:28;2759:38;;2701:102;;;:::o;2809:364::-;2897:3;2925:39;2958:5;2925:39;:::i;:::-;2980:71;3044:6;3039:3;2980:71;:::i;:::-;2973:78;;3060:52;3105:6;3100:3;3093:4;3086:5;3082:16;3060:52;:::i;:::-;3137:29;3159:6;3137:29;:::i;:::-;3132:3;3128:39;3121:46;;2901:272;2809:364;;;;:::o;3179:313::-;3292:4;3330:2;3319:9;3315:18;3307:26;;3379:9;3373:4;3369:20;3365:1;3354:9;3350:17;3343:47;3407:78;3480:4;3471:6;3407:78;:::i;:::-;3399:86;;3179:313;;;;:::o;3498:77::-;3535:7;3564:5;3553:16;;3498:77;;;:::o;3581:122::-;3654:24;3672:5;3654:24;:::i;:::-;3647:5;3644:35;3634:63;;3693:1;3690;3683:12;3634:63;3581:122;:::o;3709:139::-;3755:5;3793:6;3780:20;3771:29;;3809:33;3836:5;3809:33;:::i;:::-;3709:139;;;;:::o;3854:329::-;3913:6;3962:2;3950:9;3941:7;3937:23;3933:32;3930:119;;;3968:79;;:::i;:::-;3930:119;4088:1;4113:53;4158:7;4149:6;4138:9;4134:22;4113:53;:::i;:::-;4103:63;;4059:117;3854:329;;;;:::o;4189:126::-;4226:7;4266:42;4259:5;4255:54;4244:65;;4189:126;;;:::o;4321:96::-;4358:7;4387:24;4405:5;4387:24;:::i;:::-;4376:35;;4321:96;;;:::o;4423:118::-;4510:24;4528:5;4510:24;:::i;:::-;4505:3;4498:37;4423:118;;:::o;4547:222::-;4640:4;4678:2;4667:9;4663:18;4655:26;;4691:71;4759:1;4748:9;4744:17;4735:6;4691:71;:::i;:::-;4547:222;;;;:::o;4775:122::-;4848:24;4866:5;4848:24;:::i;:::-;4841:5;4838:35;4828:63;;4887:1;4884;4877:12;4828:63;4775:122;:::o;4903:139::-;4949:5;4987:6;4974:20;4965:29;;5003:33;5030:5;5003:33;:::i;:::-;4903:139;;;;:::o;5048:474::-;5116:6;5124;5173:2;5161:9;5152:7;5148:23;5144:32;5141:119;;;5179:79;;:::i;:::-;5141:119;5299:1;5324:53;5369:7;5360:6;5349:9;5345:22;5324:53;:::i;:::-;5314:63;;5270:117;5426:2;5452:53;5497:7;5488:6;5477:9;5473:22;5452:53;:::i;:::-;5442:63;;5397:118;5048:474;;;;;:::o;5528:118::-;5615:24;5633:5;5615:24;:::i;:::-;5610:3;5603:37;5528:118;;:::o;5652:222::-;5745:4;5783:2;5772:9;5768:18;5760:26;;5796:71;5864:1;5853:9;5849:17;5840:6;5796:71;:::i;:::-;5652:222;;;;:::o;5880:619::-;5957:6;5965;5973;6022:2;6010:9;6001:7;5997:23;5993:32;5990:119;;;6028:79;;:::i;:::-;5990:119;6148:1;6173:53;6218:7;6209:6;6198:9;6194:22;6173:53;:::i;:::-;6163:63;;6119:117;6275:2;6301:53;6346:7;6337:6;6326:9;6322:22;6301:53;:::i;:::-;6291:63;;6246:118;6403:2;6429:53;6474:7;6465:6;6454:9;6450:22;6429:53;:::i;:::-;6419:63;;6374:118;5880:619;;;;;:::o;6505:329::-;6564:6;6613:2;6601:9;6592:7;6588:23;6584:32;6581:119;;;6619:79;;:::i;:::-;6581:119;6739:1;6764:53;6809:7;6800:6;6789:9;6785:22;6764:53;:::i;:::-;6754:63;;6710:117;6505:329;;;;:::o;6840:114::-;6907:6;6941:5;6935:12;6925:22;;6840:114;;;:::o;6960:184::-;7059:11;7093:6;7088:3;7081:19;7133:4;7128:3;7124:14;7109:29;;6960:184;;;;:::o;7150:132::-;7217:4;7240:3;7232:11;;7270:4;7265:3;7261:14;7253:22;;7150:132;;;:::o;7288:108::-;7365:24;7383:5;7365:24;:::i;:::-;7360:3;7353:37;7288:108;;:::o;7402:179::-;7471:10;7492:46;7534:3;7526:6;7492:46;:::i;:::-;7570:4;7565:3;7561:14;7547:28;;7402:179;;;;:::o;7587:113::-;7657:4;7689;7684:3;7680:14;7672:22;;7587:113;;;:::o;7736:732::-;7855:3;7884:54;7932:5;7884:54;:::i;:::-;7954:86;8033:6;8028:3;7954:86;:::i;:::-;7947:93;;8064:56;8114:5;8064:56;:::i;:::-;8143:7;8174:1;8159:284;8184:6;8181:1;8178:13;8159:284;;;8260:6;8254:13;8287:63;8346:3;8331:13;8287:63;:::i;:::-;8280:70;;8373:60;8426:6;8373:60;:::i;:::-;8363:70;;8219:224;8206:1;8203;8199:9;8194:14;;8159:284;;;8163:14;8459:3;8452:10;;7860:608;;;7736:732;;;;:::o;8474:373::-;8617:4;8655:2;8644:9;8640:18;8632:26;;8704:9;8698:4;8694:20;8690:1;8679:9;8675:17;8668:47;8732:108;8835:4;8826:6;8732:108;:::i;:::-;8724:116;;8474:373;;;;:::o;8853:117::-;8962:1;8959;8952:12;8976:117;9085:1;9082;9075:12;9099:180;9147:77;9144:1;9137:88;9244:4;9241:1;9234:15;9268:4;9265:1;9258:15;9285:281;9368:27;9390:4;9368:27;:::i;:::-;9360:6;9356:40;9498:6;9486:10;9483:22;9462:18;9450:10;9447:34;9444:62;9441:88;;;9509:18;;:::i;:::-;9441:88;9549:10;9545:2;9538:22;9328:238;9285:281;;:::o;9572:129::-;9606:6;9633:20;;:::i;:::-;9623:30;;9662:33;9690:4;9682:6;9662:33;:::i;:::-;9572:129;;;:::o;9707:308::-;9769:4;9859:18;9851:6;9848:30;9845:56;;;9881:18;;:::i;:::-;9845:56;9919:29;9941:6;9919:29;:::i;:::-;9911:37;;10003:4;9997;9993:15;9985:23;;9707:308;;;:::o;10021:154::-;10105:6;10100:3;10095;10082:30;10167:1;10158:6;10153:3;10149:16;10142:27;10021:154;;;:::o;10181:412::-;10259:5;10284:66;10300:49;10342:6;10300:49;:::i;:::-;10284:66;:::i;:::-;10275:75;;10373:6;10366:5;10359:21;10411:4;10404:5;10400:16;10449:3;10440:6;10435:3;10431:16;10428:25;10425:112;;;10456:79;;:::i;:::-;10425:112;10546:41;10580:6;10575:3;10570;10546:41;:::i;:::-;10265:328;10181:412;;;;;:::o;10613:340::-;10669:5;10718:3;10711:4;10703:6;10699:17;10695:27;10685:122;;10726:79;;:::i;:::-;10685:122;10843:6;10830:20;10868:79;10943:3;10935:6;10928:4;10920:6;10916:17;10868:79;:::i;:::-;10859:88;;10675:278;10613:340;;;;:::o;10959:509::-;11028:6;11077:2;11065:9;11056:7;11052:23;11048:32;11045:119;;;11083:79;;:::i;:::-;11045:119;11231:1;11220:9;11216:17;11203:31;11261:18;11253:6;11250:30;11247:117;;;11283:79;;:::i;:::-;11247:117;11388:63;11443:7;11434:6;11423:9;11419:22;11388:63;:::i;:::-;11378:73;;11174:287;10959:509;;;;:::o;11474:468::-;11539:6;11547;11596:2;11584:9;11575:7;11571:23;11567:32;11564:119;;;11602:79;;:::i;:::-;11564:119;11722:1;11747:53;11792:7;11783:6;11772:9;11768:22;11747:53;:::i;:::-;11737:63;;11693:117;11849:2;11875:50;11917:7;11908:6;11897:9;11893:22;11875:50;:::i;:::-;11865:60;;11820:115;11474:468;;;;;:::o;11948:307::-;12009:4;12099:18;12091:6;12088:30;12085:56;;;12121:18;;:::i;:::-;12085:56;12159:29;12181:6;12159:29;:::i;:::-;12151:37;;12243:4;12237;12233:15;12225:23;;11948:307;;;:::o;12261:410::-;12338:5;12363:65;12379:48;12420:6;12379:48;:::i;:::-;12363:65;:::i;:::-;12354:74;;12451:6;12444:5;12437:21;12489:4;12482:5;12478:16;12527:3;12518:6;12513:3;12509:16;12506:25;12503:112;;;12534:79;;:::i;:::-;12503:112;12624:41;12658:6;12653:3;12648;12624:41;:::i;:::-;12344:327;12261:410;;;;;:::o;12690:338::-;12745:5;12794:3;12787:4;12779:6;12775:17;12771:27;12761:122;;12802:79;;:::i;:::-;12761:122;12919:6;12906:20;12944:78;13018:3;13010:6;13003:4;12995:6;12991:17;12944:78;:::i;:::-;12935:87;;12751:277;12690:338;;;;:::o;13034:943::-;13129:6;13137;13145;13153;13202:3;13190:9;13181:7;13177:23;13173:33;13170:120;;;13209:79;;:::i;:::-;13170:120;13329:1;13354:53;13399:7;13390:6;13379:9;13375:22;13354:53;:::i;:::-;13344:63;;13300:117;13456:2;13482:53;13527:7;13518:6;13507:9;13503:22;13482:53;:::i;:::-;13472:63;;13427:118;13584:2;13610:53;13655:7;13646:6;13635:9;13631:22;13610:53;:::i;:::-;13600:63;;13555:118;13740:2;13729:9;13725:18;13712:32;13771:18;13763:6;13760:30;13757:117;;;13793:79;;:::i;:::-;13757:117;13898:62;13952:7;13943:6;13932:9;13928:22;13898:62;:::i;:::-;13888:72;;13683:287;13034:943;;;;;;;:::o;13983:474::-;14051:6;14059;14108:2;14096:9;14087:7;14083:23;14079:32;14076:119;;;14114:79;;:::i;:::-;14076:119;14234:1;14259:53;14304:7;14295:6;14284:9;14280:22;14259:53;:::i;:::-;14249:63;;14205:117;14361:2;14387:53;14432:7;14423:6;14412:9;14408:22;14387:53;:::i;:::-;14377:63;;14332:118;13983:474;;;;;:::o;14463:182::-;14603:34;14599:1;14591:6;14587:14;14580:58;14463:182;:::o;14651:366::-;14793:3;14814:67;14878:2;14873:3;14814:67;:::i;:::-;14807:74;;14890:93;14979:3;14890:93;:::i;:::-;15008:2;15003:3;14999:12;14992:19;;14651:366;;;:::o;15023:419::-;15189:4;15227:2;15216:9;15212:18;15204:26;;15276:9;15270:4;15266:20;15262:1;15251:9;15247:17;15240:47;15304:131;15430:4;15304:131;:::i;:::-;15296:139;;15023:419;;;:::o;15448:180::-;15496:77;15493:1;15486:88;15593:4;15590:1;15583:15;15617:4;15614:1;15607:15;15634:320;15678:6;15715:1;15709:4;15705:12;15695:22;;15762:1;15756:4;15752:12;15783:18;15773:81;;15839:4;15831:6;15827:17;15817:27;;15773:81;15901:2;15893:6;15890:14;15870:18;15867:38;15864:84;;15920:18;;:::i;:::-;15864:84;15685:269;15634:320;;;:::o;15960:231::-;16100:34;16096:1;16088:6;16084:14;16077:58;16169:14;16164:2;16156:6;16152:15;16145:39;15960:231;:::o;16197:366::-;16339:3;16360:67;16424:2;16419:3;16360:67;:::i;:::-;16353:74;;16436:93;16525:3;16436:93;:::i;:::-;16554:2;16549:3;16545:12;16538:19;;16197:366;;;:::o;16569:419::-;16735:4;16773:2;16762:9;16758:18;16750:26;;16822:9;16816:4;16812:20;16808:1;16797:9;16793:17;16786:47;16850:131;16976:4;16850:131;:::i;:::-;16842:139;;16569:419;;;:::o;16994:220::-;17134:34;17130:1;17122:6;17118:14;17111:58;17203:3;17198:2;17190:6;17186:15;17179:28;16994:220;:::o;17220:366::-;17362:3;17383:67;17447:2;17442:3;17383:67;:::i;:::-;17376:74;;17459:93;17548:3;17459:93;:::i;:::-;17577:2;17572:3;17568:12;17561:19;;17220:366;;;:::o;17592:419::-;17758:4;17796:2;17785:9;17781:18;17773:26;;17845:9;17839:4;17835:20;17831:1;17820:9;17816:17;17809:47;17873:131;17999:4;17873:131;:::i;:::-;17865:139;;17592:419;;;:::o;18017:243::-;18157:34;18153:1;18145:6;18141:14;18134:58;18226:26;18221:2;18213:6;18209:15;18202:51;18017:243;:::o;18266:366::-;18408:3;18429:67;18493:2;18488:3;18429:67;:::i;:::-;18422:74;;18505:93;18594:3;18505:93;:::i;:::-;18623:2;18618:3;18614:12;18607:19;;18266:366;;;:::o;18638:419::-;18804:4;18842:2;18831:9;18827:18;18819:26;;18891:9;18885:4;18881:20;18877:1;18866:9;18862:17;18855:47;18919:131;19045:4;18919:131;:::i;:::-;18911:139;;18638:419;;;:::o;19063:236::-;19203:34;19199:1;19191:6;19187:14;19180:58;19272:19;19267:2;19259:6;19255:15;19248:44;19063:236;:::o;19305:366::-;19447:3;19468:67;19532:2;19527:3;19468:67;:::i;:::-;19461:74;;19544:93;19633:3;19544:93;:::i;:::-;19662:2;19657:3;19653:12;19646:19;;19305:366;;;:::o;19677:419::-;19843:4;19881:2;19870:9;19866:18;19858:26;;19930:9;19924:4;19920:20;19916:1;19905:9;19901:17;19894:47;19958:131;20084:4;19958:131;:::i;:::-;19950:139;;19677:419;;;:::o;20102:230::-;20242:34;20238:1;20230:6;20226:14;20219:58;20311:13;20306:2;20298:6;20294:15;20287:38;20102:230;:::o;20338:366::-;20480:3;20501:67;20565:2;20560:3;20501:67;:::i;:::-;20494:74;;20577:93;20666:3;20577:93;:::i;:::-;20695:2;20690:3;20686:12;20679:19;;20338:366;;;:::o;20710:419::-;20876:4;20914:2;20903:9;20899:18;20891:26;;20963:9;20957:4;20953:20;20949:1;20938:9;20934:17;20927:47;20991:131;21117:4;20991:131;:::i;:::-;20983:139;;20710:419;;;:::o;21135:180::-;21183:77;21180:1;21173:88;21280:4;21277:1;21270:15;21304:4;21301:1;21294:15;21321:305;21361:3;21380:20;21398:1;21380:20;:::i;:::-;21375:25;;21414:20;21432:1;21414:20;:::i;:::-;21409:25;;21568:1;21500:66;21496:74;21493:1;21490:81;21487:107;;;21574:18;;:::i;:::-;21487:107;21618:1;21615;21611:9;21604:16;;21321:305;;;;:::o;21632:348::-;21672:7;21695:20;21713:1;21695:20;:::i;:::-;21690:25;;21729:20;21747:1;21729:20;:::i;:::-;21724:25;;21917:1;21849:66;21845:74;21842:1;21839:81;21834:1;21827:9;21820:17;21816:105;21813:131;;;21924:18;;:::i;:::-;21813:131;21972:1;21969;21965:9;21954:20;;21632:348;;;;:::o;21986:233::-;22025:3;22048:24;22066:5;22048:24;:::i;:::-;22039:33;;22094:66;22087:5;22084:77;22081:103;;22164:18;;:::i;:::-;22081:103;22211:1;22204:5;22200:13;22193:20;;21986:233;;;:::o;22225:180::-;22273:77;22270:1;22263:88;22370:4;22367:1;22360:15;22394:4;22391:1;22384:15;22411:231;22551:34;22547:1;22539:6;22535:14;22528:58;22620:14;22615:2;22607:6;22603:15;22596:39;22411:231;:::o;22648:366::-;22790:3;22811:67;22875:2;22870:3;22811:67;:::i;:::-;22804:74;;22887:93;22976:3;22887:93;:::i;:::-;23005:2;23000:3;22996:12;22989:19;;22648:366;;;:::o;23020:419::-;23186:4;23224:2;23213:9;23209:18;23201:26;;23273:9;23267:4;23263:20;23259:1;23248:9;23244:17;23237:47;23301:131;23427:4;23301:131;:::i;:::-;23293:139;;23020:419;;;:::o;23445:228::-;23585:34;23581:1;23573:6;23569:14;23562:58;23654:11;23649:2;23641:6;23637:15;23630:36;23445:228;:::o;23679:366::-;23821:3;23842:67;23906:2;23901:3;23842:67;:::i;:::-;23835:74;;23918:93;24007:3;23918:93;:::i;:::-;24036:2;24031:3;24027:12;24020:19;;23679:366;;;:::o;24051:419::-;24217:4;24255:2;24244:9;24240:18;24232:26;;24304:9;24298:4;24294:20;24290:1;24279:9;24275:17;24268:47;24332:131;24458:4;24332:131;:::i;:::-;24324:139;;24051:419;;;:::o;24476:229::-;24616:34;24612:1;24604:6;24600:14;24593:58;24685:12;24680:2;24672:6;24668:15;24661:37;24476:229;:::o;24711:366::-;24853:3;24874:67;24938:2;24933:3;24874:67;:::i;:::-;24867:74;;24950:93;25039:3;24950:93;:::i;:::-;25068:2;25063:3;25059:12;25052:19;;24711:366;;;:::o;25083:419::-;25249:4;25287:2;25276:9;25272:18;25264:26;;25336:9;25330:4;25326:20;25322:1;25311:9;25307:17;25300:47;25364:131;25490:4;25364:131;:::i;:::-;25356:139;;25083:419;;;:::o;25508:175::-;25648:27;25644:1;25636:6;25632:14;25625:51;25508:175;:::o;25689:366::-;25831:3;25852:67;25916:2;25911:3;25852:67;:::i;:::-;25845:74;;25928:93;26017:3;25928:93;:::i;:::-;26046:2;26041:3;26037:12;26030:19;;25689:366;;;:::o;26061:419::-;26227:4;26265:2;26254:9;26250:18;26242:26;;26314:9;26308:4;26304:20;26300:1;26289:9;26285:17;26278:47;26342:131;26468:4;26342:131;:::i;:::-;26334:139;;26061:419;;;:::o;26486:234::-;26626:34;26622:1;26614:6;26610:14;26603:58;26695:17;26690:2;26682:6;26678:15;26671:42;26486:234;:::o;26726:366::-;26868:3;26889:67;26953:2;26948:3;26889:67;:::i;:::-;26882:74;;26965:93;27054:3;26965:93;:::i;:::-;27083:2;27078:3;27074:12;27067:19;;26726:366;;;:::o;27098:419::-;27264:4;27302:2;27291:9;27287:18;27279:26;;27351:9;27345:4;27341:20;27337:1;27326:9;27322:17;27315:47;27379:131;27505:4;27379:131;:::i;:::-;27371:139;;27098:419;;;:::o;27523:148::-;27625:11;27662:3;27647:18;;27523:148;;;;:::o;27677:377::-;27783:3;27811:39;27844:5;27811:39;:::i;:::-;27866:89;27948:6;27943:3;27866:89;:::i;:::-;27859:96;;27964:52;28009:6;28004:3;27997:4;27990:5;27986:16;27964:52;:::i;:::-;28041:6;28036:3;28032:16;28025:23;;27787:267;27677:377;;;;:::o;28060:141::-;28109:4;28132:3;28124:11;;28155:3;28152:1;28145:14;28189:4;28186:1;28176:18;28168:26;;28060:141;;;:::o;28231:845::-;28334:3;28371:5;28365:12;28400:36;28426:9;28400:36;:::i;:::-;28452:89;28534:6;28529:3;28452:89;:::i;:::-;28445:96;;28572:1;28561:9;28557:17;28588:1;28583:137;;;;28734:1;28729:341;;;;28550:520;;28583:137;28667:4;28663:9;28652;28648:25;28643:3;28636:38;28703:6;28698:3;28694:16;28687:23;;28583:137;;28729:341;28796:38;28828:5;28796:38;:::i;:::-;28856:1;28870:154;28884:6;28881:1;28878:13;28870:154;;;28958:7;28952:14;28948:1;28943:3;28939:11;28932:35;29008:1;28999:7;28995:15;28984:26;;28906:4;28903:1;28899:12;28894:17;;28870:154;;;29053:6;29048:3;29044:16;29037:23;;28736:334;;28550:520;;28338:738;;28231:845;;;;:::o;29082:589::-;29307:3;29329:95;29420:3;29411:6;29329:95;:::i;:::-;29322:102;;29441:95;29532:3;29523:6;29441:95;:::i;:::-;29434:102;;29553:92;29641:3;29632:6;29553:92;:::i;:::-;29546:99;;29662:3;29655:10;;29082:589;;;;;;:::o;29677:225::-;29817:34;29813:1;29805:6;29801:14;29794:58;29886:8;29881:2;29873:6;29869:15;29862:33;29677:225;:::o;29908:366::-;30050:3;30071:67;30135:2;30130:3;30071:67;:::i;:::-;30064:74;;30147:93;30236:3;30147:93;:::i;:::-;30265:2;30260:3;30256:12;30249:19;;29908:366;;;:::o;30280:419::-;30446:4;30484:2;30473:9;30469:18;30461:26;;30533:9;30527:4;30523:20;30519:1;30508:9;30504:17;30497:47;30561:131;30687:4;30561:131;:::i;:::-;30553:139;;30280:419;;;:::o;30705:231::-;30845:34;30841:1;30833:6;30829:14;30822:58;30914:14;30909:2;30901:6;30897:15;30890:39;30705:231;:::o;30942:366::-;31084:3;31105:67;31169:2;31164:3;31105:67;:::i;:::-;31098:74;;31181:93;31270:3;31181:93;:::i;:::-;31299:2;31294:3;31290:12;31283:19;;30942:366;;;:::o;31314:419::-;31480:4;31518:2;31507:9;31503:18;31495:26;;31567:9;31561:4;31557:20;31553:1;31542:9;31538:17;31531:47;31595:131;31721:4;31595:131;:::i;:::-;31587:139;;31314:419;;;:::o;31739:228::-;31879:34;31875:1;31867:6;31863:14;31856:58;31948:11;31943:2;31935:6;31931:15;31924:36;31739:228;:::o;31973:366::-;32115:3;32136:67;32200:2;32195:3;32136:67;:::i;:::-;32129:74;;32212:93;32301:3;32212:93;:::i;:::-;32330:2;32325:3;32321:12;32314:19;;31973:366;;;:::o;32345:419::-;32511:4;32549:2;32538:9;32534:18;32526:26;;32598:9;32592:4;32588:20;32584:1;32573:9;32569:17;32562:47;32626:131;32752:4;32626:131;:::i;:::-;32618:139;;32345:419;;;:::o;32770:223::-;32910:34;32906:1;32898:6;32894:14;32887:58;32979:6;32974:2;32966:6;32962:15;32955:31;32770:223;:::o;32999:366::-;33141:3;33162:67;33226:2;33221:3;33162:67;:::i;:::-;33155:74;;33238:93;33327:3;33238:93;:::i;:::-;33356:2;33351:3;33347:12;33340:19;;32999:366;;;:::o;33371:419::-;33537:4;33575:2;33564:9;33560:18;33552:26;;33624:9;33618:4;33614:20;33610:1;33599:9;33595:17;33588:47;33652:131;33778:4;33652:131;:::i;:::-;33644:139;;33371:419;;;:::o;33796:191::-;33836:4;33856:20;33874:1;33856:20;:::i;:::-;33851:25;;33890:20;33908:1;33890:20;:::i;:::-;33885:25;;33929:1;33926;33923:8;33920:34;;;33934:18;;:::i;:::-;33920:34;33979:1;33976;33972:9;33964:17;;33796:191;;;;:::o;33993:237::-;34133:34;34129:1;34121:6;34117:14;34110:58;34202:20;34197:2;34189:6;34185:15;34178:45;33993:237;:::o;34236:366::-;34378:3;34399:67;34463:2;34458:3;34399:67;:::i;:::-;34392:74;;34475:93;34564:3;34475:93;:::i;:::-;34593:2;34588:3;34584:12;34577:19;;34236:366;;;:::o;34608:419::-;34774:4;34812:2;34801:9;34797:18;34789:26;;34861:9;34855:4;34851:20;34847:1;34836:9;34832:17;34825:47;34889:131;35015:4;34889:131;:::i;:::-;34881:139;;34608:419;;;:::o;35033:180::-;35081:77;35078:1;35071:88;35178:4;35175:1;35168:15;35202:4;35199:1;35192:15;35219:185;35259:1;35276:20;35294:1;35276:20;:::i;:::-;35271:25;;35310:20;35328:1;35310:20;:::i;:::-;35305:25;;35349:1;35339:35;;35354:18;;:::i;:::-;35339:35;35396:1;35393;35389:9;35384:14;;35219:185;;;;:::o;35410:176::-;35442:1;35459:20;35477:1;35459:20;:::i;:::-;35454:25;;35493:20;35511:1;35493:20;:::i;:::-;35488:25;;35532:1;35522:35;;35537:18;;:::i;:::-;35522:35;35578:1;35575;35571:9;35566:14;;35410:176;;;;:::o;35592:98::-;35643:6;35677:5;35671:12;35661:22;;35592:98;;;:::o;35696:168::-;35779:11;35813:6;35808:3;35801:19;35853:4;35848:3;35844:14;35829:29;;35696:168;;;;:::o;35870:360::-;35956:3;35984:38;36016:5;35984:38;:::i;:::-;36038:70;36101:6;36096:3;36038:70;:::i;:::-;36031:77;;36117:52;36162:6;36157:3;36150:4;36143:5;36139:16;36117:52;:::i;:::-;36194:29;36216:6;36194:29;:::i;:::-;36189:3;36185:39;36178:46;;35960:270;35870:360;;;;:::o;36236:640::-;36431:4;36469:3;36458:9;36454:19;36446:27;;36483:71;36551:1;36540:9;36536:17;36527:6;36483:71;:::i;:::-;36564:72;36632:2;36621:9;36617:18;36608:6;36564:72;:::i;:::-;36646;36714:2;36703:9;36699:18;36690:6;36646:72;:::i;:::-;36765:9;36759:4;36755:20;36750:2;36739:9;36735:18;36728:48;36793:76;36864:4;36855:6;36793:76;:::i;:::-;36785:84;;36236:640;;;;;;;:::o;36882:141::-;36938:5;36969:6;36963:13;36954:22;;36985:32;37011:5;36985:32;:::i;:::-;36882:141;;;;:::o;37029:349::-;37098:6;37147:2;37135:9;37126:7;37122:23;37118:32;37115:119;;;37153:79;;:::i;:::-;37115:119;37273:1;37298:63;37353:7;37344:6;37333:9;37329:22;37298:63;:::i;:::-;37288:73;;37244:127;37029:349;;;;:::o;37384:180::-;37432:77;37429:1;37422:88;37529:4;37526:1;37519:15;37553:4;37550:1;37543:15;37570:182;37710:34;37706:1;37698:6;37694:14;37687:58;37570:182;:::o;37758:366::-;37900:3;37921:67;37985:2;37980:3;37921:67;:::i;:::-;37914:74;;37997:93;38086:3;37997:93;:::i;:::-;38115:2;38110:3;38106:12;38099:19;;37758:366;;;:::o;38130:419::-;38296:4;38334:2;38323:9;38319:18;38311:26;;38383:9;38377:4;38373:20;38369:1;38358:9;38354:17;38347:47;38411:131;38537:4;38411:131;:::i;:::-;38403:139;;38130:419;;;:::o;38555:178::-;38695:30;38691:1;38683:6;38679:14;38672:54;38555:178;:::o;38739:366::-;38881:3;38902:67;38966:2;38961:3;38902:67;:::i;:::-;38895:74;;38978:93;39067:3;38978:93;:::i;:::-;39096:2;39091:3;39087:12;39080:19;;38739:366;;;:::o;39111:419::-;39277:4;39315:2;39304:9;39300:18;39292:26;;39364:9;39358:4;39354:20;39350:1;39339:9;39335:17;39328:47;39392:131;39518:4;39392:131;:::i;:::-;39384:139;;39111:419;;;:::o",
  "source": "// SPDX-License-Identifier: GPL-3.0\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\npragma solidity ^0.8.0;\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\npragma solidity ^0.8.0;\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\r\npragma solidity ^0.8.0;\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Enumerable is IERC721 {\r\n    /**\r\n     * @dev Returns the total amount of tokens stored by the contract.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\r\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\r\n     * Use along with {totalSupply} to enumerate all tokens.\r\n     */\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\npragma solidity ^0.8.0;\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\npragma solidity ^0.8.0;\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/ERC721.sol\r\npragma solidity ^0.8.0;\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 => address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address => uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 => address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _owners[tokenId];\r\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overriden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not owner nor approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\r\n\r\n        _operatorApprovals[_msgSender()][operator] = approved;\r\n        emit ApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\r\n        _safeTransfer(from, to, tokenId, _data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _owners[tokenId] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, _data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId);\r\n\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId);\r\n\r\n        // Clear approvals\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[owner] -= 1;\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId);\r\n\r\n        // Clear approvals from the previous owner\r\n        _approve(address(0), tokenId);\r\n\r\n        _balances[from] -= 1;\r\n        _balances[to] += 1;\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits a {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param _data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual {}\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/**\r\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\r\n * enumerability of all the token ids in the contract as well as all token ids owned by each\r\n * account.\r\n */\r\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\r\n    // Mapping from owner to list of owned token IDs\r\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\r\n\r\n    // Mapping from token ID to index of the owner tokens list\r\n    mapping(uint256 => uint256) private _ownedTokensIndex;\r\n\r\n    // Array with all token ids, used for enumeration\r\n    uint256[] private _allTokens;\r\n\r\n    // Mapping from token id to position in the allTokens array\r\n    mapping(uint256 => uint256) private _allTokensIndex;\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\r\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\r\n     */\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\r\n        return _ownedTokens[owner][index];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _allTokens.length;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Enumerable-tokenByIndex}.\r\n     */\r\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\r\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\r\n        return _allTokens[index];\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) internal virtual override {\r\n        super._beforeTokenTransfer(from, to, tokenId);\r\n\r\n        if (from == address(0)) {\r\n            _addTokenToAllTokensEnumeration(tokenId);\r\n        } else if (from != to) {\r\n            _removeTokenFromOwnerEnumeration(from, tokenId);\r\n        }\r\n        if (to == address(0)) {\r\n            _removeTokenFromAllTokensEnumeration(tokenId);\r\n        } else if (to != from) {\r\n            _addTokenToOwnerEnumeration(to, tokenId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\r\n     * @param to address representing the new owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n     */\r\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\r\n        uint256 length = ERC721.balanceOf(to);\r\n        _ownedTokens[to][length] = tokenId;\r\n        _ownedTokensIndex[tokenId] = length;\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to add a token to this extension's token tracking data structures.\r\n     * @param tokenId uint256 ID of the token to be added to the tokens list\r\n     */\r\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\r\n        _allTokensIndex[tokenId] = _allTokens.length;\r\n        _allTokens.push(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\r\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\r\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\r\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n     */\r\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\r\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\r\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary\r\n        if (tokenIndex != lastTokenIndex) {\r\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\r\n\r\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n        }\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _ownedTokensIndex[tokenId];\r\n        delete _ownedTokens[from][lastTokenIndex];\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to remove a token from this extension's token tracking data structures.\r\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\r\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\r\n     */\r\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\r\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\r\n        // then delete the last slot (swap and pop).\r\n\r\n        uint256 lastTokenIndex = _allTokens.length - 1;\r\n        uint256 tokenIndex = _allTokensIndex[tokenId];\r\n\r\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\r\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\r\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\r\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\r\n\r\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\r\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\r\n\r\n        // This also deletes the contents at the last position of the array\r\n        delete _allTokensIndex[tokenId];\r\n        _allTokens.pop();\r\n    }\r\n}\r\n\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\npragma solidity ^0.8.0;\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: contracts/NerdyCoderClones.sol\r\n\r\n\r\n\r\n// Created by HashLips\r\n// The Nerdy Coder Clones\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract ERC721SmartContract is ERC721Enumerable, Ownable {\r\n  using Strings for uint256;\r\n\r\n  string public baseURI;\r\n  string public baseExtension = \".json\";\r\n  uint256 public cost = 0.01 ether;\r\n  uint256 public maxSupply = 1000;\r\n  uint256 public maxMintAmount = 1;\r\n  bool public paused = false;\r\n  \r\n  string public _name = \"ART\";\r\n  string public _symbol = \"ART\";\r\n  string public _initBaseURI = \"http://127.0.0.1:1234/NFTs/\";\r\n\r\n  mapping(address => bool) public whitelisted;\r\n\r\n  constructor() ERC721(_name, _symbol) {\r\n    setBaseURI(_initBaseURI);\r\n    //mint(msg.sender, 20);\r\n  }\r\n\r\n  // internal\r\n  function _baseURI() internal view virtual override returns (string memory) {\r\n    return baseURI;\r\n  }\r\n\r\n  // public\r\n  function mint(address _to, uint256 _mintAmount) public payable {\r\n    uint256 supply = totalSupply();\r\n    //require(!paused);\r\n    require(_mintAmount > 0);\r\n    require(_mintAmount <= maxMintAmount);\r\n    require(supply + _mintAmount <= maxSupply);\r\n\r\n    if (msg.sender != owner()) {\r\n        if(whitelisted[msg.sender] != true) {\r\n          require(msg.value >= cost * _mintAmount);\r\n        }\r\n    }\r\n\r\n    for (uint256 i = 1; i <= _mintAmount; i++) {\r\n      _safeMint(_to, supply + i);\r\n    }\r\n  }\r\n\r\n  function walletOfOwner(address _owner)\r\n    public\r\n    view\r\n    returns (uint256[] memory)\r\n  {\r\n    uint256 ownerTokenCount = balanceOf(_owner);\r\n    uint256[] memory tokenIds = new uint256[](ownerTokenCount);\r\n    for (uint256 i; i < ownerTokenCount; i++) {\r\n      tokenIds[i] = tokenOfOwnerByIndex(_owner, i);\r\n    }\r\n    return tokenIds;\r\n  }\r\n\r\n  function tokenURI(uint256 tokenId)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (string memory)\r\n  {\r\n    require(\r\n      _exists(tokenId),\r\n      \"ERC721Metadata: URI query for nonexistent token\"\r\n    );\r\n\r\n    string memory currentBaseURI = _baseURI();\r\n    return bytes(currentBaseURI).length > 0\r\n        ? string(abi.encodePacked(currentBaseURI, tokenId.toString(), baseExtension))\r\n        : \"\";\r\n  }\r\n\r\n  //only owner\r\n  function setCost(uint256 _newCost) public onlyOwner {\r\n    cost = _newCost;\r\n  }\r\n\r\n  function setmaxMintAmount(uint256 _newmaxMintAmount) public onlyOwner {\r\n    maxMintAmount = _newmaxMintAmount;\r\n  }\r\n\r\n  function setBaseURI(string memory _newBaseURI) public onlyOwner {\r\n    baseURI = _newBaseURI;\r\n  }\r\n\r\n  function setBaseExtension(string memory _newBaseExtension) public onlyOwner {\r\n    baseExtension = _newBaseExtension;\r\n  }\r\n\r\n  function pause(bool _state) public onlyOwner {\r\n    paused = _state;\r\n  }\r\n \r\n function whitelistUser(address _user) public onlyOwner {\r\n    whitelisted[_user] = true;\r\n  }\r\n \r\n  function removeWhitelistUser(address _user) public onlyOwner {\r\n    whitelisted[_user] = false;\r\n  }\r\n\r\n  function withdraw() public payable onlyOwner {\r\n    require(payable(msg.sender).send(address(this).balance));\r\n  }\r\n}\r\n",
  "sourcePath": "C:\\DApp\\erc721 nft\\contracts\\SmartContract.sol",
  "ast": {
    "absolutePath": "project:/contracts/SmartContract.sol",
    "exportedSymbols": {
      "Address": [707],
      "Context": [770],
      "ERC165": [209],
      "ERC721": [1578],
      "ERC721Enumerable": [1913],
      "ERC721SmartContract": [2350],
      "IERC165": [44],
      "IERC721": [158],
      "IERC721Enumerable": [187],
      "IERC721Metadata": [732],
      "IERC721Receiver": [749],
      "Ownable": [2015],
      "Strings": [411]
    },
    "id": 2351,
    "license": "GPL-3.0",
    "nodeType": "SourceUnit",
    "nodes": [{
      "id": 34,
      "literals": ["solidity", "^", "0.8", ".0"],
      "nodeType": "PragmaDirective",
      "src": "105:23:1"
    }, {
      "abstract": false,
      "baseContracts": [],
      "canonicalName": "IERC165",
      "contractDependencies": [],
      "contractKind": "interface",
      "documentation": {
        "id": 35,
        "nodeType": "StructuredDocumentation",
        "src": "130:287:1",
        "text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
      },
      "fullyImplemented": false,
      "id": 44,
      "linearizedBaseContracts": [44],
      "name": "IERC165",
      "nameLocation": "429:7:1",
      "nodeType": "ContractDefinition",
      "nodes": [{
        "documentation": {
          "id": 36,
          "nodeType": "StructuredDocumentation",
          "src": "444:347:1",
          "text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
        },
        "functionSelector": "01ffc9a7",
        "id": 43,
        "implemented": false,
        "kind": "function",
        "modifiers": [],
        "name": "supportsInterface",
        "nameLocation": "806:17:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 39,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 38,
            "mutability": "mutable",
            "name": "interfaceId",
            "nameLocation": "831:11:1",
            "nodeType": "VariableDeclaration",
            "scope": 43,
            "src": "824:18:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes4",
              "typeString": "bytes4"
            },
            "typeName": {
              "id": 37,
              "name": "bytes4",
              "nodeType": "ElementaryTypeName",
              "src": "824:6:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes4",
                "typeString": "bytes4"
              }
            },
            "visibility": "internal"
          }],
          "src": "823:20:1"
        },
        "returnParameters": {
          "id": 42,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 41,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 43,
            "src": "867:4:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 40,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "867:4:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "visibility": "internal"
          }],
          "src": "866:6:1"
        },
        "scope": 44,
        "src": "797:76:1",
        "stateMutability": "view",
        "virtual": false,
        "visibility": "external"
      }],
      "scope": 2351,
      "src": "419:457:1",
      "usedErrors": []
    }, {
      "id": 45,
      "literals": ["solidity", "^", "0.8", ".0"],
      "nodeType": "PragmaDirective",
      "src": "939:23:1"
    }, {
      "abstract": false,
      "baseContracts": [{
        "baseName": {
          "id": 47,
          "name": "IERC165",
          "nodeType": "IdentifierPath",
          "referencedDeclaration": 44,
          "src": "1056:7:1"
        },
        "id": 48,
        "nodeType": "InheritanceSpecifier",
        "src": "1056:7:1"
      }],
      "canonicalName": "IERC721",
      "contractDependencies": [],
      "contractKind": "interface",
      "documentation": {
        "id": 46,
        "nodeType": "StructuredDocumentation",
        "src": "964:69:1",
        "text": " @dev Required interface of an ERC721 compliant contract."
      },
      "fullyImplemented": false,
      "id": 158,
      "linearizedBaseContracts": [158, 44],
      "name": "IERC721",
      "nameLocation": "1045:7:1",
      "nodeType": "ContractDefinition",
      "nodes": [{
        "anonymous": false,
        "documentation": {
          "id": 49,
          "nodeType": "StructuredDocumentation",
          "src": "1071:90:1",
          "text": " @dev Emitted when `tokenId` token is transferred from `from` to `to`."
        },
        "eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
        "id": 57,
        "name": "Transfer",
        "nameLocation": "1173:8:1",
        "nodeType": "EventDefinition",
        "parameters": {
          "id": 56,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 51,
            "indexed": true,
            "mutability": "mutable",
            "name": "from",
            "nameLocation": "1198:4:1",
            "nodeType": "VariableDeclaration",
            "scope": 57,
            "src": "1182:20:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 50,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "1182:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 53,
            "indexed": true,
            "mutability": "mutable",
            "name": "to",
            "nameLocation": "1220:2:1",
            "nodeType": "VariableDeclaration",
            "scope": 57,
            "src": "1204:18:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 52,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "1204:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 55,
            "indexed": true,
            "mutability": "mutable",
            "name": "tokenId",
            "nameLocation": "1240:7:1",
            "nodeType": "VariableDeclaration",
            "scope": 57,
            "src": "1224:23:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 54,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1224:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "1181:67:1"
        },
        "src": "1167:82:1"
      }, {
        "anonymous": false,
        "documentation": {
          "id": 58,
          "nodeType": "StructuredDocumentation",
          "src": "1257:96:1",
          "text": " @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."
        },
        "eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
        "id": 66,
        "name": "Approval",
        "nameLocation": "1365:8:1",
        "nodeType": "EventDefinition",
        "parameters": {
          "id": 65,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 60,
            "indexed": true,
            "mutability": "mutable",
            "name": "owner",
            "nameLocation": "1390:5:1",
            "nodeType": "VariableDeclaration",
            "scope": 66,
            "src": "1374:21:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 59,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "1374:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 62,
            "indexed": true,
            "mutability": "mutable",
            "name": "approved",
            "nameLocation": "1413:8:1",
            "nodeType": "VariableDeclaration",
            "scope": 66,
            "src": "1397:24:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 61,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "1397:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 64,
            "indexed": true,
            "mutability": "mutable",
            "name": "tokenId",
            "nameLocation": "1439:7:1",
            "nodeType": "VariableDeclaration",
            "scope": 66,
            "src": "1423:23:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 63,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1423:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "1373:74:1"
        },
        "src": "1359:89:1"
      }, {
        "anonymous": false,
        "documentation": {
          "id": 67,
          "nodeType": "StructuredDocumentation",
          "src": "1456:119:1",
          "text": " @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
        },
        "eventSelector": "17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31",
        "id": 75,
        "name": "ApprovalForAll",
        "nameLocation": "1587:14:1",
        "nodeType": "EventDefinition",
        "parameters": {
          "id": 74,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 69,
            "indexed": true,
            "mutability": "mutable",
            "name": "owner",
            "nameLocation": "1618:5:1",
            "nodeType": "VariableDeclaration",
            "scope": 75,
            "src": "1602:21:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 68,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "1602:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 71,
            "indexed": true,
            "mutability": "mutable",
            "name": "operator",
            "nameLocation": "1641:8:1",
            "nodeType": "VariableDeclaration",
            "scope": 75,
            "src": "1625:24:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 70,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "1625:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 73,
            "indexed": false,
            "mutability": "mutable",
            "name": "approved",
            "nameLocation": "1656:8:1",
            "nodeType": "VariableDeclaration",
            "scope": 75,
            "src": "1651:13:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 72,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "1651:4:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "visibility": "internal"
          }],
          "src": "1601:64:1"
        },
        "src": "1581:85:1"
      }, {
        "documentation": {
          "id": 76,
          "nodeType": "StructuredDocumentation",
          "src": "1674:78:1",
          "text": " @dev Returns the number of tokens in ``owner``'s account."
        },
        "functionSelector": "70a08231",
        "id": 83,
        "implemented": false,
        "kind": "function",
        "modifiers": [],
        "name": "balanceOf",
        "nameLocation": "1767:9:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 79,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 78,
            "mutability": "mutable",
            "name": "owner",
            "nameLocation": "1785:5:1",
            "nodeType": "VariableDeclaration",
            "scope": 83,
            "src": "1777:13:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 77,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "1777:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }],
          "src": "1776:15:1"
        },
        "returnParameters": {
          "id": 82,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 81,
            "mutability": "mutable",
            "name": "balance",
            "nameLocation": "1823:7:1",
            "nodeType": "VariableDeclaration",
            "scope": 83,
            "src": "1815:15:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 80,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1815:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "1814:17:1"
        },
        "scope": 158,
        "src": "1758:74:1",
        "stateMutability": "view",
        "virtual": false,
        "visibility": "external"
      }, {
        "documentation": {
          "id": 84,
          "nodeType": "StructuredDocumentation",
          "src": "1840:137:1",
          "text": " @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."
        },
        "functionSelector": "6352211e",
        "id": 91,
        "implemented": false,
        "kind": "function",
        "modifiers": [],
        "name": "ownerOf",
        "nameLocation": "1992:7:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 87,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 86,
            "mutability": "mutable",
            "name": "tokenId",
            "nameLocation": "2008:7:1",
            "nodeType": "VariableDeclaration",
            "scope": 91,
            "src": "2000:15:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 85,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "2000:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "1999:17:1"
        },
        "returnParameters": {
          "id": 90,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 89,
            "mutability": "mutable",
            "name": "owner",
            "nameLocation": "2048:5:1",
            "nodeType": "VariableDeclaration",
            "scope": 91,
            "src": "2040:13:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 88,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "2040:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }],
          "src": "2039:15:1"
        },
        "scope": 158,
        "src": "1983:72:1",
        "stateMutability": "view",
        "virtual": false,
        "visibility": "external"
      }, {
        "documentation": {
          "id": 92,
          "nodeType": "StructuredDocumentation",
          "src": "2063:703:1",
          "text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
        },
        "functionSelector": "42842e0e",
        "id": 101,
        "implemented": false,
        "kind": "function",
        "modifiers": [],
        "name": "safeTransferFrom",
        "nameLocation": "2781:16:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 99,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 94,
            "mutability": "mutable",
            "name": "from",
            "nameLocation": "2816:4:1",
            "nodeType": "VariableDeclaration",
            "scope": 101,
            "src": "2808:12:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 93,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "2808:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 96,
            "mutability": "mutable",
            "name": "to",
            "nameLocation": "2839:2:1",
            "nodeType": "VariableDeclaration",
            "scope": 101,
            "src": "2831:10:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 95,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "2831:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 98,
            "mutability": "mutable",
            "name": "tokenId",
            "nameLocation": "2860:7:1",
            "nodeType": "VariableDeclaration",
            "scope": 101,
            "src": "2852:15:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 97,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "2852:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "2797:77:1"
        },
        "returnParameters": {
          "id": 100,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "2883:0:1"
        },
        "scope": 158,
        "src": "2772:112:1",
        "stateMutability": "nonpayable",
        "virtual": false,
        "visibility": "external"
      }, {
        "documentation": {
          "id": 102,
          "nodeType": "StructuredDocumentation",
          "src": "2892:517:1",
          "text": " @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."
        },
        "functionSelector": "23b872dd",
        "id": 111,
        "implemented": false,
        "kind": "function",
        "modifiers": [],
        "name": "transferFrom",
        "nameLocation": "3424:12:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 109,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 104,
            "mutability": "mutable",
            "name": "from",
            "nameLocation": "3455:4:1",
            "nodeType": "VariableDeclaration",
            "scope": 111,
            "src": "3447:12:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 103,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "3447:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 106,
            "mutability": "mutable",
            "name": "to",
            "nameLocation": "3478:2:1",
            "nodeType": "VariableDeclaration",
            "scope": 111,
            "src": "3470:10:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 105,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "3470:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 108,
            "mutability": "mutable",
            "name": "tokenId",
            "nameLocation": "3499:7:1",
            "nodeType": "VariableDeclaration",
            "scope": 111,
            "src": "3491:15:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 107,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "3491:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "3436:77:1"
        },
        "returnParameters": {
          "id": 110,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "3522:0:1"
        },
        "scope": 158,
        "src": "3415:108:1",
        "stateMutability": "nonpayable",
        "virtual": false,
        "visibility": "external"
      }, {
        "documentation": {
          "id": 112,
          "nodeType": "StructuredDocumentation",
          "src": "3531:464:1",
          "text": " @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."
        },
        "functionSelector": "095ea7b3",
        "id": 119,
        "implemented": false,
        "kind": "function",
        "modifiers": [],
        "name": "approve",
        "nameLocation": "4010:7:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 117,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 114,
            "mutability": "mutable",
            "name": "to",
            "nameLocation": "4026:2:1",
            "nodeType": "VariableDeclaration",
            "scope": 119,
            "src": "4018:10:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 113,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "4018:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 116,
            "mutability": "mutable",
            "name": "tokenId",
            "nameLocation": "4038:7:1",
            "nodeType": "VariableDeclaration",
            "scope": 119,
            "src": "4030:15:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 115,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "4030:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "4017:29:1"
        },
        "returnParameters": {
          "id": 118,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "4055:0:1"
        },
        "scope": 158,
        "src": "4001:55:1",
        "stateMutability": "nonpayable",
        "virtual": false,
        "visibility": "external"
      }, {
        "documentation": {
          "id": 120,
          "nodeType": "StructuredDocumentation",
          "src": "4064:145:1",
          "text": " @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."
        },
        "functionSelector": "081812fc",
        "id": 127,
        "implemented": false,
        "kind": "function",
        "modifiers": [],
        "name": "getApproved",
        "nameLocation": "4224:11:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 123,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 122,
            "mutability": "mutable",
            "name": "tokenId",
            "nameLocation": "4244:7:1",
            "nodeType": "VariableDeclaration",
            "scope": 127,
            "src": "4236:15:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 121,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "4236:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "4235:17:1"
        },
        "returnParameters": {
          "id": 126,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 125,
            "mutability": "mutable",
            "name": "operator",
            "nameLocation": "4284:8:1",
            "nodeType": "VariableDeclaration",
            "scope": 127,
            "src": "4276:16:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 124,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "4276:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }],
          "src": "4275:18:1"
        },
        "scope": 158,
        "src": "4215:79:1",
        "stateMutability": "view",
        "virtual": false,
        "visibility": "external"
      }, {
        "documentation": {
          "id": 128,
          "nodeType": "StructuredDocumentation",
          "src": "4302:318:1",
          "text": " @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."
        },
        "functionSelector": "a22cb465",
        "id": 135,
        "implemented": false,
        "kind": "function",
        "modifiers": [],
        "name": "setApprovalForAll",
        "nameLocation": "4635:17:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 133,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 130,
            "mutability": "mutable",
            "name": "operator",
            "nameLocation": "4661:8:1",
            "nodeType": "VariableDeclaration",
            "scope": 135,
            "src": "4653:16:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 129,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "4653:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 132,
            "mutability": "mutable",
            "name": "_approved",
            "nameLocation": "4676:9:1",
            "nodeType": "VariableDeclaration",
            "scope": 135,
            "src": "4671:14:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 131,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "4671:4:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "visibility": "internal"
          }],
          "src": "4652:34:1"
        },
        "returnParameters": {
          "id": 134,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "4695:0:1"
        },
        "scope": 158,
        "src": "4626:70:1",
        "stateMutability": "nonpayable",
        "virtual": false,
        "visibility": "external"
      }, {
        "documentation": {
          "id": 136,
          "nodeType": "StructuredDocumentation",
          "src": "4704:142:1",
          "text": " @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"
        },
        "functionSelector": "e985e9c5",
        "id": 145,
        "implemented": false,
        "kind": "function",
        "modifiers": [],
        "name": "isApprovedForAll",
        "nameLocation": "4861:16:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 141,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 138,
            "mutability": "mutable",
            "name": "owner",
            "nameLocation": "4886:5:1",
            "nodeType": "VariableDeclaration",
            "scope": 145,
            "src": "4878:13:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 137,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "4878:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 140,
            "mutability": "mutable",
            "name": "operator",
            "nameLocation": "4901:8:1",
            "nodeType": "VariableDeclaration",
            "scope": 145,
            "src": "4893:16:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 139,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "4893:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }],
          "src": "4877:33:1"
        },
        "returnParameters": {
          "id": 144,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 143,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 145,
            "src": "4934:4:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 142,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "4934:4:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "visibility": "internal"
          }],
          "src": "4933:6:1"
        },
        "scope": 158,
        "src": "4852:88:1",
        "stateMutability": "view",
        "virtual": false,
        "visibility": "external"
      }, {
        "documentation": {
          "id": 146,
          "nodeType": "StructuredDocumentation",
          "src": "4948:568:1",
          "text": " @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
        },
        "functionSelector": "b88d4fde",
        "id": 157,
        "implemented": false,
        "kind": "function",
        "modifiers": [],
        "name": "safeTransferFrom",
        "nameLocation": "5531:16:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 155,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 148,
            "mutability": "mutable",
            "name": "from",
            "nameLocation": "5566:4:1",
            "nodeType": "VariableDeclaration",
            "scope": 157,
            "src": "5558:12:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 147,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "5558:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 150,
            "mutability": "mutable",
            "name": "to",
            "nameLocation": "5589:2:1",
            "nodeType": "VariableDeclaration",
            "scope": 157,
            "src": "5581:10:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 149,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "5581:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 152,
            "mutability": "mutable",
            "name": "tokenId",
            "nameLocation": "5610:7:1",
            "nodeType": "VariableDeclaration",
            "scope": 157,
            "src": "5602:15:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 151,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "5602:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 154,
            "mutability": "mutable",
            "name": "data",
            "nameLocation": "5643:4:1",
            "nodeType": "VariableDeclaration",
            "scope": 157,
            "src": "5628:19:1",
            "stateVariable": false,
            "storageLocation": "calldata",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes_calldata_ptr",
              "typeString": "bytes"
            },
            "typeName": {
              "id": 153,
              "name": "bytes",
              "nodeType": "ElementaryTypeName",
              "src": "5628:5:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_storage_ptr",
                "typeString": "bytes"
              }
            },
            "visibility": "internal"
          }],
          "src": "5547:107:1"
        },
        "returnParameters": {
          "id": 156,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "5663:0:1"
        },
        "scope": 158,
        "src": "5522:142:1",
        "stateMutability": "nonpayable",
        "virtual": false,
        "visibility": "external"
      }],
      "scope": 2351,
      "src": "1035:4632:1",
      "usedErrors": []
    }, {
      "id": 159,
      "literals": ["solidity", "^", "0.8", ".0"],
      "nodeType": "PragmaDirective",
      "src": "5753:23:1"
    }, {
      "abstract": false,
      "baseContracts": [{
        "baseName": {
          "id": 161,
          "name": "IERC721",
          "nodeType": "IdentifierPath",
          "referencedDeclaration": 158,
          "src": "5950:7:1"
        },
        "id": 162,
        "nodeType": "InheritanceSpecifier",
        "src": "5950:7:1"
      }],
      "canonicalName": "IERC721Enumerable",
      "contractDependencies": [],
      "contractKind": "interface",
      "documentation": {
        "id": 160,
        "nodeType": "StructuredDocumentation",
        "src": "5778:139:1",
        "text": " @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"
      },
      "fullyImplemented": false,
      "id": 187,
      "linearizedBaseContracts": [187, 158, 44],
      "name": "IERC721Enumerable",
      "nameLocation": "5929:17:1",
      "nodeType": "ContractDefinition",
      "nodes": [{
        "documentation": {
          "id": 163,
          "nodeType": "StructuredDocumentation",
          "src": "5965:84:1",
          "text": " @dev Returns the total amount of tokens stored by the contract."
        },
        "functionSelector": "18160ddd",
        "id": 168,
        "implemented": false,
        "kind": "function",
        "modifiers": [],
        "name": "totalSupply",
        "nameLocation": "6064:11:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 164,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "6075:2:1"
        },
        "returnParameters": {
          "id": 167,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 166,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 168,
            "src": "6101:7:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 165,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "6101:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "6100:9:1"
        },
        "scope": 187,
        "src": "6055:55:1",
        "stateMutability": "view",
        "virtual": false,
        "visibility": "external"
      }, {
        "documentation": {
          "id": 169,
          "nodeType": "StructuredDocumentation",
          "src": "6118:174:1",
          "text": " @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n Use along with {balanceOf} to enumerate all of ``owner``'s tokens."
        },
        "functionSelector": "2f745c59",
        "id": 178,
        "implemented": false,
        "kind": "function",
        "modifiers": [],
        "name": "tokenOfOwnerByIndex",
        "nameLocation": "6307:19:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 174,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 171,
            "mutability": "mutable",
            "name": "owner",
            "nameLocation": "6335:5:1",
            "nodeType": "VariableDeclaration",
            "scope": 178,
            "src": "6327:13:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 170,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "6327:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 173,
            "mutability": "mutable",
            "name": "index",
            "nameLocation": "6350:5:1",
            "nodeType": "VariableDeclaration",
            "scope": 178,
            "src": "6342:13:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 172,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "6342:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "6326:30:1"
        },
        "returnParameters": {
          "id": 177,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 176,
            "mutability": "mutable",
            "name": "tokenId",
            "nameLocation": "6388:7:1",
            "nodeType": "VariableDeclaration",
            "scope": 178,
            "src": "6380:15:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 175,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "6380:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "6379:17:1"
        },
        "scope": 187,
        "src": "6298:99:1",
        "stateMutability": "view",
        "virtual": false,
        "visibility": "external"
      }, {
        "documentation": {
          "id": 179,
          "nodeType": "StructuredDocumentation",
          "src": "6405:167:1",
          "text": " @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n Use along with {totalSupply} to enumerate all tokens."
        },
        "functionSelector": "4f6ccce7",
        "id": 186,
        "implemented": false,
        "kind": "function",
        "modifiers": [],
        "name": "tokenByIndex",
        "nameLocation": "6587:12:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 182,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 181,
            "mutability": "mutable",
            "name": "index",
            "nameLocation": "6608:5:1",
            "nodeType": "VariableDeclaration",
            "scope": 186,
            "src": "6600:13:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 180,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "6600:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "6599:15:1"
        },
        "returnParameters": {
          "id": 185,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 184,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 186,
            "src": "6638:7:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 183,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "6638:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "6637:9:1"
        },
        "scope": 187,
        "src": "6578:69:1",
        "stateMutability": "view",
        "virtual": false,
        "visibility": "external"
      }],
      "scope": 2351,
      "src": "5919:731:1",
      "usedErrors": []
    }, {
      "id": 188,
      "literals": ["solidity", "^", "0.8", ".0"],
      "nodeType": "PragmaDirective",
      "src": "6721:23:1"
    }, {
      "abstract": true,
      "baseContracts": [{
        "baseName": {
          "id": 190,
          "name": "IERC165",
          "nodeType": "IdentifierPath",
          "referencedDeclaration": 44,
          "src": "7365:7:1"
        },
        "id": 191,
        "nodeType": "InheritanceSpecifier",
        "src": "7365:7:1"
      }],
      "canonicalName": "ERC165",
      "contractDependencies": [],
      "contractKind": "contract",
      "documentation": {
        "id": 189,
        "nodeType": "StructuredDocumentation",
        "src": "6746:589:1",
        "text": " @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."
      },
      "fullyImplemented": true,
      "id": 209,
      "linearizedBaseContracts": [209, 44],
      "name": "ERC165",
      "nameLocation": "7355:6:1",
      "nodeType": "ContractDefinition",
      "nodes": [{
        "baseFunctions": [43],
        "body": {
          "id": 207,
          "nodeType": "Block",
          "src": "7535:66:1",
          "statements": [{
            "expression": {
              "commonType": {
                "typeIdentifier": "t_bytes4",
                "typeString": "bytes4"
              },
              "id": 205,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "leftExpression": {
                "id": 200,
                "name": "interfaceId",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 194,
                "src": "7553:11:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes4",
                  "typeString": "bytes4"
                }
              },
              "nodeType": "BinaryOperation",
              "operator": "==",
              "rightExpression": {
                "expression": {
                  "arguments": [{
                    "id": 202,
                    "name": "IERC165",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 44,
                    "src": "7573:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_type$_t_contract$_IERC165_$44_$",
                      "typeString": "type(contract IERC165)"
                    }
                  }],
                  "expression": {
                    "argumentTypes": [{
                      "typeIdentifier": "t_type$_t_contract$_IERC165_$44_$",
                      "typeString": "type(contract IERC165)"
                    }],
                    "id": 201,
                    "name": "type",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4294967269,
                    "src": "7568:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                      "typeString": "function () pure"
                    }
                  },
                  "id": 203,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "functionCall",
                  "lValueRequested": false,
                  "names": [],
                  "nodeType": "FunctionCall",
                  "src": "7568:13:1",
                  "tryCall": false,
                  "typeDescriptions": {
                    "typeIdentifier": "t_magic_meta_type_t_contract$_IERC165_$44",
                    "typeString": "type(contract IERC165)"
                  }
                },
                "id": 204,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "lValueRequested": false,
                "memberName": "interfaceId",
                "nodeType": "MemberAccess",
                "src": "7568:25:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes4",
                  "typeString": "bytes4"
                }
              },
              "src": "7553:40:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "functionReturnParameters": 199,
            "id": 206,
            "nodeType": "Return",
            "src": "7546:47:1"
          }]
        },
        "documentation": {
          "id": 192,
          "nodeType": "StructuredDocumentation",
          "src": "7380:58:1",
          "text": " @dev See {IERC165-supportsInterface}."
        },
        "functionSelector": "01ffc9a7",
        "id": 208,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "supportsInterface",
        "nameLocation": "7453:17:1",
        "nodeType": "FunctionDefinition",
        "overrides": {
          "id": 196,
          "nodeType": "OverrideSpecifier",
          "overrides": [],
          "src": "7511:8:1"
        },
        "parameters": {
          "id": 195,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 194,
            "mutability": "mutable",
            "name": "interfaceId",
            "nameLocation": "7478:11:1",
            "nodeType": "VariableDeclaration",
            "scope": 208,
            "src": "7471:18:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes4",
              "typeString": "bytes4"
            },
            "typeName": {
              "id": 193,
              "name": "bytes4",
              "nodeType": "ElementaryTypeName",
              "src": "7471:6:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes4",
                "typeString": "bytes4"
              }
            },
            "visibility": "internal"
          }],
          "src": "7470:20:1"
        },
        "returnParameters": {
          "id": 199,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 198,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 208,
            "src": "7529:4:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 197,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "7529:4:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "visibility": "internal"
          }],
          "src": "7528:6:1"
        },
        "scope": 209,
        "src": "7444:157:1",
        "stateMutability": "view",
        "virtual": true,
        "visibility": "public"
      }],
      "scope": 2351,
      "src": "7337:267:1",
      "usedErrors": []
    }, {
      "id": 210,
      "literals": ["solidity", "^", "0.8", ".0"],
      "nodeType": "PragmaDirective",
      "src": "7666:23:1"
    }, {
      "abstract": false,
      "baseContracts": [],
      "canonicalName": "Strings",
      "contractDependencies": [],
      "contractKind": "library",
      "documentation": {
        "id": 211,
        "nodeType": "StructuredDocumentation",
        "src": "7693:36:1",
        "text": " @dev String operations."
      },
      "fullyImplemented": true,
      "id": 411,
      "linearizedBaseContracts": [411],
      "name": "Strings",
      "nameLocation": "7739:7:1",
      "nodeType": "ContractDefinition",
      "nodes": [{
        "constant": true,
        "id": 214,
        "mutability": "constant",
        "name": "_HEX_SYMBOLS",
        "nameLocation": "7779:12:1",
        "nodeType": "VariableDeclaration",
        "scope": 411,
        "src": "7754:58:1",
        "stateVariable": true,
        "storageLocation": "default",
        "typeDescriptions": {
          "typeIdentifier": "t_bytes16",
          "typeString": "bytes16"
        },
        "typeName": {
          "id": 212,
          "name": "bytes16",
          "nodeType": "ElementaryTypeName",
          "src": "7754:7:1",
          "typeDescriptions": {
            "typeIdentifier": "t_bytes16",
            "typeString": "bytes16"
          }
        },
        "value": {
          "hexValue": "30313233343536373839616263646566",
          "id": 213,
          "isConstant": false,
          "isLValue": false,
          "isPure": true,
          "kind": "string",
          "lValueRequested": false,
          "nodeType": "Literal",
          "src": "7794:18:1",
          "typeDescriptions": {
            "typeIdentifier": "t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f",
            "typeString": "literal_string \"0123456789abcdef\""
          },
          "value": "0123456789abcdef"
        },
        "visibility": "private"
      }, {
        "body": {
          "id": 292,
          "nodeType": "Block",
          "src": "7990:652:1",
          "statements": [{
            "condition": {
              "commonType": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "id": 224,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "leftExpression": {
                "id": 222,
                "name": "value",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 217,
                "src": "8196:5:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "BinaryOperation",
              "operator": "==",
              "rightExpression": {
                "hexValue": "30",
                "id": 223,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "8205:1:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_0_by_1",
                  "typeString": "int_const 0"
                },
                "value": "0"
              },
              "src": "8196:10:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "id": 228,
            "nodeType": "IfStatement",
            "src": "8192:53:1",
            "trueBody": {
              "id": 227,
              "nodeType": "Block",
              "src": "8208:37:1",
              "statements": [{
                "expression": {
                  "hexValue": "30",
                  "id": 225,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "string",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "8230:3:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
                    "typeString": "literal_string \"0\""
                  },
                  "value": "0"
                },
                "functionReturnParameters": 221,
                "id": 226,
                "nodeType": "Return",
                "src": "8223:10:1"
              }]
            }
          }, {
            "assignments": [230],
            "declarations": [{
              "constant": false,
              "id": 230,
              "mutability": "mutable",
              "name": "temp",
              "nameLocation": "8263:4:1",
              "nodeType": "VariableDeclaration",
              "scope": 292,
              "src": "8255:12:1",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "typeName": {
                "id": 229,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "8255:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "visibility": "internal"
            }],
            "id": 232,
            "initialValue": {
              "id": 231,
              "name": "value",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 217,
              "src": "8270:5:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "nodeType": "VariableDeclarationStatement",
            "src": "8255:20:1"
          }, {
            "assignments": [234],
            "declarations": [{
              "constant": false,
              "id": 234,
              "mutability": "mutable",
              "name": "digits",
              "nameLocation": "8294:6:1",
              "nodeType": "VariableDeclaration",
              "scope": 292,
              "src": "8286:14:1",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "typeName": {
                "id": 233,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "8286:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "visibility": "internal"
            }],
            "id": 235,
            "nodeType": "VariableDeclarationStatement",
            "src": "8286:14:1"
          }, {
            "body": {
              "id": 246,
              "nodeType": "Block",
              "src": "8329:60:1",
              "statements": [{
                "expression": {
                  "id": 240,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "lValueRequested": false,
                  "nodeType": "UnaryOperation",
                  "operator": "++",
                  "prefix": false,
                  "src": "8344:8:1",
                  "subExpression": {
                    "id": 239,
                    "name": "digits",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 234,
                    "src": "8344:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "id": 241,
                "nodeType": "ExpressionStatement",
                "src": "8344:8:1"
              }, {
                "expression": {
                  "id": 244,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "lValueRequested": false,
                  "leftHandSide": {
                    "id": 242,
                    "name": "temp",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 230,
                    "src": "8367:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "Assignment",
                  "operator": "/=",
                  "rightHandSide": {
                    "hexValue": "3130",
                    "id": 243,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "8375:2:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_10_by_1",
                      "typeString": "int_const 10"
                    },
                    "value": "10"
                  },
                  "src": "8367:10:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "id": 245,
                "nodeType": "ExpressionStatement",
                "src": "8367:10:1"
              }]
            },
            "condition": {
              "commonType": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "id": 238,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "leftExpression": {
                "id": 236,
                "name": "temp",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 230,
                "src": "8318:4:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "BinaryOperation",
              "operator": "!=",
              "rightExpression": {
                "hexValue": "30",
                "id": 237,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "8326:1:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_0_by_1",
                  "typeString": "int_const 0"
                },
                "value": "0"
              },
              "src": "8318:9:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "id": 247,
            "nodeType": "WhileStatement",
            "src": "8311:78:1"
          }, {
            "assignments": [249],
            "declarations": [{
              "constant": false,
              "id": 249,
              "mutability": "mutable",
              "name": "buffer",
              "nameLocation": "8412:6:1",
              "nodeType": "VariableDeclaration",
              "scope": 292,
              "src": "8399:19:1",
              "stateVariable": false,
              "storageLocation": "memory",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_memory_ptr",
                "typeString": "bytes"
              },
              "typeName": {
                "id": 248,
                "name": "bytes",
                "nodeType": "ElementaryTypeName",
                "src": "8399:5:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes_storage_ptr",
                  "typeString": "bytes"
                }
              },
              "visibility": "internal"
            }],
            "id": 254,
            "initialValue": {
              "arguments": [{
                "id": 252,
                "name": "digits",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 234,
                "src": "8431:6:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }],
                "id": 251,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "lValueRequested": false,
                "nodeType": "NewExpression",
                "src": "8421:9:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
                  "typeString": "function (uint256) pure returns (bytes memory)"
                },
                "typeName": {
                  "id": 250,
                  "name": "bytes",
                  "nodeType": "ElementaryTypeName",
                  "src": "8425:5:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_storage_ptr",
                    "typeString": "bytes"
                  }
                }
              },
              "id": 253,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "8421:17:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_memory_ptr",
                "typeString": "bytes memory"
              }
            },
            "nodeType": "VariableDeclarationStatement",
            "src": "8399:39:1"
          }, {
            "body": {
              "id": 285,
              "nodeType": "Block",
              "src": "8468:135:1",
              "statements": [{
                "expression": {
                  "id": 260,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "lValueRequested": false,
                  "leftHandSide": {
                    "id": 258,
                    "name": "digits",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 234,
                    "src": "8483:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "Assignment",
                  "operator": "-=",
                  "rightHandSide": {
                    "hexValue": "31",
                    "id": 259,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "8493:1:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_1_by_1",
                      "typeString": "int_const 1"
                    },
                    "value": "1"
                  },
                  "src": "8483:11:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "id": 261,
                "nodeType": "ExpressionStatement",
                "src": "8483:11:1"
              }, {
                "expression": {
                  "id": 279,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "lValueRequested": false,
                  "leftHandSide": {
                    "baseExpression": {
                      "id": 262,
                      "name": "buffer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 249,
                      "src": "8509:6:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes memory"
                      }
                    },
                    "id": 264,
                    "indexExpression": {
                      "id": 263,
                      "name": "digits",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 234,
                      "src": "8516:6:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": true,
                    "nodeType": "IndexAccess",
                    "src": "8509:14:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes1",
                      "typeString": "bytes1"
                    }
                  },
                  "nodeType": "Assignment",
                  "operator": "=",
                  "rightHandSide": {
                    "arguments": [{
                      "arguments": [{
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 276,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "hexValue": "3438",
                          "id": 269,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "8539:2:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_48_by_1",
                            "typeString": "int_const 48"
                          },
                          "value": "48"
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "+",
                        "rightExpression": {
                          "arguments": [{
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 274,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 272,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 217,
                              "src": "8552:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "%",
                            "rightExpression": {
                              "hexValue": "3130",
                              "id": 273,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "8560:2:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_10_by_1",
                                "typeString": "int_const 10"
                              },
                              "value": "10"
                            },
                            "src": "8552:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }],
                          "expression": {
                            "argumentTypes": [{
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }],
                            "id": 271,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "8544:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_uint256_$",
                              "typeString": "type(uint256)"
                            },
                            "typeName": {
                              "id": 270,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "8544:7:1",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 275,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8544:19:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "8539:24:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }],
                      "expression": {
                        "argumentTypes": [{
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }],
                        "id": 268,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "8533:5:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_uint8_$",
                          "typeString": "type(uint8)"
                        },
                        "typeName": {
                          "id": 267,
                          "name": "uint8",
                          "nodeType": "ElementaryTypeName",
                          "src": "8533:5:1",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 277,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "8533:31:1",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    }],
                    "expression": {
                      "argumentTypes": [{
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }],
                      "id": 266,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "8526:6:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_bytes1_$",
                        "typeString": "type(bytes1)"
                      },
                      "typeName": {
                        "id": 265,
                        "name": "bytes1",
                        "nodeType": "ElementaryTypeName",
                        "src": "8526:6:1",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 278,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "8526:39:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes1",
                      "typeString": "bytes1"
                    }
                  },
                  "src": "8509:56:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes1",
                    "typeString": "bytes1"
                  }
                },
                "id": 280,
                "nodeType": "ExpressionStatement",
                "src": "8509:56:1"
              }, {
                "expression": {
                  "id": 283,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "lValueRequested": false,
                  "leftHandSide": {
                    "id": 281,
                    "name": "value",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 217,
                    "src": "8580:5:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "Assignment",
                  "operator": "/=",
                  "rightHandSide": {
                    "hexValue": "3130",
                    "id": 282,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "8589:2:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_10_by_1",
                      "typeString": "int_const 10"
                    },
                    "value": "10"
                  },
                  "src": "8580:11:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "id": 284,
                "nodeType": "ExpressionStatement",
                "src": "8580:11:1"
              }]
            },
            "condition": {
              "commonType": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "id": 257,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "leftExpression": {
                "id": 255,
                "name": "value",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 217,
                "src": "8456:5:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "BinaryOperation",
              "operator": "!=",
              "rightExpression": {
                "hexValue": "30",
                "id": 256,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "8465:1:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_0_by_1",
                  "typeString": "int_const 0"
                },
                "value": "0"
              },
              "src": "8456:10:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "id": 286,
            "nodeType": "WhileStatement",
            "src": "8449:154:1"
          }, {
            "expression": {
              "arguments": [{
                "id": 289,
                "name": "buffer",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 249,
                "src": "8627:6:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes_memory_ptr",
                  "typeString": "bytes memory"
                }
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_bytes_memory_ptr",
                  "typeString": "bytes memory"
                }],
                "id": 288,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "lValueRequested": false,
                "nodeType": "ElementaryTypeNameExpression",
                "src": "8620:6:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                  "typeString": "type(string storage pointer)"
                },
                "typeName": {
                  "id": 287,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "8620:6:1",
                  "typeDescriptions": {}
                }
              },
              "id": 290,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "typeConversion",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "8620:14:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_string_memory_ptr",
                "typeString": "string memory"
              }
            },
            "functionReturnParameters": 221,
            "id": 291,
            "nodeType": "Return",
            "src": "8613:21:1"
          }]
        },
        "documentation": {
          "id": 215,
          "nodeType": "StructuredDocumentation",
          "src": "7821:92:1",
          "text": " @dev Converts a `uint256` to its ASCII `string` decimal representation."
        },
        "id": 293,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "toString",
        "nameLocation": "7928:8:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 218,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 217,
            "mutability": "mutable",
            "name": "value",
            "nameLocation": "7945:5:1",
            "nodeType": "VariableDeclaration",
            "scope": 293,
            "src": "7937:13:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 216,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "7937:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "7936:15:1"
        },
        "returnParameters": {
          "id": 221,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 220,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 293,
            "src": "7975:13:1",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory_ptr",
              "typeString": "string"
            },
            "typeName": {
              "id": 219,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "7975:6:1",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "internal"
          }],
          "src": "7974:15:1"
        },
        "scope": 411,
        "src": "7919:723:1",
        "stateMutability": "pure",
        "virtual": false,
        "visibility": "internal"
      }, {
        "body": {
          "id": 333,
          "nodeType": "Block",
          "src": "8826:266:1",
          "statements": [{
            "condition": {
              "commonType": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "id": 303,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "leftExpression": {
                "id": 301,
                "name": "value",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 296,
                "src": "8841:5:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "BinaryOperation",
              "operator": "==",
              "rightExpression": {
                "hexValue": "30",
                "id": 302,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "8850:1:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_0_by_1",
                  "typeString": "int_const 0"
                },
                "value": "0"
              },
              "src": "8841:10:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "id": 307,
            "nodeType": "IfStatement",
            "src": "8837:56:1",
            "trueBody": {
              "id": 306,
              "nodeType": "Block",
              "src": "8853:40:1",
              "statements": [{
                "expression": {
                  "hexValue": "30783030",
                  "id": 304,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "string",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "8875:6:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_stringliteral_27489e20a0060b723a1748bdff5e44570ee9fae64141728105692eac6031e8a4",
                    "typeString": "literal_string \"0x00\""
                  },
                  "value": "0x00"
                },
                "functionReturnParameters": 300,
                "id": 305,
                "nodeType": "Return",
                "src": "8868:13:1"
              }]
            }
          }, {
            "assignments": [309],
            "declarations": [{
              "constant": false,
              "id": 309,
              "mutability": "mutable",
              "name": "temp",
              "nameLocation": "8911:4:1",
              "nodeType": "VariableDeclaration",
              "scope": 333,
              "src": "8903:12:1",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "typeName": {
                "id": 308,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "8903:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "visibility": "internal"
            }],
            "id": 311,
            "initialValue": {
              "id": 310,
              "name": "value",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 296,
              "src": "8918:5:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "nodeType": "VariableDeclarationStatement",
            "src": "8903:20:1"
          }, {
            "assignments": [313],
            "declarations": [{
              "constant": false,
              "id": 313,
              "mutability": "mutable",
              "name": "length",
              "nameLocation": "8942:6:1",
              "nodeType": "VariableDeclaration",
              "scope": 333,
              "src": "8934:14:1",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "typeName": {
                "id": 312,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "8934:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "visibility": "internal"
            }],
            "id": 315,
            "initialValue": {
              "hexValue": "30",
              "id": 314,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "8951:1:1",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_0_by_1",
                "typeString": "int_const 0"
              },
              "value": "0"
            },
            "nodeType": "VariableDeclarationStatement",
            "src": "8934:18:1"
          }, {
            "body": {
              "id": 326,
              "nodeType": "Block",
              "src": "8981:60:1",
              "statements": [{
                "expression": {
                  "id": 320,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "lValueRequested": false,
                  "nodeType": "UnaryOperation",
                  "operator": "++",
                  "prefix": false,
                  "src": "8996:8:1",
                  "subExpression": {
                    "id": 319,
                    "name": "length",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 313,
                    "src": "8996:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "id": 321,
                "nodeType": "ExpressionStatement",
                "src": "8996:8:1"
              }, {
                "expression": {
                  "id": 324,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "lValueRequested": false,
                  "leftHandSide": {
                    "id": 322,
                    "name": "temp",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 309,
                    "src": "9019:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "Assignment",
                  "operator": ">>=",
                  "rightHandSide": {
                    "hexValue": "38",
                    "id": 323,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "9028:1:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_8_by_1",
                      "typeString": "int_const 8"
                    },
                    "value": "8"
                  },
                  "src": "9019:10:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "id": 325,
                "nodeType": "ExpressionStatement",
                "src": "9019:10:1"
              }]
            },
            "condition": {
              "commonType": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "id": 318,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "leftExpression": {
                "id": 316,
                "name": "temp",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 309,
                "src": "8970:4:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "BinaryOperation",
              "operator": "!=",
              "rightExpression": {
                "hexValue": "30",
                "id": 317,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "8978:1:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_0_by_1",
                  "typeString": "int_const 0"
                },
                "value": "0"
              },
              "src": "8970:9:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "id": 327,
            "nodeType": "WhileStatement",
            "src": "8963:78:1"
          }, {
            "expression": {
              "arguments": [{
                "id": 329,
                "name": "value",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 296,
                "src": "9070:5:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }, {
                "id": 330,
                "name": "length",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 313,
                "src": "9077:6:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }, {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }],
                "id": 328,
                "name": "toHexString",
                "nodeType": "Identifier",
                "overloadedDeclarations": [334, 410],
                "referencedDeclaration": 410,
                "src": "9058:11:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
                  "typeString": "function (uint256,uint256) pure returns (string memory)"
                }
              },
              "id": 331,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "9058:26:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_string_memory_ptr",
                "typeString": "string memory"
              }
            },
            "functionReturnParameters": 300,
            "id": 332,
            "nodeType": "Return",
            "src": "9051:33:1"
          }]
        },
        "documentation": {
          "id": 294,
          "nodeType": "StructuredDocumentation",
          "src": "8650:96:1",
          "text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."
        },
        "id": 334,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "toHexString",
        "nameLocation": "8761:11:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 297,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 296,
            "mutability": "mutable",
            "name": "value",
            "nameLocation": "8781:5:1",
            "nodeType": "VariableDeclaration",
            "scope": 334,
            "src": "8773:13:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 295,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "8773:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "8772:15:1"
        },
        "returnParameters": {
          "id": 300,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 299,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 334,
            "src": "8811:13:1",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory_ptr",
              "typeString": "string"
            },
            "typeName": {
              "id": 298,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "8811:6:1",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "internal"
          }],
          "src": "8810:15:1"
        },
        "scope": 411,
        "src": "8752:340:1",
        "stateMutability": "pure",
        "virtual": false,
        "visibility": "internal"
      }, {
        "body": {
          "id": 409,
          "nodeType": "Block",
          "src": "9310:361:1",
          "statements": [{
            "assignments": [345],
            "declarations": [{
              "constant": false,
              "id": 345,
              "mutability": "mutable",
              "name": "buffer",
              "nameLocation": "9334:6:1",
              "nodeType": "VariableDeclaration",
              "scope": 409,
              "src": "9321:19:1",
              "stateVariable": false,
              "storageLocation": "memory",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_memory_ptr",
                "typeString": "bytes"
              },
              "typeName": {
                "id": 344,
                "name": "bytes",
                "nodeType": "ElementaryTypeName",
                "src": "9321:5:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes_storage_ptr",
                  "typeString": "bytes"
                }
              },
              "visibility": "internal"
            }],
            "id": 354,
            "initialValue": {
              "arguments": [{
                "commonType": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "id": 352,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "leftExpression": {
                  "commonType": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "id": 350,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "lValueRequested": false,
                  "leftExpression": {
                    "hexValue": "32",
                    "id": 348,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "9353:1:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_2_by_1",
                      "typeString": "int_const 2"
                    },
                    "value": "2"
                  },
                  "nodeType": "BinaryOperation",
                  "operator": "*",
                  "rightExpression": {
                    "id": 349,
                    "name": "length",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 339,
                    "src": "9357:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "src": "9353:10:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "nodeType": "BinaryOperation",
                "operator": "+",
                "rightExpression": {
                  "hexValue": "32",
                  "id": 351,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "9366:1:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_2_by_1",
                    "typeString": "int_const 2"
                  },
                  "value": "2"
                },
                "src": "9353:14:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }],
                "id": 347,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "lValueRequested": false,
                "nodeType": "NewExpression",
                "src": "9343:9:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
                  "typeString": "function (uint256) pure returns (bytes memory)"
                },
                "typeName": {
                  "id": 346,
                  "name": "bytes",
                  "nodeType": "ElementaryTypeName",
                  "src": "9347:5:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_storage_ptr",
                    "typeString": "bytes"
                  }
                }
              },
              "id": 353,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "9343:25:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_memory_ptr",
                "typeString": "bytes memory"
              }
            },
            "nodeType": "VariableDeclarationStatement",
            "src": "9321:47:1"
          }, {
            "expression": {
              "id": 359,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "leftHandSide": {
                "baseExpression": {
                  "id": 355,
                  "name": "buffer",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 345,
                  "src": "9379:6:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes memory"
                  }
                },
                "id": 357,
                "indexExpression": {
                  "hexValue": "30",
                  "id": 356,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "9386:1:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_0_by_1",
                    "typeString": "int_const 0"
                  },
                  "value": "0"
                },
                "isConstant": false,
                "isLValue": true,
                "isPure": false,
                "lValueRequested": true,
                "nodeType": "IndexAccess",
                "src": "9379:9:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes1",
                  "typeString": "bytes1"
                }
              },
              "nodeType": "Assignment",
              "operator": "=",
              "rightHandSide": {
                "hexValue": "30",
                "id": 358,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "string",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "9391:3:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
                  "typeString": "literal_string \"0\""
                },
                "value": "0"
              },
              "src": "9379:15:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes1",
                "typeString": "bytes1"
              }
            },
            "id": 360,
            "nodeType": "ExpressionStatement",
            "src": "9379:15:1"
          }, {
            "expression": {
              "id": 365,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "leftHandSide": {
                "baseExpression": {
                  "id": 361,
                  "name": "buffer",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 345,
                  "src": "9405:6:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes memory"
                  }
                },
                "id": 363,
                "indexExpression": {
                  "hexValue": "31",
                  "id": 362,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "9412:1:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_1_by_1",
                    "typeString": "int_const 1"
                  },
                  "value": "1"
                },
                "isConstant": false,
                "isLValue": true,
                "isPure": false,
                "lValueRequested": true,
                "nodeType": "IndexAccess",
                "src": "9405:9:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes1",
                  "typeString": "bytes1"
                }
              },
              "nodeType": "Assignment",
              "operator": "=",
              "rightHandSide": {
                "hexValue": "78",
                "id": 364,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "string",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "9417:3:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83",
                  "typeString": "literal_string \"x\""
                },
                "value": "x"
              },
              "src": "9405:15:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes1",
                "typeString": "bytes1"
              }
            },
            "id": 366,
            "nodeType": "ExpressionStatement",
            "src": "9405:15:1"
          }, {
            "body": {
              "id": 395,
              "nodeType": "Block",
              "src": "9476:90:1",
              "statements": [{
                "expression": {
                  "id": 389,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "lValueRequested": false,
                  "leftHandSide": {
                    "baseExpression": {
                      "id": 381,
                      "name": "buffer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 345,
                      "src": "9491:6:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes memory"
                      }
                    },
                    "id": 383,
                    "indexExpression": {
                      "id": 382,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 368,
                      "src": "9498:1:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": true,
                    "nodeType": "IndexAccess",
                    "src": "9491:9:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes1",
                      "typeString": "bytes1"
                    }
                  },
                  "nodeType": "Assignment",
                  "operator": "=",
                  "rightHandSide": {
                    "baseExpression": {
                      "id": 384,
                      "name": "_HEX_SYMBOLS",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 214,
                      "src": "9503:12:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes16",
                        "typeString": "bytes16"
                      }
                    },
                    "id": 388,
                    "indexExpression": {
                      "commonType": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "id": 387,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "leftExpression": {
                        "id": 385,
                        "name": "value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 337,
                        "src": "9516:5:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "BinaryOperation",
                      "operator": "&",
                      "rightExpression": {
                        "hexValue": "307866",
                        "id": 386,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9524:3:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_15_by_1",
                          "typeString": "int_const 15"
                        },
                        "value": "0xf"
                      },
                      "src": "9516:11:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "9503:25:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes1",
                      "typeString": "bytes1"
                    }
                  },
                  "src": "9491:37:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes1",
                    "typeString": "bytes1"
                  }
                },
                "id": 390,
                "nodeType": "ExpressionStatement",
                "src": "9491:37:1"
              }, {
                "expression": {
                  "id": 393,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "lValueRequested": false,
                  "leftHandSide": {
                    "id": 391,
                    "name": "value",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 337,
                    "src": "9543:5:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "Assignment",
                  "operator": ">>=",
                  "rightHandSide": {
                    "hexValue": "34",
                    "id": 392,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "9553:1:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_4_by_1",
                      "typeString": "int_const 4"
                    },
                    "value": "4"
                  },
                  "src": "9543:11:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "id": 394,
                "nodeType": "ExpressionStatement",
                "src": "9543:11:1"
              }]
            },
            "condition": {
              "commonType": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "id": 377,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "leftExpression": {
                "id": 375,
                "name": "i",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 368,
                "src": "9464:1:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "BinaryOperation",
              "operator": ">",
              "rightExpression": {
                "hexValue": "31",
                "id": 376,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "9468:1:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_1_by_1",
                  "typeString": "int_const 1"
                },
                "value": "1"
              },
              "src": "9464:5:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "id": 396,
            "initializationExpression": {
              "assignments": [368],
              "declarations": [{
                "constant": false,
                "id": 368,
                "mutability": "mutable",
                "name": "i",
                "nameLocation": "9444:1:1",
                "nodeType": "VariableDeclaration",
                "scope": 396,
                "src": "9436:9:1",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 367,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "9436:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              }],
              "id": 374,
              "initialValue": {
                "commonType": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "id": 373,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "leftExpression": {
                  "commonType": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "id": 371,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "lValueRequested": false,
                  "leftExpression": {
                    "hexValue": "32",
                    "id": 369,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "9448:1:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_2_by_1",
                      "typeString": "int_const 2"
                    },
                    "value": "2"
                  },
                  "nodeType": "BinaryOperation",
                  "operator": "*",
                  "rightExpression": {
                    "id": 370,
                    "name": "length",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 339,
                    "src": "9452:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "src": "9448:10:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "nodeType": "BinaryOperation",
                "operator": "+",
                "rightExpression": {
                  "hexValue": "31",
                  "id": 372,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "9461:1:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_1_by_1",
                    "typeString": "int_const 1"
                  },
                  "value": "1"
                },
                "src": "9448:14:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "VariableDeclarationStatement",
              "src": "9436:26:1"
            },
            "loopExpression": {
              "expression": {
                "id": 379,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "nodeType": "UnaryOperation",
                "operator": "--",
                "prefix": true,
                "src": "9471:3:1",
                "subExpression": {
                  "id": 378,
                  "name": "i",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 368,
                  "src": "9473:1:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 380,
              "nodeType": "ExpressionStatement",
              "src": "9471:3:1"
            },
            "nodeType": "ForStatement",
            "src": "9431:135:1"
          }, {
            "expression": {
              "arguments": [{
                "commonType": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "id": 400,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "leftExpression": {
                  "id": 398,
                  "name": "value",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 337,
                  "src": "9584:5:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "nodeType": "BinaryOperation",
                "operator": "==",
                "rightExpression": {
                  "hexValue": "30",
                  "id": 399,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "9593:1:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_0_by_1",
                    "typeString": "int_const 0"
                  },
                  "value": "0"
                },
                "src": "9584:10:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }, {
                "hexValue": "537472696e67733a20686578206c656e67746820696e73756666696369656e74",
                "id": 401,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "string",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "9596:34:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
                  "typeString": "literal_string \"Strings: hex length insufficient\""
                },
                "value": "Strings: hex length insufficient"
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }, {
                  "typeIdentifier": "t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
                  "typeString": "literal_string \"Strings: hex length insufficient\""
                }],
                "id": 397,
                "name": "require",
                "nodeType": "Identifier",
                "overloadedDeclarations": [4294967278, 4294967278],
                "referencedDeclaration": 4294967278,
                "src": "9576:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                  "typeString": "function (bool,string memory) pure"
                }
              },
              "id": 402,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "9576:55:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 403,
            "nodeType": "ExpressionStatement",
            "src": "9576:55:1"
          }, {
            "expression": {
              "arguments": [{
                "id": 406,
                "name": "buffer",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 345,
                "src": "9656:6:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes_memory_ptr",
                  "typeString": "bytes memory"
                }
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_bytes_memory_ptr",
                  "typeString": "bytes memory"
                }],
                "id": 405,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "lValueRequested": false,
                "nodeType": "ElementaryTypeNameExpression",
                "src": "9649:6:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                  "typeString": "type(string storage pointer)"
                },
                "typeName": {
                  "id": 404,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "9649:6:1",
                  "typeDescriptions": {}
                }
              },
              "id": 407,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "typeConversion",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "9649:14:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_string_memory_ptr",
                "typeString": "string memory"
              }
            },
            "functionReturnParameters": 343,
            "id": 408,
            "nodeType": "Return",
            "src": "9642:21:1"
          }]
        },
        "documentation": {
          "id": 335,
          "nodeType": "StructuredDocumentation",
          "src": "9100:114:1",
          "text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."
        },
        "id": 410,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "toHexString",
        "nameLocation": "9229:11:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 340,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 337,
            "mutability": "mutable",
            "name": "value",
            "nameLocation": "9249:5:1",
            "nodeType": "VariableDeclaration",
            "scope": 410,
            "src": "9241:13:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 336,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "9241:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 339,
            "mutability": "mutable",
            "name": "length",
            "nameLocation": "9264:6:1",
            "nodeType": "VariableDeclaration",
            "scope": 410,
            "src": "9256:14:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 338,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "9256:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "9240:31:1"
        },
        "returnParameters": {
          "id": 343,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 342,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 410,
            "src": "9295:13:1",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory_ptr",
              "typeString": "string"
            },
            "typeName": {
              "id": 341,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "9295:6:1",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "internal"
          }],
          "src": "9294:15:1"
        },
        "scope": 411,
        "src": "9220:451:1",
        "stateMutability": "pure",
        "virtual": false,
        "visibility": "internal"
      }],
      "scope": 2351,
      "src": "7731:1943:1",
      "usedErrors": []
    }, {
      "id": 412,
      "literals": ["solidity", "^", "0.8", ".0"],
      "nodeType": "PragmaDirective",
      "src": "9736:23:1"
    }, {
      "abstract": false,
      "baseContracts": [],
      "canonicalName": "Address",
      "contractDependencies": [],
      "contractKind": "library",
      "documentation": {
        "id": 413,
        "nodeType": "StructuredDocumentation",
        "src": "9763:69:1",
        "text": " @dev Collection of functions related to the address type"
      },
      "fullyImplemented": true,
      "id": 707,
      "linearizedBaseContracts": [707],
      "name": "Address",
      "nameLocation": "9842:7:1",
      "nodeType": "ContractDefinition",
      "nodes": [{
        "body": {
          "id": 429,
          "nodeType": "Block",
          "src": "10510:321:1",
          "statements": [{
            "assignments": [422],
            "declarations": [{
              "constant": false,
              "id": 422,
              "mutability": "mutable",
              "name": "size",
              "nameLocation": "10720:4:1",
              "nodeType": "VariableDeclaration",
              "scope": 429,
              "src": "10712:12:1",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "typeName": {
                "id": 421,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "10712:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "visibility": "internal"
            }],
            "id": 423,
            "nodeType": "VariableDeclarationStatement",
            "src": "10712:12:1"
          }, {
            "AST": {
              "nodeType": "YulBlock",
              "src": "10744:54:1",
              "statements": [{
                "nodeType": "YulAssignment",
                "src": "10759:28:1",
                "value": {
                  "arguments": [{
                    "name": "account",
                    "nodeType": "YulIdentifier",
                    "src": "10779:7:1"
                  }],
                  "functionName": {
                    "name": "extcodesize",
                    "nodeType": "YulIdentifier",
                    "src": "10767:11:1"
                  },
                  "nodeType": "YulFunctionCall",
                  "src": "10767:20:1"
                },
                "variableNames": [{
                  "name": "size",
                  "nodeType": "YulIdentifier",
                  "src": "10759:4:1"
                }]
              }]
            },
            "evmVersion": "london",
            "externalReferences": [{
              "declaration": 416,
              "isOffset": false,
              "isSlot": false,
              "src": "10779:7:1",
              "valueSize": 1
            }, {
              "declaration": 422,
              "isOffset": false,
              "isSlot": false,
              "src": "10759:4:1",
              "valueSize": 1
            }],
            "id": 424,
            "nodeType": "InlineAssembly",
            "src": "10735:63:1"
          }, {
            "expression": {
              "commonType": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "id": 427,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "leftExpression": {
                "id": 425,
                "name": "size",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 422,
                "src": "10815:4:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "BinaryOperation",
              "operator": ">",
              "rightExpression": {
                "hexValue": "30",
                "id": 426,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "10822:1:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_0_by_1",
                  "typeString": "int_const 0"
                },
                "value": "0"
              },
              "src": "10815:8:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "functionReturnParameters": 420,
            "id": 428,
            "nodeType": "Return",
            "src": "10808:15:1"
          }]
        },
        "documentation": {
          "id": 414,
          "nodeType": "StructuredDocumentation",
          "src": "9857:581:1",
          "text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ===="
        },
        "id": 430,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "isContract",
        "nameLocation": "10453:10:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 417,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 416,
            "mutability": "mutable",
            "name": "account",
            "nameLocation": "10472:7:1",
            "nodeType": "VariableDeclaration",
            "scope": 430,
            "src": "10464:15:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 415,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "10464:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }],
          "src": "10463:17:1"
        },
        "returnParameters": {
          "id": 420,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 419,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 430,
            "src": "10504:4:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 418,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "10504:4:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "visibility": "internal"
          }],
          "src": "10503:6:1"
        },
        "scope": 707,
        "src": "10444:387:1",
        "stateMutability": "view",
        "virtual": false,
        "visibility": "internal"
      }, {
        "body": {
          "id": 463,
          "nodeType": "Block",
          "src": "11837:246:1",
          "statements": [{
            "expression": {
              "arguments": [{
                "commonType": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "id": 445,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "leftExpression": {
                  "expression": {
                    "arguments": [{
                      "id": 441,
                      "name": "this",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4294967268,
                      "src": "11864:4:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Address_$707",
                        "typeString": "library Address"
                      }
                    }],
                    "expression": {
                      "argumentTypes": [{
                        "typeIdentifier": "t_contract$_Address_$707",
                        "typeString": "library Address"
                      }],
                      "id": 440,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "11856:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_address_$",
                        "typeString": "type(address)"
                      },
                      "typeName": {
                        "id": 439,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "11856:7:1",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 442,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "11856:13:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 443,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "lValueRequested": false,
                  "memberName": "balance",
                  "nodeType": "MemberAccess",
                  "src": "11856:21:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "nodeType": "BinaryOperation",
                "operator": ">=",
                "rightExpression": {
                  "id": 444,
                  "name": "amount",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 435,
                  "src": "11881:6:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "src": "11856:31:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }, {
                "hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
                "id": 446,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "string",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "11889:31:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
                  "typeString": "literal_string \"Address: insufficient balance\""
                },
                "value": "Address: insufficient balance"
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }, {
                  "typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
                  "typeString": "literal_string \"Address: insufficient balance\""
                }],
                "id": 438,
                "name": "require",
                "nodeType": "Identifier",
                "overloadedDeclarations": [4294967278, 4294967278],
                "referencedDeclaration": 4294967278,
                "src": "11848:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                  "typeString": "function (bool,string memory) pure"
                }
              },
              "id": 447,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "11848:73:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 448,
            "nodeType": "ExpressionStatement",
            "src": "11848:73:1"
          }, {
            "assignments": [450, null],
            "declarations": [{
              "constant": false,
              "id": 450,
              "mutability": "mutable",
              "name": "success",
              "nameLocation": "11940:7:1",
              "nodeType": "VariableDeclaration",
              "scope": 463,
              "src": "11935:12:1",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              },
              "typeName": {
                "id": 449,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "11935:4:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              },
              "visibility": "internal"
            }, null],
            "id": 457,
            "initialValue": {
              "arguments": [{
                "hexValue": "",
                "id": 455,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "string",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "11983:2:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                  "typeString": "literal_string \"\""
                },
                "value": ""
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                  "typeString": "literal_string \"\""
                }],
                "expression": {
                  "argumentTypes": [{
                    "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                    "typeString": "literal_string \"\""
                  }],
                  "expression": {
                    "id": 451,
                    "name": "recipient",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 433,
                    "src": "11953:9:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "id": 452,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "lValueRequested": false,
                  "memberName": "call",
                  "nodeType": "MemberAccess",
                  "src": "11953:14:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                    "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                  }
                },
                "id": 454,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "names": ["value"],
                "nodeType": "FunctionCallOptions",
                "options": [{
                  "id": 453,
                  "name": "amount",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 435,
                  "src": "11975:6:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                }],
                "src": "11953:29:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                  "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                }
              },
              "id": 456,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "11953:33:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                "typeString": "tuple(bool,bytes memory)"
              }
            },
            "nodeType": "VariableDeclarationStatement",
            "src": "11934:52:1"
          }, {
            "expression": {
              "arguments": [{
                "id": 459,
                "name": "success",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 450,
                "src": "12005:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }, {
                "hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
                "id": 460,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "string",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "12014:60:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
                  "typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
                },
                "value": "Address: unable to send value, recipient may have reverted"
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }, {
                  "typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
                  "typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
                }],
                "id": 458,
                "name": "require",
                "nodeType": "Identifier",
                "overloadedDeclarations": [4294967278, 4294967278],
                "referencedDeclaration": 4294967278,
                "src": "11997:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                  "typeString": "function (bool,string memory) pure"
                }
              },
              "id": 461,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "11997:78:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 462,
            "nodeType": "ExpressionStatement",
            "src": "11997:78:1"
          }]
        },
        "documentation": {
          "id": 431,
          "nodeType": "StructuredDocumentation",
          "src": "10839:921:1",
          "text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
        },
        "id": 464,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "sendValue",
        "nameLocation": "11775:9:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 436,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 433,
            "mutability": "mutable",
            "name": "recipient",
            "nameLocation": "11801:9:1",
            "nodeType": "VariableDeclaration",
            "scope": 464,
            "src": "11785:25:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address_payable",
              "typeString": "address payable"
            },
            "typeName": {
              "id": 432,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "11785:15:1",
              "stateMutability": "payable",
              "typeDescriptions": {
                "typeIdentifier": "t_address_payable",
                "typeString": "address payable"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 435,
            "mutability": "mutable",
            "name": "amount",
            "nameLocation": "11820:6:1",
            "nodeType": "VariableDeclaration",
            "scope": 464,
            "src": "11812:14:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 434,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "11812:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "11784:43:1"
        },
        "returnParameters": {
          "id": 437,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "11837:0:1"
        },
        "scope": 707,
        "src": "11766:317:1",
        "stateMutability": "nonpayable",
        "virtual": false,
        "visibility": "internal"
      }, {
        "body": {
          "id": 480,
          "nodeType": "Block",
          "src": "12934:86:1",
          "statements": [{
            "expression": {
              "arguments": [{
                "id": 475,
                "name": "target",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 467,
                "src": "12965:6:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }, {
                "id": 476,
                "name": "data",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 469,
                "src": "12973:4:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes_memory_ptr",
                  "typeString": "bytes memory"
                }
              }, {
                "hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
                "id": 477,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "string",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "12979:32:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
                  "typeString": "literal_string \"Address: low-level call failed\""
                },
                "value": "Address: low-level call failed"
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }, {
                  "typeIdentifier": "t_bytes_memory_ptr",
                  "typeString": "bytes memory"
                }, {
                  "typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
                  "typeString": "literal_string \"Address: low-level call failed\""
                }],
                "id": 474,
                "name": "functionCall",
                "nodeType": "Identifier",
                "overloadedDeclarations": [481, 501],
                "referencedDeclaration": 501,
                "src": "12952:12:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                  "typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
                }
              },
              "id": 478,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "12952:60:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_memory_ptr",
                "typeString": "bytes memory"
              }
            },
            "functionReturnParameters": 473,
            "id": 479,
            "nodeType": "Return",
            "src": "12945:67:1"
          }]
        },
        "documentation": {
          "id": 465,
          "nodeType": "StructuredDocumentation",
          "src": "12091:748:1",
          "text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
        },
        "id": 481,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "functionCall",
        "nameLocation": "12854:12:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 470,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 467,
            "mutability": "mutable",
            "name": "target",
            "nameLocation": "12875:6:1",
            "nodeType": "VariableDeclaration",
            "scope": 481,
            "src": "12867:14:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 466,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "12867:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 469,
            "mutability": "mutable",
            "name": "data",
            "nameLocation": "12896:4:1",
            "nodeType": "VariableDeclaration",
            "scope": 481,
            "src": "12883:17:1",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes_memory_ptr",
              "typeString": "bytes"
            },
            "typeName": {
              "id": 468,
              "name": "bytes",
              "nodeType": "ElementaryTypeName",
              "src": "12883:5:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_storage_ptr",
                "typeString": "bytes"
              }
            },
            "visibility": "internal"
          }],
          "src": "12866:35:1"
        },
        "returnParameters": {
          "id": 473,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 472,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 481,
            "src": "12920:12:1",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes_memory_ptr",
              "typeString": "bytes"
            },
            "typeName": {
              "id": 471,
              "name": "bytes",
              "nodeType": "ElementaryTypeName",
              "src": "12920:5:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_storage_ptr",
                "typeString": "bytes"
              }
            },
            "visibility": "internal"
          }],
          "src": "12919:14:1"
        },
        "scope": 707,
        "src": "12845:175:1",
        "stateMutability": "nonpayable",
        "virtual": false,
        "visibility": "internal"
      }, {
        "body": {
          "id": 500,
          "nodeType": "Block",
          "src": "13401:78:1",
          "statements": [{
            "expression": {
              "arguments": [{
                "id": 494,
                "name": "target",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 484,
                "src": "13441:6:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }, {
                "id": 495,
                "name": "data",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 486,
                "src": "13449:4:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes_memory_ptr",
                  "typeString": "bytes memory"
                }
              }, {
                "hexValue": "30",
                "id": 496,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "13455:1:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_0_by_1",
                  "typeString": "int_const 0"
                },
                "value": "0"
              }, {
                "id": 497,
                "name": "errorMessage",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 488,
                "src": "13458:12:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_memory_ptr",
                  "typeString": "string memory"
                }
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }, {
                  "typeIdentifier": "t_bytes_memory_ptr",
                  "typeString": "bytes memory"
                }, {
                  "typeIdentifier": "t_rational_0_by_1",
                  "typeString": "int_const 0"
                }, {
                  "typeIdentifier": "t_string_memory_ptr",
                  "typeString": "string memory"
                }],
                "id": 493,
                "name": "functionCallWithValue",
                "nodeType": "Identifier",
                "overloadedDeclarations": [521, 571],
                "referencedDeclaration": 571,
                "src": "13419:21:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                  "typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
                }
              },
              "id": 498,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "13419:52:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_memory_ptr",
                "typeString": "bytes memory"
              }
            },
            "functionReturnParameters": 492,
            "id": 499,
            "nodeType": "Return",
            "src": "13412:59:1"
          }]
        },
        "documentation": {
          "id": 482,
          "nodeType": "StructuredDocumentation",
          "src": "13028:216:1",
          "text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
        },
        "id": 501,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "functionCall",
        "nameLocation": "13259:12:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 489,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 484,
            "mutability": "mutable",
            "name": "target",
            "nameLocation": "13290:6:1",
            "nodeType": "VariableDeclaration",
            "scope": 501,
            "src": "13282:14:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 483,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "13282:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 486,
            "mutability": "mutable",
            "name": "data",
            "nameLocation": "13320:4:1",
            "nodeType": "VariableDeclaration",
            "scope": 501,
            "src": "13307:17:1",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes_memory_ptr",
              "typeString": "bytes"
            },
            "typeName": {
              "id": 485,
              "name": "bytes",
              "nodeType": "ElementaryTypeName",
              "src": "13307:5:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_storage_ptr",
                "typeString": "bytes"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 488,
            "mutability": "mutable",
            "name": "errorMessage",
            "nameLocation": "13349:12:1",
            "nodeType": "VariableDeclaration",
            "scope": 501,
            "src": "13335:26:1",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory_ptr",
              "typeString": "string"
            },
            "typeName": {
              "id": 487,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "13335:6:1",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "internal"
          }],
          "src": "13271:97:1"
        },
        "returnParameters": {
          "id": 492,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 491,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 501,
            "src": "13387:12:1",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes_memory_ptr",
              "typeString": "bytes"
            },
            "typeName": {
              "id": 490,
              "name": "bytes",
              "nodeType": "ElementaryTypeName",
              "src": "13387:5:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_storage_ptr",
                "typeString": "bytes"
              }
            },
            "visibility": "internal"
          }],
          "src": "13386:14:1"
        },
        "scope": 707,
        "src": "13250:229:1",
        "stateMutability": "nonpayable",
        "virtual": false,
        "visibility": "internal"
      }, {
        "body": {
          "id": 520,
          "nodeType": "Block",
          "src": "14001:113:1",
          "statements": [{
            "expression": {
              "arguments": [{
                "id": 514,
                "name": "target",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 504,
                "src": "14041:6:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }, {
                "id": 515,
                "name": "data",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 506,
                "src": "14049:4:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes_memory_ptr",
                  "typeString": "bytes memory"
                }
              }, {
                "id": 516,
                "name": "value",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 508,
                "src": "14055:5:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }, {
                "hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
                "id": 517,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "string",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "14062:43:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
                  "typeString": "literal_string \"Address: low-level call with value failed\""
                },
                "value": "Address: low-level call with value failed"
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }, {
                  "typeIdentifier": "t_bytes_memory_ptr",
                  "typeString": "bytes memory"
                }, {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }, {
                  "typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
                  "typeString": "literal_string \"Address: low-level call with value failed\""
                }],
                "id": 513,
                "name": "functionCallWithValue",
                "nodeType": "Identifier",
                "overloadedDeclarations": [521, 571],
                "referencedDeclaration": 571,
                "src": "14019:21:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                  "typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
                }
              },
              "id": 518,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "14019:87:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_memory_ptr",
                "typeString": "bytes memory"
              }
            },
            "functionReturnParameters": 512,
            "id": 519,
            "nodeType": "Return",
            "src": "14012:94:1"
          }]
        },
        "documentation": {
          "id": 502,
          "nodeType": "StructuredDocumentation",
          "src": "13487:361:1",
          "text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
        },
        "id": 521,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "functionCallWithValue",
        "nameLocation": "13863:21:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 509,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 504,
            "mutability": "mutable",
            "name": "target",
            "nameLocation": "13903:6:1",
            "nodeType": "VariableDeclaration",
            "scope": 521,
            "src": "13895:14:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 503,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "13895:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 506,
            "mutability": "mutable",
            "name": "data",
            "nameLocation": "13933:4:1",
            "nodeType": "VariableDeclaration",
            "scope": 521,
            "src": "13920:17:1",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes_memory_ptr",
              "typeString": "bytes"
            },
            "typeName": {
              "id": 505,
              "name": "bytes",
              "nodeType": "ElementaryTypeName",
              "src": "13920:5:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_storage_ptr",
                "typeString": "bytes"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 508,
            "mutability": "mutable",
            "name": "value",
            "nameLocation": "13956:5:1",
            "nodeType": "VariableDeclaration",
            "scope": 521,
            "src": "13948:13:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 507,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "13948:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "13884:84:1"
        },
        "returnParameters": {
          "id": 512,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 511,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 521,
            "src": "13987:12:1",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes_memory_ptr",
              "typeString": "bytes"
            },
            "typeName": {
              "id": 510,
              "name": "bytes",
              "nodeType": "ElementaryTypeName",
              "src": "13987:5:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_storage_ptr",
                "typeString": "bytes"
              }
            },
            "visibility": "internal"
          }],
          "src": "13986:14:1"
        },
        "scope": 707,
        "src": "13854:260:1",
        "stateMutability": "nonpayable",
        "virtual": false,
        "visibility": "internal"
      }, {
        "body": {
          "id": 570,
          "nodeType": "Block",
          "src": "14554:326:1",
          "statements": [{
            "expression": {
              "arguments": [{
                "commonType": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "id": 542,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "leftExpression": {
                  "expression": {
                    "arguments": [{
                      "id": 538,
                      "name": "this",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4294967268,
                      "src": "14581:4:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Address_$707",
                        "typeString": "library Address"
                      }
                    }],
                    "expression": {
                      "argumentTypes": [{
                        "typeIdentifier": "t_contract$_Address_$707",
                        "typeString": "library Address"
                      }],
                      "id": 537,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "14573:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_address_$",
                        "typeString": "type(address)"
                      },
                      "typeName": {
                        "id": 536,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "14573:7:1",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 539,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "14573:13:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 540,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "lValueRequested": false,
                  "memberName": "balance",
                  "nodeType": "MemberAccess",
                  "src": "14573:21:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "nodeType": "BinaryOperation",
                "operator": ">=",
                "rightExpression": {
                  "id": 541,
                  "name": "value",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 528,
                  "src": "14598:5:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "src": "14573:30:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }, {
                "hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
                "id": 543,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "string",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "14605:40:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
                  "typeString": "literal_string \"Address: insufficient balance for call\""
                },
                "value": "Address: insufficient balance for call"
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }, {
                  "typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
                  "typeString": "literal_string \"Address: insufficient balance for call\""
                }],
                "id": 535,
                "name": "require",
                "nodeType": "Identifier",
                "overloadedDeclarations": [4294967278, 4294967278],
                "referencedDeclaration": 4294967278,
                "src": "14565:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                  "typeString": "function (bool,string memory) pure"
                }
              },
              "id": 544,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "14565:81:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 545,
            "nodeType": "ExpressionStatement",
            "src": "14565:81:1"
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "id": 548,
                  "name": "target",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 524,
                  "src": "14676:6:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                }],
                "expression": {
                  "argumentTypes": [{
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }],
                  "id": 547,
                  "name": "isContract",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 430,
                  "src": "14665:10:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                    "typeString": "function (address) view returns (bool)"
                  }
                },
                "id": 549,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "kind": "functionCall",
                "lValueRequested": false,
                "names": [],
                "nodeType": "FunctionCall",
                "src": "14665:18:1",
                "tryCall": false,
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }, {
                "hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
                "id": 550,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "string",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "14685:31:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
                  "typeString": "literal_string \"Address: call to non-contract\""
                },
                "value": "Address: call to non-contract"
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }, {
                  "typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
                  "typeString": "literal_string \"Address: call to non-contract\""
                }],
                "id": 546,
                "name": "require",
                "nodeType": "Identifier",
                "overloadedDeclarations": [4294967278, 4294967278],
                "referencedDeclaration": 4294967278,
                "src": "14657:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                  "typeString": "function (bool,string memory) pure"
                }
              },
              "id": 551,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "14657:60:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 552,
            "nodeType": "ExpressionStatement",
            "src": "14657:60:1"
          }, {
            "assignments": [554, 556],
            "declarations": [{
              "constant": false,
              "id": 554,
              "mutability": "mutable",
              "name": "success",
              "nameLocation": "14736:7:1",
              "nodeType": "VariableDeclaration",
              "scope": 570,
              "src": "14731:12:1",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              },
              "typeName": {
                "id": 553,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "14731:4:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              },
              "visibility": "internal"
            }, {
              "constant": false,
              "id": 556,
              "mutability": "mutable",
              "name": "returndata",
              "nameLocation": "14758:10:1",
              "nodeType": "VariableDeclaration",
              "scope": 570,
              "src": "14745:23:1",
              "stateVariable": false,
              "storageLocation": "memory",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_memory_ptr",
                "typeString": "bytes"
              },
              "typeName": {
                "id": 555,
                "name": "bytes",
                "nodeType": "ElementaryTypeName",
                "src": "14745:5:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes_storage_ptr",
                  "typeString": "bytes"
                }
              },
              "visibility": "internal"
            }],
            "id": 563,
            "initialValue": {
              "arguments": [{
                "id": 561,
                "name": "data",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 526,
                "src": "14798:4:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes_memory_ptr",
                  "typeString": "bytes memory"
                }
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_bytes_memory_ptr",
                  "typeString": "bytes memory"
                }],
                "expression": {
                  "argumentTypes": [{
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes memory"
                  }],
                  "expression": {
                    "id": 557,
                    "name": "target",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 524,
                    "src": "14772:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 558,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "lValueRequested": false,
                  "memberName": "call",
                  "nodeType": "MemberAccess",
                  "src": "14772:11:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                    "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                  }
                },
                "id": 560,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "names": ["value"],
                "nodeType": "FunctionCallOptions",
                "options": [{
                  "id": 559,
                  "name": "value",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 528,
                  "src": "14791:5:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                }],
                "src": "14772:25:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                  "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                }
              },
              "id": 562,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "14772:31:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                "typeString": "tuple(bool,bytes memory)"
              }
            },
            "nodeType": "VariableDeclarationStatement",
            "src": "14730:73:1"
          }, {
            "expression": {
              "arguments": [{
                "id": 565,
                "name": "success",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 554,
                "src": "14838:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }, {
                "id": 566,
                "name": "returndata",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 556,
                "src": "14847:10:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes_memory_ptr",
                  "typeString": "bytes memory"
                }
              }, {
                "id": 567,
                "name": "errorMessage",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 530,
                "src": "14859:12:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_memory_ptr",
                  "typeString": "string memory"
                }
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }, {
                  "typeIdentifier": "t_bytes_memory_ptr",
                  "typeString": "bytes memory"
                }, {
                  "typeIdentifier": "t_string_memory_ptr",
                  "typeString": "string memory"
                }],
                "id": 564,
                "name": "verifyCallResult",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 706,
                "src": "14821:16:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                  "typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
                }
              },
              "id": 568,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "14821:51:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_memory_ptr",
                "typeString": "bytes memory"
              }
            },
            "functionReturnParameters": 534,
            "id": 569,
            "nodeType": "Return",
            "src": "14814:58:1"
          }]
        },
        "documentation": {
          "id": 522,
          "nodeType": "StructuredDocumentation",
          "src": "14122:242:1",
          "text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
        },
        "id": 571,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "functionCallWithValue",
        "nameLocation": "14379:21:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 531,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 524,
            "mutability": "mutable",
            "name": "target",
            "nameLocation": "14419:6:1",
            "nodeType": "VariableDeclaration",
            "scope": 571,
            "src": "14411:14:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 523,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "14411:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 526,
            "mutability": "mutable",
            "name": "data",
            "nameLocation": "14449:4:1",
            "nodeType": "VariableDeclaration",
            "scope": 571,
            "src": "14436:17:1",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes_memory_ptr",
              "typeString": "bytes"
            },
            "typeName": {
              "id": 525,
              "name": "bytes",
              "nodeType": "ElementaryTypeName",
              "src": "14436:5:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_storage_ptr",
                "typeString": "bytes"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 528,
            "mutability": "mutable",
            "name": "value",
            "nameLocation": "14472:5:1",
            "nodeType": "VariableDeclaration",
            "scope": 571,
            "src": "14464:13:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 527,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "14464:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 530,
            "mutability": "mutable",
            "name": "errorMessage",
            "nameLocation": "14502:12:1",
            "nodeType": "VariableDeclaration",
            "scope": 571,
            "src": "14488:26:1",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory_ptr",
              "typeString": "string"
            },
            "typeName": {
              "id": 529,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "14488:6:1",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "internal"
          }],
          "src": "14400:121:1"
        },
        "returnParameters": {
          "id": 534,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 533,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 571,
            "src": "14540:12:1",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes_memory_ptr",
              "typeString": "bytes"
            },
            "typeName": {
              "id": 532,
              "name": "bytes",
              "nodeType": "ElementaryTypeName",
              "src": "14540:5:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_storage_ptr",
                "typeString": "bytes"
              }
            },
            "visibility": "internal"
          }],
          "src": "14539:14:1"
        },
        "scope": 707,
        "src": "14370:510:1",
        "stateMutability": "nonpayable",
        "virtual": false,
        "visibility": "internal"
      }, {
        "body": {
          "id": 587,
          "nodeType": "Block",
          "src": "15165:99:1",
          "statements": [{
            "expression": {
              "arguments": [{
                "id": 582,
                "name": "target",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 574,
                "src": "15202:6:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }, {
                "id": 583,
                "name": "data",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 576,
                "src": "15210:4:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes_memory_ptr",
                  "typeString": "bytes memory"
                }
              }, {
                "hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
                "id": 584,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "string",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "15216:39:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
                  "typeString": "literal_string \"Address: low-level static call failed\""
                },
                "value": "Address: low-level static call failed"
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }, {
                  "typeIdentifier": "t_bytes_memory_ptr",
                  "typeString": "bytes memory"
                }, {
                  "typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
                  "typeString": "literal_string \"Address: low-level static call failed\""
                }],
                "id": 581,
                "name": "functionStaticCall",
                "nodeType": "Identifier",
                "overloadedDeclarations": [588, 623],
                "referencedDeclaration": 623,
                "src": "15183:18:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                  "typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
                }
              },
              "id": 585,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "15183:73:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_memory_ptr",
                "typeString": "bytes memory"
              }
            },
            "functionReturnParameters": 580,
            "id": 586,
            "nodeType": "Return",
            "src": "15176:80:1"
          }]
        },
        "documentation": {
          "id": 572,
          "nodeType": "StructuredDocumentation",
          "src": "14888:171:1",
          "text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
        },
        "id": 588,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "functionStaticCall",
        "nameLocation": "15074:18:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 577,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 574,
            "mutability": "mutable",
            "name": "target",
            "nameLocation": "15101:6:1",
            "nodeType": "VariableDeclaration",
            "scope": 588,
            "src": "15093:14:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 573,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "15093:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 576,
            "mutability": "mutable",
            "name": "data",
            "nameLocation": "15122:4:1",
            "nodeType": "VariableDeclaration",
            "scope": 588,
            "src": "15109:17:1",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes_memory_ptr",
              "typeString": "bytes"
            },
            "typeName": {
              "id": 575,
              "name": "bytes",
              "nodeType": "ElementaryTypeName",
              "src": "15109:5:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_storage_ptr",
                "typeString": "bytes"
              }
            },
            "visibility": "internal"
          }],
          "src": "15092:35:1"
        },
        "returnParameters": {
          "id": 580,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 579,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 588,
            "src": "15151:12:1",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes_memory_ptr",
              "typeString": "bytes"
            },
            "typeName": {
              "id": 578,
              "name": "bytes",
              "nodeType": "ElementaryTypeName",
              "src": "15151:5:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_storage_ptr",
                "typeString": "bytes"
              }
            },
            "visibility": "internal"
          }],
          "src": "15150:14:1"
        },
        "scope": 707,
        "src": "15065:199:1",
        "stateMutability": "view",
        "virtual": false,
        "visibility": "internal"
      }, {
        "body": {
          "id": 622,
          "nodeType": "Block",
          "src": "15618:233:1",
          "statements": [{
            "expression": {
              "arguments": [{
                "arguments": [{
                  "id": 602,
                  "name": "target",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 591,
                  "src": "15648:6:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                }],
                "expression": {
                  "argumentTypes": [{
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }],
                  "id": 601,
                  "name": "isContract",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 430,
                  "src": "15637:10:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                    "typeString": "function (address) view returns (bool)"
                  }
                },
                "id": 603,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "kind": "functionCall",
                "lValueRequested": false,
                "names": [],
                "nodeType": "FunctionCall",
                "src": "15637:18:1",
                "tryCall": false,
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }, {
                "hexValue": "416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374",
                "id": 604,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "string",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "15657:38:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
                  "typeString": "literal_string \"Address: static call to non-contract\""
                },
                "value": "Address: static call to non-contract"
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }, {
                  "typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
                  "typeString": "literal_string \"Address: static call to non-contract\""
                }],
                "id": 600,
                "name": "require",
                "nodeType": "Identifier",
                "overloadedDeclarations": [4294967278, 4294967278],
                "referencedDeclaration": 4294967278,
                "src": "15629:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                  "typeString": "function (bool,string memory) pure"
                }
              },
              "id": 605,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "15629:67:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 606,
            "nodeType": "ExpressionStatement",
            "src": "15629:67:1"
          }, {
            "assignments": [608, 610],
            "declarations": [{
              "constant": false,
              "id": 608,
              "mutability": "mutable",
              "name": "success",
              "nameLocation": "15715:7:1",
              "nodeType": "VariableDeclaration",
              "scope": 622,
              "src": "15710:12:1",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              },
              "typeName": {
                "id": 607,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "15710:4:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              },
              "visibility": "internal"
            }, {
              "constant": false,
              "id": 610,
              "mutability": "mutable",
              "name": "returndata",
              "nameLocation": "15737:10:1",
              "nodeType": "VariableDeclaration",
              "scope": 622,
              "src": "15724:23:1",
              "stateVariable": false,
              "storageLocation": "memory",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_memory_ptr",
                "typeString": "bytes"
              },
              "typeName": {
                "id": 609,
                "name": "bytes",
                "nodeType": "ElementaryTypeName",
                "src": "15724:5:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes_storage_ptr",
                  "typeString": "bytes"
                }
              },
              "visibility": "internal"
            }],
            "id": 615,
            "initialValue": {
              "arguments": [{
                "id": 613,
                "name": "data",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 593,
                "src": "15769:4:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes_memory_ptr",
                  "typeString": "bytes memory"
                }
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_bytes_memory_ptr",
                  "typeString": "bytes memory"
                }],
                "expression": {
                  "id": 611,
                  "name": "target",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 591,
                  "src": "15751:6:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "id": 612,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "memberName": "staticcall",
                "nodeType": "MemberAccess",
                "src": "15751:17:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                  "typeString": "function (bytes memory) view returns (bool,bytes memory)"
                }
              },
              "id": 614,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "15751:23:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                "typeString": "tuple(bool,bytes memory)"
              }
            },
            "nodeType": "VariableDeclarationStatement",
            "src": "15709:65:1"
          }, {
            "expression": {
              "arguments": [{
                "id": 617,
                "name": "success",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 608,
                "src": "15809:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }, {
                "id": 618,
                "name": "returndata",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 610,
                "src": "15818:10:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes_memory_ptr",
                  "typeString": "bytes memory"
                }
              }, {
                "id": 619,
                "name": "errorMessage",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 595,
                "src": "15830:12:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_memory_ptr",
                  "typeString": "string memory"
                }
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }, {
                  "typeIdentifier": "t_bytes_memory_ptr",
                  "typeString": "bytes memory"
                }, {
                  "typeIdentifier": "t_string_memory_ptr",
                  "typeString": "string memory"
                }],
                "id": 616,
                "name": "verifyCallResult",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 706,
                "src": "15792:16:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                  "typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
                }
              },
              "id": 620,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "15792:51:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_memory_ptr",
                "typeString": "bytes memory"
              }
            },
            "functionReturnParameters": 599,
            "id": 621,
            "nodeType": "Return",
            "src": "15785:58:1"
          }]
        },
        "documentation": {
          "id": 589,
          "nodeType": "StructuredDocumentation",
          "src": "15272:178:1",
          "text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
        },
        "id": 623,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "functionStaticCall",
        "nameLocation": "15465:18:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 596,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 591,
            "mutability": "mutable",
            "name": "target",
            "nameLocation": "15502:6:1",
            "nodeType": "VariableDeclaration",
            "scope": 623,
            "src": "15494:14:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 590,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "15494:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 593,
            "mutability": "mutable",
            "name": "data",
            "nameLocation": "15532:4:1",
            "nodeType": "VariableDeclaration",
            "scope": 623,
            "src": "15519:17:1",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes_memory_ptr",
              "typeString": "bytes"
            },
            "typeName": {
              "id": 592,
              "name": "bytes",
              "nodeType": "ElementaryTypeName",
              "src": "15519:5:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_storage_ptr",
                "typeString": "bytes"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 595,
            "mutability": "mutable",
            "name": "errorMessage",
            "nameLocation": "15561:12:1",
            "nodeType": "VariableDeclaration",
            "scope": 623,
            "src": "15547:26:1",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory_ptr",
              "typeString": "string"
            },
            "typeName": {
              "id": 594,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "15547:6:1",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "internal"
          }],
          "src": "15483:97:1"
        },
        "returnParameters": {
          "id": 599,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 598,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 623,
            "src": "15604:12:1",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes_memory_ptr",
              "typeString": "bytes"
            },
            "typeName": {
              "id": 597,
              "name": "bytes",
              "nodeType": "ElementaryTypeName",
              "src": "15604:5:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_storage_ptr",
                "typeString": "bytes"
              }
            },
            "visibility": "internal"
          }],
          "src": "15603:14:1"
        },
        "scope": 707,
        "src": "15456:395:1",
        "stateMutability": "view",
        "virtual": false,
        "visibility": "internal"
      }, {
        "body": {
          "id": 639,
          "nodeType": "Block",
          "src": "16135:103:1",
          "statements": [{
            "expression": {
              "arguments": [{
                "id": 634,
                "name": "target",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 626,
                "src": "16174:6:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }, {
                "id": 635,
                "name": "data",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 628,
                "src": "16182:4:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes_memory_ptr",
                  "typeString": "bytes memory"
                }
              }, {
                "hexValue": "416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564",
                "id": 636,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "string",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "16188:41:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
                  "typeString": "literal_string \"Address: low-level delegate call failed\""
                },
                "value": "Address: low-level delegate call failed"
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }, {
                  "typeIdentifier": "t_bytes_memory_ptr",
                  "typeString": "bytes memory"
                }, {
                  "typeIdentifier": "t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398",
                  "typeString": "literal_string \"Address: low-level delegate call failed\""
                }],
                "id": 633,
                "name": "functionDelegateCall",
                "nodeType": "Identifier",
                "overloadedDeclarations": [640, 675],
                "referencedDeclaration": 675,
                "src": "16153:20:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                  "typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
                }
              },
              "id": 637,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "16153:77:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_memory_ptr",
                "typeString": "bytes memory"
              }
            },
            "functionReturnParameters": 632,
            "id": 638,
            "nodeType": "Return",
            "src": "16146:84:1"
          }]
        },
        "documentation": {
          "id": 624,
          "nodeType": "StructuredDocumentation",
          "src": "15859:173:1",
          "text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
        },
        "id": 640,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "functionDelegateCall",
        "nameLocation": "16047:20:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 629,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 626,
            "mutability": "mutable",
            "name": "target",
            "nameLocation": "16076:6:1",
            "nodeType": "VariableDeclaration",
            "scope": 640,
            "src": "16068:14:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 625,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "16068:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 628,
            "mutability": "mutable",
            "name": "data",
            "nameLocation": "16097:4:1",
            "nodeType": "VariableDeclaration",
            "scope": 640,
            "src": "16084:17:1",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes_memory_ptr",
              "typeString": "bytes"
            },
            "typeName": {
              "id": 627,
              "name": "bytes",
              "nodeType": "ElementaryTypeName",
              "src": "16084:5:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_storage_ptr",
                "typeString": "bytes"
              }
            },
            "visibility": "internal"
          }],
          "src": "16067:35:1"
        },
        "returnParameters": {
          "id": 632,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 631,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 640,
            "src": "16121:12:1",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes_memory_ptr",
              "typeString": "bytes"
            },
            "typeName": {
              "id": 630,
              "name": "bytes",
              "nodeType": "ElementaryTypeName",
              "src": "16121:5:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_storage_ptr",
                "typeString": "bytes"
              }
            },
            "visibility": "internal"
          }],
          "src": "16120:14:1"
        },
        "scope": 707,
        "src": "16038:200:1",
        "stateMutability": "nonpayable",
        "virtual": false,
        "visibility": "internal"
      }, {
        "body": {
          "id": 674,
          "nodeType": "Block",
          "src": "16591:237:1",
          "statements": [{
            "expression": {
              "arguments": [{
                "arguments": [{
                  "id": 654,
                  "name": "target",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 643,
                  "src": "16621:6:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                }],
                "expression": {
                  "argumentTypes": [{
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }],
                  "id": 653,
                  "name": "isContract",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 430,
                  "src": "16610:10:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                    "typeString": "function (address) view returns (bool)"
                  }
                },
                "id": 655,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "kind": "functionCall",
                "lValueRequested": false,
                "names": [],
                "nodeType": "FunctionCall",
                "src": "16610:18:1",
                "tryCall": false,
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }, {
                "hexValue": "416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6e7472616374",
                "id": 656,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "string",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "16630:40:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
                  "typeString": "literal_string \"Address: delegate call to non-contract\""
                },
                "value": "Address: delegate call to non-contract"
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }, {
                  "typeIdentifier": "t_stringliteral_b94ded0918034cf8f896e19fa3cfdef1188cd569c577264a3622e49152f88520",
                  "typeString": "literal_string \"Address: delegate call to non-contract\""
                }],
                "id": 652,
                "name": "require",
                "nodeType": "Identifier",
                "overloadedDeclarations": [4294967278, 4294967278],
                "referencedDeclaration": 4294967278,
                "src": "16602:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                  "typeString": "function (bool,string memory) pure"
                }
              },
              "id": 657,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "16602:69:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 658,
            "nodeType": "ExpressionStatement",
            "src": "16602:69:1"
          }, {
            "assignments": [660, 662],
            "declarations": [{
              "constant": false,
              "id": 660,
              "mutability": "mutable",
              "name": "success",
              "nameLocation": "16690:7:1",
              "nodeType": "VariableDeclaration",
              "scope": 674,
              "src": "16685:12:1",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              },
              "typeName": {
                "id": 659,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "16685:4:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              },
              "visibility": "internal"
            }, {
              "constant": false,
              "id": 662,
              "mutability": "mutable",
              "name": "returndata",
              "nameLocation": "16712:10:1",
              "nodeType": "VariableDeclaration",
              "scope": 674,
              "src": "16699:23:1",
              "stateVariable": false,
              "storageLocation": "memory",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_memory_ptr",
                "typeString": "bytes"
              },
              "typeName": {
                "id": 661,
                "name": "bytes",
                "nodeType": "ElementaryTypeName",
                "src": "16699:5:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes_storage_ptr",
                  "typeString": "bytes"
                }
              },
              "visibility": "internal"
            }],
            "id": 667,
            "initialValue": {
              "arguments": [{
                "id": 665,
                "name": "data",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 645,
                "src": "16746:4:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes_memory_ptr",
                  "typeString": "bytes memory"
                }
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_bytes_memory_ptr",
                  "typeString": "bytes memory"
                }],
                "expression": {
                  "id": 663,
                  "name": "target",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 643,
                  "src": "16726:6:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "id": 664,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "memberName": "delegatecall",
                "nodeType": "MemberAccess",
                "src": "16726:19:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                  "typeString": "function (bytes memory) returns (bool,bytes memory)"
                }
              },
              "id": 666,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "16726:25:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                "typeString": "tuple(bool,bytes memory)"
              }
            },
            "nodeType": "VariableDeclarationStatement",
            "src": "16684:67:1"
          }, {
            "expression": {
              "arguments": [{
                "id": 669,
                "name": "success",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 660,
                "src": "16786:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }, {
                "id": 670,
                "name": "returndata",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 662,
                "src": "16795:10:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes_memory_ptr",
                  "typeString": "bytes memory"
                }
              }, {
                "id": 671,
                "name": "errorMessage",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 647,
                "src": "16807:12:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_memory_ptr",
                  "typeString": "string memory"
                }
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }, {
                  "typeIdentifier": "t_bytes_memory_ptr",
                  "typeString": "bytes memory"
                }, {
                  "typeIdentifier": "t_string_memory_ptr",
                  "typeString": "string memory"
                }],
                "id": 668,
                "name": "verifyCallResult",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 706,
                "src": "16769:16:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
                  "typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
                }
              },
              "id": 672,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "16769:51:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_memory_ptr",
                "typeString": "bytes memory"
              }
            },
            "functionReturnParameters": 651,
            "id": 673,
            "nodeType": "Return",
            "src": "16762:58:1"
          }]
        },
        "documentation": {
          "id": 641,
          "nodeType": "StructuredDocumentation",
          "src": "16246:180:1",
          "text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
        },
        "id": 675,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "functionDelegateCall",
        "nameLocation": "16441:20:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 648,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 643,
            "mutability": "mutable",
            "name": "target",
            "nameLocation": "16480:6:1",
            "nodeType": "VariableDeclaration",
            "scope": 675,
            "src": "16472:14:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 642,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "16472:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 645,
            "mutability": "mutable",
            "name": "data",
            "nameLocation": "16510:4:1",
            "nodeType": "VariableDeclaration",
            "scope": 675,
            "src": "16497:17:1",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes_memory_ptr",
              "typeString": "bytes"
            },
            "typeName": {
              "id": 644,
              "name": "bytes",
              "nodeType": "ElementaryTypeName",
              "src": "16497:5:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_storage_ptr",
                "typeString": "bytes"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 647,
            "mutability": "mutable",
            "name": "errorMessage",
            "nameLocation": "16539:12:1",
            "nodeType": "VariableDeclaration",
            "scope": 675,
            "src": "16525:26:1",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory_ptr",
              "typeString": "string"
            },
            "typeName": {
              "id": 646,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "16525:6:1",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "internal"
          }],
          "src": "16461:97:1"
        },
        "returnParameters": {
          "id": 651,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 650,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 675,
            "src": "16577:12:1",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes_memory_ptr",
              "typeString": "bytes"
            },
            "typeName": {
              "id": 649,
              "name": "bytes",
              "nodeType": "ElementaryTypeName",
              "src": "16577:5:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_storage_ptr",
                "typeString": "bytes"
              }
            },
            "visibility": "internal"
          }],
          "src": "16576:14:1"
        },
        "scope": 707,
        "src": "16432:396:1",
        "stateMutability": "nonpayable",
        "virtual": false,
        "visibility": "internal"
      }, {
        "body": {
          "id": 705,
          "nodeType": "Block",
          "src": "17220:548:1",
          "statements": [{
            "condition": {
              "id": 687,
              "name": "success",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 678,
              "src": "17235:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "falseBody": {
              "id": 703,
              "nodeType": "Block",
              "src": "17294:467:1",
              "statements": [{
                "condition": {
                  "commonType": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "id": 694,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "lValueRequested": false,
                  "leftExpression": {
                    "expression": {
                      "id": 691,
                      "name": "returndata",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 680,
                      "src": "17380:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes memory"
                      }
                    },
                    "id": 692,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "length",
                    "nodeType": "MemberAccess",
                    "src": "17380:17:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "BinaryOperation",
                  "operator": ">",
                  "rightExpression": {
                    "hexValue": "30",
                    "id": 693,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "17400:1:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "src": "17380:21:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "falseBody": {
                  "id": 701,
                  "nodeType": "Block",
                  "src": "17695:55:1",
                  "statements": [{
                    "expression": {
                      "arguments": [{
                        "id": 698,
                        "name": "errorMessage",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 682,
                        "src": "17721:12:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      }],
                      "expression": {
                        "argumentTypes": [{
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }],
                        "id": 697,
                        "name": "revert",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [4294967277, 4294967277],
                        "referencedDeclaration": 4294967277,
                        "src": "17714:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
                          "typeString": "function (string memory) pure"
                        }
                      },
                      "id": 699,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "17714:20:1",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 700,
                    "nodeType": "ExpressionStatement",
                    "src": "17714:20:1"
                  }]
                },
                "id": 702,
                "nodeType": "IfStatement",
                "src": "17376:374:1",
                "trueBody": {
                  "id": 696,
                  "nodeType": "Block",
                  "src": "17403:286:1",
                  "statements": [{
                    "AST": {
                      "nodeType": "YulBlock",
                      "src": "17526:148:1",
                      "statements": [{
                        "nodeType": "YulVariableDeclaration",
                        "src": "17549:40:1",
                        "value": {
                          "arguments": [{
                            "name": "returndata",
                            "nodeType": "YulIdentifier",
                            "src": "17578:10:1"
                          }],
                          "functionName": {
                            "name": "mload",
                            "nodeType": "YulIdentifier",
                            "src": "17572:5:1"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "17572:17:1"
                        },
                        "variables": [{
                          "name": "returndata_size",
                          "nodeType": "YulTypedName",
                          "src": "17553:15:1",
                          "type": ""
                        }]
                      }, {
                        "expression": {
                          "arguments": [{
                            "arguments": [{
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "17622:2:1",
                              "type": "",
                              "value": "32"
                            }, {
                              "name": "returndata",
                              "nodeType": "YulIdentifier",
                              "src": "17626:10:1"
                            }],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17618:3:1"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17618:19:1"
                          }, {
                            "name": "returndata_size",
                            "nodeType": "YulIdentifier",
                            "src": "17639:15:1"
                          }],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "17611:6:1"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "17611:44:1"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "17611:44:1"
                      }]
                    },
                    "evmVersion": "london",
                    "externalReferences": [{
                      "declaration": 680,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "17578:10:1",
                      "valueSize": 1
                    }, {
                      "declaration": 680,
                      "isOffset": false,
                      "isSlot": false,
                      "src": "17626:10:1",
                      "valueSize": 1
                    }],
                    "id": 695,
                    "nodeType": "InlineAssembly",
                    "src": "17517:157:1"
                  }]
                }
              }]
            },
            "id": 704,
            "nodeType": "IfStatement",
            "src": "17231:530:1",
            "trueBody": {
              "id": 690,
              "nodeType": "Block",
              "src": "17244:44:1",
              "statements": [{
                "expression": {
                  "id": 688,
                  "name": "returndata",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 680,
                  "src": "17266:10:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes memory"
                  }
                },
                "functionReturnParameters": 686,
                "id": 689,
                "nodeType": "Return",
                "src": "17259:17:1"
              }]
            }
          }]
        },
        "documentation": {
          "id": 676,
          "nodeType": "StructuredDocumentation",
          "src": "16836:214:1",
          "text": " @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason using the provided one.\n _Available since v4.3._"
        },
        "id": 706,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "verifyCallResult",
        "nameLocation": "17065:16:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 683,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 678,
            "mutability": "mutable",
            "name": "success",
            "nameLocation": "17097:7:1",
            "nodeType": "VariableDeclaration",
            "scope": 706,
            "src": "17092:12:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 677,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "17092:4:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 680,
            "mutability": "mutable",
            "name": "returndata",
            "nameLocation": "17128:10:1",
            "nodeType": "VariableDeclaration",
            "scope": 706,
            "src": "17115:23:1",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes_memory_ptr",
              "typeString": "bytes"
            },
            "typeName": {
              "id": 679,
              "name": "bytes",
              "nodeType": "ElementaryTypeName",
              "src": "17115:5:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_storage_ptr",
                "typeString": "bytes"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 682,
            "mutability": "mutable",
            "name": "errorMessage",
            "nameLocation": "17163:12:1",
            "nodeType": "VariableDeclaration",
            "scope": 706,
            "src": "17149:26:1",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory_ptr",
              "typeString": "string"
            },
            "typeName": {
              "id": 681,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "17149:6:1",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "internal"
          }],
          "src": "17081:101:1"
        },
        "returnParameters": {
          "id": 686,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 685,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 706,
            "src": "17206:12:1",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes_memory_ptr",
              "typeString": "bytes"
            },
            "typeName": {
              "id": 684,
              "name": "bytes",
              "nodeType": "ElementaryTypeName",
              "src": "17206:5:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_storage_ptr",
                "typeString": "bytes"
              }
            },
            "visibility": "internal"
          }],
          "src": "17205:14:1"
        },
        "scope": 707,
        "src": "17056:712:1",
        "stateMutability": "pure",
        "virtual": false,
        "visibility": "internal"
      }],
      "scope": 2351,
      "src": "9834:7937:1",
      "usedErrors": []
    }, {
      "id": 708,
      "literals": ["solidity", "^", "0.8", ".0"],
      "nodeType": "PragmaDirective",
      "src": "17859:23:1"
    }, {
      "abstract": false,
      "baseContracts": [{
        "baseName": {
          "id": 710,
          "name": "IERC721",
          "nodeType": "IdentifierPath",
          "referencedDeclaration": 158,
          "src": "18055:7:1"
        },
        "id": 711,
        "nodeType": "InheritanceSpecifier",
        "src": "18055:7:1"
      }],
      "canonicalName": "IERC721Metadata",
      "contractDependencies": [],
      "contractKind": "interface",
      "documentation": {
        "id": 709,
        "nodeType": "StructuredDocumentation",
        "src": "17888:136:1",
        "text": " @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"
      },
      "fullyImplemented": false,
      "id": 732,
      "linearizedBaseContracts": [732, 158, 44],
      "name": "IERC721Metadata",
      "nameLocation": "18036:15:1",
      "nodeType": "ContractDefinition",
      "nodes": [{
        "documentation": {
          "id": 712,
          "nodeType": "StructuredDocumentation",
          "src": "18070:60:1",
          "text": " @dev Returns the token collection name."
        },
        "functionSelector": "06fdde03",
        "id": 717,
        "implemented": false,
        "kind": "function",
        "modifiers": [],
        "name": "name",
        "nameLocation": "18145:4:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 713,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "18149:2:1"
        },
        "returnParameters": {
          "id": 716,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 715,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 717,
            "src": "18175:13:1",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory_ptr",
              "typeString": "string"
            },
            "typeName": {
              "id": 714,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "18175:6:1",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "internal"
          }],
          "src": "18174:15:1"
        },
        "scope": 732,
        "src": "18136:54:1",
        "stateMutability": "view",
        "virtual": false,
        "visibility": "external"
      }, {
        "documentation": {
          "id": 718,
          "nodeType": "StructuredDocumentation",
          "src": "18198:62:1",
          "text": " @dev Returns the token collection symbol."
        },
        "functionSelector": "95d89b41",
        "id": 723,
        "implemented": false,
        "kind": "function",
        "modifiers": [],
        "name": "symbol",
        "nameLocation": "18275:6:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 719,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "18281:2:1"
        },
        "returnParameters": {
          "id": 722,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 721,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 723,
            "src": "18307:13:1",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory_ptr",
              "typeString": "string"
            },
            "typeName": {
              "id": 720,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "18307:6:1",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "internal"
          }],
          "src": "18306:15:1"
        },
        "scope": 732,
        "src": "18266:56:1",
        "stateMutability": "view",
        "virtual": false,
        "visibility": "external"
      }, {
        "documentation": {
          "id": 724,
          "nodeType": "StructuredDocumentation",
          "src": "18330:92:1",
          "text": " @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."
        },
        "functionSelector": "c87b56dd",
        "id": 731,
        "implemented": false,
        "kind": "function",
        "modifiers": [],
        "name": "tokenURI",
        "nameLocation": "18437:8:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 727,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 726,
            "mutability": "mutable",
            "name": "tokenId",
            "nameLocation": "18454:7:1",
            "nodeType": "VariableDeclaration",
            "scope": 731,
            "src": "18446:15:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 725,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "18446:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "18445:17:1"
        },
        "returnParameters": {
          "id": 730,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 729,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 731,
            "src": "18486:13:1",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory_ptr",
              "typeString": "string"
            },
            "typeName": {
              "id": 728,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "18486:6:1",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "internal"
          }],
          "src": "18485:15:1"
        },
        "scope": 732,
        "src": "18428:73:1",
        "stateMutability": "view",
        "virtual": false,
        "visibility": "external"
      }],
      "scope": 2351,
      "src": "18026:478:1",
      "usedErrors": []
    }, {
      "id": 733,
      "literals": ["solidity", "^", "0.8", ".0"],
      "nodeType": "PragmaDirective",
      "src": "18581:23:1"
    }, {
      "abstract": false,
      "baseContracts": [],
      "canonicalName": "IERC721Receiver",
      "contractDependencies": [],
      "contractKind": "interface",
      "documentation": {
        "id": 734,
        "nodeType": "StructuredDocumentation",
        "src": "18608:156:1",
        "text": " @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."
      },
      "fullyImplemented": false,
      "id": 749,
      "linearizedBaseContracts": [749],
      "name": "IERC721Receiver",
      "nameLocation": "18776:15:1",
      "nodeType": "ContractDefinition",
      "nodes": [{
        "documentation": {
          "id": 735,
          "nodeType": "StructuredDocumentation",
          "src": "18799:493:1",
          "text": " @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`."
        },
        "functionSelector": "150b7a02",
        "id": 748,
        "implemented": false,
        "kind": "function",
        "modifiers": [],
        "name": "onERC721Received",
        "nameLocation": "19307:16:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 744,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 737,
            "mutability": "mutable",
            "name": "operator",
            "nameLocation": "19342:8:1",
            "nodeType": "VariableDeclaration",
            "scope": 748,
            "src": "19334:16:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 736,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "19334:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 739,
            "mutability": "mutable",
            "name": "from",
            "nameLocation": "19369:4:1",
            "nodeType": "VariableDeclaration",
            "scope": 748,
            "src": "19361:12:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 738,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "19361:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 741,
            "mutability": "mutable",
            "name": "tokenId",
            "nameLocation": "19392:7:1",
            "nodeType": "VariableDeclaration",
            "scope": 748,
            "src": "19384:15:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 740,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "19384:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 743,
            "mutability": "mutable",
            "name": "data",
            "nameLocation": "19425:4:1",
            "nodeType": "VariableDeclaration",
            "scope": 748,
            "src": "19410:19:1",
            "stateVariable": false,
            "storageLocation": "calldata",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes_calldata_ptr",
              "typeString": "bytes"
            },
            "typeName": {
              "id": 742,
              "name": "bytes",
              "nodeType": "ElementaryTypeName",
              "src": "19410:5:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_storage_ptr",
                "typeString": "bytes"
              }
            },
            "visibility": "internal"
          }],
          "src": "19323:113:1"
        },
        "returnParameters": {
          "id": 747,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 746,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 748,
            "src": "19455:6:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes4",
              "typeString": "bytes4"
            },
            "typeName": {
              "id": 745,
              "name": "bytes4",
              "nodeType": "ElementaryTypeName",
              "src": "19455:6:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes4",
                "typeString": "bytes4"
              }
            },
            "visibility": "internal"
          }],
          "src": "19454:8:1"
        },
        "scope": 749,
        "src": "19298:165:1",
        "stateMutability": "nonpayable",
        "virtual": false,
        "visibility": "external"
      }],
      "scope": 2351,
      "src": "18766:700:1",
      "usedErrors": []
    }, {
      "id": 750,
      "literals": ["solidity", "^", "0.8", ".0"],
      "nodeType": "PragmaDirective",
      "src": "19522:23:1"
    }, {
      "abstract": true,
      "baseContracts": [],
      "canonicalName": "Context",
      "contractDependencies": [],
      "contractKind": "contract",
      "documentation": {
        "id": 751,
        "nodeType": "StructuredDocumentation",
        "src": "19547:505:1",
        "text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
      },
      "fullyImplemented": true,
      "id": 770,
      "linearizedBaseContracts": [770],
      "name": "Context",
      "nameLocation": "20072:7:1",
      "nodeType": "ContractDefinition",
      "nodes": [{
        "body": {
          "id": 759,
          "nodeType": "Block",
          "src": "20149:36:1",
          "statements": [{
            "expression": {
              "expression": {
                "id": 756,
                "name": "msg",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 4294967281,
                "src": "20167:3:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_magic_message",
                  "typeString": "msg"
                }
              },
              "id": 757,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "memberName": "sender",
              "nodeType": "MemberAccess",
              "src": "20167:10:1",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "functionReturnParameters": 755,
            "id": 758,
            "nodeType": "Return",
            "src": "20160:17:1"
          }]
        },
        "id": 760,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "_msgSender",
        "nameLocation": "20096:10:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 752,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "20106:2:1"
        },
        "returnParameters": {
          "id": 755,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 754,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 760,
            "src": "20140:7:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 753,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "20140:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }],
          "src": "20139:9:1"
        },
        "scope": 770,
        "src": "20087:98:1",
        "stateMutability": "view",
        "virtual": true,
        "visibility": "internal"
      }, {
        "body": {
          "id": 768,
          "nodeType": "Block",
          "src": "20260:34:1",
          "statements": [{
            "expression": {
              "expression": {
                "id": 765,
                "name": "msg",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 4294967281,
                "src": "20278:3:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_magic_message",
                  "typeString": "msg"
                }
              },
              "id": 766,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "memberName": "data",
              "nodeType": "MemberAccess",
              "src": "20278:8:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_calldata_ptr",
                "typeString": "bytes calldata"
              }
            },
            "functionReturnParameters": 764,
            "id": 767,
            "nodeType": "Return",
            "src": "20271:15:1"
          }]
        },
        "id": 769,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "_msgData",
        "nameLocation": "20202:8:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 761,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "20210:2:1"
        },
        "returnParameters": {
          "id": 764,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 763,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 769,
            "src": "20244:14:1",
            "stateVariable": false,
            "storageLocation": "calldata",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes_calldata_ptr",
              "typeString": "bytes"
            },
            "typeName": {
              "id": 762,
              "name": "bytes",
              "nodeType": "ElementaryTypeName",
              "src": "20244:5:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_storage_ptr",
                "typeString": "bytes"
              }
            },
            "visibility": "internal"
          }],
          "src": "20243:16:1"
        },
        "scope": 770,
        "src": "20193:101:1",
        "stateMutability": "view",
        "virtual": true,
        "visibility": "internal"
      }],
      "scope": 2351,
      "src": "20054:243:1",
      "usedErrors": []
    }, {
      "id": 771,
      "literals": ["solidity", "^", "0.8", ".0"],
      "nodeType": "PragmaDirective",
      "src": "20361:23:1"
    }, {
      "abstract": false,
      "baseContracts": [{
        "baseName": {
          "id": 773,
          "name": "Context",
          "nodeType": "IdentifierPath",
          "referencedDeclaration": 770,
          "src": "20657:7:1"
        },
        "id": 774,
        "nodeType": "InheritanceSpecifier",
        "src": "20657:7:1"
      }, {
        "baseName": {
          "id": 775,
          "name": "ERC165",
          "nodeType": "IdentifierPath",
          "referencedDeclaration": 209,
          "src": "20666:6:1"
        },
        "id": 776,
        "nodeType": "InheritanceSpecifier",
        "src": "20666:6:1"
      }, {
        "baseName": {
          "id": 777,
          "name": "IERC721",
          "nodeType": "IdentifierPath",
          "referencedDeclaration": 158,
          "src": "20674:7:1"
        },
        "id": 778,
        "nodeType": "InheritanceSpecifier",
        "src": "20674:7:1"
      }, {
        "baseName": {
          "id": 779,
          "name": "IERC721Metadata",
          "nodeType": "IdentifierPath",
          "referencedDeclaration": 732,
          "src": "20683:15:1"
        },
        "id": 780,
        "nodeType": "InheritanceSpecifier",
        "src": "20683:15:1"
      }],
      "canonicalName": "ERC721",
      "contractDependencies": [],
      "contractKind": "contract",
      "documentation": {
        "id": 772,
        "nodeType": "StructuredDocumentation",
        "src": "20386:250:1",
        "text": " @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n the Metadata extension, but not including the Enumerable extension, which is available separately as\n {ERC721Enumerable}."
      },
      "fullyImplemented": true,
      "id": 1578,
      "linearizedBaseContracts": [1578, 732, 158, 209, 44, 770],
      "name": "ERC721",
      "nameLocation": "20647:6:1",
      "nodeType": "ContractDefinition",
      "nodes": [{
        "global": false,
        "id": 783,
        "libraryName": {
          "id": 781,
          "name": "Address",
          "nodeType": "IdentifierPath",
          "referencedDeclaration": 707,
          "src": "20712:7:1"
        },
        "nodeType": "UsingForDirective",
        "src": "20706:26:1",
        "typeName": {
          "id": 782,
          "name": "address",
          "nodeType": "ElementaryTypeName",
          "src": "20724:7:1",
          "stateMutability": "nonpayable",
          "typeDescriptions": {
            "typeIdentifier": "t_address",
            "typeString": "address"
          }
        }
      }, {
        "global": false,
        "id": 786,
        "libraryName": {
          "id": 784,
          "name": "Strings",
          "nodeType": "IdentifierPath",
          "referencedDeclaration": 411,
          "src": "20744:7:1"
        },
        "nodeType": "UsingForDirective",
        "src": "20738:26:1",
        "typeName": {
          "id": 785,
          "name": "uint256",
          "nodeType": "ElementaryTypeName",
          "src": "20756:7:1",
          "typeDescriptions": {
            "typeIdentifier": "t_uint256",
            "typeString": "uint256"
          }
        }
      }, {
        "constant": false,
        "id": 788,
        "mutability": "mutable",
        "name": "_name",
        "nameLocation": "20806:5:1",
        "nodeType": "VariableDeclaration",
        "scope": 1578,
        "src": "20791:20:1",
        "stateVariable": true,
        "storageLocation": "default",
        "typeDescriptions": {
          "typeIdentifier": "t_string_storage",
          "typeString": "string"
        },
        "typeName": {
          "id": 787,
          "name": "string",
          "nodeType": "ElementaryTypeName",
          "src": "20791:6:1",
          "typeDescriptions": {
            "typeIdentifier": "t_string_storage_ptr",
            "typeString": "string"
          }
        },
        "visibility": "private"
      }, {
        "constant": false,
        "id": 790,
        "mutability": "mutable",
        "name": "_symbol",
        "nameLocation": "20856:7:1",
        "nodeType": "VariableDeclaration",
        "scope": 1578,
        "src": "20841:22:1",
        "stateVariable": true,
        "storageLocation": "default",
        "typeDescriptions": {
          "typeIdentifier": "t_string_storage",
          "typeString": "string"
        },
        "typeName": {
          "id": 789,
          "name": "string",
          "nodeType": "ElementaryTypeName",
          "src": "20841:6:1",
          "typeDescriptions": {
            "typeIdentifier": "t_string_storage_ptr",
            "typeString": "string"
          }
        },
        "visibility": "private"
      }, {
        "constant": false,
        "id": 794,
        "mutability": "mutable",
        "name": "_owners",
        "nameLocation": "20955:7:1",
        "nodeType": "VariableDeclaration",
        "scope": 1578,
        "src": "20919:43:1",
        "stateVariable": true,
        "storageLocation": "default",
        "typeDescriptions": {
          "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
          "typeString": "mapping(uint256 => address)"
        },
        "typeName": {
          "id": 793,
          "keyType": {
            "id": 791,
            "name": "uint256",
            "nodeType": "ElementaryTypeName",
            "src": "20927:7:1",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            }
          },
          "nodeType": "Mapping",
          "src": "20919:27:1",
          "typeDescriptions": {
            "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
            "typeString": "mapping(uint256 => address)"
          },
          "valueType": {
            "id": 792,
            "name": "address",
            "nodeType": "ElementaryTypeName",
            "src": "20938:7:1",
            "stateMutability": "nonpayable",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            }
          }
        },
        "visibility": "private"
      }, {
        "constant": false,
        "id": 798,
        "mutability": "mutable",
        "name": "_balances",
        "nameLocation": "21052:9:1",
        "nodeType": "VariableDeclaration",
        "scope": 1578,
        "src": "21016:45:1",
        "stateVariable": true,
        "storageLocation": "default",
        "typeDescriptions": {
          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
          "typeString": "mapping(address => uint256)"
        },
        "typeName": {
          "id": 797,
          "keyType": {
            "id": 795,
            "name": "address",
            "nodeType": "ElementaryTypeName",
            "src": "21024:7:1",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            }
          },
          "nodeType": "Mapping",
          "src": "21016:27:1",
          "typeDescriptions": {
            "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
            "typeString": "mapping(address => uint256)"
          },
          "valueType": {
            "id": 796,
            "name": "uint256",
            "nodeType": "ElementaryTypeName",
            "src": "21035:7:1",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            }
          }
        },
        "visibility": "private"
      }, {
        "constant": false,
        "id": 802,
        "mutability": "mutable",
        "name": "_tokenApprovals",
        "nameLocation": "21156:15:1",
        "nodeType": "VariableDeclaration",
        "scope": 1578,
        "src": "21120:51:1",
        "stateVariable": true,
        "storageLocation": "default",
        "typeDescriptions": {
          "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
          "typeString": "mapping(uint256 => address)"
        },
        "typeName": {
          "id": 801,
          "keyType": {
            "id": 799,
            "name": "uint256",
            "nodeType": "ElementaryTypeName",
            "src": "21128:7:1",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            }
          },
          "nodeType": "Mapping",
          "src": "21120:27:1",
          "typeDescriptions": {
            "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
            "typeString": "mapping(uint256 => address)"
          },
          "valueType": {
            "id": 800,
            "name": "address",
            "nodeType": "ElementaryTypeName",
            "src": "21139:7:1",
            "stateMutability": "nonpayable",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            }
          }
        },
        "visibility": "private"
      }, {
        "constant": false,
        "id": 808,
        "mutability": "mutable",
        "name": "_operatorApprovals",
        "nameLocation": "21282:18:1",
        "nodeType": "VariableDeclaration",
        "scope": 1578,
        "src": "21229:71:1",
        "stateVariable": true,
        "storageLocation": "default",
        "typeDescriptions": {
          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
          "typeString": "mapping(address => mapping(address => bool))"
        },
        "typeName": {
          "id": 807,
          "keyType": {
            "id": 803,
            "name": "address",
            "nodeType": "ElementaryTypeName",
            "src": "21237:7:1",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            }
          },
          "nodeType": "Mapping",
          "src": "21229:44:1",
          "typeDescriptions": {
            "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
            "typeString": "mapping(address => mapping(address => bool))"
          },
          "valueType": {
            "id": 806,
            "keyType": {
              "id": 804,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "21256:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "nodeType": "Mapping",
            "src": "21248:24:1",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
              "typeString": "mapping(address => bool)"
            },
            "valueType": {
              "id": 805,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "21267:4:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            }
          }
        },
        "visibility": "private"
      }, {
        "body": {
          "id": 824,
          "nodeType": "Block",
          "src": "21481:60:1",
          "statements": [{
            "expression": {
              "id": 818,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "leftHandSide": {
                "id": 816,
                "name": "_name",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 788,
                "src": "21492:5:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage",
                  "typeString": "string storage ref"
                }
              },
              "nodeType": "Assignment",
              "operator": "=",
              "rightHandSide": {
                "id": 817,
                "name": "name_",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 811,
                "src": "21500:5:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_memory_ptr",
                  "typeString": "string memory"
                }
              },
              "src": "21492:13:1",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage",
                "typeString": "string storage ref"
              }
            },
            "id": 819,
            "nodeType": "ExpressionStatement",
            "src": "21492:13:1"
          }, {
            "expression": {
              "id": 822,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "leftHandSide": {
                "id": 820,
                "name": "_symbol",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 790,
                "src": "21516:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage",
                  "typeString": "string storage ref"
                }
              },
              "nodeType": "Assignment",
              "operator": "=",
              "rightHandSide": {
                "id": 821,
                "name": "symbol_",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 813,
                "src": "21526:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_memory_ptr",
                  "typeString": "string memory"
                }
              },
              "src": "21516:17:1",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage",
                "typeString": "string storage ref"
              }
            },
            "id": 823,
            "nodeType": "ExpressionStatement",
            "src": "21516:17:1"
          }]
        },
        "documentation": {
          "id": 809,
          "nodeType": "StructuredDocumentation",
          "src": "21309:110:1",
          "text": " @dev Initializes the contract by setting a `name` and a `symbol` to the token collection."
        },
        "id": 825,
        "implemented": true,
        "kind": "constructor",
        "modifiers": [],
        "name": "",
        "nameLocation": "-1:-1:-1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 814,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 811,
            "mutability": "mutable",
            "name": "name_",
            "nameLocation": "21451:5:1",
            "nodeType": "VariableDeclaration",
            "scope": 825,
            "src": "21437:19:1",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory_ptr",
              "typeString": "string"
            },
            "typeName": {
              "id": 810,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "21437:6:1",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 813,
            "mutability": "mutable",
            "name": "symbol_",
            "nameLocation": "21472:7:1",
            "nodeType": "VariableDeclaration",
            "scope": 825,
            "src": "21458:21:1",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory_ptr",
              "typeString": "string"
            },
            "typeName": {
              "id": 812,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "21458:6:1",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "internal"
          }],
          "src": "21436:44:1"
        },
        "returnParameters": {
          "id": 815,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "21481:0:1"
        },
        "scope": 1578,
        "src": "21425:116:1",
        "stateMutability": "nonpayable",
        "virtual": false,
        "visibility": "public"
      }, {
        "baseFunctions": [43, 208],
        "body": {
          "id": 855,
          "nodeType": "Block",
          "src": "21721:197:1",
          "statements": [{
            "expression": {
              "commonType": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              },
              "id": 853,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "leftExpression": {
                "commonType": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "id": 848,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "leftExpression": {
                  "commonType": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "id": 841,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "lValueRequested": false,
                  "leftExpression": {
                    "id": 836,
                    "name": "interfaceId",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 828,
                    "src": "21752:11:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "nodeType": "BinaryOperation",
                  "operator": "==",
                  "rightExpression": {
                    "expression": {
                      "arguments": [{
                        "id": 838,
                        "name": "IERC721",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 158,
                        "src": "21772:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_IERC721_$158_$",
                          "typeString": "type(contract IERC721)"
                        }
                      }],
                      "expression": {
                        "argumentTypes": [{
                          "typeIdentifier": "t_type$_t_contract$_IERC721_$158_$",
                          "typeString": "type(contract IERC721)"
                        }],
                        "id": 837,
                        "name": "type",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4294967269,
                        "src": "21767:4:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 839,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "21767:13:1",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_meta_type_t_contract$_IERC721_$158",
                        "typeString": "type(contract IERC721)"
                      }
                    },
                    "id": 840,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "memberName": "interfaceId",
                    "nodeType": "MemberAccess",
                    "src": "21767:25:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "src": "21752:40:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "nodeType": "BinaryOperation",
                "operator": "||",
                "rightExpression": {
                  "commonType": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "id": 847,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "lValueRequested": false,
                  "leftExpression": {
                    "id": 842,
                    "name": "interfaceId",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 828,
                    "src": "21809:11:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "nodeType": "BinaryOperation",
                  "operator": "==",
                  "rightExpression": {
                    "expression": {
                      "arguments": [{
                        "id": 844,
                        "name": "IERC721Metadata",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 732,
                        "src": "21829:15:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_IERC721Metadata_$732_$",
                          "typeString": "type(contract IERC721Metadata)"
                        }
                      }],
                      "expression": {
                        "argumentTypes": [{
                          "typeIdentifier": "t_type$_t_contract$_IERC721Metadata_$732_$",
                          "typeString": "type(contract IERC721Metadata)"
                        }],
                        "id": 843,
                        "name": "type",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4294967269,
                        "src": "21824:4:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 845,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "21824:21:1",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_meta_type_t_contract$_IERC721Metadata_$732",
                        "typeString": "type(contract IERC721Metadata)"
                      }
                    },
                    "id": 846,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "memberName": "interfaceId",
                    "nodeType": "MemberAccess",
                    "src": "21824:33:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "src": "21809:48:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "src": "21752:105:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              },
              "nodeType": "BinaryOperation",
              "operator": "||",
              "rightExpression": {
                "arguments": [{
                  "id": 851,
                  "name": "interfaceId",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 828,
                  "src": "21898:11:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  }
                }],
                "expression": {
                  "argumentTypes": [{
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  }],
                  "expression": {
                    "id": 849,
                    "name": "super",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4294967271,
                    "src": "21874:5:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_type$_t_super$_ERC721_$1578_$",
                      "typeString": "type(contract super ERC721)"
                    }
                  },
                  "id": 850,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "lValueRequested": false,
                  "memberName": "supportsInterface",
                  "nodeType": "MemberAccess",
                  "referencedDeclaration": 208,
                  "src": "21874:23:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_function_internal_view$_t_bytes4_$returns$_t_bool_$",
                    "typeString": "function (bytes4) view returns (bool)"
                  }
                },
                "id": 852,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "kind": "functionCall",
                "lValueRequested": false,
                "names": [],
                "nodeType": "FunctionCall",
                "src": "21874:36:1",
                "tryCall": false,
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              },
              "src": "21752:158:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "functionReturnParameters": 835,
            "id": 854,
            "nodeType": "Return",
            "src": "21732:178:1"
          }]
        },
        "documentation": {
          "id": 826,
          "nodeType": "StructuredDocumentation",
          "src": "21549:58:1",
          "text": " @dev See {IERC165-supportsInterface}."
        },
        "functionSelector": "01ffc9a7",
        "id": 856,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "supportsInterface",
        "nameLocation": "21622:17:1",
        "nodeType": "FunctionDefinition",
        "overrides": {
          "id": 832,
          "nodeType": "OverrideSpecifier",
          "overrides": [{
            "id": 830,
            "name": "ERC165",
            "nodeType": "IdentifierPath",
            "referencedDeclaration": 209,
            "src": "21689:6:1"
          }, {
            "id": 831,
            "name": "IERC165",
            "nodeType": "IdentifierPath",
            "referencedDeclaration": 44,
            "src": "21697:7:1"
          }],
          "src": "21680:25:1"
        },
        "parameters": {
          "id": 829,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 828,
            "mutability": "mutable",
            "name": "interfaceId",
            "nameLocation": "21647:11:1",
            "nodeType": "VariableDeclaration",
            "scope": 856,
            "src": "21640:18:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes4",
              "typeString": "bytes4"
            },
            "typeName": {
              "id": 827,
              "name": "bytes4",
              "nodeType": "ElementaryTypeName",
              "src": "21640:6:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes4",
                "typeString": "bytes4"
              }
            },
            "visibility": "internal"
          }],
          "src": "21639:20:1"
        },
        "returnParameters": {
          "id": 835,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 834,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 856,
            "src": "21715:4:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 833,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "21715:4:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "visibility": "internal"
          }],
          "src": "21714:6:1"
        },
        "scope": 1578,
        "src": "21613:305:1",
        "stateMutability": "view",
        "virtual": true,
        "visibility": "public"
      }, {
        "baseFunctions": [83],
        "body": {
          "id": 879,
          "nodeType": "Block",
          "src": "22063:127:1",
          "statements": [{
            "expression": {
              "arguments": [{
                "commonType": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "id": 871,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "leftExpression": {
                  "id": 866,
                  "name": "owner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 859,
                  "src": "22082:5:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "nodeType": "BinaryOperation",
                "operator": "!=",
                "rightExpression": {
                  "arguments": [{
                    "hexValue": "30",
                    "id": 869,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "22099:1:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  }],
                  "expression": {
                    "argumentTypes": [{
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    }],
                    "id": 868,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "nodeType": "ElementaryTypeNameExpression",
                    "src": "22091:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_type$_t_address_$",
                      "typeString": "type(address)"
                    },
                    "typeName": {
                      "id": 867,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "22091:7:1",
                      "typeDescriptions": {}
                    }
                  },
                  "id": 870,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "typeConversion",
                  "lValueRequested": false,
                  "names": [],
                  "nodeType": "FunctionCall",
                  "src": "22091:10:1",
                  "tryCall": false,
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "src": "22082:19:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }, {
                "hexValue": "4552433732313a2062616c616e636520717565727920666f7220746865207a65726f2061646472657373",
                "id": 872,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "string",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "22103:44:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_stringliteral_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba",
                  "typeString": "literal_string \"ERC721: balance query for the zero address\""
                },
                "value": "ERC721: balance query for the zero address"
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }, {
                  "typeIdentifier": "t_stringliteral_7395d4d3901c50cdfcab223d072f9aa36241df5d883e62cbf147ee1b05a9e6ba",
                  "typeString": "literal_string \"ERC721: balance query for the zero address\""
                }],
                "id": 865,
                "name": "require",
                "nodeType": "Identifier",
                "overloadedDeclarations": [4294967278, 4294967278],
                "referencedDeclaration": 4294967278,
                "src": "22074:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                  "typeString": "function (bool,string memory) pure"
                }
              },
              "id": 873,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "22074:74:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 874,
            "nodeType": "ExpressionStatement",
            "src": "22074:74:1"
          }, {
            "expression": {
              "baseExpression": {
                "id": 875,
                "name": "_balances",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 798,
                "src": "22166:9:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                  "typeString": "mapping(address => uint256)"
                }
              },
              "id": 877,
              "indexExpression": {
                "id": 876,
                "name": "owner",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 859,
                "src": "22176:5:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "isConstant": false,
              "isLValue": true,
              "isPure": false,
              "lValueRequested": false,
              "nodeType": "IndexAccess",
              "src": "22166:16:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "functionReturnParameters": 864,
            "id": 878,
            "nodeType": "Return",
            "src": "22159:23:1"
          }]
        },
        "documentation": {
          "id": 857,
          "nodeType": "StructuredDocumentation",
          "src": "21926:50:1",
          "text": " @dev See {IERC721-balanceOf}."
        },
        "functionSelector": "70a08231",
        "id": 880,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "balanceOf",
        "nameLocation": "21991:9:1",
        "nodeType": "FunctionDefinition",
        "overrides": {
          "id": 861,
          "nodeType": "OverrideSpecifier",
          "overrides": [],
          "src": "22036:8:1"
        },
        "parameters": {
          "id": 860,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 859,
            "mutability": "mutable",
            "name": "owner",
            "nameLocation": "22009:5:1",
            "nodeType": "VariableDeclaration",
            "scope": 880,
            "src": "22001:13:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 858,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "22001:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }],
          "src": "22000:15:1"
        },
        "returnParameters": {
          "id": 864,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 863,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 880,
            "src": "22054:7:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 862,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "22054:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "22053:9:1"
        },
        "scope": 1578,
        "src": "21982:208:1",
        "stateMutability": "view",
        "virtual": true,
        "visibility": "public"
      }, {
        "baseFunctions": [91],
        "body": {
          "id": 907,
          "nodeType": "Block",
          "src": "22333:158:1",
          "statements": [{
            "assignments": [890],
            "declarations": [{
              "constant": false,
              "id": 890,
              "mutability": "mutable",
              "name": "owner",
              "nameLocation": "22352:5:1",
              "nodeType": "VariableDeclaration",
              "scope": 907,
              "src": "22344:13:1",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              },
              "typeName": {
                "id": 889,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "22344:7:1",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "visibility": "internal"
            }],
            "id": 894,
            "initialValue": {
              "baseExpression": {
                "id": 891,
                "name": "_owners",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 794,
                "src": "22360:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                  "typeString": "mapping(uint256 => address)"
                }
              },
              "id": 893,
              "indexExpression": {
                "id": 892,
                "name": "tokenId",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 883,
                "src": "22368:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "isConstant": false,
              "isLValue": true,
              "isPure": false,
              "lValueRequested": false,
              "nodeType": "IndexAccess",
              "src": "22360:16:1",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "nodeType": "VariableDeclarationStatement",
            "src": "22344:32:1"
          }, {
            "expression": {
              "arguments": [{
                "commonType": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "id": 901,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "leftExpression": {
                  "id": 896,
                  "name": "owner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 890,
                  "src": "22395:5:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "nodeType": "BinaryOperation",
                "operator": "!=",
                "rightExpression": {
                  "arguments": [{
                    "hexValue": "30",
                    "id": 899,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "22412:1:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  }],
                  "expression": {
                    "argumentTypes": [{
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    }],
                    "id": 898,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "nodeType": "ElementaryTypeNameExpression",
                    "src": "22404:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_type$_t_address_$",
                      "typeString": "type(address)"
                    },
                    "typeName": {
                      "id": 897,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "22404:7:1",
                      "typeDescriptions": {}
                    }
                  },
                  "id": 900,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "typeConversion",
                  "lValueRequested": false,
                  "names": [],
                  "nodeType": "FunctionCall",
                  "src": "22404:10:1",
                  "tryCall": false,
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "src": "22395:19:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }, {
                "hexValue": "4552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e",
                "id": 902,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "string",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "22416:43:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_stringliteral_7481f3df2a424c0755a1ad2356614e9a5a358d461ea2eae1f89cb21cbad00397",
                  "typeString": "literal_string \"ERC721: owner query for nonexistent token\""
                },
                "value": "ERC721: owner query for nonexistent token"
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }, {
                  "typeIdentifier": "t_stringliteral_7481f3df2a424c0755a1ad2356614e9a5a358d461ea2eae1f89cb21cbad00397",
                  "typeString": "literal_string \"ERC721: owner query for nonexistent token\""
                }],
                "id": 895,
                "name": "require",
                "nodeType": "Identifier",
                "overloadedDeclarations": [4294967278, 4294967278],
                "referencedDeclaration": 4294967278,
                "src": "22387:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                  "typeString": "function (bool,string memory) pure"
                }
              },
              "id": 903,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "22387:73:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 904,
            "nodeType": "ExpressionStatement",
            "src": "22387:73:1"
          }, {
            "expression": {
              "id": 905,
              "name": "owner",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 890,
              "src": "22478:5:1",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "functionReturnParameters": 888,
            "id": 906,
            "nodeType": "Return",
            "src": "22471:12:1"
          }]
        },
        "documentation": {
          "id": 881,
          "nodeType": "StructuredDocumentation",
          "src": "22198:48:1",
          "text": " @dev See {IERC721-ownerOf}."
        },
        "functionSelector": "6352211e",
        "id": 908,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "ownerOf",
        "nameLocation": "22261:7:1",
        "nodeType": "FunctionDefinition",
        "overrides": {
          "id": 885,
          "nodeType": "OverrideSpecifier",
          "overrides": [],
          "src": "22306:8:1"
        },
        "parameters": {
          "id": 884,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 883,
            "mutability": "mutable",
            "name": "tokenId",
            "nameLocation": "22277:7:1",
            "nodeType": "VariableDeclaration",
            "scope": 908,
            "src": "22269:15:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 882,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "22269:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "22268:17:1"
        },
        "returnParameters": {
          "id": 888,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 887,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 908,
            "src": "22324:7:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 886,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "22324:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }],
          "src": "22323:9:1"
        },
        "scope": 1578,
        "src": "22252:239:1",
        "stateMutability": "view",
        "virtual": true,
        "visibility": "public"
      }, {
        "baseFunctions": [717],
        "body": {
          "id": 917,
          "nodeType": "Block",
          "src": "22627:31:1",
          "statements": [{
            "expression": {
              "id": 915,
              "name": "_name",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 788,
              "src": "22645:5:1",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage",
                "typeString": "string storage ref"
              }
            },
            "functionReturnParameters": 914,
            "id": 916,
            "nodeType": "Return",
            "src": "22638:12:1"
          }]
        },
        "documentation": {
          "id": 909,
          "nodeType": "StructuredDocumentation",
          "src": "22499:53:1",
          "text": " @dev See {IERC721Metadata-name}."
        },
        "functionSelector": "06fdde03",
        "id": 918,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "name",
        "nameLocation": "22567:4:1",
        "nodeType": "FunctionDefinition",
        "overrides": {
          "id": 911,
          "nodeType": "OverrideSpecifier",
          "overrides": [],
          "src": "22594:8:1"
        },
        "parameters": {
          "id": 910,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "22571:2:1"
        },
        "returnParameters": {
          "id": 914,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 913,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 918,
            "src": "22612:13:1",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory_ptr",
              "typeString": "string"
            },
            "typeName": {
              "id": 912,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "22612:6:1",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "internal"
          }],
          "src": "22611:15:1"
        },
        "scope": 1578,
        "src": "22558:100:1",
        "stateMutability": "view",
        "virtual": true,
        "visibility": "public"
      }, {
        "baseFunctions": [723],
        "body": {
          "id": 927,
          "nodeType": "Block",
          "src": "22798:33:1",
          "statements": [{
            "expression": {
              "id": 925,
              "name": "_symbol",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 790,
              "src": "22816:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage",
                "typeString": "string storage ref"
              }
            },
            "functionReturnParameters": 924,
            "id": 926,
            "nodeType": "Return",
            "src": "22809:14:1"
          }]
        },
        "documentation": {
          "id": 919,
          "nodeType": "StructuredDocumentation",
          "src": "22666:55:1",
          "text": " @dev See {IERC721Metadata-symbol}."
        },
        "functionSelector": "95d89b41",
        "id": 928,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "symbol",
        "nameLocation": "22736:6:1",
        "nodeType": "FunctionDefinition",
        "overrides": {
          "id": 921,
          "nodeType": "OverrideSpecifier",
          "overrides": [],
          "src": "22765:8:1"
        },
        "parameters": {
          "id": 920,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "22742:2:1"
        },
        "returnParameters": {
          "id": 924,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 923,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 928,
            "src": "22783:13:1",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory_ptr",
              "typeString": "string"
            },
            "typeName": {
              "id": 922,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "22783:6:1",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "internal"
          }],
          "src": "22782:15:1"
        },
        "scope": 1578,
        "src": "22727:104:1",
        "stateMutability": "view",
        "virtual": true,
        "visibility": "public"
      }, {
        "baseFunctions": [731],
        "body": {
          "id": 969,
          "nodeType": "Block",
          "src": "22990:246:1",
          "statements": [{
            "expression": {
              "arguments": [{
                "arguments": [{
                  "id": 939,
                  "name": "tokenId",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 931,
                  "src": "23017:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                }],
                "expression": {
                  "argumentTypes": [{
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }],
                  "id": 938,
                  "name": "_exists",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1218,
                  "src": "23009:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
                    "typeString": "function (uint256) view returns (bool)"
                  }
                },
                "id": 940,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "kind": "functionCall",
                "lValueRequested": false,
                "names": [],
                "nodeType": "FunctionCall",
                "src": "23009:16:1",
                "tryCall": false,
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }, {
                "hexValue": "4552433732314d657461646174613a2055524920717565727920666f72206e6f6e6578697374656e7420746f6b656e",
                "id": 941,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "string",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "23027:49:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_stringliteral_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb",
                  "typeString": "literal_string \"ERC721Metadata: URI query for nonexistent token\""
                },
                "value": "ERC721Metadata: URI query for nonexistent token"
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }, {
                  "typeIdentifier": "t_stringliteral_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb",
                  "typeString": "literal_string \"ERC721Metadata: URI query for nonexistent token\""
                }],
                "id": 937,
                "name": "require",
                "nodeType": "Identifier",
                "overloadedDeclarations": [4294967278, 4294967278],
                "referencedDeclaration": 4294967278,
                "src": "23001:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                  "typeString": "function (bool,string memory) pure"
                }
              },
              "id": 942,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "23001:76:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 943,
            "nodeType": "ExpressionStatement",
            "src": "23001:76:1"
          }, {
            "assignments": [945],
            "declarations": [{
              "constant": false,
              "id": 945,
              "mutability": "mutable",
              "name": "baseURI",
              "nameLocation": "23104:7:1",
              "nodeType": "VariableDeclaration",
              "scope": 969,
              "src": "23090:21:1",
              "stateVariable": false,
              "storageLocation": "memory",
              "typeDescriptions": {
                "typeIdentifier": "t_string_memory_ptr",
                "typeString": "string"
              },
              "typeName": {
                "id": 944,
                "name": "string",
                "nodeType": "ElementaryTypeName",
                "src": "23090:6:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                }
              },
              "visibility": "internal"
            }],
            "id": 948,
            "initialValue": {
              "arguments": [],
              "expression": {
                "argumentTypes": [],
                "id": 946,
                "name": "_baseURI",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 979,
                "src": "23114:8:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_internal_view$__$returns$_t_string_memory_ptr_$",
                  "typeString": "function () view returns (string memory)"
                }
              },
              "id": 947,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "23114:10:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_string_memory_ptr",
                "typeString": "string memory"
              }
            },
            "nodeType": "VariableDeclarationStatement",
            "src": "23090:34:1"
          }, {
            "expression": {
              "condition": {
                "commonType": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "id": 955,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "leftExpression": {
                  "expression": {
                    "arguments": [{
                      "id": 951,
                      "name": "baseURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 945,
                      "src": "23148:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    }],
                    "expression": {
                      "argumentTypes": [{
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }],
                      "id": 950,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "23142:5:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                        "typeString": "type(bytes storage pointer)"
                      },
                      "typeName": {
                        "id": 949,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "23142:5:1",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 952,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "23142:14:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_memory_ptr",
                      "typeString": "bytes memory"
                    }
                  },
                  "id": 953,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "lValueRequested": false,
                  "memberName": "length",
                  "nodeType": "MemberAccess",
                  "src": "23142:21:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "nodeType": "BinaryOperation",
                "operator": ">",
                "rightExpression": {
                  "hexValue": "30",
                  "id": 954,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "23166:1:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_0_by_1",
                    "typeString": "int_const 0"
                  },
                  "value": "0"
                },
                "src": "23142:25:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              },
              "falseExpression": {
                "hexValue": "",
                "id": 966,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "string",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "23226:2:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                  "typeString": "literal_string \"\""
                },
                "value": ""
              },
              "id": 967,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "nodeType": "Conditional",
              "src": "23142:86:1",
              "trueExpression": {
                "arguments": [{
                  "arguments": [{
                    "id": 960,
                    "name": "baseURI",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 945,
                    "src": "23194:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  }, {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 961,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 931,
                        "src": "23203:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 962,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "toString",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 293,
                      "src": "23203:16:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$",
                        "typeString": "function (uint256) pure returns (string memory)"
                      }
                    },
                    "id": 963,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "23203:18:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  }],
                  "expression": {
                    "argumentTypes": [{
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }, {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }],
                    "expression": {
                      "id": 958,
                      "name": "abi",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4294967295,
                      "src": "23177:3:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_abi",
                        "typeString": "abi"
                      }
                    },
                    "id": 959,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "memberName": "encodePacked",
                    "nodeType": "MemberAccess",
                    "src": "23177:16:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                      "typeString": "function () pure returns (bytes memory)"
                    }
                  },
                  "id": 964,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "kind": "functionCall",
                  "lValueRequested": false,
                  "names": [],
                  "nodeType": "FunctionCall",
                  "src": "23177:45:1",
                  "tryCall": false,
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes memory"
                  }
                }],
                "expression": {
                  "argumentTypes": [{
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes memory"
                  }],
                  "id": 957,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "lValueRequested": false,
                  "nodeType": "ElementaryTypeNameExpression",
                  "src": "23170:6:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                    "typeString": "type(string storage pointer)"
                  },
                  "typeName": {
                    "id": 956,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "23170:6:1",
                    "typeDescriptions": {}
                  }
                },
                "id": 965,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "kind": "typeConversion",
                "lValueRequested": false,
                "names": [],
                "nodeType": "FunctionCall",
                "src": "23170:53:1",
                "tryCall": false,
                "typeDescriptions": {
                  "typeIdentifier": "t_string_memory_ptr",
                  "typeString": "string memory"
                }
              },
              "typeDescriptions": {
                "typeIdentifier": "t_string_memory_ptr",
                "typeString": "string memory"
              }
            },
            "functionReturnParameters": 936,
            "id": 968,
            "nodeType": "Return",
            "src": "23135:93:1"
          }]
        },
        "documentation": {
          "id": 929,
          "nodeType": "StructuredDocumentation",
          "src": "22839:57:1",
          "text": " @dev See {IERC721Metadata-tokenURI}."
        },
        "functionSelector": "c87b56dd",
        "id": 970,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "tokenURI",
        "nameLocation": "22911:8:1",
        "nodeType": "FunctionDefinition",
        "overrides": {
          "id": 933,
          "nodeType": "OverrideSpecifier",
          "overrides": [],
          "src": "22957:8:1"
        },
        "parameters": {
          "id": 932,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 931,
            "mutability": "mutable",
            "name": "tokenId",
            "nameLocation": "22928:7:1",
            "nodeType": "VariableDeclaration",
            "scope": 970,
            "src": "22920:15:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 930,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "22920:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "22919:17:1"
        },
        "returnParameters": {
          "id": 936,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 935,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 970,
            "src": "22975:13:1",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory_ptr",
              "typeString": "string"
            },
            "typeName": {
              "id": 934,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "22975:6:1",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "internal"
          }],
          "src": "22974:15:1"
        },
        "scope": 1578,
        "src": "22902:334:1",
        "stateMutability": "view",
        "virtual": true,
        "visibility": "public"
      }, {
        "body": {
          "id": 978,
          "nodeType": "Block",
          "src": "23550:28:1",
          "statements": [{
            "expression": {
              "hexValue": "",
              "id": 976,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "23568:2:1",
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                "typeString": "literal_string \"\""
              },
              "value": ""
            },
            "functionReturnParameters": 975,
            "id": 977,
            "nodeType": "Return",
            "src": "23561:9:1"
          }]
        },
        "documentation": {
          "id": 971,
          "nodeType": "StructuredDocumentation",
          "src": "23244:234:1",
          "text": " @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, can be overriden in child contracts."
        },
        "id": 979,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "_baseURI",
        "nameLocation": "23493:8:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 972,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "23501:2:1"
        },
        "returnParameters": {
          "id": 975,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 974,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 979,
            "src": "23535:13:1",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory_ptr",
              "typeString": "string"
            },
            "typeName": {
              "id": 973,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "23535:6:1",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "internal"
          }],
          "src": "23534:15:1"
        },
        "scope": 1578,
        "src": "23484:94:1",
        "stateMutability": "view",
        "virtual": true,
        "visibility": "internal"
      }, {
        "baseFunctions": [119],
        "body": {
          "id": 1021,
          "nodeType": "Block",
          "src": "23710:341:1",
          "statements": [{
            "assignments": [989],
            "declarations": [{
              "constant": false,
              "id": 989,
              "mutability": "mutable",
              "name": "owner",
              "nameLocation": "23729:5:1",
              "nodeType": "VariableDeclaration",
              "scope": 1021,
              "src": "23721:13:1",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              },
              "typeName": {
                "id": 988,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "23721:7:1",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "visibility": "internal"
            }],
            "id": 994,
            "initialValue": {
              "arguments": [{
                "id": 992,
                "name": "tokenId",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 984,
                "src": "23752:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }],
                "expression": {
                  "id": 990,
                  "name": "ERC721",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1578,
                  "src": "23737:6:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC721_$1578_$",
                    "typeString": "type(contract ERC721)"
                  }
                },
                "id": 991,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "memberName": "ownerOf",
                "nodeType": "MemberAccess",
                "referencedDeclaration": 908,
                "src": "23737:14:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                  "typeString": "function (uint256) view returns (address)"
                }
              },
              "id": 993,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "23737:23:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "nodeType": "VariableDeclarationStatement",
            "src": "23721:39:1"
          }, {
            "expression": {
              "arguments": [{
                "commonType": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "id": 998,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "leftExpression": {
                  "id": 996,
                  "name": "to",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 982,
                  "src": "23779:2:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "nodeType": "BinaryOperation",
                "operator": "!=",
                "rightExpression": {
                  "id": 997,
                  "name": "owner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 989,
                  "src": "23785:5:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "src": "23779:11:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }, {
                "hexValue": "4552433732313a20617070726f76616c20746f2063757272656e74206f776e6572",
                "id": 999,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "string",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "23792:35:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942",
                  "typeString": "literal_string \"ERC721: approval to current owner\""
                },
                "value": "ERC721: approval to current owner"
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }, {
                  "typeIdentifier": "t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942",
                  "typeString": "literal_string \"ERC721: approval to current owner\""
                }],
                "id": 995,
                "name": "require",
                "nodeType": "Identifier",
                "overloadedDeclarations": [4294967278, 4294967278],
                "referencedDeclaration": 4294967278,
                "src": "23771:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                  "typeString": "function (bool,string memory) pure"
                }
              },
              "id": 1000,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "23771:57:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 1001,
            "nodeType": "ExpressionStatement",
            "src": "23771:57:1"
          }, {
            "expression": {
              "arguments": [{
                "commonType": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "id": 1012,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "leftExpression": {
                  "commonType": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "id": 1006,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "lValueRequested": false,
                  "leftExpression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 1003,
                      "name": "_msgSender",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 760,
                      "src": "23863:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                        "typeString": "function () view returns (address)"
                      }
                    },
                    "id": 1004,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "23863:12:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "BinaryOperation",
                  "operator": "==",
                  "rightExpression": {
                    "id": 1005,
                    "name": "owner",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 989,
                    "src": "23879:5:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "src": "23863:21:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "nodeType": "BinaryOperation",
                "operator": "||",
                "rightExpression": {
                  "arguments": [{
                    "id": 1008,
                    "name": "owner",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 989,
                    "src": "23905:5:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  }, {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 1009,
                      "name": "_msgSender",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 760,
                      "src": "23912:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                        "typeString": "function () view returns (address)"
                      }
                    },
                    "id": 1010,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "23912:12:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  }],
                  "expression": {
                    "argumentTypes": [{
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }, {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }],
                    "id": 1007,
                    "name": "isApprovedForAll",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1095,
                    "src": "23888:16:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$",
                      "typeString": "function (address,address) view returns (bool)"
                    }
                  },
                  "id": 1011,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "kind": "functionCall",
                  "lValueRequested": false,
                  "names": [],
                  "nodeType": "FunctionCall",
                  "src": "23888:37:1",
                  "tryCall": false,
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "src": "23863:62:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }, {
                "hexValue": "4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c",
                "id": 1013,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "string",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "23940:58:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_stringliteral_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d",
                  "typeString": "literal_string \"ERC721: approve caller is not owner nor approved for all\""
                },
                "value": "ERC721: approve caller is not owner nor approved for all"
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }, {
                  "typeIdentifier": "t_stringliteral_6d83cef3e0cb19b8320a9c5feb26b56bbb08f152a8e61b12eca3302d8d68b23d",
                  "typeString": "literal_string \"ERC721: approve caller is not owner nor approved for all\""
                }],
                "id": 1002,
                "name": "require",
                "nodeType": "Identifier",
                "overloadedDeclarations": [4294967278, 4294967278],
                "referencedDeclaration": 4294967278,
                "src": "23841:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                  "typeString": "function (bool,string memory) pure"
                }
              },
              "id": 1014,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "23841:168:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 1015,
            "nodeType": "ExpressionStatement",
            "src": "23841:168:1"
          }, {
            "expression": {
              "arguments": [{
                "id": 1017,
                "name": "to",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 982,
                "src": "24031:2:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }, {
                "id": 1018,
                "name": "tokenId",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 984,
                "src": "24035:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }, {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }],
                "id": 1016,
                "name": "_approve",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1504,
                "src": "24022:8:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                  "typeString": "function (address,uint256)"
                }
              },
              "id": 1019,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "24022:21:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 1020,
            "nodeType": "ExpressionStatement",
            "src": "24022:21:1"
          }]
        },
        "documentation": {
          "id": 980,
          "nodeType": "StructuredDocumentation",
          "src": "23586:48:1",
          "text": " @dev See {IERC721-approve}."
        },
        "functionSelector": "095ea7b3",
        "id": 1022,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "approve",
        "nameLocation": "23649:7:1",
        "nodeType": "FunctionDefinition",
        "overrides": {
          "id": 986,
          "nodeType": "OverrideSpecifier",
          "overrides": [],
          "src": "23701:8:1"
        },
        "parameters": {
          "id": 985,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 982,
            "mutability": "mutable",
            "name": "to",
            "nameLocation": "23665:2:1",
            "nodeType": "VariableDeclaration",
            "scope": 1022,
            "src": "23657:10:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 981,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "23657:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 984,
            "mutability": "mutable",
            "name": "tokenId",
            "nameLocation": "23677:7:1",
            "nodeType": "VariableDeclaration",
            "scope": 1022,
            "src": "23669:15:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 983,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "23669:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "23656:29:1"
        },
        "returnParameters": {
          "id": 987,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "23710:0:1"
        },
        "scope": 1578,
        "src": "23640:411:1",
        "stateMutability": "nonpayable",
        "virtual": true,
        "visibility": "public"
      }, {
        "baseFunctions": [127],
        "body": {
          "id": 1042,
          "nodeType": "Block",
          "src": "24202:136:1",
          "statements": [{
            "expression": {
              "arguments": [{
                "arguments": [{
                  "id": 1033,
                  "name": "tokenId",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1025,
                  "src": "24229:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                }],
                "expression": {
                  "argumentTypes": [{
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }],
                  "id": 1032,
                  "name": "_exists",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1218,
                  "src": "24221:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
                    "typeString": "function (uint256) view returns (bool)"
                  }
                },
                "id": 1034,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "kind": "functionCall",
                "lValueRequested": false,
                "names": [],
                "nodeType": "FunctionCall",
                "src": "24221:16:1",
                "tryCall": false,
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }, {
                "hexValue": "4552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e",
                "id": 1035,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "string",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "24239:46:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_stringliteral_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d",
                  "typeString": "literal_string \"ERC721: approved query for nonexistent token\""
                },
                "value": "ERC721: approved query for nonexistent token"
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }, {
                  "typeIdentifier": "t_stringliteral_9291e0f44949204f2e9b40e6be090924979d6047b2365868f4e9f027722eb89d",
                  "typeString": "literal_string \"ERC721: approved query for nonexistent token\""
                }],
                "id": 1031,
                "name": "require",
                "nodeType": "Identifier",
                "overloadedDeclarations": [4294967278, 4294967278],
                "referencedDeclaration": 4294967278,
                "src": "24213:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                  "typeString": "function (bool,string memory) pure"
                }
              },
              "id": 1036,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "24213:73:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 1037,
            "nodeType": "ExpressionStatement",
            "src": "24213:73:1"
          }, {
            "expression": {
              "baseExpression": {
                "id": 1038,
                "name": "_tokenApprovals",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 802,
                "src": "24306:15:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                  "typeString": "mapping(uint256 => address)"
                }
              },
              "id": 1040,
              "indexExpression": {
                "id": 1039,
                "name": "tokenId",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1025,
                "src": "24322:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "isConstant": false,
              "isLValue": true,
              "isPure": false,
              "lValueRequested": false,
              "nodeType": "IndexAccess",
              "src": "24306:24:1",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "functionReturnParameters": 1030,
            "id": 1041,
            "nodeType": "Return",
            "src": "24299:31:1"
          }]
        },
        "documentation": {
          "id": 1023,
          "nodeType": "StructuredDocumentation",
          "src": "24059:52:1",
          "text": " @dev See {IERC721-getApproved}."
        },
        "functionSelector": "081812fc",
        "id": 1043,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "getApproved",
        "nameLocation": "24126:11:1",
        "nodeType": "FunctionDefinition",
        "overrides": {
          "id": 1027,
          "nodeType": "OverrideSpecifier",
          "overrides": [],
          "src": "24175:8:1"
        },
        "parameters": {
          "id": 1026,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 1025,
            "mutability": "mutable",
            "name": "tokenId",
            "nameLocation": "24146:7:1",
            "nodeType": "VariableDeclaration",
            "scope": 1043,
            "src": "24138:15:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1024,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "24138:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "24137:17:1"
        },
        "returnParameters": {
          "id": 1030,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 1029,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 1043,
            "src": "24193:7:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1028,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "24193:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }],
          "src": "24192:9:1"
        },
        "scope": 1578,
        "src": "24117:221:1",
        "stateMutability": "view",
        "virtual": true,
        "visibility": "public"
      }, {
        "baseFunctions": [135],
        "body": {
          "id": 1076,
          "nodeType": "Block",
          "src": "24494:211:1",
          "statements": [{
            "expression": {
              "arguments": [{
                "commonType": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "id": 1056,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "leftExpression": {
                  "id": 1053,
                  "name": "operator",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1046,
                  "src": "24513:8:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "nodeType": "BinaryOperation",
                "operator": "!=",
                "rightExpression": {
                  "arguments": [],
                  "expression": {
                    "argumentTypes": [],
                    "id": 1054,
                    "name": "_msgSender",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 760,
                    "src": "24525:10:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                      "typeString": "function () view returns (address)"
                    }
                  },
                  "id": 1055,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "kind": "functionCall",
                  "lValueRequested": false,
                  "names": [],
                  "nodeType": "FunctionCall",
                  "src": "24525:12:1",
                  "tryCall": false,
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "src": "24513:24:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }, {
                "hexValue": "4552433732313a20617070726f766520746f2063616c6c6572",
                "id": 1057,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "string",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "24539:27:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05",
                  "typeString": "literal_string \"ERC721: approve to caller\""
                },
                "value": "ERC721: approve to caller"
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }, {
                  "typeIdentifier": "t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05",
                  "typeString": "literal_string \"ERC721: approve to caller\""
                }],
                "id": 1052,
                "name": "require",
                "nodeType": "Identifier",
                "overloadedDeclarations": [4294967278, 4294967278],
                "referencedDeclaration": 4294967278,
                "src": "24505:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                  "typeString": "function (bool,string memory) pure"
                }
              },
              "id": 1058,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "24505:62:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 1059,
            "nodeType": "ExpressionStatement",
            "src": "24505:62:1"
          }, {
            "expression": {
              "id": 1067,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "leftHandSide": {
                "baseExpression": {
                  "baseExpression": {
                    "id": 1060,
                    "name": "_operatorApprovals",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 808,
                    "src": "24580:18:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
                      "typeString": "mapping(address => mapping(address => bool))"
                    }
                  },
                  "id": 1064,
                  "indexExpression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 1061,
                      "name": "_msgSender",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 760,
                      "src": "24599:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                        "typeString": "function () view returns (address)"
                      }
                    },
                    "id": 1062,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "24599:12:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "isConstant": false,
                  "isLValue": true,
                  "isPure": false,
                  "lValueRequested": false,
                  "nodeType": "IndexAccess",
                  "src": "24580:32:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                    "typeString": "mapping(address => bool)"
                  }
                },
                "id": 1065,
                "indexExpression": {
                  "id": 1063,
                  "name": "operator",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1046,
                  "src": "24613:8:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "isConstant": false,
                "isLValue": true,
                "isPure": false,
                "lValueRequested": true,
                "nodeType": "IndexAccess",
                "src": "24580:42:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              },
              "nodeType": "Assignment",
              "operator": "=",
              "rightHandSide": {
                "id": 1066,
                "name": "approved",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1048,
                "src": "24625:8:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              },
              "src": "24580:53:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "id": 1068,
            "nodeType": "ExpressionStatement",
            "src": "24580:53:1"
          }, {
            "eventCall": {
              "arguments": [{
                "arguments": [],
                "expression": {
                  "argumentTypes": [],
                  "id": 1070,
                  "name": "_msgSender",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 760,
                  "src": "24664:10:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                    "typeString": "function () view returns (address)"
                  }
                },
                "id": 1071,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "kind": "functionCall",
                "lValueRequested": false,
                "names": [],
                "nodeType": "FunctionCall",
                "src": "24664:12:1",
                "tryCall": false,
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }, {
                "id": 1072,
                "name": "operator",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1046,
                "src": "24678:8:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }, {
                "id": 1073,
                "name": "approved",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1048,
                "src": "24688:8:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }, {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }, {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }],
                "id": 1069,
                "name": "ApprovalForAll",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 75,
                "src": "24649:14:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$",
                  "typeString": "function (address,address,bool)"
                }
              },
              "id": 1074,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "24649:48:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 1075,
            "nodeType": "EmitStatement",
            "src": "24644:53:1"
          }]
        },
        "documentation": {
          "id": 1044,
          "nodeType": "StructuredDocumentation",
          "src": "24346:58:1",
          "text": " @dev See {IERC721-setApprovalForAll}."
        },
        "functionSelector": "a22cb465",
        "id": 1077,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "setApprovalForAll",
        "nameLocation": "24419:17:1",
        "nodeType": "FunctionDefinition",
        "overrides": {
          "id": 1050,
          "nodeType": "OverrideSpecifier",
          "overrides": [],
          "src": "24485:8:1"
        },
        "parameters": {
          "id": 1049,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 1046,
            "mutability": "mutable",
            "name": "operator",
            "nameLocation": "24445:8:1",
            "nodeType": "VariableDeclaration",
            "scope": 1077,
            "src": "24437:16:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1045,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "24437:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 1048,
            "mutability": "mutable",
            "name": "approved",
            "nameLocation": "24460:8:1",
            "nodeType": "VariableDeclaration",
            "scope": 1077,
            "src": "24455:13:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 1047,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "24455:4:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "visibility": "internal"
          }],
          "src": "24436:33:1"
        },
        "returnParameters": {
          "id": 1051,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "24494:0:1"
        },
        "scope": 1578,
        "src": "24410:295:1",
        "stateMutability": "nonpayable",
        "virtual": true,
        "visibility": "public"
      }, {
        "baseFunctions": [145],
        "body": {
          "id": 1094,
          "nodeType": "Block",
          "src": "24879:61:1",
          "statements": [{
            "expression": {
              "baseExpression": {
                "baseExpression": {
                  "id": 1088,
                  "name": "_operatorApprovals",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 808,
                  "src": "24897:18:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
                    "typeString": "mapping(address => mapping(address => bool))"
                  }
                },
                "id": 1090,
                "indexExpression": {
                  "id": 1089,
                  "name": "owner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1080,
                  "src": "24916:5:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "isConstant": false,
                "isLValue": true,
                "isPure": false,
                "lValueRequested": false,
                "nodeType": "IndexAccess",
                "src": "24897:25:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                  "typeString": "mapping(address => bool)"
                }
              },
              "id": 1092,
              "indexExpression": {
                "id": 1091,
                "name": "operator",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1082,
                "src": "24923:8:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "isConstant": false,
              "isLValue": true,
              "isPure": false,
              "lValueRequested": false,
              "nodeType": "IndexAccess",
              "src": "24897:35:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "functionReturnParameters": 1087,
            "id": 1093,
            "nodeType": "Return",
            "src": "24890:42:1"
          }]
        },
        "documentation": {
          "id": 1078,
          "nodeType": "StructuredDocumentation",
          "src": "24713:57:1",
          "text": " @dev See {IERC721-isApprovedForAll}."
        },
        "functionSelector": "e985e9c5",
        "id": 1095,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "isApprovedForAll",
        "nameLocation": "24785:16:1",
        "nodeType": "FunctionDefinition",
        "overrides": {
          "id": 1084,
          "nodeType": "OverrideSpecifier",
          "overrides": [],
          "src": "24855:8:1"
        },
        "parameters": {
          "id": 1083,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 1080,
            "mutability": "mutable",
            "name": "owner",
            "nameLocation": "24810:5:1",
            "nodeType": "VariableDeclaration",
            "scope": 1095,
            "src": "24802:13:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1079,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "24802:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 1082,
            "mutability": "mutable",
            "name": "operator",
            "nameLocation": "24825:8:1",
            "nodeType": "VariableDeclaration",
            "scope": 1095,
            "src": "24817:16:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1081,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "24817:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }],
          "src": "24801:33:1"
        },
        "returnParameters": {
          "id": 1087,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 1086,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 1095,
            "src": "24873:4:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 1085,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "24873:4:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "visibility": "internal"
          }],
          "src": "24872:6:1"
        },
        "scope": 1578,
        "src": "24776:164:1",
        "stateMutability": "view",
        "virtual": true,
        "visibility": "public"
      }, {
        "baseFunctions": [111],
        "body": {
          "id": 1121,
          "nodeType": "Block",
          "src": "25130:216:1",
          "statements": [{
            "expression": {
              "arguments": [{
                "arguments": [{
                  "arguments": [],
                  "expression": {
                    "argumentTypes": [],
                    "id": 1108,
                    "name": "_msgSender",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 760,
                    "src": "25221:10:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                      "typeString": "function () view returns (address)"
                    }
                  },
                  "id": 1109,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "kind": "functionCall",
                  "lValueRequested": false,
                  "names": [],
                  "nodeType": "FunctionCall",
                  "src": "25221:12:1",
                  "tryCall": false,
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                }, {
                  "id": 1110,
                  "name": "tokenId",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1102,
                  "src": "25235:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                }],
                "expression": {
                  "argumentTypes": [{
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }, {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }],
                  "id": 1107,
                  "name": "_isApprovedOrOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1259,
                  "src": "25202:18:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$",
                    "typeString": "function (address,uint256) view returns (bool)"
                  }
                },
                "id": 1111,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "kind": "functionCall",
                "lValueRequested": false,
                "names": [],
                "nodeType": "FunctionCall",
                "src": "25202:41:1",
                "tryCall": false,
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }, {
                "hexValue": "4552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564",
                "id": 1112,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "string",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "25245:51:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2",
                  "typeString": "literal_string \"ERC721: transfer caller is not owner nor approved\""
                },
                "value": "ERC721: transfer caller is not owner nor approved"
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }, {
                  "typeIdentifier": "t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2",
                  "typeString": "literal_string \"ERC721: transfer caller is not owner nor approved\""
                }],
                "id": 1106,
                "name": "require",
                "nodeType": "Identifier",
                "overloadedDeclarations": [4294967278, 4294967278],
                "referencedDeclaration": 4294967278,
                "src": "25194:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                  "typeString": "function (bool,string memory) pure"
                }
              },
              "id": 1113,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "25194:103:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 1114,
            "nodeType": "ExpressionStatement",
            "src": "25194:103:1"
          }, {
            "expression": {
              "arguments": [{
                "id": 1116,
                "name": "from",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1098,
                "src": "25320:4:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }, {
                "id": 1117,
                "name": "to",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1100,
                "src": "25326:2:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }, {
                "id": 1118,
                "name": "tokenId",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1102,
                "src": "25330:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }, {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }, {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }],
                "id": 1115,
                "name": "_transfer",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1480,
                "src": "25310:9:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                  "typeString": "function (address,address,uint256)"
                }
              },
              "id": 1119,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "25310:28:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 1120,
            "nodeType": "ExpressionStatement",
            "src": "25310:28:1"
          }]
        },
        "documentation": {
          "id": 1096,
          "nodeType": "StructuredDocumentation",
          "src": "24948:53:1",
          "text": " @dev See {IERC721-transferFrom}."
        },
        "functionSelector": "23b872dd",
        "id": 1122,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "transferFrom",
        "nameLocation": "25016:12:1",
        "nodeType": "FunctionDefinition",
        "overrides": {
          "id": 1104,
          "nodeType": "OverrideSpecifier",
          "overrides": [],
          "src": "25121:8:1"
        },
        "parameters": {
          "id": 1103,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 1098,
            "mutability": "mutable",
            "name": "from",
            "nameLocation": "25047:4:1",
            "nodeType": "VariableDeclaration",
            "scope": 1122,
            "src": "25039:12:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1097,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "25039:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 1100,
            "mutability": "mutable",
            "name": "to",
            "nameLocation": "25070:2:1",
            "nodeType": "VariableDeclaration",
            "scope": 1122,
            "src": "25062:10:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1099,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "25062:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 1102,
            "mutability": "mutable",
            "name": "tokenId",
            "nameLocation": "25091:7:1",
            "nodeType": "VariableDeclaration",
            "scope": 1122,
            "src": "25083:15:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1101,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "25083:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "25028:77:1"
        },
        "returnParameters": {
          "id": 1105,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "25130:0:1"
        },
        "scope": 1578,
        "src": "25007:339:1",
        "stateMutability": "nonpayable",
        "virtual": true,
        "visibility": "public"
      }, {
        "baseFunctions": [101],
        "body": {
          "id": 1140,
          "nodeType": "Block",
          "src": "25544:58:1",
          "statements": [{
            "expression": {
              "arguments": [{
                "id": 1134,
                "name": "from",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1125,
                "src": "25572:4:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }, {
                "id": 1135,
                "name": "to",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1127,
                "src": "25578:2:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }, {
                "id": 1136,
                "name": "tokenId",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1129,
                "src": "25582:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }, {
                "hexValue": "",
                "id": 1137,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "string",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "25591:2:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                  "typeString": "literal_string \"\""
                },
                "value": ""
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }, {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }, {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }, {
                  "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                  "typeString": "literal_string \"\""
                }],
                "id": 1133,
                "name": "safeTransferFrom",
                "nodeType": "Identifier",
                "overloadedDeclarations": [1141, 1171],
                "referencedDeclaration": 1171,
                "src": "25555:16:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
                  "typeString": "function (address,address,uint256,bytes memory)"
                }
              },
              "id": 1138,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "25555:39:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 1139,
            "nodeType": "ExpressionStatement",
            "src": "25555:39:1"
          }]
        },
        "documentation": {
          "id": 1123,
          "nodeType": "StructuredDocumentation",
          "src": "25354:57:1",
          "text": " @dev See {IERC721-safeTransferFrom}."
        },
        "functionSelector": "42842e0e",
        "id": 1141,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "safeTransferFrom",
        "nameLocation": "25426:16:1",
        "nodeType": "FunctionDefinition",
        "overrides": {
          "id": 1131,
          "nodeType": "OverrideSpecifier",
          "overrides": [],
          "src": "25535:8:1"
        },
        "parameters": {
          "id": 1130,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 1125,
            "mutability": "mutable",
            "name": "from",
            "nameLocation": "25461:4:1",
            "nodeType": "VariableDeclaration",
            "scope": 1141,
            "src": "25453:12:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1124,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "25453:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 1127,
            "mutability": "mutable",
            "name": "to",
            "nameLocation": "25484:2:1",
            "nodeType": "VariableDeclaration",
            "scope": 1141,
            "src": "25476:10:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1126,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "25476:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 1129,
            "mutability": "mutable",
            "name": "tokenId",
            "nameLocation": "25505:7:1",
            "nodeType": "VariableDeclaration",
            "scope": 1141,
            "src": "25497:15:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1128,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "25497:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "25442:77:1"
        },
        "returnParameters": {
          "id": 1132,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "25544:0:1"
        },
        "scope": 1578,
        "src": "25417:185:1",
        "stateMutability": "nonpayable",
        "virtual": true,
        "visibility": "public"
      }, {
        "baseFunctions": [157],
        "body": {
          "id": 1170,
          "nodeType": "Block",
          "src": "25829:172:1",
          "statements": [{
            "expression": {
              "arguments": [{
                "arguments": [{
                  "arguments": [],
                  "expression": {
                    "argumentTypes": [],
                    "id": 1156,
                    "name": "_msgSender",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 760,
                    "src": "25867:10:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                      "typeString": "function () view returns (address)"
                    }
                  },
                  "id": 1157,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "kind": "functionCall",
                  "lValueRequested": false,
                  "names": [],
                  "nodeType": "FunctionCall",
                  "src": "25867:12:1",
                  "tryCall": false,
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                }, {
                  "id": 1158,
                  "name": "tokenId",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1148,
                  "src": "25881:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                }],
                "expression": {
                  "argumentTypes": [{
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }, {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }],
                  "id": 1155,
                  "name": "_isApprovedOrOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1259,
                  "src": "25848:18:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$",
                    "typeString": "function (address,uint256) view returns (bool)"
                  }
                },
                "id": 1159,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "kind": "functionCall",
                "lValueRequested": false,
                "names": [],
                "nodeType": "FunctionCall",
                "src": "25848:41:1",
                "tryCall": false,
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }, {
                "hexValue": "4552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564",
                "id": 1160,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "string",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "25891:51:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2",
                  "typeString": "literal_string \"ERC721: transfer caller is not owner nor approved\""
                },
                "value": "ERC721: transfer caller is not owner nor approved"
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }, {
                  "typeIdentifier": "t_stringliteral_c8682f3ad98807db59a6ec6bb812b72fed0a66e3150fa8239699ee83885247f2",
                  "typeString": "literal_string \"ERC721: transfer caller is not owner nor approved\""
                }],
                "id": 1154,
                "name": "require",
                "nodeType": "Identifier",
                "overloadedDeclarations": [4294967278, 4294967278],
                "referencedDeclaration": 4294967278,
                "src": "25840:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                  "typeString": "function (bool,string memory) pure"
                }
              },
              "id": 1161,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "25840:103:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 1162,
            "nodeType": "ExpressionStatement",
            "src": "25840:103:1"
          }, {
            "expression": {
              "arguments": [{
                "id": 1164,
                "name": "from",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1144,
                "src": "25968:4:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }, {
                "id": 1165,
                "name": "to",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1146,
                "src": "25974:2:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }, {
                "id": 1166,
                "name": "tokenId",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1148,
                "src": "25978:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }, {
                "id": 1167,
                "name": "_data",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1150,
                "src": "25987:5:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes_memory_ptr",
                  "typeString": "bytes memory"
                }
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }, {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }, {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }, {
                  "typeIdentifier": "t_bytes_memory_ptr",
                  "typeString": "bytes memory"
                }],
                "id": 1163,
                "name": "_safeTransfer",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1200,
                "src": "25954:13:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
                  "typeString": "function (address,address,uint256,bytes memory)"
                }
              },
              "id": 1168,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "25954:39:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 1169,
            "nodeType": "ExpressionStatement",
            "src": "25954:39:1"
          }]
        },
        "documentation": {
          "id": 1142,
          "nodeType": "StructuredDocumentation",
          "src": "25610:57:1",
          "text": " @dev See {IERC721-safeTransferFrom}."
        },
        "functionSelector": "b88d4fde",
        "id": 1171,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "safeTransferFrom",
        "nameLocation": "25682:16:1",
        "nodeType": "FunctionDefinition",
        "overrides": {
          "id": 1152,
          "nodeType": "OverrideSpecifier",
          "overrides": [],
          "src": "25820:8:1"
        },
        "parameters": {
          "id": 1151,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 1144,
            "mutability": "mutable",
            "name": "from",
            "nameLocation": "25717:4:1",
            "nodeType": "VariableDeclaration",
            "scope": 1171,
            "src": "25709:12:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1143,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "25709:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 1146,
            "mutability": "mutable",
            "name": "to",
            "nameLocation": "25740:2:1",
            "nodeType": "VariableDeclaration",
            "scope": 1171,
            "src": "25732:10:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1145,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "25732:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 1148,
            "mutability": "mutable",
            "name": "tokenId",
            "nameLocation": "25761:7:1",
            "nodeType": "VariableDeclaration",
            "scope": 1171,
            "src": "25753:15:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1147,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "25753:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 1150,
            "mutability": "mutable",
            "name": "_data",
            "nameLocation": "25792:5:1",
            "nodeType": "VariableDeclaration",
            "scope": 1171,
            "src": "25779:18:1",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes_memory_ptr",
              "typeString": "bytes"
            },
            "typeName": {
              "id": 1149,
              "name": "bytes",
              "nodeType": "ElementaryTypeName",
              "src": "25779:5:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_storage_ptr",
                "typeString": "bytes"
              }
            },
            "visibility": "internal"
          }],
          "src": "25698:106:1"
        },
        "returnParameters": {
          "id": 1153,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "25829:0:1"
        },
        "scope": 1578,
        "src": "25673:328:1",
        "stateMutability": "nonpayable",
        "virtual": true,
        "visibility": "public"
      }, {
        "body": {
          "id": 1199,
          "nodeType": "Block",
          "src": "27029:169:1",
          "statements": [{
            "expression": {
              "arguments": [{
                "id": 1184,
                "name": "from",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1174,
                "src": "27050:4:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }, {
                "id": 1185,
                "name": "to",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1176,
                "src": "27056:2:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }, {
                "id": 1186,
                "name": "tokenId",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1178,
                "src": "27060:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }, {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }, {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }],
                "id": 1183,
                "name": "_transfer",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1480,
                "src": "27040:9:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                  "typeString": "function (address,address,uint256)"
                }
              },
              "id": 1187,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "27040:28:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 1188,
            "nodeType": "ExpressionStatement",
            "src": "27040:28:1"
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "id": 1191,
                  "name": "from",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1174,
                  "src": "27110:4:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                }, {
                  "id": 1192,
                  "name": "to",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1176,
                  "src": "27116:2:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                }, {
                  "id": 1193,
                  "name": "tokenId",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1178,
                  "src": "27120:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                }, {
                  "id": 1194,
                  "name": "_data",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1180,
                  "src": "27129:5:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes memory"
                  }
                }],
                "expression": {
                  "argumentTypes": [{
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }, {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }, {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }, {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes memory"
                  }],
                  "id": 1190,
                  "name": "_checkOnERC721Received",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1566,
                  "src": "27087:22:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
                    "typeString": "function (address,address,uint256,bytes memory) returns (bool)"
                  }
                },
                "id": 1195,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "kind": "functionCall",
                "lValueRequested": false,
                "names": [],
                "nodeType": "FunctionCall",
                "src": "27087:48:1",
                "tryCall": false,
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }, {
                "hexValue": "4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572",
                "id": 1196,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "string",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "27137:52:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
                  "typeString": "literal_string \"ERC721: transfer to non ERC721Receiver implementer\""
                },
                "value": "ERC721: transfer to non ERC721Receiver implementer"
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }, {
                  "typeIdentifier": "t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
                  "typeString": "literal_string \"ERC721: transfer to non ERC721Receiver implementer\""
                }],
                "id": 1189,
                "name": "require",
                "nodeType": "Identifier",
                "overloadedDeclarations": [4294967278, 4294967278],
                "referencedDeclaration": 4294967278,
                "src": "27079:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                  "typeString": "function (bool,string memory) pure"
                }
              },
              "id": 1197,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "27079:111:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 1198,
            "nodeType": "ExpressionStatement",
            "src": "27079:111:1"
          }]
        },
        "documentation": {
          "id": 1172,
          "nodeType": "StructuredDocumentation",
          "src": "26009:868:1",
          "text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n `_data` is additional data, it has no specified format and it is sent in call to `to`.\n This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n implement alternative mechanisms to perform token transfer, such as signature-based.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
        },
        "id": 1200,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "_safeTransfer",
        "nameLocation": "26892:13:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 1181,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 1174,
            "mutability": "mutable",
            "name": "from",
            "nameLocation": "26924:4:1",
            "nodeType": "VariableDeclaration",
            "scope": 1200,
            "src": "26916:12:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1173,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "26916:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 1176,
            "mutability": "mutable",
            "name": "to",
            "nameLocation": "26947:2:1",
            "nodeType": "VariableDeclaration",
            "scope": 1200,
            "src": "26939:10:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1175,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "26939:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 1178,
            "mutability": "mutable",
            "name": "tokenId",
            "nameLocation": "26968:7:1",
            "nodeType": "VariableDeclaration",
            "scope": 1200,
            "src": "26960:15:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1177,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "26960:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 1180,
            "mutability": "mutable",
            "name": "_data",
            "nameLocation": "26999:5:1",
            "nodeType": "VariableDeclaration",
            "scope": 1200,
            "src": "26986:18:1",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes_memory_ptr",
              "typeString": "bytes"
            },
            "typeName": {
              "id": 1179,
              "name": "bytes",
              "nodeType": "ElementaryTypeName",
              "src": "26986:5:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_storage_ptr",
                "typeString": "bytes"
              }
            },
            "visibility": "internal"
          }],
          "src": "26905:106:1"
        },
        "returnParameters": {
          "id": 1182,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "27029:0:1"
        },
        "scope": 1578,
        "src": "26883:315:1",
        "stateMutability": "nonpayable",
        "virtual": true,
        "visibility": "internal"
      }, {
        "body": {
          "id": 1217,
          "nodeType": "Block",
          "src": "27582:56:1",
          "statements": [{
            "expression": {
              "commonType": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              },
              "id": 1215,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "leftExpression": {
                "baseExpression": {
                  "id": 1208,
                  "name": "_owners",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 794,
                  "src": "27600:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                    "typeString": "mapping(uint256 => address)"
                  }
                },
                "id": 1210,
                "indexExpression": {
                  "id": 1209,
                  "name": "tokenId",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1203,
                  "src": "27608:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "isConstant": false,
                "isLValue": true,
                "isPure": false,
                "lValueRequested": false,
                "nodeType": "IndexAccess",
                "src": "27600:16:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "BinaryOperation",
              "operator": "!=",
              "rightExpression": {
                "arguments": [{
                  "hexValue": "30",
                  "id": 1213,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "27628:1:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_0_by_1",
                    "typeString": "int_const 0"
                  },
                  "value": "0"
                }],
                "expression": {
                  "argumentTypes": [{
                    "typeIdentifier": "t_rational_0_by_1",
                    "typeString": "int_const 0"
                  }],
                  "id": 1212,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "lValueRequested": false,
                  "nodeType": "ElementaryTypeNameExpression",
                  "src": "27620:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_address_$",
                    "typeString": "type(address)"
                  },
                  "typeName": {
                    "id": 1211,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "27620:7:1",
                    "typeDescriptions": {}
                  }
                },
                "id": 1214,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "typeConversion",
                "lValueRequested": false,
                "names": [],
                "nodeType": "FunctionCall",
                "src": "27620:10:1",
                "tryCall": false,
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "src": "27600:30:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "functionReturnParameters": 1207,
            "id": 1216,
            "nodeType": "Return",
            "src": "27593:37:1"
          }]
        },
        "documentation": {
          "id": 1201,
          "nodeType": "StructuredDocumentation",
          "src": "27206:299:1",
          "text": " @dev Returns whether `tokenId` exists.\n Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n Tokens start existing when they are minted (`_mint`),\n and stop existing when they are burned (`_burn`)."
        },
        "id": 1218,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "_exists",
        "nameLocation": "27520:7:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 1204,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 1203,
            "mutability": "mutable",
            "name": "tokenId",
            "nameLocation": "27536:7:1",
            "nodeType": "VariableDeclaration",
            "scope": 1218,
            "src": "27528:15:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1202,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "27528:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "27527:17:1"
        },
        "returnParameters": {
          "id": 1207,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 1206,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 1218,
            "src": "27576:4:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 1205,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "27576:4:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "visibility": "internal"
          }],
          "src": "27575:6:1"
        },
        "scope": 1578,
        "src": "27511:127:1",
        "stateMutability": "view",
        "virtual": true,
        "visibility": "internal"
      }, {
        "body": {
          "id": 1258,
          "nodeType": "Block",
          "src": "27904:249:1",
          "statements": [{
            "expression": {
              "arguments": [{
                "arguments": [{
                  "id": 1230,
                  "name": "tokenId",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1223,
                  "src": "27931:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                }],
                "expression": {
                  "argumentTypes": [{
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }],
                  "id": 1229,
                  "name": "_exists",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1218,
                  "src": "27923:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
                    "typeString": "function (uint256) view returns (bool)"
                  }
                },
                "id": 1231,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "kind": "functionCall",
                "lValueRequested": false,
                "names": [],
                "nodeType": "FunctionCall",
                "src": "27923:16:1",
                "tryCall": false,
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }, {
                "hexValue": "4552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e",
                "id": 1232,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "string",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "27941:46:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_stringliteral_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c",
                  "typeString": "literal_string \"ERC721: operator query for nonexistent token\""
                },
                "value": "ERC721: operator query for nonexistent token"
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }, {
                  "typeIdentifier": "t_stringliteral_5797d1ccb08b83980dd0c07ea40d8f6a64d35fff736a19bdd17522954cb0899c",
                  "typeString": "literal_string \"ERC721: operator query for nonexistent token\""
                }],
                "id": 1228,
                "name": "require",
                "nodeType": "Identifier",
                "overloadedDeclarations": [4294967278, 4294967278],
                "referencedDeclaration": 4294967278,
                "src": "27915:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                  "typeString": "function (bool,string memory) pure"
                }
              },
              "id": 1233,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "27915:73:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 1234,
            "nodeType": "ExpressionStatement",
            "src": "27915:73:1"
          }, {
            "assignments": [1236],
            "declarations": [{
              "constant": false,
              "id": 1236,
              "mutability": "mutable",
              "name": "owner",
              "nameLocation": "28007:5:1",
              "nodeType": "VariableDeclaration",
              "scope": 1258,
              "src": "27999:13:1",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              },
              "typeName": {
                "id": 1235,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "27999:7:1",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "visibility": "internal"
            }],
            "id": 1241,
            "initialValue": {
              "arguments": [{
                "id": 1239,
                "name": "tokenId",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1223,
                "src": "28030:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }],
                "expression": {
                  "id": 1237,
                  "name": "ERC721",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1578,
                  "src": "28015:6:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC721_$1578_$",
                    "typeString": "type(contract ERC721)"
                  }
                },
                "id": 1238,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "memberName": "ownerOf",
                "nodeType": "MemberAccess",
                "referencedDeclaration": 908,
                "src": "28015:14:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                  "typeString": "function (uint256) view returns (address)"
                }
              },
              "id": 1240,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "28015:23:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "nodeType": "VariableDeclarationStatement",
            "src": "27999:39:1"
          }, {
            "expression": {
              "components": [{
                "commonType": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "id": 1255,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "leftExpression": {
                  "commonType": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "id": 1250,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "lValueRequested": false,
                  "leftExpression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 1244,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 1242,
                      "name": "spender",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1221,
                      "src": "28057:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "id": 1243,
                      "name": "owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1236,
                      "src": "28068:5:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "28057:16:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "nodeType": "BinaryOperation",
                  "operator": "||",
                  "rightExpression": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 1249,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "arguments": [{
                        "id": 1246,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1223,
                        "src": "28089:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }],
                      "expression": {
                        "argumentTypes": [{
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }],
                        "id": 1245,
                        "name": "getApproved",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1043,
                        "src": "28077:11:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                          "typeString": "function (uint256) view returns (address)"
                        }
                      },
                      "id": 1247,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "28077:20:1",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "id": 1248,
                      "name": "spender",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1221,
                      "src": "28101:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "28077:31:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "src": "28057:51:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "nodeType": "BinaryOperation",
                "operator": "||",
                "rightExpression": {
                  "arguments": [{
                    "id": 1252,
                    "name": "owner",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1236,
                    "src": "28129:5:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  }, {
                    "id": 1253,
                    "name": "spender",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1221,
                    "src": "28136:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  }],
                  "expression": {
                    "argumentTypes": [{
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }, {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }],
                    "id": 1251,
                    "name": "isApprovedForAll",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1095,
                    "src": "28112:16:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$",
                      "typeString": "function (address,address) view returns (bool)"
                    }
                  },
                  "id": 1254,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "kind": "functionCall",
                  "lValueRequested": false,
                  "names": [],
                  "nodeType": "FunctionCall",
                  "src": "28112:32:1",
                  "tryCall": false,
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "src": "28057:87:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }],
              "id": 1256,
              "isConstant": false,
              "isInlineArray": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "nodeType": "TupleExpression",
              "src": "28056:89:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "functionReturnParameters": 1227,
            "id": 1257,
            "nodeType": "Return",
            "src": "28049:96:1"
          }]
        },
        "documentation": {
          "id": 1219,
          "nodeType": "StructuredDocumentation",
          "src": "27646:153:1",
          "text": " @dev Returns whether `spender` is allowed to manage `tokenId`.\n Requirements:\n - `tokenId` must exist."
        },
        "id": 1259,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "_isApprovedOrOwner",
        "nameLocation": "27814:18:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 1224,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 1221,
            "mutability": "mutable",
            "name": "spender",
            "nameLocation": "27841:7:1",
            "nodeType": "VariableDeclaration",
            "scope": 1259,
            "src": "27833:15:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1220,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "27833:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 1223,
            "mutability": "mutable",
            "name": "tokenId",
            "nameLocation": "27858:7:1",
            "nodeType": "VariableDeclaration",
            "scope": 1259,
            "src": "27850:15:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1222,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "27850:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "27832:34:1"
        },
        "returnParameters": {
          "id": 1227,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 1226,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 1259,
            "src": "27898:4:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 1225,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "27898:4:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "visibility": "internal"
          }],
          "src": "27897:6:1"
        },
        "scope": 1578,
        "src": "27805:348:1",
        "stateMutability": "view",
        "virtual": true,
        "visibility": "internal"
      }, {
        "body": {
          "id": 1273,
          "nodeType": "Block",
          "src": "28560:45:1",
          "statements": [{
            "expression": {
              "arguments": [{
                "id": 1268,
                "name": "to",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1262,
                "src": "28581:2:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }, {
                "id": 1269,
                "name": "tokenId",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1264,
                "src": "28585:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }, {
                "hexValue": "",
                "id": 1270,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "string",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "28594:2:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                  "typeString": "literal_string \"\""
                },
                "value": ""
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }, {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }, {
                  "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                  "typeString": "literal_string \"\""
                }],
                "id": 1267,
                "name": "_safeMint",
                "nodeType": "Identifier",
                "overloadedDeclarations": [1274, 1303],
                "referencedDeclaration": 1303,
                "src": "28571:9:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
                  "typeString": "function (address,uint256,bytes memory)"
                }
              },
              "id": 1271,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "28571:26:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 1272,
            "nodeType": "ExpressionStatement",
            "src": "28571:26:1"
          }]
        },
        "documentation": {
          "id": 1260,
          "nodeType": "StructuredDocumentation",
          "src": "28161:328:1",
          "text": " @dev Safely mints `tokenId` and transfers it to `to`.\n Requirements:\n - `tokenId` must not exist.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
        },
        "id": 1274,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "_safeMint",
        "nameLocation": "28504:9:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 1265,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 1262,
            "mutability": "mutable",
            "name": "to",
            "nameLocation": "28522:2:1",
            "nodeType": "VariableDeclaration",
            "scope": 1274,
            "src": "28514:10:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1261,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "28514:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 1264,
            "mutability": "mutable",
            "name": "tokenId",
            "nameLocation": "28534:7:1",
            "nodeType": "VariableDeclaration",
            "scope": 1274,
            "src": "28526:15:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1263,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "28526:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "28513:29:1"
        },
        "returnParameters": {
          "id": 1266,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "28560:0:1"
        },
        "scope": 1578,
        "src": "28495:110:1",
        "stateMutability": "nonpayable",
        "virtual": true,
        "visibility": "internal"
      }, {
        "body": {
          "id": 1302,
          "nodeType": "Block",
          "src": "28951:202:1",
          "statements": [{
            "expression": {
              "arguments": [{
                "id": 1285,
                "name": "to",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1277,
                "src": "28968:2:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }, {
                "id": 1286,
                "name": "tokenId",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1279,
                "src": "28972:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }, {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }],
                "id": 1284,
                "name": "_mint",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1360,
                "src": "28962:5:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                  "typeString": "function (address,uint256)"
                }
              },
              "id": 1287,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "28962:18:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 1288,
            "nodeType": "ExpressionStatement",
            "src": "28962:18:1"
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "arguments": [{
                    "hexValue": "30",
                    "id": 1293,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "29044:1:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  }],
                  "expression": {
                    "argumentTypes": [{
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    }],
                    "id": 1292,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "nodeType": "ElementaryTypeNameExpression",
                    "src": "29036:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_type$_t_address_$",
                      "typeString": "type(address)"
                    },
                    "typeName": {
                      "id": 1291,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "29036:7:1",
                      "typeDescriptions": {}
                    }
                  },
                  "id": 1294,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "typeConversion",
                  "lValueRequested": false,
                  "names": [],
                  "nodeType": "FunctionCall",
                  "src": "29036:10:1",
                  "tryCall": false,
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                }, {
                  "id": 1295,
                  "name": "to",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1277,
                  "src": "29048:2:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                }, {
                  "id": 1296,
                  "name": "tokenId",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1279,
                  "src": "29052:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                }, {
                  "id": 1297,
                  "name": "_data",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1281,
                  "src": "29061:5:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes memory"
                  }
                }],
                "expression": {
                  "argumentTypes": [{
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }, {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }, {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }, {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes memory"
                  }],
                  "id": 1290,
                  "name": "_checkOnERC721Received",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1566,
                  "src": "29013:22:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
                    "typeString": "function (address,address,uint256,bytes memory) returns (bool)"
                  }
                },
                "id": 1298,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "kind": "functionCall",
                "lValueRequested": false,
                "names": [],
                "nodeType": "FunctionCall",
                "src": "29013:54:1",
                "tryCall": false,
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }, {
                "hexValue": "4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572",
                "id": 1299,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "string",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "29082:52:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
                  "typeString": "literal_string \"ERC721: transfer to non ERC721Receiver implementer\""
                },
                "value": "ERC721: transfer to non ERC721Receiver implementer"
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }, {
                  "typeIdentifier": "t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
                  "typeString": "literal_string \"ERC721: transfer to non ERC721Receiver implementer\""
                }],
                "id": 1289,
                "name": "require",
                "nodeType": "Identifier",
                "overloadedDeclarations": [4294967278, 4294967278],
                "referencedDeclaration": 4294967278,
                "src": "28991:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                  "typeString": "function (bool,string memory) pure"
                }
              },
              "id": 1300,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "28991:154:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 1301,
            "nodeType": "ExpressionStatement",
            "src": "28991:154:1"
          }]
        },
        "documentation": {
          "id": 1275,
          "nodeType": "StructuredDocumentation",
          "src": "28613:213:1",
          "text": " @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."
        },
        "id": 1303,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "_safeMint",
        "nameLocation": "28841:9:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 1282,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 1277,
            "mutability": "mutable",
            "name": "to",
            "nameLocation": "28869:2:1",
            "nodeType": "VariableDeclaration",
            "scope": 1303,
            "src": "28861:10:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1276,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "28861:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 1279,
            "mutability": "mutable",
            "name": "tokenId",
            "nameLocation": "28890:7:1",
            "nodeType": "VariableDeclaration",
            "scope": 1303,
            "src": "28882:15:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1278,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "28882:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 1281,
            "mutability": "mutable",
            "name": "_data",
            "nameLocation": "28921:5:1",
            "nodeType": "VariableDeclaration",
            "scope": 1303,
            "src": "28908:18:1",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes_memory_ptr",
              "typeString": "bytes"
            },
            "typeName": {
              "id": 1280,
              "name": "bytes",
              "nodeType": "ElementaryTypeName",
              "src": "28908:5:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_storage_ptr",
                "typeString": "bytes"
              }
            },
            "visibility": "internal"
          }],
          "src": "28850:83:1"
        },
        "returnParameters": {
          "id": 1283,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "28951:0:1"
        },
        "scope": 1578,
        "src": "28832:321:1",
        "stateMutability": "nonpayable",
        "virtual": true,
        "visibility": "internal"
      }, {
        "body": {
          "id": 1359,
          "nodeType": "Block",
          "src": "29550:321:1",
          "statements": [{
            "expression": {
              "arguments": [{
                "commonType": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "id": 1317,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "leftExpression": {
                  "id": 1312,
                  "name": "to",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1306,
                  "src": "29569:2:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "nodeType": "BinaryOperation",
                "operator": "!=",
                "rightExpression": {
                  "arguments": [{
                    "hexValue": "30",
                    "id": 1315,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "29583:1:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  }],
                  "expression": {
                    "argumentTypes": [{
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    }],
                    "id": 1314,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "nodeType": "ElementaryTypeNameExpression",
                    "src": "29575:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_type$_t_address_$",
                      "typeString": "type(address)"
                    },
                    "typeName": {
                      "id": 1313,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "29575:7:1",
                      "typeDescriptions": {}
                    }
                  },
                  "id": 1316,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "typeConversion",
                  "lValueRequested": false,
                  "names": [],
                  "nodeType": "FunctionCall",
                  "src": "29575:10:1",
                  "tryCall": false,
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "src": "29569:16:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }, {
                "hexValue": "4552433732313a206d696e7420746f20746865207a65726f2061646472657373",
                "id": 1318,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "string",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "29587:34:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6",
                  "typeString": "literal_string \"ERC721: mint to the zero address\""
                },
                "value": "ERC721: mint to the zero address"
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }, {
                  "typeIdentifier": "t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6",
                  "typeString": "literal_string \"ERC721: mint to the zero address\""
                }],
                "id": 1311,
                "name": "require",
                "nodeType": "Identifier",
                "overloadedDeclarations": [4294967278, 4294967278],
                "referencedDeclaration": 4294967278,
                "src": "29561:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                  "typeString": "function (bool,string memory) pure"
                }
              },
              "id": 1319,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "29561:61:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 1320,
            "nodeType": "ExpressionStatement",
            "src": "29561:61:1"
          }, {
            "expression": {
              "arguments": [{
                "id": 1325,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "nodeType": "UnaryOperation",
                "operator": "!",
                "prefix": true,
                "src": "29641:17:1",
                "subExpression": {
                  "arguments": [{
                    "id": 1323,
                    "name": "tokenId",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1308,
                    "src": "29650:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }],
                  "expression": {
                    "argumentTypes": [{
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }],
                    "id": 1322,
                    "name": "_exists",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1218,
                    "src": "29642:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
                      "typeString": "function (uint256) view returns (bool)"
                    }
                  },
                  "id": 1324,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "kind": "functionCall",
                  "lValueRequested": false,
                  "names": [],
                  "nodeType": "FunctionCall",
                  "src": "29642:16:1",
                  "tryCall": false,
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }, {
                "hexValue": "4552433732313a20746f6b656e20616c7265616479206d696e746564",
                "id": 1326,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "string",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "29660:30:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57",
                  "typeString": "literal_string \"ERC721: token already minted\""
                },
                "value": "ERC721: token already minted"
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }, {
                  "typeIdentifier": "t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57",
                  "typeString": "literal_string \"ERC721: token already minted\""
                }],
                "id": 1321,
                "name": "require",
                "nodeType": "Identifier",
                "overloadedDeclarations": [4294967278, 4294967278],
                "referencedDeclaration": 4294967278,
                "src": "29633:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                  "typeString": "function (bool,string memory) pure"
                }
              },
              "id": 1327,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "29633:58:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 1328,
            "nodeType": "ExpressionStatement",
            "src": "29633:58:1"
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "hexValue": "30",
                  "id": 1332,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "29733:1:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_0_by_1",
                    "typeString": "int_const 0"
                  },
                  "value": "0"
                }],
                "expression": {
                  "argumentTypes": [{
                    "typeIdentifier": "t_rational_0_by_1",
                    "typeString": "int_const 0"
                  }],
                  "id": 1331,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "lValueRequested": false,
                  "nodeType": "ElementaryTypeNameExpression",
                  "src": "29725:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_address_$",
                    "typeString": "type(address)"
                  },
                  "typeName": {
                    "id": 1330,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "29725:7:1",
                    "typeDescriptions": {}
                  }
                },
                "id": 1333,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "typeConversion",
                "lValueRequested": false,
                "names": [],
                "nodeType": "FunctionCall",
                "src": "29725:10:1",
                "tryCall": false,
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }, {
                "id": 1334,
                "name": "to",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1306,
                "src": "29737:2:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }, {
                "id": 1335,
                "name": "tokenId",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1308,
                "src": "29741:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }, {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }, {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }],
                "id": 1329,
                "name": "_beforeTokenTransfer",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1577,
                "src": "29704:20:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                  "typeString": "function (address,address,uint256)"
                }
              },
              "id": 1336,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "29704:45:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 1337,
            "nodeType": "ExpressionStatement",
            "src": "29704:45:1"
          }, {
            "expression": {
              "id": 1342,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "leftHandSide": {
                "baseExpression": {
                  "id": 1338,
                  "name": "_balances",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 798,
                  "src": "29762:9:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  }
                },
                "id": 1340,
                "indexExpression": {
                  "id": 1339,
                  "name": "to",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1306,
                  "src": "29772:2:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "isConstant": false,
                "isLValue": true,
                "isPure": false,
                "lValueRequested": true,
                "nodeType": "IndexAccess",
                "src": "29762:13:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Assignment",
              "operator": "+=",
              "rightHandSide": {
                "hexValue": "31",
                "id": 1341,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "29779:1:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_1_by_1",
                  "typeString": "int_const 1"
                },
                "value": "1"
              },
              "src": "29762:18:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "id": 1343,
            "nodeType": "ExpressionStatement",
            "src": "29762:18:1"
          }, {
            "expression": {
              "id": 1348,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "leftHandSide": {
                "baseExpression": {
                  "id": 1344,
                  "name": "_owners",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 794,
                  "src": "29791:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                    "typeString": "mapping(uint256 => address)"
                  }
                },
                "id": 1346,
                "indexExpression": {
                  "id": 1345,
                  "name": "tokenId",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1308,
                  "src": "29799:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "isConstant": false,
                "isLValue": true,
                "isPure": false,
                "lValueRequested": true,
                "nodeType": "IndexAccess",
                "src": "29791:16:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Assignment",
              "operator": "=",
              "rightHandSide": {
                "id": 1347,
                "name": "to",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1306,
                "src": "29810:2:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "src": "29791:21:1",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "id": 1349,
            "nodeType": "ExpressionStatement",
            "src": "29791:21:1"
          }, {
            "eventCall": {
              "arguments": [{
                "arguments": [{
                  "hexValue": "30",
                  "id": 1353,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "29847:1:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_0_by_1",
                    "typeString": "int_const 0"
                  },
                  "value": "0"
                }],
                "expression": {
                  "argumentTypes": [{
                    "typeIdentifier": "t_rational_0_by_1",
                    "typeString": "int_const 0"
                  }],
                  "id": 1352,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "lValueRequested": false,
                  "nodeType": "ElementaryTypeNameExpression",
                  "src": "29839:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_address_$",
                    "typeString": "type(address)"
                  },
                  "typeName": {
                    "id": 1351,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "29839:7:1",
                    "typeDescriptions": {}
                  }
                },
                "id": 1354,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "typeConversion",
                "lValueRequested": false,
                "names": [],
                "nodeType": "FunctionCall",
                "src": "29839:10:1",
                "tryCall": false,
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }, {
                "id": 1355,
                "name": "to",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1306,
                "src": "29851:2:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }, {
                "id": 1356,
                "name": "tokenId",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1308,
                "src": "29855:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }, {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }, {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }],
                "id": 1350,
                "name": "Transfer",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 57,
                "src": "29830:8:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                  "typeString": "function (address,address,uint256)"
                }
              },
              "id": 1357,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "29830:33:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 1358,
            "nodeType": "EmitStatement",
            "src": "29825:38:1"
          }]
        },
        "documentation": {
          "id": 1304,
          "nodeType": "StructuredDocumentation",
          "src": "29161:322:1",
          "text": " @dev Mints `tokenId` and transfers it to `to`.\n WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n Requirements:\n - `tokenId` must not exist.\n - `to` cannot be the zero address.\n Emits a {Transfer} event."
        },
        "id": 1360,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "_mint",
        "nameLocation": "29498:5:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 1309,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 1306,
            "mutability": "mutable",
            "name": "to",
            "nameLocation": "29512:2:1",
            "nodeType": "VariableDeclaration",
            "scope": 1360,
            "src": "29504:10:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1305,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "29504:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 1308,
            "mutability": "mutable",
            "name": "tokenId",
            "nameLocation": "29524:7:1",
            "nodeType": "VariableDeclaration",
            "scope": 1360,
            "src": "29516:15:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1307,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "29516:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "29503:29:1"
        },
        "returnParameters": {
          "id": 1310,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "29550:0:1"
        },
        "scope": 1578,
        "src": "29489:382:1",
        "stateMutability": "nonpayable",
        "virtual": true,
        "visibility": "internal"
      }, {
        "body": {
          "id": 1410,
          "nodeType": "Block",
          "src": "30149:311:1",
          "statements": [{
            "assignments": [1367],
            "declarations": [{
              "constant": false,
              "id": 1367,
              "mutability": "mutable",
              "name": "owner",
              "nameLocation": "30168:5:1",
              "nodeType": "VariableDeclaration",
              "scope": 1410,
              "src": "30160:13:1",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              },
              "typeName": {
                "id": 1366,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "30160:7:1",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "visibility": "internal"
            }],
            "id": 1372,
            "initialValue": {
              "arguments": [{
                "id": 1370,
                "name": "tokenId",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1363,
                "src": "30191:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }],
                "expression": {
                  "id": 1368,
                  "name": "ERC721",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1578,
                  "src": "30176:6:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC721_$1578_$",
                    "typeString": "type(contract ERC721)"
                  }
                },
                "id": 1369,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "memberName": "ownerOf",
                "nodeType": "MemberAccess",
                "referencedDeclaration": 908,
                "src": "30176:14:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                  "typeString": "function (uint256) view returns (address)"
                }
              },
              "id": 1371,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "30176:23:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "nodeType": "VariableDeclarationStatement",
            "src": "30160:39:1"
          }, {
            "expression": {
              "arguments": [{
                "id": 1374,
                "name": "owner",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1367,
                "src": "30233:5:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }, {
                "arguments": [{
                  "hexValue": "30",
                  "id": 1377,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "30248:1:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_0_by_1",
                    "typeString": "int_const 0"
                  },
                  "value": "0"
                }],
                "expression": {
                  "argumentTypes": [{
                    "typeIdentifier": "t_rational_0_by_1",
                    "typeString": "int_const 0"
                  }],
                  "id": 1376,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "lValueRequested": false,
                  "nodeType": "ElementaryTypeNameExpression",
                  "src": "30240:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_address_$",
                    "typeString": "type(address)"
                  },
                  "typeName": {
                    "id": 1375,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "30240:7:1",
                    "typeDescriptions": {}
                  }
                },
                "id": 1378,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "typeConversion",
                "lValueRequested": false,
                "names": [],
                "nodeType": "FunctionCall",
                "src": "30240:10:1",
                "tryCall": false,
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }, {
                "id": 1379,
                "name": "tokenId",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1363,
                "src": "30252:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }, {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }, {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }],
                "id": 1373,
                "name": "_beforeTokenTransfer",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1577,
                "src": "30212:20:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                  "typeString": "function (address,address,uint256)"
                }
              },
              "id": 1380,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "30212:48:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 1381,
            "nodeType": "ExpressionStatement",
            "src": "30212:48:1"
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "hexValue": "30",
                  "id": 1385,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "30318:1:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_0_by_1",
                    "typeString": "int_const 0"
                  },
                  "value": "0"
                }],
                "expression": {
                  "argumentTypes": [{
                    "typeIdentifier": "t_rational_0_by_1",
                    "typeString": "int_const 0"
                  }],
                  "id": 1384,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "lValueRequested": false,
                  "nodeType": "ElementaryTypeNameExpression",
                  "src": "30310:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_address_$",
                    "typeString": "type(address)"
                  },
                  "typeName": {
                    "id": 1383,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "30310:7:1",
                    "typeDescriptions": {}
                  }
                },
                "id": 1386,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "typeConversion",
                "lValueRequested": false,
                "names": [],
                "nodeType": "FunctionCall",
                "src": "30310:10:1",
                "tryCall": false,
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }, {
                "id": 1387,
                "name": "tokenId",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1363,
                "src": "30322:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }, {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }],
                "id": 1382,
                "name": "_approve",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1504,
                "src": "30301:8:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                  "typeString": "function (address,uint256)"
                }
              },
              "id": 1388,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "30301:29:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 1389,
            "nodeType": "ExpressionStatement",
            "src": "30301:29:1"
          }, {
            "expression": {
              "id": 1394,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "leftHandSide": {
                "baseExpression": {
                  "id": 1390,
                  "name": "_balances",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 798,
                  "src": "30343:9:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  }
                },
                "id": 1392,
                "indexExpression": {
                  "id": 1391,
                  "name": "owner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1367,
                  "src": "30353:5:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "isConstant": false,
                "isLValue": true,
                "isPure": false,
                "lValueRequested": true,
                "nodeType": "IndexAccess",
                "src": "30343:16:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Assignment",
              "operator": "-=",
              "rightHandSide": {
                "hexValue": "31",
                "id": 1393,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "30363:1:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_1_by_1",
                  "typeString": "int_const 1"
                },
                "value": "1"
              },
              "src": "30343:21:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "id": 1395,
            "nodeType": "ExpressionStatement",
            "src": "30343:21:1"
          }, {
            "expression": {
              "id": 1399,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "nodeType": "UnaryOperation",
              "operator": "delete",
              "prefix": true,
              "src": "30375:23:1",
              "subExpression": {
                "baseExpression": {
                  "id": 1396,
                  "name": "_owners",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 794,
                  "src": "30382:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                    "typeString": "mapping(uint256 => address)"
                  }
                },
                "id": 1398,
                "indexExpression": {
                  "id": 1397,
                  "name": "tokenId",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1363,
                  "src": "30390:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "isConstant": false,
                "isLValue": true,
                "isPure": false,
                "lValueRequested": true,
                "nodeType": "IndexAccess",
                "src": "30382:16:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 1400,
            "nodeType": "ExpressionStatement",
            "src": "30375:23:1"
          }, {
            "eventCall": {
              "arguments": [{
                "id": 1402,
                "name": "owner",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1367,
                "src": "30425:5:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }, {
                "arguments": [{
                  "hexValue": "30",
                  "id": 1405,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "30440:1:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_0_by_1",
                    "typeString": "int_const 0"
                  },
                  "value": "0"
                }],
                "expression": {
                  "argumentTypes": [{
                    "typeIdentifier": "t_rational_0_by_1",
                    "typeString": "int_const 0"
                  }],
                  "id": 1404,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "lValueRequested": false,
                  "nodeType": "ElementaryTypeNameExpression",
                  "src": "30432:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_address_$",
                    "typeString": "type(address)"
                  },
                  "typeName": {
                    "id": 1403,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "30432:7:1",
                    "typeDescriptions": {}
                  }
                },
                "id": 1406,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "typeConversion",
                "lValueRequested": false,
                "names": [],
                "nodeType": "FunctionCall",
                "src": "30432:10:1",
                "tryCall": false,
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }, {
                "id": 1407,
                "name": "tokenId",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1363,
                "src": "30444:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }, {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }, {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }],
                "id": 1401,
                "name": "Transfer",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 57,
                "src": "30416:8:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                  "typeString": "function (address,address,uint256)"
                }
              },
              "id": 1408,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "30416:36:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 1409,
            "nodeType": "EmitStatement",
            "src": "30411:41:1"
          }]
        },
        "documentation": {
          "id": 1361,
          "nodeType": "StructuredDocumentation",
          "src": "29879:215:1",
          "text": " @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."
        },
        "id": 1411,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "_burn",
        "nameLocation": "30109:5:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 1364,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 1363,
            "mutability": "mutable",
            "name": "tokenId",
            "nameLocation": "30123:7:1",
            "nodeType": "VariableDeclaration",
            "scope": 1411,
            "src": "30115:15:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1362,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "30115:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "30114:17:1"
        },
        "returnParameters": {
          "id": 1365,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "30149:0:1"
        },
        "scope": 1578,
        "src": "30100:360:1",
        "stateMutability": "nonpayable",
        "virtual": true,
        "visibility": "internal"
      }, {
        "body": {
          "id": 1479,
          "nodeType": "Block",
          "src": "30910:465:1",
          "statements": [{
            "expression": {
              "arguments": [{
                "commonType": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "id": 1427,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "leftExpression": {
                  "arguments": [{
                    "id": 1424,
                    "name": "tokenId",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1418,
                    "src": "30944:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }],
                  "expression": {
                    "argumentTypes": [{
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }],
                    "expression": {
                      "id": 1422,
                      "name": "ERC721",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1578,
                      "src": "30929:6:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_ERC721_$1578_$",
                        "typeString": "type(contract ERC721)"
                      }
                    },
                    "id": 1423,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "ownerOf",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": 908,
                    "src": "30929:14:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                      "typeString": "function (uint256) view returns (address)"
                    }
                  },
                  "id": 1425,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "kind": "functionCall",
                  "lValueRequested": false,
                  "names": [],
                  "nodeType": "FunctionCall",
                  "src": "30929:23:1",
                  "tryCall": false,
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "nodeType": "BinaryOperation",
                "operator": "==",
                "rightExpression": {
                  "id": 1426,
                  "name": "from",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1414,
                  "src": "30956:4:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "src": "30929:31:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }, {
                "hexValue": "4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e",
                "id": 1428,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "string",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "30962:43:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_stringliteral_a01073130a885d6c1c1af6ac75fc3b1c4f9403c235362962bbf528e2bd87d950",
                  "typeString": "literal_string \"ERC721: transfer of token that is not own\""
                },
                "value": "ERC721: transfer of token that is not own"
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }, {
                  "typeIdentifier": "t_stringliteral_a01073130a885d6c1c1af6ac75fc3b1c4f9403c235362962bbf528e2bd87d950",
                  "typeString": "literal_string \"ERC721: transfer of token that is not own\""
                }],
                "id": 1421,
                "name": "require",
                "nodeType": "Identifier",
                "overloadedDeclarations": [4294967278, 4294967278],
                "referencedDeclaration": 4294967278,
                "src": "30921:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                  "typeString": "function (bool,string memory) pure"
                }
              },
              "id": 1429,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "30921:85:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 1430,
            "nodeType": "ExpressionStatement",
            "src": "30921:85:1"
          }, {
            "expression": {
              "arguments": [{
                "commonType": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "id": 1437,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "leftExpression": {
                  "id": 1432,
                  "name": "to",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1416,
                  "src": "31025:2:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "nodeType": "BinaryOperation",
                "operator": "!=",
                "rightExpression": {
                  "arguments": [{
                    "hexValue": "30",
                    "id": 1435,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "31039:1:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  }],
                  "expression": {
                    "argumentTypes": [{
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    }],
                    "id": 1434,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "nodeType": "ElementaryTypeNameExpression",
                    "src": "31031:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_type$_t_address_$",
                      "typeString": "type(address)"
                    },
                    "typeName": {
                      "id": 1433,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "31031:7:1",
                      "typeDescriptions": {}
                    }
                  },
                  "id": 1436,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "typeConversion",
                  "lValueRequested": false,
                  "names": [],
                  "nodeType": "FunctionCall",
                  "src": "31031:10:1",
                  "tryCall": false,
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "src": "31025:16:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }, {
                "hexValue": "4552433732313a207472616e7366657220746f20746865207a65726f2061646472657373",
                "id": 1438,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "string",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "31043:38:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4",
                  "typeString": "literal_string \"ERC721: transfer to the zero address\""
                },
                "value": "ERC721: transfer to the zero address"
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }, {
                  "typeIdentifier": "t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4",
                  "typeString": "literal_string \"ERC721: transfer to the zero address\""
                }],
                "id": 1431,
                "name": "require",
                "nodeType": "Identifier",
                "overloadedDeclarations": [4294967278, 4294967278],
                "referencedDeclaration": 4294967278,
                "src": "31017:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                  "typeString": "function (bool,string memory) pure"
                }
              },
              "id": 1439,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "31017:65:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 1440,
            "nodeType": "ExpressionStatement",
            "src": "31017:65:1"
          }, {
            "expression": {
              "arguments": [{
                "id": 1442,
                "name": "from",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1414,
                "src": "31116:4:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }, {
                "id": 1443,
                "name": "to",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1416,
                "src": "31122:2:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }, {
                "id": 1444,
                "name": "tokenId",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1418,
                "src": "31126:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }, {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }, {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }],
                "id": 1441,
                "name": "_beforeTokenTransfer",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1577,
                "src": "31095:20:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                  "typeString": "function (address,address,uint256)"
                }
              },
              "id": 1445,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "31095:39:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 1446,
            "nodeType": "ExpressionStatement",
            "src": "31095:39:1"
          }, {
            "expression": {
              "arguments": [{
                "arguments": [{
                  "hexValue": "30",
                  "id": 1450,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "31216:1:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_0_by_1",
                    "typeString": "int_const 0"
                  },
                  "value": "0"
                }],
                "expression": {
                  "argumentTypes": [{
                    "typeIdentifier": "t_rational_0_by_1",
                    "typeString": "int_const 0"
                  }],
                  "id": 1449,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "lValueRequested": false,
                  "nodeType": "ElementaryTypeNameExpression",
                  "src": "31208:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_address_$",
                    "typeString": "type(address)"
                  },
                  "typeName": {
                    "id": 1448,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "31208:7:1",
                    "typeDescriptions": {}
                  }
                },
                "id": 1451,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "typeConversion",
                "lValueRequested": false,
                "names": [],
                "nodeType": "FunctionCall",
                "src": "31208:10:1",
                "tryCall": false,
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }, {
                "id": 1452,
                "name": "tokenId",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1418,
                "src": "31220:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }, {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }],
                "id": 1447,
                "name": "_approve",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1504,
                "src": "31199:8:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                  "typeString": "function (address,uint256)"
                }
              },
              "id": 1453,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "31199:29:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 1454,
            "nodeType": "ExpressionStatement",
            "src": "31199:29:1"
          }, {
            "expression": {
              "id": 1459,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "leftHandSide": {
                "baseExpression": {
                  "id": 1455,
                  "name": "_balances",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 798,
                  "src": "31241:9:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  }
                },
                "id": 1457,
                "indexExpression": {
                  "id": 1456,
                  "name": "from",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1414,
                  "src": "31251:4:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "isConstant": false,
                "isLValue": true,
                "isPure": false,
                "lValueRequested": true,
                "nodeType": "IndexAccess",
                "src": "31241:15:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Assignment",
              "operator": "-=",
              "rightHandSide": {
                "hexValue": "31",
                "id": 1458,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "31260:1:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_1_by_1",
                  "typeString": "int_const 1"
                },
                "value": "1"
              },
              "src": "31241:20:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "id": 1460,
            "nodeType": "ExpressionStatement",
            "src": "31241:20:1"
          }, {
            "expression": {
              "id": 1465,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "leftHandSide": {
                "baseExpression": {
                  "id": 1461,
                  "name": "_balances",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 798,
                  "src": "31272:9:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  }
                },
                "id": 1463,
                "indexExpression": {
                  "id": 1462,
                  "name": "to",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1416,
                  "src": "31282:2:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "isConstant": false,
                "isLValue": true,
                "isPure": false,
                "lValueRequested": true,
                "nodeType": "IndexAccess",
                "src": "31272:13:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Assignment",
              "operator": "+=",
              "rightHandSide": {
                "hexValue": "31",
                "id": 1464,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "31289:1:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_1_by_1",
                  "typeString": "int_const 1"
                },
                "value": "1"
              },
              "src": "31272:18:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "id": 1466,
            "nodeType": "ExpressionStatement",
            "src": "31272:18:1"
          }, {
            "expression": {
              "id": 1471,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "leftHandSide": {
                "baseExpression": {
                  "id": 1467,
                  "name": "_owners",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 794,
                  "src": "31301:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                    "typeString": "mapping(uint256 => address)"
                  }
                },
                "id": 1469,
                "indexExpression": {
                  "id": 1468,
                  "name": "tokenId",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1418,
                  "src": "31309:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "isConstant": false,
                "isLValue": true,
                "isPure": false,
                "lValueRequested": true,
                "nodeType": "IndexAccess",
                "src": "31301:16:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Assignment",
              "operator": "=",
              "rightHandSide": {
                "id": 1470,
                "name": "to",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1416,
                "src": "31320:2:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "src": "31301:21:1",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "id": 1472,
            "nodeType": "ExpressionStatement",
            "src": "31301:21:1"
          }, {
            "eventCall": {
              "arguments": [{
                "id": 1474,
                "name": "from",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1414,
                "src": "31349:4:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }, {
                "id": 1475,
                "name": "to",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1416,
                "src": "31355:2:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }, {
                "id": 1476,
                "name": "tokenId",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1418,
                "src": "31359:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }, {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }, {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }],
                "id": 1473,
                "name": "Transfer",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 57,
                "src": "31340:8:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                  "typeString": "function (address,address,uint256)"
                }
              },
              "id": 1477,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "31340:27:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 1478,
            "nodeType": "EmitStatement",
            "src": "31335:32:1"
          }]
        },
        "documentation": {
          "id": 1412,
          "nodeType": "StructuredDocumentation",
          "src": "30468:323:1",
          "text": " @dev Transfers `tokenId` from `from` to `to`.\n  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n Requirements:\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n Emits a {Transfer} event."
        },
        "id": 1480,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "_transfer",
        "nameLocation": "30806:9:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 1419,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 1414,
            "mutability": "mutable",
            "name": "from",
            "nameLocation": "30834:4:1",
            "nodeType": "VariableDeclaration",
            "scope": 1480,
            "src": "30826:12:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1413,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "30826:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 1416,
            "mutability": "mutable",
            "name": "to",
            "nameLocation": "30857:2:1",
            "nodeType": "VariableDeclaration",
            "scope": 1480,
            "src": "30849:10:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1415,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "30849:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 1418,
            "mutability": "mutable",
            "name": "tokenId",
            "nameLocation": "30878:7:1",
            "nodeType": "VariableDeclaration",
            "scope": 1480,
            "src": "30870:15:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1417,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "30870:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "30815:77:1"
        },
        "returnParameters": {
          "id": 1420,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "30910:0:1"
        },
        "scope": 1578,
        "src": "30797:578:1",
        "stateMutability": "nonpayable",
        "virtual": true,
        "visibility": "internal"
      }, {
        "body": {
          "id": 1503,
          "nodeType": "Block",
          "src": "31557:110:1",
          "statements": [{
            "expression": {
              "id": 1492,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "leftHandSide": {
                "baseExpression": {
                  "id": 1488,
                  "name": "_tokenApprovals",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 802,
                  "src": "31568:15:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                    "typeString": "mapping(uint256 => address)"
                  }
                },
                "id": 1490,
                "indexExpression": {
                  "id": 1489,
                  "name": "tokenId",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1485,
                  "src": "31584:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "isConstant": false,
                "isLValue": true,
                "isPure": false,
                "lValueRequested": true,
                "nodeType": "IndexAccess",
                "src": "31568:24:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Assignment",
              "operator": "=",
              "rightHandSide": {
                "id": 1491,
                "name": "to",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1483,
                "src": "31595:2:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "src": "31568:29:1",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "id": 1493,
            "nodeType": "ExpressionStatement",
            "src": "31568:29:1"
          }, {
            "eventCall": {
              "arguments": [{
                "arguments": [{
                  "id": 1497,
                  "name": "tokenId",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1485,
                  "src": "31637:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                }],
                "expression": {
                  "argumentTypes": [{
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }],
                  "expression": {
                    "id": 1495,
                    "name": "ERC721",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1578,
                    "src": "31622:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_type$_t_contract$_ERC721_$1578_$",
                      "typeString": "type(contract ERC721)"
                    }
                  },
                  "id": 1496,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "lValueRequested": false,
                  "memberName": "ownerOf",
                  "nodeType": "MemberAccess",
                  "referencedDeclaration": 908,
                  "src": "31622:14:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
                    "typeString": "function (uint256) view returns (address)"
                  }
                },
                "id": 1498,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "kind": "functionCall",
                "lValueRequested": false,
                "names": [],
                "nodeType": "FunctionCall",
                "src": "31622:23:1",
                "tryCall": false,
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }, {
                "id": 1499,
                "name": "to",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1483,
                "src": "31647:2:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }, {
                "id": 1500,
                "name": "tokenId",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1485,
                "src": "31651:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }, {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }, {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }],
                "id": 1494,
                "name": "Approval",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 66,
                "src": "31613:8:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                  "typeString": "function (address,address,uint256)"
                }
              },
              "id": 1501,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "31613:46:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 1502,
            "nodeType": "EmitStatement",
            "src": "31608:51:1"
          }]
        },
        "documentation": {
          "id": 1481,
          "nodeType": "StructuredDocumentation",
          "src": "31383:104:1",
          "text": " @dev Approve `to` to operate on `tokenId`\n Emits a {Approval} event."
        },
        "id": 1504,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "_approve",
        "nameLocation": "31502:8:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 1486,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 1483,
            "mutability": "mutable",
            "name": "to",
            "nameLocation": "31519:2:1",
            "nodeType": "VariableDeclaration",
            "scope": 1504,
            "src": "31511:10:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1482,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "31511:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 1485,
            "mutability": "mutable",
            "name": "tokenId",
            "nameLocation": "31531:7:1",
            "nodeType": "VariableDeclaration",
            "scope": 1504,
            "src": "31523:15:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1484,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "31523:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "31510:29:1"
        },
        "returnParameters": {
          "id": 1487,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "31557:0:1"
        },
        "scope": 1578,
        "src": "31493:174:1",
        "stateMutability": "nonpayable",
        "virtual": true,
        "visibility": "internal"
      }, {
        "body": {
          "id": 1565,
          "nodeType": "Block",
          "src": "32393:638:1",
          "statements": [{
            "condition": {
              "arguments": [],
              "expression": {
                "argumentTypes": [],
                "expression": {
                  "id": 1518,
                  "name": "to",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1509,
                  "src": "32408:2:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "id": 1519,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "memberName": "isContract",
                "nodeType": "MemberAccess",
                "referencedDeclaration": 430,
                "src": "32408:13:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$bound_to$_t_address_$",
                  "typeString": "function (address) view returns (bool)"
                }
              },
              "id": 1520,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "32408:15:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "falseBody": {
              "id": 1563,
              "nodeType": "Block",
              "src": "32986:38:1",
              "statements": [{
                "expression": {
                  "hexValue": "74727565",
                  "id": 1561,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "bool",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "33008:4:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "value": "true"
                },
                "functionReturnParameters": 1517,
                "id": 1562,
                "nodeType": "Return",
                "src": "33001:11:1"
              }]
            },
            "id": 1564,
            "nodeType": "IfStatement",
            "src": "32404:620:1",
            "trueBody": {
              "id": 1560,
              "nodeType": "Block",
              "src": "32425:555:1",
              "statements": [{
                "clauses": [{
                  "block": {
                    "id": 1540,
                    "nodeType": "Block",
                    "src": "32541:93:1",
                    "statements": [{
                      "expression": {
                        "commonType": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        "id": 1538,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 1534,
                          "name": "retval",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1532,
                          "src": "32567:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "expression": {
                            "expression": {
                              "id": 1535,
                              "name": "IERC721Receiver",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 749,
                              "src": "32577:15:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IERC721Receiver_$749_$",
                                "typeString": "type(contract IERC721Receiver)"
                              }
                            },
                            "id": 1536,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "onERC721Received",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 748,
                            "src": "32577:32:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$",
                              "typeString": "function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"
                            }
                          },
                          "id": 1537,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "selector",
                          "nodeType": "MemberAccess",
                          "src": "32577:41:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "src": "32567:51:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "functionReturnParameters": 1517,
                      "id": 1539,
                      "nodeType": "Return",
                      "src": "32560:58:1"
                    }]
                  },
                  "errorName": "",
                  "id": 1541,
                  "nodeType": "TryCatchClause",
                  "parameters": {
                    "id": 1533,
                    "nodeType": "ParameterList",
                    "parameters": [{
                      "constant": false,
                      "id": 1532,
                      "mutability": "mutable",
                      "name": "retval",
                      "nameLocation": "32533:6:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 1541,
                      "src": "32526:13:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes4",
                        "typeString": "bytes4"
                      },
                      "typeName": {
                        "id": 1531,
                        "name": "bytes4",
                        "nodeType": "ElementaryTypeName",
                        "src": "32526:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      },
                      "visibility": "internal"
                    }],
                    "src": "32525:15:1"
                  },
                  "src": "32517:117:1"
                }, {
                  "block": {
                    "id": 1557,
                    "nodeType": "Block",
                    "src": "32663:306:1",
                    "statements": [{
                      "condition": {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1548,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 1545,
                            "name": "reason",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1543,
                            "src": "32686:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          "id": 1546,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "32686:13:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "hexValue": "30",
                          "id": 1547,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "32703:1:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "32686:18:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "falseBody": {
                        "id": 1555,
                        "nodeType": "Block",
                        "src": "32815:139:1",
                        "statements": [{
                          "AST": {
                            "nodeType": "YulBlock",
                            "src": "32847:88:1",
                            "statements": [{
                              "expression": {
                                "arguments": [{
                                  "arguments": [{
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "32885:2:1",
                                    "type": "",
                                    "value": "32"
                                  }, {
                                    "name": "reason",
                                    "nodeType": "YulIdentifier",
                                    "src": "32889:6:1"
                                  }],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "32881:3:1"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "32881:15:1"
                                }, {
                                  "arguments": [{
                                    "name": "reason",
                                    "nodeType": "YulIdentifier",
                                    "src": "32904:6:1"
                                  }],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "32898:5:1"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "32898:13:1"
                                }],
                                "functionName": {
                                  "name": "revert",
                                  "nodeType": "YulIdentifier",
                                  "src": "32874:6:1"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "32874:38:1"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "32874:38:1"
                            }]
                          },
                          "evmVersion": "london",
                          "externalReferences": [{
                            "declaration": 1543,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "32889:6:1",
                            "valueSize": 1
                          }, {
                            "declaration": 1543,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "32904:6:1",
                            "valueSize": 1
                          }],
                          "id": 1554,
                          "nodeType": "InlineAssembly",
                          "src": "32838:97:1"
                        }]
                      },
                      "id": 1556,
                      "nodeType": "IfStatement",
                      "src": "32682:272:1",
                      "trueBody": {
                        "id": 1553,
                        "nodeType": "Block",
                        "src": "32706:103:1",
                        "statements": [{
                          "expression": {
                            "arguments": [{
                              "hexValue": "4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572",
                              "id": 1550,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "32736:52:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
                                "typeString": "literal_string \"ERC721: transfer to non ERC721Receiver implementer\""
                              },
                              "value": "ERC721: transfer to non ERC721Receiver implementer"
                            }],
                            "expression": {
                              "argumentTypes": [{
                                "typeIdentifier": "t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e",
                                "typeString": "literal_string \"ERC721: transfer to non ERC721Receiver implementer\""
                              }],
                              "id": 1549,
                              "name": "revert",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [4294967277, 4294967277],
                              "referencedDeclaration": 4294967277,
                              "src": "32729:6:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
                                "typeString": "function (string memory) pure"
                              }
                            },
                            "id": 1551,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "32729:60:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_tuple$__$",
                              "typeString": "tuple()"
                            }
                          },
                          "id": 1552,
                          "nodeType": "ExpressionStatement",
                          "src": "32729:60:1"
                        }]
                      }
                    }]
                  },
                  "errorName": "",
                  "id": 1558,
                  "nodeType": "TryCatchClause",
                  "parameters": {
                    "id": 1544,
                    "nodeType": "ParameterList",
                    "parameters": [{
                      "constant": false,
                      "id": 1543,
                      "mutability": "mutable",
                      "name": "reason",
                      "nameLocation": "32655:6:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 1558,
                      "src": "32642:19:1",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 1542,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "32642:5:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }],
                    "src": "32641:21:1"
                  },
                  "src": "32635:334:1"
                }],
                "externalCall": {
                  "arguments": [{
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 1525,
                      "name": "_msgSender",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 760,
                      "src": "32481:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                        "typeString": "function () view returns (address)"
                      }
                    },
                    "id": 1526,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "32481:12:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  }, {
                    "id": 1527,
                    "name": "from",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1507,
                    "src": "32495:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  }, {
                    "id": 1528,
                    "name": "tokenId",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1511,
                    "src": "32501:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }, {
                    "id": 1529,
                    "name": "_data",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1513,
                    "src": "32510:5:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_memory_ptr",
                      "typeString": "bytes memory"
                    }
                  }],
                  "expression": {
                    "argumentTypes": [{
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }, {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }, {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }, {
                      "typeIdentifier": "t_bytes_memory_ptr",
                      "typeString": "bytes memory"
                    }],
                    "expression": {
                      "arguments": [{
                        "id": 1522,
                        "name": "to",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1509,
                        "src": "32460:2:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }],
                      "expression": {
                        "argumentTypes": [{
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }],
                        "id": 1521,
                        "name": "IERC721Receiver",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 749,
                        "src": "32444:15:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_IERC721Receiver_$749_$",
                          "typeString": "type(contract IERC721Receiver)"
                        }
                      },
                      "id": 1523,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "32444:19:1",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IERC721Receiver_$749",
                        "typeString": "contract IERC721Receiver"
                      }
                    },
                    "id": 1524,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "onERC721Received",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": 748,
                    "src": "32444:36:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$",
                      "typeString": "function (address,address,uint256,bytes memory) external returns (bytes4)"
                    }
                  },
                  "id": 1530,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "kind": "functionCall",
                  "lValueRequested": false,
                  "names": [],
                  "nodeType": "FunctionCall",
                  "src": "32444:72:1",
                  "tryCall": true,
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  }
                },
                "id": 1559,
                "nodeType": "TryStatement",
                "src": "32440:529:1"
              }]
            }
          }]
        },
        "documentation": {
          "id": 1505,
          "nodeType": "StructuredDocumentation",
          "src": "31675:551:1",
          "text": " @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n The call is not executed if the target address is not a contract.\n @param from address representing the previous owner of the given token ID\n @param to target address that will receive the tokens\n @param tokenId uint256 ID of the token to be transferred\n @param _data bytes optional data to send along with the call\n @return bool whether the call correctly returned the expected magic value"
        },
        "id": 1566,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "_checkOnERC721Received",
        "nameLocation": "32241:22:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 1514,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 1507,
            "mutability": "mutable",
            "name": "from",
            "nameLocation": "32282:4:1",
            "nodeType": "VariableDeclaration",
            "scope": 1566,
            "src": "32274:12:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1506,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "32274:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 1509,
            "mutability": "mutable",
            "name": "to",
            "nameLocation": "32305:2:1",
            "nodeType": "VariableDeclaration",
            "scope": 1566,
            "src": "32297:10:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1508,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "32297:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 1511,
            "mutability": "mutable",
            "name": "tokenId",
            "nameLocation": "32326:7:1",
            "nodeType": "VariableDeclaration",
            "scope": 1566,
            "src": "32318:15:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1510,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "32318:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 1513,
            "mutability": "mutable",
            "name": "_data",
            "nameLocation": "32357:5:1",
            "nodeType": "VariableDeclaration",
            "scope": 1566,
            "src": "32344:18:1",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes_memory_ptr",
              "typeString": "bytes"
            },
            "typeName": {
              "id": 1512,
              "name": "bytes",
              "nodeType": "ElementaryTypeName",
              "src": "32344:5:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes_storage_ptr",
                "typeString": "bytes"
              }
            },
            "visibility": "internal"
          }],
          "src": "32263:106:1"
        },
        "returnParameters": {
          "id": 1517,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 1516,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 1566,
            "src": "32387:4:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 1515,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "32387:4:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "visibility": "internal"
          }],
          "src": "32386:6:1"
        },
        "scope": 1578,
        "src": "32232:799:1",
        "stateMutability": "nonpayable",
        "virtual": false,
        "visibility": "private"
      }, {
        "body": {
          "id": 1576,
          "nodeType": "Block",
          "src": "33727:2:1",
          "statements": []
        },
        "documentation": {
          "id": 1567,
          "nodeType": "StructuredDocumentation",
          "src": "33039:558:1",
          "text": " @dev Hook that is called before any token transfer. This includes minting\n and burning.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n transferred to `to`.\n - When `from` is zero, `tokenId` will be minted for `to`.\n - When `to` is zero, ``from``'s `tokenId` will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
        },
        "id": 1577,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "_beforeTokenTransfer",
        "nameLocation": "33612:20:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 1574,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 1569,
            "mutability": "mutable",
            "name": "from",
            "nameLocation": "33651:4:1",
            "nodeType": "VariableDeclaration",
            "scope": 1577,
            "src": "33643:12:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1568,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "33643:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 1571,
            "mutability": "mutable",
            "name": "to",
            "nameLocation": "33674:2:1",
            "nodeType": "VariableDeclaration",
            "scope": 1577,
            "src": "33666:10:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1570,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "33666:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 1573,
            "mutability": "mutable",
            "name": "tokenId",
            "nameLocation": "33695:7:1",
            "nodeType": "VariableDeclaration",
            "scope": 1577,
            "src": "33687:15:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1572,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "33687:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "33632:77:1"
        },
        "returnParameters": {
          "id": 1575,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "33727:0:1"
        },
        "scope": 1578,
        "src": "33603:126:1",
        "stateMutability": "nonpayable",
        "virtual": true,
        "visibility": "internal"
      }],
      "scope": 2351,
      "src": "20638:13094:1",
      "usedErrors": []
    }, {
      "id": 1579,
      "literals": ["solidity", "^", "0.8", ".0"],
      "nodeType": "PragmaDirective",
      "src": "33821:23:1"
    }, {
      "abstract": true,
      "baseContracts": [{
        "baseName": {
          "id": 1581,
          "name": "ERC721",
          "nodeType": "IdentifierPath",
          "referencedDeclaration": 1578,
          "src": "34095:6:1"
        },
        "id": 1582,
        "nodeType": "InheritanceSpecifier",
        "src": "34095:6:1"
      }, {
        "baseName": {
          "id": 1583,
          "name": "IERC721Enumerable",
          "nodeType": "IdentifierPath",
          "referencedDeclaration": 187,
          "src": "34103:17:1"
        },
        "id": 1584,
        "nodeType": "InheritanceSpecifier",
        "src": "34103:17:1"
      }],
      "canonicalName": "ERC721Enumerable",
      "contractDependencies": [],
      "contractKind": "contract",
      "documentation": {
        "id": 1580,
        "nodeType": "StructuredDocumentation",
        "src": "33852:203:1",
        "text": " @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n enumerability of all the token ids in the contract as well as all token ids owned by each\n account."
      },
      "fullyImplemented": false,
      "id": 1913,
      "linearizedBaseContracts": [1913, 187, 1578, 732, 158, 209, 44, 770],
      "name": "ERC721Enumerable",
      "nameLocation": "34075:16:1",
      "nodeType": "ContractDefinition",
      "nodes": [{
        "constant": false,
        "id": 1590,
        "mutability": "mutable",
        "name": "_ownedTokens",
        "nameLocation": "34238:12:1",
        "nodeType": "VariableDeclaration",
        "scope": 1913,
        "src": "34182:68:1",
        "stateVariable": true,
        "storageLocation": "default",
        "typeDescriptions": {
          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
          "typeString": "mapping(address => mapping(uint256 => uint256))"
        },
        "typeName": {
          "id": 1589,
          "keyType": {
            "id": 1585,
            "name": "address",
            "nodeType": "ElementaryTypeName",
            "src": "34190:7:1",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            }
          },
          "nodeType": "Mapping",
          "src": "34182:47:1",
          "typeDescriptions": {
            "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
            "typeString": "mapping(address => mapping(uint256 => uint256))"
          },
          "valueType": {
            "id": 1588,
            "keyType": {
              "id": 1586,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "34209:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "nodeType": "Mapping",
            "src": "34201:27:1",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
              "typeString": "mapping(uint256 => uint256)"
            },
            "valueType": {
              "id": 1587,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "34220:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          }
        },
        "visibility": "private"
      }, {
        "constant": false,
        "id": 1594,
        "mutability": "mutable",
        "name": "_ownedTokensIndex",
        "nameLocation": "34359:17:1",
        "nodeType": "VariableDeclaration",
        "scope": 1913,
        "src": "34323:53:1",
        "stateVariable": true,
        "storageLocation": "default",
        "typeDescriptions": {
          "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
          "typeString": "mapping(uint256 => uint256)"
        },
        "typeName": {
          "id": 1593,
          "keyType": {
            "id": 1591,
            "name": "uint256",
            "nodeType": "ElementaryTypeName",
            "src": "34331:7:1",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            }
          },
          "nodeType": "Mapping",
          "src": "34323:27:1",
          "typeDescriptions": {
            "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
            "typeString": "mapping(uint256 => uint256)"
          },
          "valueType": {
            "id": 1592,
            "name": "uint256",
            "nodeType": "ElementaryTypeName",
            "src": "34342:7:1",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            }
          }
        },
        "visibility": "private"
      }, {
        "constant": false,
        "id": 1597,
        "mutability": "mutable",
        "name": "_allTokens",
        "nameLocation": "34458:10:1",
        "nodeType": "VariableDeclaration",
        "scope": 1913,
        "src": "34440:28:1",
        "stateVariable": true,
        "storageLocation": "default",
        "typeDescriptions": {
          "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
          "typeString": "uint256[]"
        },
        "typeName": {
          "baseType": {
            "id": 1595,
            "name": "uint256",
            "nodeType": "ElementaryTypeName",
            "src": "34440:7:1",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            }
          },
          "id": 1596,
          "nodeType": "ArrayTypeName",
          "src": "34440:9:1",
          "typeDescriptions": {
            "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
            "typeString": "uint256[]"
          }
        },
        "visibility": "private"
      }, {
        "constant": false,
        "id": 1601,
        "mutability": "mutable",
        "name": "_allTokensIndex",
        "nameLocation": "34578:15:1",
        "nodeType": "VariableDeclaration",
        "scope": 1913,
        "src": "34542:51:1",
        "stateVariable": true,
        "storageLocation": "default",
        "typeDescriptions": {
          "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
          "typeString": "mapping(uint256 => uint256)"
        },
        "typeName": {
          "id": 1600,
          "keyType": {
            "id": 1598,
            "name": "uint256",
            "nodeType": "ElementaryTypeName",
            "src": "34550:7:1",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            }
          },
          "nodeType": "Mapping",
          "src": "34542:27:1",
          "typeDescriptions": {
            "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
            "typeString": "mapping(uint256 => uint256)"
          },
          "valueType": {
            "id": 1599,
            "name": "uint256",
            "nodeType": "ElementaryTypeName",
            "src": "34561:7:1",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            }
          }
        },
        "visibility": "private"
      }, {
        "baseFunctions": [43, 856],
        "body": {
          "id": 1624,
          "nodeType": "Block",
          "src": "34774:116:1",
          "statements": [{
            "expression": {
              "commonType": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              },
              "id": 1622,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "leftExpression": {
                "commonType": {
                  "typeIdentifier": "t_bytes4",
                  "typeString": "bytes4"
                },
                "id": 1617,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "leftExpression": {
                  "id": 1612,
                  "name": "interfaceId",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1604,
                  "src": "34792:11:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  }
                },
                "nodeType": "BinaryOperation",
                "operator": "==",
                "rightExpression": {
                  "expression": {
                    "arguments": [{
                      "id": 1614,
                      "name": "IERC721Enumerable",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 187,
                      "src": "34812:17:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_IERC721Enumerable_$187_$",
                        "typeString": "type(contract IERC721Enumerable)"
                      }
                    }],
                    "expression": {
                      "argumentTypes": [{
                        "typeIdentifier": "t_type$_t_contract$_IERC721Enumerable_$187_$",
                        "typeString": "type(contract IERC721Enumerable)"
                      }],
                      "id": 1613,
                      "name": "type",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4294967269,
                      "src": "34807:4:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                        "typeString": "function () pure"
                      }
                    },
                    "id": 1615,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "34807:23:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_magic_meta_type_t_contract$_IERC721Enumerable_$187",
                      "typeString": "type(contract IERC721Enumerable)"
                    }
                  },
                  "id": 1616,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "lValueRequested": false,
                  "memberName": "interfaceId",
                  "nodeType": "MemberAccess",
                  "src": "34807:35:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  }
                },
                "src": "34792:50:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              },
              "nodeType": "BinaryOperation",
              "operator": "||",
              "rightExpression": {
                "arguments": [{
                  "id": 1620,
                  "name": "interfaceId",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1604,
                  "src": "34870:11:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  }
                }],
                "expression": {
                  "argumentTypes": [{
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  }],
                  "expression": {
                    "id": 1618,
                    "name": "super",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 4294967271,
                    "src": "34846:5:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_type$_t_super$_ERC721Enumerable_$1913_$",
                      "typeString": "type(contract super ERC721Enumerable)"
                    }
                  },
                  "id": 1619,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "lValueRequested": false,
                  "memberName": "supportsInterface",
                  "nodeType": "MemberAccess",
                  "referencedDeclaration": 856,
                  "src": "34846:23:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_function_internal_view$_t_bytes4_$returns$_t_bool_$",
                    "typeString": "function (bytes4) view returns (bool)"
                  }
                },
                "id": 1621,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "kind": "functionCall",
                "lValueRequested": false,
                "names": [],
                "nodeType": "FunctionCall",
                "src": "34846:36:1",
                "tryCall": false,
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              },
              "src": "34792:90:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "functionReturnParameters": 1611,
            "id": 1623,
            "nodeType": "Return",
            "src": "34785:97:1"
          }]
        },
        "documentation": {
          "id": 1602,
          "nodeType": "StructuredDocumentation",
          "src": "34602:58:1",
          "text": " @dev See {IERC165-supportsInterface}."
        },
        "functionSelector": "01ffc9a7",
        "id": 1625,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "supportsInterface",
        "nameLocation": "34675:17:1",
        "nodeType": "FunctionDefinition",
        "overrides": {
          "id": 1608,
          "nodeType": "OverrideSpecifier",
          "overrides": [{
            "id": 1606,
            "name": "IERC165",
            "nodeType": "IdentifierPath",
            "referencedDeclaration": 44,
            "src": "34742:7:1"
          }, {
            "id": 1607,
            "name": "ERC721",
            "nodeType": "IdentifierPath",
            "referencedDeclaration": 1578,
            "src": "34751:6:1"
          }],
          "src": "34733:25:1"
        },
        "parameters": {
          "id": 1605,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 1604,
            "mutability": "mutable",
            "name": "interfaceId",
            "nameLocation": "34700:11:1",
            "nodeType": "VariableDeclaration",
            "scope": 1625,
            "src": "34693:18:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes4",
              "typeString": "bytes4"
            },
            "typeName": {
              "id": 1603,
              "name": "bytes4",
              "nodeType": "ElementaryTypeName",
              "src": "34693:6:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes4",
                "typeString": "bytes4"
              }
            },
            "visibility": "internal"
          }],
          "src": "34692:20:1"
        },
        "returnParameters": {
          "id": 1611,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 1610,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 1625,
            "src": "34768:4:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 1609,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "34768:4:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "visibility": "internal"
          }],
          "src": "34767:6:1"
        },
        "scope": 1913,
        "src": "34666:224:1",
        "stateMutability": "view",
        "virtual": true,
        "visibility": "public"
      }, {
        "baseFunctions": [178],
        "body": {
          "id": 1652,
          "nodeType": "Block",
          "src": "35080:150:1",
          "statements": [{
            "expression": {
              "arguments": [{
                "commonType": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "id": 1642,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "leftExpression": {
                  "id": 1637,
                  "name": "index",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1630,
                  "src": "35099:5:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "nodeType": "BinaryOperation",
                "operator": "<",
                "rightExpression": {
                  "arguments": [{
                    "id": 1640,
                    "name": "owner",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1628,
                    "src": "35124:5:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  }],
                  "expression": {
                    "argumentTypes": [{
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }],
                    "expression": {
                      "id": 1638,
                      "name": "ERC721",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1578,
                      "src": "35107:6:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_ERC721_$1578_$",
                        "typeString": "type(contract ERC721)"
                      }
                    },
                    "id": 1639,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "balanceOf",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": 880,
                    "src": "35107:16:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
                      "typeString": "function (address) view returns (uint256)"
                    }
                  },
                  "id": 1641,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "kind": "functionCall",
                  "lValueRequested": false,
                  "names": [],
                  "nodeType": "FunctionCall",
                  "src": "35107:23:1",
                  "tryCall": false,
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "src": "35099:31:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }, {
                "hexValue": "455243373231456e756d657261626c653a206f776e657220696e646578206f7574206f6620626f756e6473",
                "id": 1643,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "string",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "35132:45:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c",
                  "typeString": "literal_string \"ERC721Enumerable: owner index out of bounds\""
                },
                "value": "ERC721Enumerable: owner index out of bounds"
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }, {
                  "typeIdentifier": "t_stringliteral_1d7f5dcf03a65f41ee49b0ab593e3851cfbe3fd7da53b6cf4eddd83c7df5734c",
                  "typeString": "literal_string \"ERC721Enumerable: owner index out of bounds\""
                }],
                "id": 1636,
                "name": "require",
                "nodeType": "Identifier",
                "overloadedDeclarations": [4294967278, 4294967278],
                "referencedDeclaration": 4294967278,
                "src": "35091:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                  "typeString": "function (bool,string memory) pure"
                }
              },
              "id": 1644,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "35091:87:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 1645,
            "nodeType": "ExpressionStatement",
            "src": "35091:87:1"
          }, {
            "expression": {
              "baseExpression": {
                "baseExpression": {
                  "id": 1646,
                  "name": "_ownedTokens",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1590,
                  "src": "35196:12:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
                    "typeString": "mapping(address => mapping(uint256 => uint256))"
                  }
                },
                "id": 1648,
                "indexExpression": {
                  "id": 1647,
                  "name": "owner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1628,
                  "src": "35209:5:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "isConstant": false,
                "isLValue": true,
                "isPure": false,
                "lValueRequested": false,
                "nodeType": "IndexAccess",
                "src": "35196:19:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                  "typeString": "mapping(uint256 => uint256)"
                }
              },
              "id": 1650,
              "indexExpression": {
                "id": 1649,
                "name": "index",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1630,
                "src": "35216:5:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "isConstant": false,
              "isLValue": true,
              "isPure": false,
              "lValueRequested": false,
              "nodeType": "IndexAccess",
              "src": "35196:26:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "functionReturnParameters": 1635,
            "id": 1651,
            "nodeType": "Return",
            "src": "35189:33:1"
          }]
        },
        "documentation": {
          "id": 1626,
          "nodeType": "StructuredDocumentation",
          "src": "34898:70:1",
          "text": " @dev See {IERC721Enumerable-tokenOfOwnerByIndex}."
        },
        "functionSelector": "2f745c59",
        "id": 1653,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "tokenOfOwnerByIndex",
        "nameLocation": "34983:19:1",
        "nodeType": "FunctionDefinition",
        "overrides": {
          "id": 1632,
          "nodeType": "OverrideSpecifier",
          "overrides": [],
          "src": "35053:8:1"
        },
        "parameters": {
          "id": 1631,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 1628,
            "mutability": "mutable",
            "name": "owner",
            "nameLocation": "35011:5:1",
            "nodeType": "VariableDeclaration",
            "scope": 1653,
            "src": "35003:13:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1627,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "35003:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 1630,
            "mutability": "mutable",
            "name": "index",
            "nameLocation": "35026:5:1",
            "nodeType": "VariableDeclaration",
            "scope": 1653,
            "src": "35018:13:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1629,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "35018:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "35002:30:1"
        },
        "returnParameters": {
          "id": 1635,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 1634,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 1653,
            "src": "35071:7:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1633,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "35071:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "35070:9:1"
        },
        "scope": 1913,
        "src": "34974:256:1",
        "stateMutability": "view",
        "virtual": true,
        "visibility": "public"
      }, {
        "baseFunctions": [168],
        "body": {
          "id": 1663,
          "nodeType": "Block",
          "src": "35376:43:1",
          "statements": [{
            "expression": {
              "expression": {
                "id": 1660,
                "name": "_allTokens",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1597,
                "src": "35394:10:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                  "typeString": "uint256[] storage ref"
                }
              },
              "id": 1661,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "memberName": "length",
              "nodeType": "MemberAccess",
              "src": "35394:17:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "functionReturnParameters": 1659,
            "id": 1662,
            "nodeType": "Return",
            "src": "35387:24:1"
          }]
        },
        "documentation": {
          "id": 1654,
          "nodeType": "StructuredDocumentation",
          "src": "35238:62:1",
          "text": " @dev See {IERC721Enumerable-totalSupply}."
        },
        "functionSelector": "18160ddd",
        "id": 1664,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "totalSupply",
        "nameLocation": "35315:11:1",
        "nodeType": "FunctionDefinition",
        "overrides": {
          "id": 1656,
          "nodeType": "OverrideSpecifier",
          "overrides": [],
          "src": "35349:8:1"
        },
        "parameters": {
          "id": 1655,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "35326:2:1"
        },
        "returnParameters": {
          "id": 1659,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 1658,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 1664,
            "src": "35367:7:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1657,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "35367:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "35366:9:1"
        },
        "scope": 1913,
        "src": "35306:113:1",
        "stateMutability": "view",
        "virtual": true,
        "visibility": "public"
      }, {
        "baseFunctions": [186],
        "body": {
          "id": 1686,
          "nodeType": "Block",
          "src": "35580:149:1",
          "statements": [{
            "expression": {
              "arguments": [{
                "commonType": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "id": 1678,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "leftExpression": {
                  "id": 1674,
                  "name": "index",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1667,
                  "src": "35599:5:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "nodeType": "BinaryOperation",
                "operator": "<",
                "rightExpression": {
                  "arguments": [],
                  "expression": {
                    "argumentTypes": [],
                    "expression": {
                      "id": 1675,
                      "name": "ERC721Enumerable",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1913,
                      "src": "35607:16:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_ERC721Enumerable_$1913_$",
                        "typeString": "type(contract ERC721Enumerable)"
                      }
                    },
                    "id": 1676,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "totalSupply",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": 1664,
                    "src": "35607:28:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                      "typeString": "function () view returns (uint256)"
                    }
                  },
                  "id": 1677,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "kind": "functionCall",
                  "lValueRequested": false,
                  "names": [],
                  "nodeType": "FunctionCall",
                  "src": "35607:30:1",
                  "tryCall": false,
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "src": "35599:38:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }, {
                "hexValue": "455243373231456e756d657261626c653a20676c6f62616c20696e646578206f7574206f6620626f756e6473",
                "id": 1679,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "string",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "35639:46:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc",
                  "typeString": "literal_string \"ERC721Enumerable: global index out of bounds\""
                },
                "value": "ERC721Enumerable: global index out of bounds"
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }, {
                  "typeIdentifier": "t_stringliteral_d269a4e9f5820dcdb69ea21f528512eb9b927c8d846d48aa51c9219f461d4dcc",
                  "typeString": "literal_string \"ERC721Enumerable: global index out of bounds\""
                }],
                "id": 1673,
                "name": "require",
                "nodeType": "Identifier",
                "overloadedDeclarations": [4294967278, 4294967278],
                "referencedDeclaration": 4294967278,
                "src": "35591:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                  "typeString": "function (bool,string memory) pure"
                }
              },
              "id": 1680,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "35591:95:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 1681,
            "nodeType": "ExpressionStatement",
            "src": "35591:95:1"
          }, {
            "expression": {
              "baseExpression": {
                "id": 1682,
                "name": "_allTokens",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1597,
                "src": "35704:10:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                  "typeString": "uint256[] storage ref"
                }
              },
              "id": 1684,
              "indexExpression": {
                "id": 1683,
                "name": "index",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1667,
                "src": "35715:5:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "isConstant": false,
              "isLValue": true,
              "isPure": false,
              "lValueRequested": false,
              "nodeType": "IndexAccess",
              "src": "35704:17:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "functionReturnParameters": 1672,
            "id": 1685,
            "nodeType": "Return",
            "src": "35697:24:1"
          }]
        },
        "documentation": {
          "id": 1665,
          "nodeType": "StructuredDocumentation",
          "src": "35427:63:1",
          "text": " @dev See {IERC721Enumerable-tokenByIndex}."
        },
        "functionSelector": "4f6ccce7",
        "id": 1687,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "tokenByIndex",
        "nameLocation": "35505:12:1",
        "nodeType": "FunctionDefinition",
        "overrides": {
          "id": 1669,
          "nodeType": "OverrideSpecifier",
          "overrides": [],
          "src": "35553:8:1"
        },
        "parameters": {
          "id": 1668,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 1667,
            "mutability": "mutable",
            "name": "index",
            "nameLocation": "35526:5:1",
            "nodeType": "VariableDeclaration",
            "scope": 1687,
            "src": "35518:13:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1666,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "35518:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "35517:15:1"
        },
        "returnParameters": {
          "id": 1672,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 1671,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 1687,
            "src": "35571:7:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1670,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "35571:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "35570:9:1"
        },
        "scope": 1913,
        "src": "35496:233:1",
        "stateMutability": "view",
        "virtual": true,
        "visibility": "public"
      }, {
        "baseFunctions": [1577],
        "body": {
          "id": 1750,
          "nodeType": "Block",
          "src": "36475:456:1",
          "statements": [{
            "expression": {
              "arguments": [{
                "id": 1701,
                "name": "from",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1690,
                "src": "36513:4:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }, {
                "id": 1702,
                "name": "to",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1692,
                "src": "36519:2:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }, {
                "id": 1703,
                "name": "tokenId",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1694,
                "src": "36523:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }, {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }, {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }],
                "expression": {
                  "id": 1698,
                  "name": "super",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 4294967271,
                  "src": "36486:5:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_super$_ERC721Enumerable_$1913_$",
                    "typeString": "type(contract super ERC721Enumerable)"
                  }
                },
                "id": 1700,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "memberName": "_beforeTokenTransfer",
                "nodeType": "MemberAccess",
                "referencedDeclaration": 1577,
                "src": "36486:26:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                  "typeString": "function (address,address,uint256)"
                }
              },
              "id": 1704,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "36486:45:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 1705,
            "nodeType": "ExpressionStatement",
            "src": "36486:45:1"
          }, {
            "condition": {
              "commonType": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              },
              "id": 1711,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "leftExpression": {
                "id": 1706,
                "name": "from",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1690,
                "src": "36548:4:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "BinaryOperation",
              "operator": "==",
              "rightExpression": {
                "arguments": [{
                  "hexValue": "30",
                  "id": 1709,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "36564:1:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_0_by_1",
                    "typeString": "int_const 0"
                  },
                  "value": "0"
                }],
                "expression": {
                  "argumentTypes": [{
                    "typeIdentifier": "t_rational_0_by_1",
                    "typeString": "int_const 0"
                  }],
                  "id": 1708,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "lValueRequested": false,
                  "nodeType": "ElementaryTypeNameExpression",
                  "src": "36556:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_address_$",
                    "typeString": "type(address)"
                  },
                  "typeName": {
                    "id": 1707,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "36556:7:1",
                    "typeDescriptions": {}
                  }
                },
                "id": 1710,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "typeConversion",
                "lValueRequested": false,
                "names": [],
                "nodeType": "FunctionCall",
                "src": "36556:10:1",
                "tryCall": false,
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "src": "36548:18:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "falseBody": {
              "condition": {
                "commonType": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "id": 1719,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "leftExpression": {
                  "id": 1717,
                  "name": "from",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1690,
                  "src": "36645:4:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "nodeType": "BinaryOperation",
                "operator": "!=",
                "rightExpression": {
                  "id": 1718,
                  "name": "to",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1692,
                  "src": "36653:2:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "src": "36645:10:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              },
              "id": 1726,
              "nodeType": "IfStatement",
              "src": "36641:90:1",
              "trueBody": {
                "id": 1725,
                "nodeType": "Block",
                "src": "36657:74:1",
                "statements": [{
                  "expression": {
                    "arguments": [{
                      "id": 1721,
                      "name": "from",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1690,
                      "src": "36705:4:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    }, {
                      "id": 1722,
                      "name": "tokenId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1694,
                      "src": "36711:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    }],
                    "expression": {
                      "argumentTypes": [{
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }, {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }],
                      "id": 1720,
                      "name": "_removeTokenFromOwnerEnumeration",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1864,
                      "src": "36672:32:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 1723,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "36672:47:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1724,
                  "nodeType": "ExpressionStatement",
                  "src": "36672:47:1"
                }]
              }
            },
            "id": 1727,
            "nodeType": "IfStatement",
            "src": "36544:187:1",
            "trueBody": {
              "id": 1716,
              "nodeType": "Block",
              "src": "36568:67:1",
              "statements": [{
                "expression": {
                  "arguments": [{
                    "id": 1713,
                    "name": "tokenId",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1694,
                    "src": "36615:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }],
                  "expression": {
                    "argumentTypes": [{
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }],
                    "id": 1712,
                    "name": "_addTokenToAllTokensEnumeration",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1801,
                    "src": "36583:31:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                      "typeString": "function (uint256)"
                    }
                  },
                  "id": 1714,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "kind": "functionCall",
                  "lValueRequested": false,
                  "names": [],
                  "nodeType": "FunctionCall",
                  "src": "36583:40:1",
                  "tryCall": false,
                  "typeDescriptions": {
                    "typeIdentifier": "t_tuple$__$",
                    "typeString": "tuple()"
                  }
                },
                "id": 1715,
                "nodeType": "ExpressionStatement",
                "src": "36583:40:1"
              }]
            }
          }, {
            "condition": {
              "commonType": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              },
              "id": 1733,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "leftExpression": {
                "id": 1728,
                "name": "to",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1692,
                "src": "36745:2:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "BinaryOperation",
              "operator": "==",
              "rightExpression": {
                "arguments": [{
                  "hexValue": "30",
                  "id": 1731,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "36759:1:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_0_by_1",
                    "typeString": "int_const 0"
                  },
                  "value": "0"
                }],
                "expression": {
                  "argumentTypes": [{
                    "typeIdentifier": "t_rational_0_by_1",
                    "typeString": "int_const 0"
                  }],
                  "id": 1730,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "lValueRequested": false,
                  "nodeType": "ElementaryTypeNameExpression",
                  "src": "36751:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_address_$",
                    "typeString": "type(address)"
                  },
                  "typeName": {
                    "id": 1729,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "36751:7:1",
                    "typeDescriptions": {}
                  }
                },
                "id": 1732,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "typeConversion",
                "lValueRequested": false,
                "names": [],
                "nodeType": "FunctionCall",
                "src": "36751:10:1",
                "tryCall": false,
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "src": "36745:16:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "falseBody": {
              "condition": {
                "commonType": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "id": 1741,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "leftExpression": {
                  "id": 1739,
                  "name": "to",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1692,
                  "src": "36845:2:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "nodeType": "BinaryOperation",
                "operator": "!=",
                "rightExpression": {
                  "id": 1740,
                  "name": "from",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1690,
                  "src": "36851:4:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "src": "36845:10:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              },
              "id": 1748,
              "nodeType": "IfStatement",
              "src": "36841:83:1",
              "trueBody": {
                "id": 1747,
                "nodeType": "Block",
                "src": "36857:67:1",
                "statements": [{
                  "expression": {
                    "arguments": [{
                      "id": 1743,
                      "name": "to",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1692,
                      "src": "36900:2:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    }, {
                      "id": 1744,
                      "name": "tokenId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1694,
                      "src": "36904:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    }],
                    "expression": {
                      "argumentTypes": [{
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }, {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }],
                      "id": 1742,
                      "name": "_addTokenToOwnerEnumeration",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1781,
                      "src": "36872:27:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 1745,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "36872:40:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1746,
                  "nodeType": "ExpressionStatement",
                  "src": "36872:40:1"
                }]
              }
            },
            "id": 1749,
            "nodeType": "IfStatement",
            "src": "36741:183:1",
            "trueBody": {
              "id": 1738,
              "nodeType": "Block",
              "src": "36763:72:1",
              "statements": [{
                "expression": {
                  "arguments": [{
                    "id": 1735,
                    "name": "tokenId",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1694,
                    "src": "36815:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }],
                  "expression": {
                    "argumentTypes": [{
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }],
                    "id": 1734,
                    "name": "_removeTokenFromAllTokensEnumeration",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1912,
                    "src": "36778:36:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                      "typeString": "function (uint256)"
                    }
                  },
                  "id": 1736,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "kind": "functionCall",
                  "lValueRequested": false,
                  "names": [],
                  "nodeType": "FunctionCall",
                  "src": "36778:45:1",
                  "tryCall": false,
                  "typeDescriptions": {
                    "typeIdentifier": "t_tuple$__$",
                    "typeString": "tuple()"
                  }
                },
                "id": 1737,
                "nodeType": "ExpressionStatement",
                "src": "36778:45:1"
              }]
            }
          }]
        },
        "documentation": {
          "id": 1688,
          "nodeType": "StructuredDocumentation",
          "src": "35737:599:1",
          "text": " @dev Hook that is called before any token transfer. This includes minting\n and burning.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n transferred to `to`.\n - When `from` is zero, `tokenId` will be minted for `to`.\n - When `to` is zero, ``from``'s `tokenId` will be burned.\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
        },
        "id": 1751,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "_beforeTokenTransfer",
        "nameLocation": "36351:20:1",
        "nodeType": "FunctionDefinition",
        "overrides": {
          "id": 1696,
          "nodeType": "OverrideSpecifier",
          "overrides": [],
          "src": "36466:8:1"
        },
        "parameters": {
          "id": 1695,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 1690,
            "mutability": "mutable",
            "name": "from",
            "nameLocation": "36390:4:1",
            "nodeType": "VariableDeclaration",
            "scope": 1751,
            "src": "36382:12:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1689,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "36382:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 1692,
            "mutability": "mutable",
            "name": "to",
            "nameLocation": "36413:2:1",
            "nodeType": "VariableDeclaration",
            "scope": 1751,
            "src": "36405:10:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1691,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "36405:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 1694,
            "mutability": "mutable",
            "name": "tokenId",
            "nameLocation": "36434:7:1",
            "nodeType": "VariableDeclaration",
            "scope": 1751,
            "src": "36426:15:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1693,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "36426:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "36371:77:1"
        },
        "returnParameters": {
          "id": 1697,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "36475:0:1"
        },
        "scope": 1913,
        "src": "36342:589:1",
        "stateMutability": "nonpayable",
        "virtual": true,
        "visibility": "internal"
      }, {
        "body": {
          "id": 1780,
          "nodeType": "Block",
          "src": "37306:147:1",
          "statements": [{
            "assignments": [1760],
            "declarations": [{
              "constant": false,
              "id": 1760,
              "mutability": "mutable",
              "name": "length",
              "nameLocation": "37325:6:1",
              "nodeType": "VariableDeclaration",
              "scope": 1780,
              "src": "37317:14:1",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "typeName": {
                "id": 1759,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "37317:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "visibility": "internal"
            }],
            "id": 1765,
            "initialValue": {
              "arguments": [{
                "id": 1763,
                "name": "to",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1754,
                "src": "37351:2:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }],
                "expression": {
                  "id": 1761,
                  "name": "ERC721",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1578,
                  "src": "37334:6:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_contract$_ERC721_$1578_$",
                    "typeString": "type(contract ERC721)"
                  }
                },
                "id": 1762,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "memberName": "balanceOf",
                "nodeType": "MemberAccess",
                "referencedDeclaration": 880,
                "src": "37334:16:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
                  "typeString": "function (address) view returns (uint256)"
                }
              },
              "id": 1764,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "37334:20:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "nodeType": "VariableDeclarationStatement",
            "src": "37317:37:1"
          }, {
            "expression": {
              "id": 1772,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "leftHandSide": {
                "baseExpression": {
                  "baseExpression": {
                    "id": 1766,
                    "name": "_ownedTokens",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1590,
                    "src": "37365:12:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
                      "typeString": "mapping(address => mapping(uint256 => uint256))"
                    }
                  },
                  "id": 1769,
                  "indexExpression": {
                    "id": 1767,
                    "name": "to",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1754,
                    "src": "37378:2:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "isConstant": false,
                  "isLValue": true,
                  "isPure": false,
                  "lValueRequested": false,
                  "nodeType": "IndexAccess",
                  "src": "37365:16:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                    "typeString": "mapping(uint256 => uint256)"
                  }
                },
                "id": 1770,
                "indexExpression": {
                  "id": 1768,
                  "name": "length",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1760,
                  "src": "37382:6:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "isConstant": false,
                "isLValue": true,
                "isPure": false,
                "lValueRequested": true,
                "nodeType": "IndexAccess",
                "src": "37365:24:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Assignment",
              "operator": "=",
              "rightHandSide": {
                "id": 1771,
                "name": "tokenId",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1756,
                "src": "37392:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "src": "37365:34:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "id": 1773,
            "nodeType": "ExpressionStatement",
            "src": "37365:34:1"
          }, {
            "expression": {
              "id": 1778,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "leftHandSide": {
                "baseExpression": {
                  "id": 1774,
                  "name": "_ownedTokensIndex",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1594,
                  "src": "37410:17:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                    "typeString": "mapping(uint256 => uint256)"
                  }
                },
                "id": 1776,
                "indexExpression": {
                  "id": 1775,
                  "name": "tokenId",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1756,
                  "src": "37428:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "isConstant": false,
                "isLValue": true,
                "isPure": false,
                "lValueRequested": true,
                "nodeType": "IndexAccess",
                "src": "37410:26:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Assignment",
              "operator": "=",
              "rightHandSide": {
                "id": 1777,
                "name": "length",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1760,
                "src": "37439:6:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "src": "37410:35:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "id": 1779,
            "nodeType": "ExpressionStatement",
            "src": "37410:35:1"
          }]
        },
        "documentation": {
          "id": 1752,
          "nodeType": "StructuredDocumentation",
          "src": "36939:287:1",
          "text": " @dev Private function to add a token to this extension's ownership-tracking data structures.\n @param to address representing the new owner of the given token ID\n @param tokenId uint256 ID of the token to be added to the tokens list of the given address"
        },
        "id": 1781,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "_addTokenToOwnerEnumeration",
        "nameLocation": "37241:27:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 1757,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 1754,
            "mutability": "mutable",
            "name": "to",
            "nameLocation": "37277:2:1",
            "nodeType": "VariableDeclaration",
            "scope": 1781,
            "src": "37269:10:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1753,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "37269:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 1756,
            "mutability": "mutable",
            "name": "tokenId",
            "nameLocation": "37289:7:1",
            "nodeType": "VariableDeclaration",
            "scope": 1781,
            "src": "37281:15:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1755,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "37281:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "37268:29:1"
        },
        "returnParameters": {
          "id": 1758,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "37306:0:1"
        },
        "scope": 1913,
        "src": "37232:221:1",
        "stateMutability": "nonpayable",
        "virtual": false,
        "visibility": "private"
      }, {
        "body": {
          "id": 1800,
          "nodeType": "Block",
          "src": "37720:98:1",
          "statements": [{
            "expression": {
              "id": 1792,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "leftHandSide": {
                "baseExpression": {
                  "id": 1787,
                  "name": "_allTokensIndex",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1601,
                  "src": "37731:15:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                    "typeString": "mapping(uint256 => uint256)"
                  }
                },
                "id": 1789,
                "indexExpression": {
                  "id": 1788,
                  "name": "tokenId",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1784,
                  "src": "37747:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "isConstant": false,
                "isLValue": true,
                "isPure": false,
                "lValueRequested": true,
                "nodeType": "IndexAccess",
                "src": "37731:24:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Assignment",
              "operator": "=",
              "rightHandSide": {
                "expression": {
                  "id": 1790,
                  "name": "_allTokens",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1597,
                  "src": "37758:10:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                    "typeString": "uint256[] storage ref"
                  }
                },
                "id": 1791,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "memberName": "length",
                "nodeType": "MemberAccess",
                "src": "37758:17:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "src": "37731:44:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "id": 1793,
            "nodeType": "ExpressionStatement",
            "src": "37731:44:1"
          }, {
            "expression": {
              "arguments": [{
                "id": 1797,
                "name": "tokenId",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1784,
                "src": "37802:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }],
                "expression": {
                  "id": 1794,
                  "name": "_allTokens",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1597,
                  "src": "37786:10:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                    "typeString": "uint256[] storage ref"
                  }
                },
                "id": 1796,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "memberName": "push",
                "nodeType": "MemberAccess",
                "src": "37786:15:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$bound_to$_t_array$_t_uint256_$dyn_storage_ptr_$",
                  "typeString": "function (uint256[] storage pointer,uint256)"
                }
              },
              "id": 1798,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "37786:24:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 1799,
            "nodeType": "ExpressionStatement",
            "src": "37786:24:1"
          }]
        },
        "documentation": {
          "id": 1782,
          "nodeType": "StructuredDocumentation",
          "src": "37461:187:1",
          "text": " @dev Private function to add a token to this extension's token tracking data structures.\n @param tokenId uint256 ID of the token to be added to the tokens list"
        },
        "id": 1801,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "_addTokenToAllTokensEnumeration",
        "nameLocation": "37663:31:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 1785,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 1784,
            "mutability": "mutable",
            "name": "tokenId",
            "nameLocation": "37703:7:1",
            "nodeType": "VariableDeclaration",
            "scope": 1801,
            "src": "37695:15:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1783,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "37695:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "37694:17:1"
        },
        "returnParameters": {
          "id": 1786,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "37720:0:1"
        },
        "scope": 1913,
        "src": "37654:164:1",
        "stateMutability": "nonpayable",
        "virtual": false,
        "visibility": "private"
      }, {
        "body": {
          "id": 1863,
          "nodeType": "Block",
          "src": "38526:907:1",
          "statements": [{
            "assignments": [1810],
            "declarations": [{
              "constant": false,
              "id": 1810,
              "mutability": "mutable",
              "name": "lastTokenIndex",
              "nameLocation": "38719:14:1",
              "nodeType": "VariableDeclaration",
              "scope": 1863,
              "src": "38711:22:1",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "typeName": {
                "id": 1809,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "38711:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "visibility": "internal"
            }],
            "id": 1817,
            "initialValue": {
              "commonType": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "id": 1816,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "leftExpression": {
                "arguments": [{
                  "id": 1813,
                  "name": "from",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1804,
                  "src": "38753:4:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                }],
                "expression": {
                  "argumentTypes": [{
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }],
                  "expression": {
                    "id": 1811,
                    "name": "ERC721",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1578,
                    "src": "38736:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_type$_t_contract$_ERC721_$1578_$",
                      "typeString": "type(contract ERC721)"
                    }
                  },
                  "id": 1812,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "lValueRequested": false,
                  "memberName": "balanceOf",
                  "nodeType": "MemberAccess",
                  "referencedDeclaration": 880,
                  "src": "38736:16:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
                    "typeString": "function (address) view returns (uint256)"
                  }
                },
                "id": 1814,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "kind": "functionCall",
                "lValueRequested": false,
                "names": [],
                "nodeType": "FunctionCall",
                "src": "38736:22:1",
                "tryCall": false,
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "BinaryOperation",
              "operator": "-",
              "rightExpression": {
                "hexValue": "31",
                "id": 1815,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "38761:1:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_1_by_1",
                  "typeString": "int_const 1"
                },
                "value": "1"
              },
              "src": "38736:26:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "nodeType": "VariableDeclarationStatement",
            "src": "38711:51:1"
          }, {
            "assignments": [1819],
            "declarations": [{
              "constant": false,
              "id": 1819,
              "mutability": "mutable",
              "name": "tokenIndex",
              "nameLocation": "38781:10:1",
              "nodeType": "VariableDeclaration",
              "scope": 1863,
              "src": "38773:18:1",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "typeName": {
                "id": 1818,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "38773:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "visibility": "internal"
            }],
            "id": 1823,
            "initialValue": {
              "baseExpression": {
                "id": 1820,
                "name": "_ownedTokensIndex",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1594,
                "src": "38794:17:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                  "typeString": "mapping(uint256 => uint256)"
                }
              },
              "id": 1822,
              "indexExpression": {
                "id": 1821,
                "name": "tokenId",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1806,
                "src": "38812:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "isConstant": false,
              "isLValue": true,
              "isPure": false,
              "lValueRequested": false,
              "nodeType": "IndexAccess",
              "src": "38794:26:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "nodeType": "VariableDeclarationStatement",
            "src": "38773:47:1"
          }, {
            "condition": {
              "commonType": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "id": 1826,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "leftExpression": {
                "id": 1824,
                "name": "tokenIndex",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1819,
                "src": "38927:10:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "BinaryOperation",
              "operator": "!=",
              "rightExpression": {
                "id": 1825,
                "name": "lastTokenIndex",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1810,
                "src": "38941:14:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "src": "38927:28:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "id": 1850,
            "nodeType": "IfStatement",
            "src": "38923:328:1",
            "trueBody": {
              "id": 1849,
              "nodeType": "Block",
              "src": "38957:294:1",
              "statements": [{
                "assignments": [1828],
                "declarations": [{
                  "constant": false,
                  "id": 1828,
                  "mutability": "mutable",
                  "name": "lastTokenId",
                  "nameLocation": "38980:11:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1849,
                  "src": "38972:19:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1827,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "38972:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }],
                "id": 1834,
                "initialValue": {
                  "baseExpression": {
                    "baseExpression": {
                      "id": 1829,
                      "name": "_ownedTokens",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1590,
                      "src": "38994:12:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
                        "typeString": "mapping(address => mapping(uint256 => uint256))"
                      }
                    },
                    "id": 1831,
                    "indexExpression": {
                      "id": 1830,
                      "name": "from",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1804,
                      "src": "39007:4:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "38994:18:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                      "typeString": "mapping(uint256 => uint256)"
                    }
                  },
                  "id": 1833,
                  "indexExpression": {
                    "id": 1832,
                    "name": "lastTokenIndex",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1810,
                    "src": "39013:14:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "isConstant": false,
                  "isLValue": true,
                  "isPure": false,
                  "lValueRequested": false,
                  "nodeType": "IndexAccess",
                  "src": "38994:34:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "nodeType": "VariableDeclarationStatement",
                "src": "38972:56:1"
              }, {
                "expression": {
                  "id": 1841,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "lValueRequested": false,
                  "leftHandSide": {
                    "baseExpression": {
                      "baseExpression": {
                        "id": 1835,
                        "name": "_ownedTokens",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1590,
                        "src": "39045:12:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
                          "typeString": "mapping(address => mapping(uint256 => uint256))"
                        }
                      },
                      "id": 1838,
                      "indexExpression": {
                        "id": 1836,
                        "name": "from",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1804,
                        "src": "39058:4:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "39045:18:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                        "typeString": "mapping(uint256 => uint256)"
                      }
                    },
                    "id": 1839,
                    "indexExpression": {
                      "id": 1837,
                      "name": "tokenIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1819,
                      "src": "39064:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": true,
                    "nodeType": "IndexAccess",
                    "src": "39045:30:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "Assignment",
                  "operator": "=",
                  "rightHandSide": {
                    "id": 1840,
                    "name": "lastTokenId",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1828,
                    "src": "39078:11:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "src": "39045:44:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "id": 1842,
                "nodeType": "ExpressionStatement",
                "src": "39045:44:1"
              }, {
                "expression": {
                  "id": 1847,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "lValueRequested": false,
                  "leftHandSide": {
                    "baseExpression": {
                      "id": 1843,
                      "name": "_ownedTokensIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1594,
                      "src": "39162:17:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                        "typeString": "mapping(uint256 => uint256)"
                      }
                    },
                    "id": 1845,
                    "indexExpression": {
                      "id": 1844,
                      "name": "lastTokenId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1828,
                      "src": "39180:11:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": true,
                    "nodeType": "IndexAccess",
                    "src": "39162:30:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "Assignment",
                  "operator": "=",
                  "rightHandSide": {
                    "id": 1846,
                    "name": "tokenIndex",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1819,
                    "src": "39195:10:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "src": "39162:43:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "id": 1848,
                "nodeType": "ExpressionStatement",
                "src": "39162:43:1"
              }]
            }
          }, {
            "expression": {
              "id": 1854,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "nodeType": "UnaryOperation",
              "operator": "delete",
              "prefix": true,
              "src": "39340:33:1",
              "subExpression": {
                "baseExpression": {
                  "id": 1851,
                  "name": "_ownedTokensIndex",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1594,
                  "src": "39347:17:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                    "typeString": "mapping(uint256 => uint256)"
                  }
                },
                "id": 1853,
                "indexExpression": {
                  "id": 1852,
                  "name": "tokenId",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1806,
                  "src": "39365:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "isConstant": false,
                "isLValue": true,
                "isPure": false,
                "lValueRequested": true,
                "nodeType": "IndexAccess",
                "src": "39347:26:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 1855,
            "nodeType": "ExpressionStatement",
            "src": "39340:33:1"
          }, {
            "expression": {
              "id": 1861,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "nodeType": "UnaryOperation",
              "operator": "delete",
              "prefix": true,
              "src": "39384:41:1",
              "subExpression": {
                "baseExpression": {
                  "baseExpression": {
                    "id": 1856,
                    "name": "_ownedTokens",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1590,
                    "src": "39391:12:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$",
                      "typeString": "mapping(address => mapping(uint256 => uint256))"
                    }
                  },
                  "id": 1858,
                  "indexExpression": {
                    "id": 1857,
                    "name": "from",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1804,
                    "src": "39404:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "isConstant": false,
                  "isLValue": true,
                  "isPure": false,
                  "lValueRequested": false,
                  "nodeType": "IndexAccess",
                  "src": "39391:18:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                    "typeString": "mapping(uint256 => uint256)"
                  }
                },
                "id": 1860,
                "indexExpression": {
                  "id": 1859,
                  "name": "lastTokenIndex",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1810,
                  "src": "39410:14:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "isConstant": false,
                "isLValue": true,
                "isPure": false,
                "lValueRequested": true,
                "nodeType": "IndexAccess",
                "src": "39391:34:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 1862,
            "nodeType": "ExpressionStatement",
            "src": "39384:41:1"
          }]
        },
        "documentation": {
          "id": 1802,
          "nodeType": "StructuredDocumentation",
          "src": "37826:613:1",
          "text": " @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n This has O(1) time complexity, but alters the order of the _ownedTokens array.\n @param from address representing the previous owner of the given token ID\n @param tokenId uint256 ID of the token to be removed from the tokens list of the given address"
        },
        "id": 1864,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "_removeTokenFromOwnerEnumeration",
        "nameLocation": "38454:32:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 1807,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 1804,
            "mutability": "mutable",
            "name": "from",
            "nameLocation": "38495:4:1",
            "nodeType": "VariableDeclaration",
            "scope": 1864,
            "src": "38487:12:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1803,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "38487:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 1806,
            "mutability": "mutable",
            "name": "tokenId",
            "nameLocation": "38509:7:1",
            "nodeType": "VariableDeclaration",
            "scope": 1864,
            "src": "38501:15:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1805,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "38501:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "38486:31:1"
        },
        "returnParameters": {
          "id": 1808,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "38526:0:1"
        },
        "scope": 1913,
        "src": "38445:988:1",
        "stateMutability": "nonpayable",
        "virtual": false,
        "visibility": "private"
      }, {
        "body": {
          "id": 1911,
          "nodeType": "Block",
          "src": "39799:1008:1",
          "statements": [{
            "assignments": [1871],
            "declarations": [{
              "constant": false,
              "id": 1871,
              "mutability": "mutable",
              "name": "lastTokenIndex",
              "nameLocation": "39989:14:1",
              "nodeType": "VariableDeclaration",
              "scope": 1911,
              "src": "39981:22:1",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "typeName": {
                "id": 1870,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "39981:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "visibility": "internal"
            }],
            "id": 1876,
            "initialValue": {
              "commonType": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "id": 1875,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "leftExpression": {
                "expression": {
                  "id": 1872,
                  "name": "_allTokens",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1597,
                  "src": "40006:10:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                    "typeString": "uint256[] storage ref"
                  }
                },
                "id": 1873,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "memberName": "length",
                "nodeType": "MemberAccess",
                "src": "40006:17:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "BinaryOperation",
              "operator": "-",
              "rightExpression": {
                "hexValue": "31",
                "id": 1874,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "40026:1:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_1_by_1",
                  "typeString": "int_const 1"
                },
                "value": "1"
              },
              "src": "40006:21:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "nodeType": "VariableDeclarationStatement",
            "src": "39981:46:1"
          }, {
            "assignments": [1878],
            "declarations": [{
              "constant": false,
              "id": 1878,
              "mutability": "mutable",
              "name": "tokenIndex",
              "nameLocation": "40046:10:1",
              "nodeType": "VariableDeclaration",
              "scope": 1911,
              "src": "40038:18:1",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "typeName": {
                "id": 1877,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "40038:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "visibility": "internal"
            }],
            "id": 1882,
            "initialValue": {
              "baseExpression": {
                "id": 1879,
                "name": "_allTokensIndex",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1601,
                "src": "40059:15:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                  "typeString": "mapping(uint256 => uint256)"
                }
              },
              "id": 1881,
              "indexExpression": {
                "id": 1880,
                "name": "tokenId",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1867,
                "src": "40075:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "isConstant": false,
              "isLValue": true,
              "isPure": false,
              "lValueRequested": false,
              "nodeType": "IndexAccess",
              "src": "40059:24:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "nodeType": "VariableDeclarationStatement",
            "src": "40038:45:1"
          }, {
            "assignments": [1884],
            "declarations": [{
              "constant": false,
              "id": 1884,
              "mutability": "mutable",
              "name": "lastTokenId",
              "nameLocation": "40418:11:1",
              "nodeType": "VariableDeclaration",
              "scope": 1911,
              "src": "40410:19:1",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "typeName": {
                "id": 1883,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "40410:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "visibility": "internal"
            }],
            "id": 1888,
            "initialValue": {
              "baseExpression": {
                "id": 1885,
                "name": "_allTokens",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1597,
                "src": "40432:10:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                  "typeString": "uint256[] storage ref"
                }
              },
              "id": 1887,
              "indexExpression": {
                "id": 1886,
                "name": "lastTokenIndex",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1871,
                "src": "40443:14:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "isConstant": false,
              "isLValue": true,
              "isPure": false,
              "lValueRequested": false,
              "nodeType": "IndexAccess",
              "src": "40432:26:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "nodeType": "VariableDeclarationStatement",
            "src": "40410:48:1"
          }, {
            "expression": {
              "id": 1893,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "leftHandSide": {
                "baseExpression": {
                  "id": 1889,
                  "name": "_allTokens",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1597,
                  "src": "40471:10:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                    "typeString": "uint256[] storage ref"
                  }
                },
                "id": 1891,
                "indexExpression": {
                  "id": 1890,
                  "name": "tokenIndex",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1878,
                  "src": "40482:10:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "isConstant": false,
                "isLValue": true,
                "isPure": false,
                "lValueRequested": true,
                "nodeType": "IndexAccess",
                "src": "40471:22:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Assignment",
              "operator": "=",
              "rightHandSide": {
                "id": 1892,
                "name": "lastTokenId",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1884,
                "src": "40496:11:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "src": "40471:36:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "id": 1894,
            "nodeType": "ExpressionStatement",
            "src": "40471:36:1"
          }, {
            "expression": {
              "id": 1899,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "leftHandSide": {
                "baseExpression": {
                  "id": 1895,
                  "name": "_allTokensIndex",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1601,
                  "src": "40576:15:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                    "typeString": "mapping(uint256 => uint256)"
                  }
                },
                "id": 1897,
                "indexExpression": {
                  "id": 1896,
                  "name": "lastTokenId",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1884,
                  "src": "40592:11:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "isConstant": false,
                "isLValue": true,
                "isPure": false,
                "lValueRequested": true,
                "nodeType": "IndexAccess",
                "src": "40576:28:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Assignment",
              "operator": "=",
              "rightHandSide": {
                "id": 1898,
                "name": "tokenIndex",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1878,
                "src": "40607:10:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "src": "40576:41:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "id": 1900,
            "nodeType": "ExpressionStatement",
            "src": "40576:41:1"
          }, {
            "expression": {
              "id": 1904,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "nodeType": "UnaryOperation",
              "operator": "delete",
              "prefix": true,
              "src": "40741:31:1",
              "subExpression": {
                "baseExpression": {
                  "id": 1901,
                  "name": "_allTokensIndex",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1601,
                  "src": "40748:15:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
                    "typeString": "mapping(uint256 => uint256)"
                  }
                },
                "id": 1903,
                "indexExpression": {
                  "id": 1902,
                  "name": "tokenId",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1867,
                  "src": "40764:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "isConstant": false,
                "isLValue": true,
                "isPure": false,
                "lValueRequested": true,
                "nodeType": "IndexAccess",
                "src": "40748:24:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 1905,
            "nodeType": "ExpressionStatement",
            "src": "40741:31:1"
          }, {
            "expression": {
              "arguments": [],
              "expression": {
                "argumentTypes": [],
                "expression": {
                  "id": 1906,
                  "name": "_allTokens",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1597,
                  "src": "40783:10:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                    "typeString": "uint256[] storage ref"
                  }
                },
                "id": 1908,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "memberName": "pop",
                "nodeType": "MemberAccess",
                "src": "40783:14:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_arraypop_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$returns$__$bound_to$_t_array$_t_uint256_$dyn_storage_ptr_$",
                  "typeString": "function (uint256[] storage pointer)"
                }
              },
              "id": 1909,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "40783:16:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 1910,
            "nodeType": "ExpressionStatement",
            "src": "40783:16:1"
          }]
        },
        "documentation": {
          "id": 1865,
          "nodeType": "StructuredDocumentation",
          "src": "39441:281:1",
          "text": " @dev Private function to remove a token from this extension's token tracking data structures.\n This has O(1) time complexity, but alters the order of the _allTokens array.\n @param tokenId uint256 ID of the token to be removed from the tokens list"
        },
        "id": 1912,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "_removeTokenFromAllTokensEnumeration",
        "nameLocation": "39737:36:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 1868,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 1867,
            "mutability": "mutable",
            "name": "tokenId",
            "nameLocation": "39782:7:1",
            "nodeType": "VariableDeclaration",
            "scope": 1912,
            "src": "39774:15:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 1866,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "39774:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "39773:17:1"
        },
        "returnParameters": {
          "id": 1869,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "39799:0:1"
        },
        "scope": 1913,
        "src": "39728:1079:1",
        "stateMutability": "nonpayable",
        "virtual": false,
        "visibility": "private"
      }],
      "scope": 2351,
      "src": "34057:6753:1",
      "usedErrors": []
    }, {
      "id": 1914,
      "literals": ["solidity", "^", "0.8", ".0"],
      "nodeType": "PragmaDirective",
      "src": "40869:23:1"
    }, {
      "abstract": true,
      "baseContracts": [{
        "baseName": {
          "id": 1916,
          "name": "Context",
          "nodeType": "IdentifierPath",
          "referencedDeclaration": 770,
          "src": "41430:7:1"
        },
        "id": 1917,
        "nodeType": "InheritanceSpecifier",
        "src": "41430:7:1"
      }],
      "canonicalName": "Ownable",
      "contractDependencies": [],
      "contractKind": "contract",
      "documentation": {
        "id": 1915,
        "nodeType": "StructuredDocumentation",
        "src": "40894:505:1",
        "text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
      },
      "fullyImplemented": true,
      "id": 2015,
      "linearizedBaseContracts": [2015, 770],
      "name": "Ownable",
      "nameLocation": "41419:7:1",
      "nodeType": "ContractDefinition",
      "nodes": [{
        "constant": false,
        "id": 1919,
        "mutability": "mutable",
        "name": "_owner",
        "nameLocation": "41461:6:1",
        "nodeType": "VariableDeclaration",
        "scope": 2015,
        "src": "41445:22:1",
        "stateVariable": true,
        "storageLocation": "default",
        "typeDescriptions": {
          "typeIdentifier": "t_address",
          "typeString": "address"
        },
        "typeName": {
          "id": 1918,
          "name": "address",
          "nodeType": "ElementaryTypeName",
          "src": "41445:7:1",
          "stateMutability": "nonpayable",
          "typeDescriptions": {
            "typeIdentifier": "t_address",
            "typeString": "address"
          }
        },
        "visibility": "private"
      }, {
        "anonymous": false,
        "eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
        "id": 1925,
        "name": "OwnershipTransferred",
        "nameLocation": "41482:20:1",
        "nodeType": "EventDefinition",
        "parameters": {
          "id": 1924,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 1921,
            "indexed": true,
            "mutability": "mutable",
            "name": "previousOwner",
            "nameLocation": "41519:13:1",
            "nodeType": "VariableDeclaration",
            "scope": 1925,
            "src": "41503:29:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1920,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "41503:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 1923,
            "indexed": true,
            "mutability": "mutable",
            "name": "newOwner",
            "nameLocation": "41550:8:1",
            "nodeType": "VariableDeclaration",
            "scope": 1925,
            "src": "41534:24:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1922,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "41534:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }],
          "src": "41502:57:1"
        },
        "src": "41476:84:1"
      }, {
        "body": {
          "id": 1934,
          "nodeType": "Block",
          "src": "41681:42:1",
          "statements": [{
            "expression": {
              "arguments": [{
                "arguments": [],
                "expression": {
                  "argumentTypes": [],
                  "id": 1930,
                  "name": "_msgSender",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 760,
                  "src": "41702:10:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                    "typeString": "function () view returns (address)"
                  }
                },
                "id": 1931,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "kind": "functionCall",
                "lValueRequested": false,
                "names": [],
                "nodeType": "FunctionCall",
                "src": "41702:12:1",
                "tryCall": false,
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }],
                "id": 1929,
                "name": "_setOwner",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 2014,
                "src": "41692:9:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                  "typeString": "function (address)"
                }
              },
              "id": 1932,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "41692:23:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 1933,
            "nodeType": "ExpressionStatement",
            "src": "41692:23:1"
          }]
        },
        "documentation": {
          "id": 1926,
          "nodeType": "StructuredDocumentation",
          "src": "41568:93:1",
          "text": " @dev Initializes the contract setting the deployer as the initial owner."
        },
        "id": 1935,
        "implemented": true,
        "kind": "constructor",
        "modifiers": [],
        "name": "",
        "nameLocation": "-1:-1:-1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 1927,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "41678:2:1"
        },
        "returnParameters": {
          "id": 1928,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "41681:0:1"
        },
        "scope": 2015,
        "src": "41667:56:1",
        "stateMutability": "nonpayable",
        "virtual": false,
        "visibility": "internal"
      }, {
        "body": {
          "id": 1943,
          "nodeType": "Block",
          "src": "41859:32:1",
          "statements": [{
            "expression": {
              "id": 1941,
              "name": "_owner",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 1919,
              "src": "41877:6:1",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "functionReturnParameters": 1940,
            "id": 1942,
            "nodeType": "Return",
            "src": "41870:13:1"
          }]
        },
        "documentation": {
          "id": 1936,
          "nodeType": "StructuredDocumentation",
          "src": "41731:67:1",
          "text": " @dev Returns the address of the current owner."
        },
        "functionSelector": "8da5cb5b",
        "id": 1944,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "owner",
        "nameLocation": "41813:5:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 1937,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "41818:2:1"
        },
        "returnParameters": {
          "id": 1940,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 1939,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 1944,
            "src": "41850:7:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1938,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "41850:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }],
          "src": "41849:9:1"
        },
        "scope": 2015,
        "src": "41804:87:1",
        "stateMutability": "view",
        "virtual": true,
        "visibility": "public"
      }, {
        "body": {
          "id": 1957,
          "nodeType": "Block",
          "src": "42005:99:1",
          "statements": [{
            "expression": {
              "arguments": [{
                "commonType": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "id": 1952,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "leftExpression": {
                  "arguments": [],
                  "expression": {
                    "argumentTypes": [],
                    "id": 1948,
                    "name": "owner",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1944,
                    "src": "42024:5:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                      "typeString": "function () view returns (address)"
                    }
                  },
                  "id": 1949,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "kind": "functionCall",
                  "lValueRequested": false,
                  "names": [],
                  "nodeType": "FunctionCall",
                  "src": "42024:7:1",
                  "tryCall": false,
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "nodeType": "BinaryOperation",
                "operator": "==",
                "rightExpression": {
                  "arguments": [],
                  "expression": {
                    "argumentTypes": [],
                    "id": 1950,
                    "name": "_msgSender",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 760,
                    "src": "42035:10:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                      "typeString": "function () view returns (address)"
                    }
                  },
                  "id": 1951,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "kind": "functionCall",
                  "lValueRequested": false,
                  "names": [],
                  "nodeType": "FunctionCall",
                  "src": "42035:12:1",
                  "tryCall": false,
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "src": "42024:23:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }, {
                "hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
                "id": 1953,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "string",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "42049:34:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
                  "typeString": "literal_string \"Ownable: caller is not the owner\""
                },
                "value": "Ownable: caller is not the owner"
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }, {
                  "typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
                  "typeString": "literal_string \"Ownable: caller is not the owner\""
                }],
                "id": 1947,
                "name": "require",
                "nodeType": "Identifier",
                "overloadedDeclarations": [4294967278, 4294967278],
                "referencedDeclaration": 4294967278,
                "src": "42016:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                  "typeString": "function (bool,string memory) pure"
                }
              },
              "id": 1954,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "42016:68:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 1955,
            "nodeType": "ExpressionStatement",
            "src": "42016:68:1"
          }, {
            "id": 1956,
            "nodeType": "PlaceholderStatement",
            "src": "42095:1:1"
          }]
        },
        "documentation": {
          "id": 1945,
          "nodeType": "StructuredDocumentation",
          "src": "41899:79:1",
          "text": " @dev Throws if called by any account other than the owner."
        },
        "id": 1958,
        "name": "onlyOwner",
        "nameLocation": "41993:9:1",
        "nodeType": "ModifierDefinition",
        "parameters": {
          "id": 1946,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "42002:2:1"
        },
        "src": "41984:120:1",
        "virtual": false,
        "visibility": "internal"
      }, {
        "body": {
          "id": 1971,
          "nodeType": "Block",
          "src": "42509:40:1",
          "statements": [{
            "expression": {
              "arguments": [{
                "arguments": [{
                  "hexValue": "30",
                  "id": 1967,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "42538:1:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_0_by_1",
                    "typeString": "int_const 0"
                  },
                  "value": "0"
                }],
                "expression": {
                  "argumentTypes": [{
                    "typeIdentifier": "t_rational_0_by_1",
                    "typeString": "int_const 0"
                  }],
                  "id": 1966,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "lValueRequested": false,
                  "nodeType": "ElementaryTypeNameExpression",
                  "src": "42530:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_address_$",
                    "typeString": "type(address)"
                  },
                  "typeName": {
                    "id": 1965,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "42530:7:1",
                    "typeDescriptions": {}
                  }
                },
                "id": 1968,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "typeConversion",
                "lValueRequested": false,
                "names": [],
                "nodeType": "FunctionCall",
                "src": "42530:10:1",
                "tryCall": false,
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }],
                "id": 1964,
                "name": "_setOwner",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 2014,
                "src": "42520:9:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                  "typeString": "function (address)"
                }
              },
              "id": 1969,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "42520:21:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 1970,
            "nodeType": "ExpressionStatement",
            "src": "42520:21:1"
          }]
        },
        "documentation": {
          "id": 1959,
          "nodeType": "StructuredDocumentation",
          "src": "42112:337:1",
          "text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
        },
        "functionSelector": "715018a6",
        "id": 1972,
        "implemented": true,
        "kind": "function",
        "modifiers": [{
          "id": 1962,
          "kind": "modifierInvocation",
          "modifierName": {
            "id": 1961,
            "name": "onlyOwner",
            "nodeType": "IdentifierPath",
            "referencedDeclaration": 1958,
            "src": "42499:9:1"
          },
          "nodeType": "ModifierInvocation",
          "src": "42499:9:1"
        }],
        "name": "renounceOwnership",
        "nameLocation": "42464:17:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 1960,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "42481:2:1"
        },
        "returnParameters": {
          "id": 1963,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "42509:0:1"
        },
        "scope": 2015,
        "src": "42455:94:1",
        "stateMutability": "nonpayable",
        "virtual": true,
        "visibility": "public"
      }, {
        "body": {
          "id": 1994,
          "nodeType": "Block",
          "src": "42774:122:1",
          "statements": [{
            "expression": {
              "arguments": [{
                "commonType": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "id": 1986,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "leftExpression": {
                  "id": 1981,
                  "name": "newOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1975,
                  "src": "42793:8:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "nodeType": "BinaryOperation",
                "operator": "!=",
                "rightExpression": {
                  "arguments": [{
                    "hexValue": "30",
                    "id": 1984,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "42813:1:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  }],
                  "expression": {
                    "argumentTypes": [{
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    }],
                    "id": 1983,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "nodeType": "ElementaryTypeNameExpression",
                    "src": "42805:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_type$_t_address_$",
                      "typeString": "type(address)"
                    },
                    "typeName": {
                      "id": 1982,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "42805:7:1",
                      "typeDescriptions": {}
                    }
                  },
                  "id": 1985,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "typeConversion",
                  "lValueRequested": false,
                  "names": [],
                  "nodeType": "FunctionCall",
                  "src": "42805:10:1",
                  "tryCall": false,
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "src": "42793:22:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }, {
                "hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
                "id": 1987,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "string",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "42817:40:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
                  "typeString": "literal_string \"Ownable: new owner is the zero address\""
                },
                "value": "Ownable: new owner is the zero address"
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }, {
                  "typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
                  "typeString": "literal_string \"Ownable: new owner is the zero address\""
                }],
                "id": 1980,
                "name": "require",
                "nodeType": "Identifier",
                "overloadedDeclarations": [4294967278, 4294967278],
                "referencedDeclaration": 4294967278,
                "src": "42785:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                  "typeString": "function (bool,string memory) pure"
                }
              },
              "id": 1988,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "42785:73:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 1989,
            "nodeType": "ExpressionStatement",
            "src": "42785:73:1"
          }, {
            "expression": {
              "arguments": [{
                "id": 1991,
                "name": "newOwner",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1975,
                "src": "42879:8:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }],
                "id": 1990,
                "name": "_setOwner",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 2014,
                "src": "42869:9:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                  "typeString": "function (address)"
                }
              },
              "id": 1992,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "42869:19:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 1993,
            "nodeType": "ExpressionStatement",
            "src": "42869:19:1"
          }]
        },
        "documentation": {
          "id": 1973,
          "nodeType": "StructuredDocumentation",
          "src": "42557:141:1",
          "text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
        },
        "functionSelector": "f2fde38b",
        "id": 1995,
        "implemented": true,
        "kind": "function",
        "modifiers": [{
          "id": 1978,
          "kind": "modifierInvocation",
          "modifierName": {
            "id": 1977,
            "name": "onlyOwner",
            "nodeType": "IdentifierPath",
            "referencedDeclaration": 1958,
            "src": "42764:9:1"
          },
          "nodeType": "ModifierInvocation",
          "src": "42764:9:1"
        }],
        "name": "transferOwnership",
        "nameLocation": "42713:17:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 1976,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 1975,
            "mutability": "mutable",
            "name": "newOwner",
            "nameLocation": "42739:8:1",
            "nodeType": "VariableDeclaration",
            "scope": 1995,
            "src": "42731:16:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1974,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "42731:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }],
          "src": "42730:18:1"
        },
        "returnParameters": {
          "id": 1979,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "42774:0:1"
        },
        "scope": 2015,
        "src": "42704:192:1",
        "stateMutability": "nonpayable",
        "virtual": true,
        "visibility": "public"
      }, {
        "body": {
          "id": 2013,
          "nodeType": "Block",
          "src": "42949:128:1",
          "statements": [{
            "assignments": [2001],
            "declarations": [{
              "constant": false,
              "id": 2001,
              "mutability": "mutable",
              "name": "oldOwner",
              "nameLocation": "42968:8:1",
              "nodeType": "VariableDeclaration",
              "scope": 2013,
              "src": "42960:16:1",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              },
              "typeName": {
                "id": 2000,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "42960:7:1",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "visibility": "internal"
            }],
            "id": 2003,
            "initialValue": {
              "id": 2002,
              "name": "_owner",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 1919,
              "src": "42979:6:1",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "nodeType": "VariableDeclarationStatement",
            "src": "42960:25:1"
          }, {
            "expression": {
              "id": 2006,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "leftHandSide": {
                "id": 2004,
                "name": "_owner",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1919,
                "src": "42996:6:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Assignment",
              "operator": "=",
              "rightHandSide": {
                "id": 2005,
                "name": "newOwner",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1997,
                "src": "43005:8:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "src": "42996:17:1",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "id": 2007,
            "nodeType": "ExpressionStatement",
            "src": "42996:17:1"
          }, {
            "eventCall": {
              "arguments": [{
                "id": 2009,
                "name": "oldOwner",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 2001,
                "src": "43050:8:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }, {
                "id": 2010,
                "name": "newOwner",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1997,
                "src": "43060:8:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }, {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }],
                "id": 2008,
                "name": "OwnershipTransferred",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1925,
                "src": "43029:20:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                  "typeString": "function (address,address)"
                }
              },
              "id": 2011,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "43029:40:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 2012,
            "nodeType": "EmitStatement",
            "src": "43024:45:1"
          }]
        },
        "id": 2014,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "_setOwner",
        "nameLocation": "42913:9:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 1998,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 1997,
            "mutability": "mutable",
            "name": "newOwner",
            "nameLocation": "42931:8:1",
            "nodeType": "VariableDeclaration",
            "scope": 2014,
            "src": "42923:16:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1996,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "42923:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }],
          "src": "42922:18:1"
        },
        "returnParameters": {
          "id": 1999,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "42949:0:1"
        },
        "scope": 2015,
        "src": "42904:173:1",
        "stateMutability": "nonpayable",
        "virtual": false,
        "visibility": "private"
      }],
      "scope": 2351,
      "src": "41401:1679:1",
      "usedErrors": []
    }, {
      "id": 2016,
      "literals": ["solidity", "^", "0.8", ".0"],
      "nodeType": "PragmaDirective",
      "src": "43184:23:1"
    }, {
      "abstract": false,
      "baseContracts": [{
        "baseName": {
          "id": 2017,
          "name": "ERC721Enumerable",
          "nodeType": "IdentifierPath",
          "referencedDeclaration": 1913,
          "src": "43243:16:1"
        },
        "id": 2018,
        "nodeType": "InheritanceSpecifier",
        "src": "43243:16:1"
      }, {
        "baseName": {
          "id": 2019,
          "name": "Ownable",
          "nodeType": "IdentifierPath",
          "referencedDeclaration": 2015,
          "src": "43261:7:1"
        },
        "id": 2020,
        "nodeType": "InheritanceSpecifier",
        "src": "43261:7:1"
      }],
      "canonicalName": "ERC721SmartContract",
      "contractDependencies": [],
      "contractKind": "contract",
      "fullyImplemented": true,
      "id": 2350,
      "linearizedBaseContracts": [2350, 2015, 1913, 187, 1578, 732, 158, 209, 44, 770],
      "name": "ERC721SmartContract",
      "nameLocation": "43220:19:1",
      "nodeType": "ContractDefinition",
      "nodes": [{
        "global": false,
        "id": 2023,
        "libraryName": {
          "id": 2021,
          "name": "Strings",
          "nodeType": "IdentifierPath",
          "referencedDeclaration": 411,
          "src": "43280:7:1"
        },
        "nodeType": "UsingForDirective",
        "src": "43274:26:1",
        "typeName": {
          "id": 2022,
          "name": "uint256",
          "nodeType": "ElementaryTypeName",
          "src": "43292:7:1",
          "typeDescriptions": {
            "typeIdentifier": "t_uint256",
            "typeString": "uint256"
          }
        }
      }, {
        "constant": false,
        "functionSelector": "6c0360eb",
        "id": 2025,
        "mutability": "mutable",
        "name": "baseURI",
        "nameLocation": "43320:7:1",
        "nodeType": "VariableDeclaration",
        "scope": 2350,
        "src": "43306:21:1",
        "stateVariable": true,
        "storageLocation": "default",
        "typeDescriptions": {
          "typeIdentifier": "t_string_storage",
          "typeString": "string"
        },
        "typeName": {
          "id": 2024,
          "name": "string",
          "nodeType": "ElementaryTypeName",
          "src": "43306:6:1",
          "typeDescriptions": {
            "typeIdentifier": "t_string_storage_ptr",
            "typeString": "string"
          }
        },
        "visibility": "public"
      }, {
        "constant": false,
        "functionSelector": "c6682862",
        "id": 2028,
        "mutability": "mutable",
        "name": "baseExtension",
        "nameLocation": "43346:13:1",
        "nodeType": "VariableDeclaration",
        "scope": 2350,
        "src": "43332:37:1",
        "stateVariable": true,
        "storageLocation": "default",
        "typeDescriptions": {
          "typeIdentifier": "t_string_storage",
          "typeString": "string"
        },
        "typeName": {
          "id": 2026,
          "name": "string",
          "nodeType": "ElementaryTypeName",
          "src": "43332:6:1",
          "typeDescriptions": {
            "typeIdentifier": "t_string_storage_ptr",
            "typeString": "string"
          }
        },
        "value": {
          "hexValue": "2e6a736f6e",
          "id": 2027,
          "isConstant": false,
          "isLValue": false,
          "isPure": true,
          "kind": "string",
          "lValueRequested": false,
          "nodeType": "Literal",
          "src": "43362:7:1",
          "typeDescriptions": {
            "typeIdentifier": "t_stringliteral_94311adc0a0cd4e10be11b23bd4316b8cffa4adf693e8f96f5c075aa439a7972",
            "typeString": "literal_string \".json\""
          },
          "value": ".json"
        },
        "visibility": "public"
      }, {
        "constant": false,
        "functionSelector": "13faede6",
        "id": 2031,
        "mutability": "mutable",
        "name": "cost",
        "nameLocation": "43389:4:1",
        "nodeType": "VariableDeclaration",
        "scope": 2350,
        "src": "43374:32:1",
        "stateVariable": true,
        "storageLocation": "default",
        "typeDescriptions": {
          "typeIdentifier": "t_uint256",
          "typeString": "uint256"
        },
        "typeName": {
          "id": 2029,
          "name": "uint256",
          "nodeType": "ElementaryTypeName",
          "src": "43374:7:1",
          "typeDescriptions": {
            "typeIdentifier": "t_uint256",
            "typeString": "uint256"
          }
        },
        "value": {
          "hexValue": "302e3031",
          "id": 2030,
          "isConstant": false,
          "isLValue": false,
          "isPure": true,
          "kind": "number",
          "lValueRequested": false,
          "nodeType": "Literal",
          "src": "43396:10:1",
          "subdenomination": "ether",
          "typeDescriptions": {
            "typeIdentifier": "t_rational_10000000000000000_by_1",
            "typeString": "int_const 10000000000000000"
          },
          "value": "0.01"
        },
        "visibility": "public"
      }, {
        "constant": false,
        "functionSelector": "d5abeb01",
        "id": 2034,
        "mutability": "mutable",
        "name": "maxSupply",
        "nameLocation": "43426:9:1",
        "nodeType": "VariableDeclaration",
        "scope": 2350,
        "src": "43411:31:1",
        "stateVariable": true,
        "storageLocation": "default",
        "typeDescriptions": {
          "typeIdentifier": "t_uint256",
          "typeString": "uint256"
        },
        "typeName": {
          "id": 2032,
          "name": "uint256",
          "nodeType": "ElementaryTypeName",
          "src": "43411:7:1",
          "typeDescriptions": {
            "typeIdentifier": "t_uint256",
            "typeString": "uint256"
          }
        },
        "value": {
          "hexValue": "31303030",
          "id": 2033,
          "isConstant": false,
          "isLValue": false,
          "isPure": true,
          "kind": "number",
          "lValueRequested": false,
          "nodeType": "Literal",
          "src": "43438:4:1",
          "typeDescriptions": {
            "typeIdentifier": "t_rational_1000_by_1",
            "typeString": "int_const 1000"
          },
          "value": "1000"
        },
        "visibility": "public"
      }, {
        "constant": false,
        "functionSelector": "239c70ae",
        "id": 2037,
        "mutability": "mutable",
        "name": "maxMintAmount",
        "nameLocation": "43462:13:1",
        "nodeType": "VariableDeclaration",
        "scope": 2350,
        "src": "43447:32:1",
        "stateVariable": true,
        "storageLocation": "default",
        "typeDescriptions": {
          "typeIdentifier": "t_uint256",
          "typeString": "uint256"
        },
        "typeName": {
          "id": 2035,
          "name": "uint256",
          "nodeType": "ElementaryTypeName",
          "src": "43447:7:1",
          "typeDescriptions": {
            "typeIdentifier": "t_uint256",
            "typeString": "uint256"
          }
        },
        "value": {
          "hexValue": "31",
          "id": 2036,
          "isConstant": false,
          "isLValue": false,
          "isPure": true,
          "kind": "number",
          "lValueRequested": false,
          "nodeType": "Literal",
          "src": "43478:1:1",
          "typeDescriptions": {
            "typeIdentifier": "t_rational_1_by_1",
            "typeString": "int_const 1"
          },
          "value": "1"
        },
        "visibility": "public"
      }, {
        "constant": false,
        "functionSelector": "5c975abb",
        "id": 2040,
        "mutability": "mutable",
        "name": "paused",
        "nameLocation": "43496:6:1",
        "nodeType": "VariableDeclaration",
        "scope": 2350,
        "src": "43484:26:1",
        "stateVariable": true,
        "storageLocation": "default",
        "typeDescriptions": {
          "typeIdentifier": "t_bool",
          "typeString": "bool"
        },
        "typeName": {
          "id": 2038,
          "name": "bool",
          "nodeType": "ElementaryTypeName",
          "src": "43484:4:1",
          "typeDescriptions": {
            "typeIdentifier": "t_bool",
            "typeString": "bool"
          }
        },
        "value": {
          "hexValue": "66616c7365",
          "id": 2039,
          "isConstant": false,
          "isLValue": false,
          "isPure": true,
          "kind": "bool",
          "lValueRequested": false,
          "nodeType": "Literal",
          "src": "43505:5:1",
          "typeDescriptions": {
            "typeIdentifier": "t_bool",
            "typeString": "bool"
          },
          "value": "false"
        },
        "visibility": "public"
      }, {
        "constant": false,
        "functionSelector": "d28d8852",
        "id": 2043,
        "mutability": "mutable",
        "name": "_name",
        "nameLocation": "43533:5:1",
        "nodeType": "VariableDeclaration",
        "scope": 2350,
        "src": "43519:27:1",
        "stateVariable": true,
        "storageLocation": "default",
        "typeDescriptions": {
          "typeIdentifier": "t_string_storage",
          "typeString": "string"
        },
        "typeName": {
          "id": 2041,
          "name": "string",
          "nodeType": "ElementaryTypeName",
          "src": "43519:6:1",
          "typeDescriptions": {
            "typeIdentifier": "t_string_storage_ptr",
            "typeString": "string"
          }
        },
        "value": {
          "hexValue": "415254",
          "id": 2042,
          "isConstant": false,
          "isLValue": false,
          "isPure": true,
          "kind": "string",
          "lValueRequested": false,
          "nodeType": "Literal",
          "src": "43541:5:1",
          "typeDescriptions": {
            "typeIdentifier": "t_stringliteral_3caeaa4f82d97703335583a4473c4e776f6d770e0d866cdd2fe57ac9bfc9d753",
            "typeString": "literal_string \"ART\""
          },
          "value": "ART"
        },
        "visibility": "public"
      }, {
        "constant": false,
        "functionSelector": "b09f1266",
        "id": 2046,
        "mutability": "mutable",
        "name": "_symbol",
        "nameLocation": "43565:7:1",
        "nodeType": "VariableDeclaration",
        "scope": 2350,
        "src": "43551:29:1",
        "stateVariable": true,
        "storageLocation": "default",
        "typeDescriptions": {
          "typeIdentifier": "t_string_storage",
          "typeString": "string"
        },
        "typeName": {
          "id": 2044,
          "name": "string",
          "nodeType": "ElementaryTypeName",
          "src": "43551:6:1",
          "typeDescriptions": {
            "typeIdentifier": "t_string_storage_ptr",
            "typeString": "string"
          }
        },
        "value": {
          "hexValue": "415254",
          "id": 2045,
          "isConstant": false,
          "isLValue": false,
          "isPure": true,
          "kind": "string",
          "lValueRequested": false,
          "nodeType": "Literal",
          "src": "43575:5:1",
          "typeDescriptions": {
            "typeIdentifier": "t_stringliteral_3caeaa4f82d97703335583a4473c4e776f6d770e0d866cdd2fe57ac9bfc9d753",
            "typeString": "literal_string \"ART\""
          },
          "value": "ART"
        },
        "visibility": "public"
      }, {
        "constant": false,
        "functionSelector": "1de18b36",
        "id": 2049,
        "mutability": "mutable",
        "name": "_initBaseURI",
        "nameLocation": "43599:12:1",
        "nodeType": "VariableDeclaration",
        "scope": 2350,
        "src": "43585:58:1",
        "stateVariable": true,
        "storageLocation": "default",
        "typeDescriptions": {
          "typeIdentifier": "t_string_storage",
          "typeString": "string"
        },
        "typeName": {
          "id": 2047,
          "name": "string",
          "nodeType": "ElementaryTypeName",
          "src": "43585:6:1",
          "typeDescriptions": {
            "typeIdentifier": "t_string_storage_ptr",
            "typeString": "string"
          }
        },
        "value": {
          "hexValue": "687474703a2f2f3132372e302e302e313a313233342f4e4654732f",
          "id": 2048,
          "isConstant": false,
          "isLValue": false,
          "isPure": true,
          "kind": "string",
          "lValueRequested": false,
          "nodeType": "Literal",
          "src": "43614:29:1",
          "typeDescriptions": {
            "typeIdentifier": "t_stringliteral_22c4bcdfc3a966c954bc963aacc3d85fe377709d71c15a47c7b1ceba8473229d",
            "typeString": "literal_string \"http://127.0.0.1:1234/NFTs/\""
          },
          "value": "http://127.0.0.1:1234/NFTs/"
        },
        "visibility": "public"
      }, {
        "constant": false,
        "functionSelector": "d936547e",
        "id": 2053,
        "mutability": "mutable",
        "name": "whitelisted",
        "nameLocation": "43682:11:1",
        "nodeType": "VariableDeclaration",
        "scope": 2350,
        "src": "43650:43:1",
        "stateVariable": true,
        "storageLocation": "default",
        "typeDescriptions": {
          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
          "typeString": "mapping(address => bool)"
        },
        "typeName": {
          "id": 2052,
          "keyType": {
            "id": 2050,
            "name": "address",
            "nodeType": "ElementaryTypeName",
            "src": "43658:7:1",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            }
          },
          "nodeType": "Mapping",
          "src": "43650:24:1",
          "typeDescriptions": {
            "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
            "typeString": "mapping(address => bool)"
          },
          "valueType": {
            "id": 2051,
            "name": "bool",
            "nodeType": "ElementaryTypeName",
            "src": "43669:4:1",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            }
          }
        },
        "visibility": "public"
      }, {
        "body": {
          "id": 2064,
          "nodeType": "Block",
          "src": "43737:66:1",
          "statements": [{
            "expression": {
              "arguments": [{
                "id": 2061,
                "name": "_initBaseURI",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 2049,
                "src": "43755:12:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage",
                  "typeString": "string storage ref"
                }
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_string_storage",
                  "typeString": "string storage ref"
                }],
                "id": 2060,
                "name": "setBaseURI",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 2276,
                "src": "43744:10:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$returns$__$",
                  "typeString": "function (string memory)"
                }
              },
              "id": 2062,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "43744:24:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 2063,
            "nodeType": "ExpressionStatement",
            "src": "43744:24:1"
          }]
        },
        "id": 2065,
        "implemented": true,
        "kind": "constructor",
        "modifiers": [{
          "arguments": [{
            "id": 2056,
            "name": "_name",
            "nodeType": "Identifier",
            "overloadedDeclarations": [],
            "referencedDeclaration": 2043,
            "src": "43721:5:1",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string storage ref"
            }
          }, {
            "id": 2057,
            "name": "_symbol",
            "nodeType": "Identifier",
            "overloadedDeclarations": [],
            "referencedDeclaration": 2046,
            "src": "43728:7:1",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string storage ref"
            }
          }],
          "id": 2058,
          "kind": "baseConstructorSpecifier",
          "modifierName": {
            "id": 2055,
            "name": "ERC721",
            "nodeType": "IdentifierPath",
            "referencedDeclaration": 1578,
            "src": "43714:6:1"
          },
          "nodeType": "ModifierInvocation",
          "src": "43714:22:1"
        }],
        "name": "",
        "nameLocation": "-1:-1:-1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 2054,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "43711:2:1"
        },
        "returnParameters": {
          "id": 2059,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "43737:0:1"
        },
        "scope": 2350,
        "src": "43700:103:1",
        "stateMutability": "nonpayable",
        "virtual": false,
        "visibility": "public"
      }, {
        "baseFunctions": [979],
        "body": {
          "id": 2073,
          "nodeType": "Block",
          "src": "43899:27:1",
          "statements": [{
            "expression": {
              "id": 2071,
              "name": "baseURI",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 2025,
              "src": "43913:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage",
                "typeString": "string storage ref"
              }
            },
            "functionReturnParameters": 2070,
            "id": 2072,
            "nodeType": "Return",
            "src": "43906:14:1"
          }]
        },
        "id": 2074,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "_baseURI",
        "nameLocation": "43833:8:1",
        "nodeType": "FunctionDefinition",
        "overrides": {
          "id": 2067,
          "nodeType": "OverrideSpecifier",
          "overrides": [],
          "src": "43866:8:1"
        },
        "parameters": {
          "id": 2066,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "43841:2:1"
        },
        "returnParameters": {
          "id": 2070,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 2069,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 2074,
            "src": "43884:13:1",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory_ptr",
              "typeString": "string"
            },
            "typeName": {
              "id": 2068,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "43884:6:1",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "internal"
          }],
          "src": "43883:15:1"
        },
        "scope": 2350,
        "src": "43824:102:1",
        "stateMutability": "view",
        "virtual": true,
        "visibility": "internal"
      }, {
        "body": {
          "id": 2149,
          "nodeType": "Block",
          "src": "44008:440:1",
          "statements": [{
            "assignments": [2082],
            "declarations": [{
              "constant": false,
              "id": 2082,
              "mutability": "mutable",
              "name": "supply",
              "nameLocation": "44023:6:1",
              "nodeType": "VariableDeclaration",
              "scope": 2149,
              "src": "44015:14:1",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "typeName": {
                "id": 2081,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "44015:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "visibility": "internal"
            }],
            "id": 2085,
            "initialValue": {
              "arguments": [],
              "expression": {
                "argumentTypes": [],
                "id": 2083,
                "name": "totalSupply",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 1664,
                "src": "44032:11:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                  "typeString": "function () view returns (uint256)"
                }
              },
              "id": 2084,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "44032:13:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "nodeType": "VariableDeclarationStatement",
            "src": "44015:30:1"
          }, {
            "expression": {
              "arguments": [{
                "commonType": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "id": 2089,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "leftExpression": {
                  "id": 2087,
                  "name": "_mintAmount",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 2078,
                  "src": "44085:11:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "nodeType": "BinaryOperation",
                "operator": ">",
                "rightExpression": {
                  "hexValue": "30",
                  "id": 2088,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "44099:1:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_0_by_1",
                    "typeString": "int_const 0"
                  },
                  "value": "0"
                },
                "src": "44085:15:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }],
                "id": 2086,
                "name": "require",
                "nodeType": "Identifier",
                "overloadedDeclarations": [4294967278, 4294967278],
                "referencedDeclaration": 4294967278,
                "src": "44077:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                  "typeString": "function (bool) pure"
                }
              },
              "id": 2090,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "44077:24:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 2091,
            "nodeType": "ExpressionStatement",
            "src": "44077:24:1"
          }, {
            "expression": {
              "arguments": [{
                "commonType": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "id": 2095,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "leftExpression": {
                  "id": 2093,
                  "name": "_mintAmount",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 2078,
                  "src": "44116:11:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "nodeType": "BinaryOperation",
                "operator": "<=",
                "rightExpression": {
                  "id": 2094,
                  "name": "maxMintAmount",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 2037,
                  "src": "44131:13:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "src": "44116:28:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }],
                "id": 2092,
                "name": "require",
                "nodeType": "Identifier",
                "overloadedDeclarations": [4294967278, 4294967278],
                "referencedDeclaration": 4294967278,
                "src": "44108:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                  "typeString": "function (bool) pure"
                }
              },
              "id": 2096,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "44108:37:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 2097,
            "nodeType": "ExpressionStatement",
            "src": "44108:37:1"
          }, {
            "expression": {
              "arguments": [{
                "commonType": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "id": 2103,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "leftExpression": {
                  "commonType": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "id": 2101,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "lValueRequested": false,
                  "leftExpression": {
                    "id": 2099,
                    "name": "supply",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 2082,
                    "src": "44160:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "BinaryOperation",
                  "operator": "+",
                  "rightExpression": {
                    "id": 2100,
                    "name": "_mintAmount",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 2078,
                    "src": "44169:11:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "src": "44160:20:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "nodeType": "BinaryOperation",
                "operator": "<=",
                "rightExpression": {
                  "id": 2102,
                  "name": "maxSupply",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 2034,
                  "src": "44184:9:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "src": "44160:33:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }],
                "id": 2098,
                "name": "require",
                "nodeType": "Identifier",
                "overloadedDeclarations": [4294967278, 4294967278],
                "referencedDeclaration": 4294967278,
                "src": "44152:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                  "typeString": "function (bool) pure"
                }
              },
              "id": 2104,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "44152:42:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 2105,
            "nodeType": "ExpressionStatement",
            "src": "44152:42:1"
          }, {
            "condition": {
              "commonType": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              },
              "id": 2110,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "leftExpression": {
                "expression": {
                  "id": 2106,
                  "name": "msg",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 4294967281,
                  "src": "44207:3:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_magic_message",
                    "typeString": "msg"
                  }
                },
                "id": 2107,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "memberName": "sender",
                "nodeType": "MemberAccess",
                "src": "44207:10:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "BinaryOperation",
              "operator": "!=",
              "rightExpression": {
                "arguments": [],
                "expression": {
                  "argumentTypes": [],
                  "id": 2108,
                  "name": "owner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1944,
                  "src": "44221:5:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                    "typeString": "function () view returns (address)"
                  }
                },
                "id": 2109,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "kind": "functionCall",
                "lValueRequested": false,
                "names": [],
                "nodeType": "FunctionCall",
                "src": "44221:7:1",
                "tryCall": false,
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "src": "44207:21:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "id": 2129,
            "nodeType": "IfStatement",
            "src": "44203:146:1",
            "trueBody": {
              "id": 2128,
              "nodeType": "Block",
              "src": "44230:119:1",
              "statements": [{
                "condition": {
                  "commonType": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "id": 2116,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "lValueRequested": false,
                  "leftExpression": {
                    "baseExpression": {
                      "id": 2111,
                      "name": "whitelisted",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2053,
                      "src": "44244:11:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                        "typeString": "mapping(address => bool)"
                      }
                    },
                    "id": 2114,
                    "indexExpression": {
                      "expression": {
                        "id": 2112,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4294967281,
                        "src": "44256:3:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 2113,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "44256:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "44244:23:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "nodeType": "BinaryOperation",
                  "operator": "!=",
                  "rightExpression": {
                    "hexValue": "74727565",
                    "id": 2115,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "44271:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "src": "44244:31:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "id": 2127,
                "nodeType": "IfStatement",
                "src": "44241:101:1",
                "trueBody": {
                  "id": 2126,
                  "nodeType": "Block",
                  "src": "44277:65:1",
                  "statements": [{
                    "expression": {
                      "arguments": [{
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 2123,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 2118,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 4294967281,
                            "src": "44298:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 2119,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "src": "44298:9:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 2122,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 2120,
                            "name": "cost",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2031,
                            "src": "44311:4:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "id": 2121,
                            "name": "_mintAmount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2078,
                            "src": "44318:11:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "44311:18:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "44298:31:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }],
                      "expression": {
                        "argumentTypes": [{
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }],
                        "id": 2117,
                        "name": "require",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [4294967278, 4294967278],
                        "referencedDeclaration": 4294967278,
                        "src": "44290:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                          "typeString": "function (bool) pure"
                        }
                      },
                      "id": 2124,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "44290:40:1",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 2125,
                    "nodeType": "ExpressionStatement",
                    "src": "44290:40:1"
                  }]
                }
              }]
            }
          }, {
            "body": {
              "id": 2147,
              "nodeType": "Block",
              "src": "44400:43:1",
              "statements": [{
                "expression": {
                  "arguments": [{
                    "id": 2141,
                    "name": "_to",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 2076,
                    "src": "44419:3:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  }, {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 2144,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 2142,
                      "name": "supply",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2082,
                      "src": "44424:6:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "+",
                    "rightExpression": {
                      "id": 2143,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2131,
                      "src": "44433:1:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "44424:10:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }],
                  "expression": {
                    "argumentTypes": [{
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }, {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }],
                    "id": 2140,
                    "name": "_safeMint",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [1274, 1303],
                    "referencedDeclaration": 1274,
                    "src": "44409:9:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                      "typeString": "function (address,uint256)"
                    }
                  },
                  "id": 2145,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "kind": "functionCall",
                  "lValueRequested": false,
                  "names": [],
                  "nodeType": "FunctionCall",
                  "src": "44409:26:1",
                  "tryCall": false,
                  "typeDescriptions": {
                    "typeIdentifier": "t_tuple$__$",
                    "typeString": "tuple()"
                  }
                },
                "id": 2146,
                "nodeType": "ExpressionStatement",
                "src": "44409:26:1"
              }]
            },
            "condition": {
              "commonType": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "id": 2136,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "leftExpression": {
                "id": 2134,
                "name": "i",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 2131,
                "src": "44377:1:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "BinaryOperation",
              "operator": "<=",
              "rightExpression": {
                "id": 2135,
                "name": "_mintAmount",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 2078,
                "src": "44382:11:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "src": "44377:16:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "id": 2148,
            "initializationExpression": {
              "assignments": [2131],
              "declarations": [{
                "constant": false,
                "id": 2131,
                "mutability": "mutable",
                "name": "i",
                "nameLocation": "44370:1:1",
                "nodeType": "VariableDeclaration",
                "scope": 2148,
                "src": "44362:9:1",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 2130,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "44362:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              }],
              "id": 2133,
              "initialValue": {
                "hexValue": "31",
                "id": 2132,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "44374:1:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_1_by_1",
                  "typeString": "int_const 1"
                },
                "value": "1"
              },
              "nodeType": "VariableDeclarationStatement",
              "src": "44362:13:1"
            },
            "loopExpression": {
              "expression": {
                "id": 2138,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "nodeType": "UnaryOperation",
                "operator": "++",
                "prefix": false,
                "src": "44395:3:1",
                "subExpression": {
                  "id": 2137,
                  "name": "i",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 2131,
                  "src": "44395:1:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 2139,
              "nodeType": "ExpressionStatement",
              "src": "44395:3:1"
            },
            "nodeType": "ForStatement",
            "src": "44357:86:1"
          }]
        },
        "functionSelector": "40c10f19",
        "id": 2150,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "mint",
        "nameLocation": "43954:4:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 2079,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 2076,
            "mutability": "mutable",
            "name": "_to",
            "nameLocation": "43967:3:1",
            "nodeType": "VariableDeclaration",
            "scope": 2150,
            "src": "43959:11:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 2075,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "43959:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }, {
            "constant": false,
            "id": 2078,
            "mutability": "mutable",
            "name": "_mintAmount",
            "nameLocation": "43980:11:1",
            "nodeType": "VariableDeclaration",
            "scope": 2150,
            "src": "43972:19:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 2077,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "43972:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "43958:34:1"
        },
        "returnParameters": {
          "id": 2080,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "44008:0:1"
        },
        "scope": 2350,
        "src": "43945:503:1",
        "stateMutability": "payable",
        "virtual": false,
        "visibility": "public"
      }, {
        "body": {
          "id": 2197,
          "nodeType": "Block",
          "src": "44550:252:1",
          "statements": [{
            "assignments": [2159],
            "declarations": [{
              "constant": false,
              "id": 2159,
              "mutability": "mutable",
              "name": "ownerTokenCount",
              "nameLocation": "44565:15:1",
              "nodeType": "VariableDeclaration",
              "scope": 2197,
              "src": "44557:23:1",
              "stateVariable": false,
              "storageLocation": "default",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "typeName": {
                "id": 2158,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "44557:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "visibility": "internal"
            }],
            "id": 2163,
            "initialValue": {
              "arguments": [{
                "id": 2161,
                "name": "_owner",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 2152,
                "src": "44593:6:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }],
                "id": 2160,
                "name": "balanceOf",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 880,
                "src": "44583:9:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
                  "typeString": "function (address) view returns (uint256)"
                }
              },
              "id": 2162,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "44583:17:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "nodeType": "VariableDeclarationStatement",
            "src": "44557:43:1"
          }, {
            "assignments": [2168],
            "declarations": [{
              "constant": false,
              "id": 2168,
              "mutability": "mutable",
              "name": "tokenIds",
              "nameLocation": "44624:8:1",
              "nodeType": "VariableDeclaration",
              "scope": 2197,
              "src": "44607:25:1",
              "stateVariable": false,
              "storageLocation": "memory",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                "typeString": "uint256[]"
              },
              "typeName": {
                "baseType": {
                  "id": 2166,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "44607:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "id": 2167,
                "nodeType": "ArrayTypeName",
                "src": "44607:9:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                  "typeString": "uint256[]"
                }
              },
              "visibility": "internal"
            }],
            "id": 2174,
            "initialValue": {
              "arguments": [{
                "id": 2172,
                "name": "ownerTokenCount",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 2159,
                "src": "44649:15:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }],
                "id": 2171,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "lValueRequested": false,
                "nodeType": "NewExpression",
                "src": "44635:13:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$",
                  "typeString": "function (uint256) pure returns (uint256[] memory)"
                },
                "typeName": {
                  "baseType": {
                    "id": 2169,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "44639:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 2170,
                  "nodeType": "ArrayTypeName",
                  "src": "44639:9:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                    "typeString": "uint256[]"
                  }
                }
              },
              "id": 2173,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "44635:30:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                "typeString": "uint256[] memory"
              }
            },
            "nodeType": "VariableDeclarationStatement",
            "src": "44607:58:1"
          }, {
            "body": {
              "id": 2193,
              "nodeType": "Block",
              "src": "44714:61:1",
              "statements": [{
                "expression": {
                  "id": 2191,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "lValueRequested": false,
                  "leftHandSide": {
                    "baseExpression": {
                      "id": 2184,
                      "name": "tokenIds",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2168,
                      "src": "44723:8:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                        "typeString": "uint256[] memory"
                      }
                    },
                    "id": 2186,
                    "indexExpression": {
                      "id": 2185,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2176,
                      "src": "44732:1:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": true,
                    "nodeType": "IndexAccess",
                    "src": "44723:11:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "nodeType": "Assignment",
                  "operator": "=",
                  "rightHandSide": {
                    "arguments": [{
                      "id": 2188,
                      "name": "_owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2152,
                      "src": "44757:6:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    }, {
                      "id": 2189,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2176,
                      "src": "44765:1:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    }],
                    "expression": {
                      "argumentTypes": [{
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }, {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }],
                      "id": 2187,
                      "name": "tokenOfOwnerByIndex",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1653,
                      "src": "44737:19:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (address,uint256) view returns (uint256)"
                      }
                    },
                    "id": 2190,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "44737:30:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "src": "44723:44:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "id": 2192,
                "nodeType": "ExpressionStatement",
                "src": "44723:44:1"
              }]
            },
            "condition": {
              "commonType": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              },
              "id": 2180,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "leftExpression": {
                "id": 2178,
                "name": "i",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 2176,
                "src": "44688:1:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "BinaryOperation",
              "operator": "<",
              "rightExpression": {
                "id": 2179,
                "name": "ownerTokenCount",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 2159,
                "src": "44692:15:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "src": "44688:19:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "id": 2194,
            "initializationExpression": {
              "assignments": [2176],
              "declarations": [{
                "constant": false,
                "id": 2176,
                "mutability": "mutable",
                "name": "i",
                "nameLocation": "44685:1:1",
                "nodeType": "VariableDeclaration",
                "scope": 2194,
                "src": "44677:9:1",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 2175,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "44677:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              }],
              "id": 2177,
              "nodeType": "VariableDeclarationStatement",
              "src": "44677:9:1"
            },
            "loopExpression": {
              "expression": {
                "id": 2182,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "nodeType": "UnaryOperation",
                "operator": "++",
                "prefix": false,
                "src": "44709:3:1",
                "subExpression": {
                  "id": 2181,
                  "name": "i",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 2176,
                  "src": "44709:1:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 2183,
              "nodeType": "ExpressionStatement",
              "src": "44709:3:1"
            },
            "nodeType": "ForStatement",
            "src": "44672:103:1"
          }, {
            "expression": {
              "id": 2195,
              "name": "tokenIds",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 2168,
              "src": "44788:8:1",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                "typeString": "uint256[] memory"
              }
            },
            "functionReturnParameters": 2157,
            "id": 2196,
            "nodeType": "Return",
            "src": "44781:15:1"
          }]
        },
        "functionSelector": "438b6300",
        "id": 2198,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "walletOfOwner",
        "nameLocation": "44463:13:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 2153,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 2152,
            "mutability": "mutable",
            "name": "_owner",
            "nameLocation": "44485:6:1",
            "nodeType": "VariableDeclaration",
            "scope": 2198,
            "src": "44477:14:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 2151,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "44477:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }],
          "src": "44476:16:1"
        },
        "returnParameters": {
          "id": 2157,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 2156,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 2198,
            "src": "44529:16:1",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
              "typeString": "uint256[]"
            },
            "typeName": {
              "baseType": {
                "id": 2154,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "44529:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 2155,
              "nodeType": "ArrayTypeName",
              "src": "44529:9:1",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                "typeString": "uint256[]"
              }
            },
            "visibility": "internal"
          }],
          "src": "44528:18:1"
        },
        "scope": 2350,
        "src": "44454:348:1",
        "stateMutability": "view",
        "virtual": false,
        "visibility": "public"
      }, {
        "baseFunctions": [970],
        "body": {
          "id": 2239,
          "nodeType": "Block",
          "src": "44924:307:1",
          "statements": [{
            "expression": {
              "arguments": [{
                "arguments": [{
                  "id": 2208,
                  "name": "tokenId",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 2200,
                  "src": "44955:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                }],
                "expression": {
                  "argumentTypes": [{
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }],
                  "id": 2207,
                  "name": "_exists",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1218,
                  "src": "44947:7:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_bool_$",
                    "typeString": "function (uint256) view returns (bool)"
                  }
                },
                "id": 2209,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "kind": "functionCall",
                "lValueRequested": false,
                "names": [],
                "nodeType": "FunctionCall",
                "src": "44947:16:1",
                "tryCall": false,
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }, {
                "hexValue": "4552433732314d657461646174613a2055524920717565727920666f72206e6f6e6578697374656e7420746f6b656e",
                "id": 2210,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "string",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "44972:49:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_stringliteral_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb",
                  "typeString": "literal_string \"ERC721Metadata: URI query for nonexistent token\""
                },
                "value": "ERC721Metadata: URI query for nonexistent token"
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }, {
                  "typeIdentifier": "t_stringliteral_a2d45c0fba603d40d82d590051761ca952d1ab9d78cca6d0d464d7b6e961a9cb",
                  "typeString": "literal_string \"ERC721Metadata: URI query for nonexistent token\""
                }],
                "id": 2206,
                "name": "require",
                "nodeType": "Identifier",
                "overloadedDeclarations": [4294967278, 4294967278],
                "referencedDeclaration": 4294967278,
                "src": "44931:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                  "typeString": "function (bool,string memory) pure"
                }
              },
              "id": 2211,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "44931:97:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 2212,
            "nodeType": "ExpressionStatement",
            "src": "44931:97:1"
          }, {
            "assignments": [2214],
            "declarations": [{
              "constant": false,
              "id": 2214,
              "mutability": "mutable",
              "name": "currentBaseURI",
              "nameLocation": "45051:14:1",
              "nodeType": "VariableDeclaration",
              "scope": 2239,
              "src": "45037:28:1",
              "stateVariable": false,
              "storageLocation": "memory",
              "typeDescriptions": {
                "typeIdentifier": "t_string_memory_ptr",
                "typeString": "string"
              },
              "typeName": {
                "id": 2213,
                "name": "string",
                "nodeType": "ElementaryTypeName",
                "src": "45037:6:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                }
              },
              "visibility": "internal"
            }],
            "id": 2217,
            "initialValue": {
              "arguments": [],
              "expression": {
                "argumentTypes": [],
                "id": 2215,
                "name": "_baseURI",
                "nodeType": "Identifier",
                "overloadedDeclarations": [2074],
                "referencedDeclaration": 2074,
                "src": "45068:8:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_internal_view$__$returns$_t_string_memory_ptr_$",
                  "typeString": "function () view returns (string memory)"
                }
              },
              "id": 2216,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "45068:10:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_string_memory_ptr",
                "typeString": "string memory"
              }
            },
            "nodeType": "VariableDeclarationStatement",
            "src": "45037:41:1"
          }, {
            "expression": {
              "condition": {
                "commonType": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "id": 2224,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "lValueRequested": false,
                "leftExpression": {
                  "expression": {
                    "arguments": [{
                      "id": 2220,
                      "name": "currentBaseURI",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2214,
                      "src": "45098:14:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    }],
                    "expression": {
                      "argumentTypes": [{
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }],
                      "id": 2219,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "45092:5:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                        "typeString": "type(bytes storage pointer)"
                      },
                      "typeName": {
                        "id": 2218,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "45092:5:1",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 2221,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "45092:21:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_memory_ptr",
                      "typeString": "bytes memory"
                    }
                  },
                  "id": 2222,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "lValueRequested": false,
                  "memberName": "length",
                  "nodeType": "MemberAccess",
                  "src": "45092:28:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "nodeType": "BinaryOperation",
                "operator": ">",
                "rightExpression": {
                  "hexValue": "30",
                  "id": 2223,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "45123:1:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_0_by_1",
                    "typeString": "int_const 0"
                  },
                  "value": "0"
                },
                "src": "45092:32:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              },
              "falseExpression": {
                "hexValue": "",
                "id": 2236,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "string",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "45223:2:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                  "typeString": "literal_string \"\""
                },
                "value": ""
              },
              "id": 2237,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "nodeType": "Conditional",
              "src": "45092:133:1",
              "trueExpression": {
                "arguments": [{
                  "arguments": [{
                    "id": 2229,
                    "name": "currentBaseURI",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 2214,
                    "src": "45160:14:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  }, {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "id": 2230,
                        "name": "tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2200,
                        "src": "45176:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 2231,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "toString",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 293,
                      "src": "45176:16:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$bound_to$_t_uint256_$",
                        "typeString": "function (uint256) pure returns (string memory)"
                      }
                    },
                    "id": 2232,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "45176:18:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  }, {
                    "id": 2233,
                    "name": "baseExtension",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 2028,
                    "src": "45196:13:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  }],
                  "expression": {
                    "argumentTypes": [{
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }, {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }, {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }],
                    "expression": {
                      "id": 2227,
                      "name": "abi",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4294967295,
                      "src": "45143:3:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_abi",
                        "typeString": "abi"
                      }
                    },
                    "id": 2228,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "lValueRequested": false,
                    "memberName": "encodePacked",
                    "nodeType": "MemberAccess",
                    "src": "45143:16:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                      "typeString": "function () pure returns (bytes memory)"
                    }
                  },
                  "id": 2234,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "kind": "functionCall",
                  "lValueRequested": false,
                  "names": [],
                  "nodeType": "FunctionCall",
                  "src": "45143:67:1",
                  "tryCall": false,
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes memory"
                  }
                }],
                "expression": {
                  "argumentTypes": [{
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes memory"
                  }],
                  "id": 2226,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "lValueRequested": false,
                  "nodeType": "ElementaryTypeNameExpression",
                  "src": "45136:6:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                    "typeString": "type(string storage pointer)"
                  },
                  "typeName": {
                    "id": 2225,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "45136:6:1",
                    "typeDescriptions": {}
                  }
                },
                "id": 2235,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "kind": "typeConversion",
                "lValueRequested": false,
                "names": [],
                "nodeType": "FunctionCall",
                "src": "45136:75:1",
                "tryCall": false,
                "typeDescriptions": {
                  "typeIdentifier": "t_string_memory_ptr",
                  "typeString": "string memory"
                }
              },
              "typeDescriptions": {
                "typeIdentifier": "t_string_memory_ptr",
                "typeString": "string memory"
              }
            },
            "functionReturnParameters": 2205,
            "id": 2238,
            "nodeType": "Return",
            "src": "45085:140:1"
          }]
        },
        "functionSelector": "c87b56dd",
        "id": 2240,
        "implemented": true,
        "kind": "function",
        "modifiers": [],
        "name": "tokenURI",
        "nameLocation": "44817:8:1",
        "nodeType": "FunctionDefinition",
        "overrides": {
          "id": 2202,
          "nodeType": "OverrideSpecifier",
          "overrides": [],
          "src": "44883:8:1"
        },
        "parameters": {
          "id": 2201,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 2200,
            "mutability": "mutable",
            "name": "tokenId",
            "nameLocation": "44834:7:1",
            "nodeType": "VariableDeclaration",
            "scope": 2240,
            "src": "44826:15:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 2199,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "44826:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "44825:17:1"
        },
        "returnParameters": {
          "id": 2205,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 2204,
            "mutability": "mutable",
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "VariableDeclaration",
            "scope": 2240,
            "src": "44906:13:1",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory_ptr",
              "typeString": "string"
            },
            "typeName": {
              "id": 2203,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "44906:6:1",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "internal"
          }],
          "src": "44905:15:1"
        },
        "scope": 2350,
        "src": "44808:423:1",
        "stateMutability": "view",
        "virtual": true,
        "visibility": "public"
      }, {
        "body": {
          "id": 2251,
          "nodeType": "Block",
          "src": "45305:28:1",
          "statements": [{
            "expression": {
              "id": 2249,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "leftHandSide": {
                "id": 2247,
                "name": "cost",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 2031,
                "src": "45312:4:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Assignment",
              "operator": "=",
              "rightHandSide": {
                "id": 2248,
                "name": "_newCost",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 2242,
                "src": "45319:8:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "src": "45312:15:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "id": 2250,
            "nodeType": "ExpressionStatement",
            "src": "45312:15:1"
          }]
        },
        "functionSelector": "44a0d68a",
        "id": 2252,
        "implemented": true,
        "kind": "function",
        "modifiers": [{
          "id": 2245,
          "kind": "modifierInvocation",
          "modifierName": {
            "id": 2244,
            "name": "onlyOwner",
            "nodeType": "IdentifierPath",
            "referencedDeclaration": 1958,
            "src": "45295:9:1"
          },
          "nodeType": "ModifierInvocation",
          "src": "45295:9:1"
        }],
        "name": "setCost",
        "nameLocation": "45262:7:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 2243,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 2242,
            "mutability": "mutable",
            "name": "_newCost",
            "nameLocation": "45278:8:1",
            "nodeType": "VariableDeclaration",
            "scope": 2252,
            "src": "45270:16:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 2241,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "45270:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "45269:18:1"
        },
        "returnParameters": {
          "id": 2246,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "45305:0:1"
        },
        "scope": 2350,
        "src": "45253:80:1",
        "stateMutability": "nonpayable",
        "virtual": false,
        "visibility": "public"
      }, {
        "body": {
          "id": 2263,
          "nodeType": "Block",
          "src": "45409:46:1",
          "statements": [{
            "expression": {
              "id": 2261,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "leftHandSide": {
                "id": 2259,
                "name": "maxMintAmount",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 2037,
                "src": "45416:13:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Assignment",
              "operator": "=",
              "rightHandSide": {
                "id": 2260,
                "name": "_newmaxMintAmount",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 2254,
                "src": "45432:17:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "src": "45416:33:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "id": 2262,
            "nodeType": "ExpressionStatement",
            "src": "45416:33:1"
          }]
        },
        "functionSelector": "7f00c7a6",
        "id": 2264,
        "implemented": true,
        "kind": "function",
        "modifiers": [{
          "id": 2257,
          "kind": "modifierInvocation",
          "modifierName": {
            "id": 2256,
            "name": "onlyOwner",
            "nodeType": "IdentifierPath",
            "referencedDeclaration": 1958,
            "src": "45399:9:1"
          },
          "nodeType": "ModifierInvocation",
          "src": "45399:9:1"
        }],
        "name": "setmaxMintAmount",
        "nameLocation": "45348:16:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 2255,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 2254,
            "mutability": "mutable",
            "name": "_newmaxMintAmount",
            "nameLocation": "45373:17:1",
            "nodeType": "VariableDeclaration",
            "scope": 2264,
            "src": "45365:25:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 2253,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "45365:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "internal"
          }],
          "src": "45364:27:1"
        },
        "returnParameters": {
          "id": 2258,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "45409:0:1"
        },
        "scope": 2350,
        "src": "45339:116:1",
        "stateMutability": "nonpayable",
        "virtual": false,
        "visibility": "public"
      }, {
        "body": {
          "id": 2275,
          "nodeType": "Block",
          "src": "45525:34:1",
          "statements": [{
            "expression": {
              "id": 2273,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "leftHandSide": {
                "id": 2271,
                "name": "baseURI",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 2025,
                "src": "45532:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage",
                  "typeString": "string storage ref"
                }
              },
              "nodeType": "Assignment",
              "operator": "=",
              "rightHandSide": {
                "id": 2272,
                "name": "_newBaseURI",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 2266,
                "src": "45542:11:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_memory_ptr",
                  "typeString": "string memory"
                }
              },
              "src": "45532:21:1",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage",
                "typeString": "string storage ref"
              }
            },
            "id": 2274,
            "nodeType": "ExpressionStatement",
            "src": "45532:21:1"
          }]
        },
        "functionSelector": "55f804b3",
        "id": 2276,
        "implemented": true,
        "kind": "function",
        "modifiers": [{
          "id": 2269,
          "kind": "modifierInvocation",
          "modifierName": {
            "id": 2268,
            "name": "onlyOwner",
            "nodeType": "IdentifierPath",
            "referencedDeclaration": 1958,
            "src": "45515:9:1"
          },
          "nodeType": "ModifierInvocation",
          "src": "45515:9:1"
        }],
        "name": "setBaseURI",
        "nameLocation": "45470:10:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 2267,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 2266,
            "mutability": "mutable",
            "name": "_newBaseURI",
            "nameLocation": "45495:11:1",
            "nodeType": "VariableDeclaration",
            "scope": 2276,
            "src": "45481:25:1",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory_ptr",
              "typeString": "string"
            },
            "typeName": {
              "id": 2265,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "45481:6:1",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "internal"
          }],
          "src": "45480:27:1"
        },
        "returnParameters": {
          "id": 2270,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "45525:0:1"
        },
        "scope": 2350,
        "src": "45461:98:1",
        "stateMutability": "nonpayable",
        "virtual": false,
        "visibility": "public"
      }, {
        "body": {
          "id": 2287,
          "nodeType": "Block",
          "src": "45641:46:1",
          "statements": [{
            "expression": {
              "id": 2285,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "leftHandSide": {
                "id": 2283,
                "name": "baseExtension",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 2028,
                "src": "45648:13:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage",
                  "typeString": "string storage ref"
                }
              },
              "nodeType": "Assignment",
              "operator": "=",
              "rightHandSide": {
                "id": 2284,
                "name": "_newBaseExtension",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 2278,
                "src": "45664:17:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_memory_ptr",
                  "typeString": "string memory"
                }
              },
              "src": "45648:33:1",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage",
                "typeString": "string storage ref"
              }
            },
            "id": 2286,
            "nodeType": "ExpressionStatement",
            "src": "45648:33:1"
          }]
        },
        "functionSelector": "da3ef23f",
        "id": 2288,
        "implemented": true,
        "kind": "function",
        "modifiers": [{
          "id": 2281,
          "kind": "modifierInvocation",
          "modifierName": {
            "id": 2280,
            "name": "onlyOwner",
            "nodeType": "IdentifierPath",
            "referencedDeclaration": 1958,
            "src": "45631:9:1"
          },
          "nodeType": "ModifierInvocation",
          "src": "45631:9:1"
        }],
        "name": "setBaseExtension",
        "nameLocation": "45574:16:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 2279,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 2278,
            "mutability": "mutable",
            "name": "_newBaseExtension",
            "nameLocation": "45605:17:1",
            "nodeType": "VariableDeclaration",
            "scope": 2288,
            "src": "45591:31:1",
            "stateVariable": false,
            "storageLocation": "memory",
            "typeDescriptions": {
              "typeIdentifier": "t_string_memory_ptr",
              "typeString": "string"
            },
            "typeName": {
              "id": 2277,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "45591:6:1",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "internal"
          }],
          "src": "45590:33:1"
        },
        "returnParameters": {
          "id": 2282,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "45641:0:1"
        },
        "scope": 2350,
        "src": "45565:122:1",
        "stateMutability": "nonpayable",
        "virtual": false,
        "visibility": "public"
      }, {
        "body": {
          "id": 2299,
          "nodeType": "Block",
          "src": "45738:28:1",
          "statements": [{
            "expression": {
              "id": 2297,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "leftHandSide": {
                "id": 2295,
                "name": "paused",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 2040,
                "src": "45745:6:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              },
              "nodeType": "Assignment",
              "operator": "=",
              "rightHandSide": {
                "id": 2296,
                "name": "_state",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 2290,
                "src": "45754:6:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              },
              "src": "45745:15:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "id": 2298,
            "nodeType": "ExpressionStatement",
            "src": "45745:15:1"
          }]
        },
        "functionSelector": "02329a29",
        "id": 2300,
        "implemented": true,
        "kind": "function",
        "modifiers": [{
          "id": 2293,
          "kind": "modifierInvocation",
          "modifierName": {
            "id": 2292,
            "name": "onlyOwner",
            "nodeType": "IdentifierPath",
            "referencedDeclaration": 1958,
            "src": "45728:9:1"
          },
          "nodeType": "ModifierInvocation",
          "src": "45728:9:1"
        }],
        "name": "pause",
        "nameLocation": "45702:5:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 2291,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 2290,
            "mutability": "mutable",
            "name": "_state",
            "nameLocation": "45713:6:1",
            "nodeType": "VariableDeclaration",
            "scope": 2300,
            "src": "45708:11:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bool",
              "typeString": "bool"
            },
            "typeName": {
              "id": 2289,
              "name": "bool",
              "nodeType": "ElementaryTypeName",
              "src": "45708:4:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "visibility": "internal"
          }],
          "src": "45707:13:1"
        },
        "returnParameters": {
          "id": 2294,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "45738:0:1"
        },
        "scope": 2350,
        "src": "45693:73:1",
        "stateMutability": "nonpayable",
        "virtual": false,
        "visibility": "public"
      }, {
        "body": {
          "id": 2313,
          "nodeType": "Block",
          "src": "45827:38:1",
          "statements": [{
            "expression": {
              "id": 2311,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "leftHandSide": {
                "baseExpression": {
                  "id": 2307,
                  "name": "whitelisted",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 2053,
                  "src": "45834:11:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                    "typeString": "mapping(address => bool)"
                  }
                },
                "id": 2309,
                "indexExpression": {
                  "id": 2308,
                  "name": "_user",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 2302,
                  "src": "45846:5:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "isConstant": false,
                "isLValue": true,
                "isPure": false,
                "lValueRequested": true,
                "nodeType": "IndexAccess",
                "src": "45834:18:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              },
              "nodeType": "Assignment",
              "operator": "=",
              "rightHandSide": {
                "hexValue": "74727565",
                "id": 2310,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "bool",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "45855:4:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "value": "true"
              },
              "src": "45834:25:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "id": 2312,
            "nodeType": "ExpressionStatement",
            "src": "45834:25:1"
          }]
        },
        "functionSelector": "4a4c560d",
        "id": 2314,
        "implemented": true,
        "kind": "function",
        "modifiers": [{
          "id": 2305,
          "kind": "modifierInvocation",
          "modifierName": {
            "id": 2304,
            "name": "onlyOwner",
            "nodeType": "IdentifierPath",
            "referencedDeclaration": 1958,
            "src": "45817:9:1"
          },
          "nodeType": "ModifierInvocation",
          "src": "45817:9:1"
        }],
        "name": "whitelistUser",
        "nameLocation": "45781:13:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 2303,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 2302,
            "mutability": "mutable",
            "name": "_user",
            "nameLocation": "45803:5:1",
            "nodeType": "VariableDeclaration",
            "scope": 2314,
            "src": "45795:13:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 2301,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "45795:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }],
          "src": "45794:15:1"
        },
        "returnParameters": {
          "id": 2306,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "45827:0:1"
        },
        "scope": 2350,
        "src": "45772:93:1",
        "stateMutability": "nonpayable",
        "virtual": false,
        "visibility": "public"
      }, {
        "body": {
          "id": 2327,
          "nodeType": "Block",
          "src": "45933:39:1",
          "statements": [{
            "expression": {
              "id": 2325,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "lValueRequested": false,
              "leftHandSide": {
                "baseExpression": {
                  "id": 2321,
                  "name": "whitelisted",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 2053,
                  "src": "45940:11:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                    "typeString": "mapping(address => bool)"
                  }
                },
                "id": 2323,
                "indexExpression": {
                  "id": 2322,
                  "name": "_user",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 2316,
                  "src": "45952:5:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "isConstant": false,
                "isLValue": true,
                "isPure": false,
                "lValueRequested": true,
                "nodeType": "IndexAccess",
                "src": "45940:18:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              },
              "nodeType": "Assignment",
              "operator": "=",
              "rightHandSide": {
                "hexValue": "66616c7365",
                "id": 2324,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "bool",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "45961:5:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "value": "false"
              },
              "src": "45940:26:1",
              "typeDescriptions": {
                "typeIdentifier": "t_bool",
                "typeString": "bool"
              }
            },
            "id": 2326,
            "nodeType": "ExpressionStatement",
            "src": "45940:26:1"
          }]
        },
        "functionSelector": "30cc7ae0",
        "id": 2328,
        "implemented": true,
        "kind": "function",
        "modifiers": [{
          "id": 2319,
          "kind": "modifierInvocation",
          "modifierName": {
            "id": 2318,
            "name": "onlyOwner",
            "nodeType": "IdentifierPath",
            "referencedDeclaration": 1958,
            "src": "45923:9:1"
          },
          "nodeType": "ModifierInvocation",
          "src": "45923:9:1"
        }],
        "name": "removeWhitelistUser",
        "nameLocation": "45881:19:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 2317,
          "nodeType": "ParameterList",
          "parameters": [{
            "constant": false,
            "id": 2316,
            "mutability": "mutable",
            "name": "_user",
            "nameLocation": "45909:5:1",
            "nodeType": "VariableDeclaration",
            "scope": 2328,
            "src": "45901:13:1",
            "stateVariable": false,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 2315,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "45901:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          }],
          "src": "45900:15:1"
        },
        "returnParameters": {
          "id": 2320,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "45933:0:1"
        },
        "scope": 2350,
        "src": "45872:100:1",
        "stateMutability": "nonpayable",
        "virtual": false,
        "visibility": "public"
      }, {
        "body": {
          "id": 2348,
          "nodeType": "Block",
          "src": "46023:69:1",
          "statements": [{
            "expression": {
              "arguments": [{
                "arguments": [{
                  "expression": {
                    "arguments": [{
                      "id": 2342,
                      "name": "this",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4294967268,
                      "src": "46071:4:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_ERC721SmartContract_$2350",
                        "typeString": "contract ERC721SmartContract"
                      }
                    }],
                    "expression": {
                      "argumentTypes": [{
                        "typeIdentifier": "t_contract$_ERC721SmartContract_$2350",
                        "typeString": "contract ERC721SmartContract"
                      }],
                      "id": 2341,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "46063:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_address_$",
                        "typeString": "type(address)"
                      },
                      "typeName": {
                        "id": 2340,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "46063:7:1",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 2343,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "46063:13:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 2344,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "lValueRequested": false,
                  "memberName": "balance",
                  "nodeType": "MemberAccess",
                  "src": "46063:21:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                }],
                "expression": {
                  "argumentTypes": [{
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }],
                  "expression": {
                    "arguments": [{
                      "expression": {
                        "id": 2336,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4294967281,
                        "src": "46046:3:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 2337,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "46046:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    }],
                    "expression": {
                      "argumentTypes": [{
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }],
                      "id": 2335,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "nodeType": "ElementaryTypeNameExpression",
                      "src": "46038:8:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_address_payable_$",
                        "typeString": "type(address payable)"
                      },
                      "typeName": {
                        "id": 2334,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "46038:8:1",
                        "stateMutability": "payable",
                        "typeDescriptions": {}
                      }
                    },
                    "id": 2338,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "46038:19:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "id": 2339,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": false,
                  "lValueRequested": false,
                  "memberName": "send",
                  "nodeType": "MemberAccess",
                  "src": "46038:24:1",
                  "typeDescriptions": {
                    "typeIdentifier": "t_function_send_nonpayable$_t_uint256_$returns$_t_bool_$",
                    "typeString": "function (uint256) returns (bool)"
                  }
                },
                "id": 2345,
                "isConstant": false,
                "isLValue": false,
                "isPure": false,
                "kind": "functionCall",
                "lValueRequested": false,
                "names": [],
                "nodeType": "FunctionCall",
                "src": "46038:47:1",
                "tryCall": false,
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }],
              "expression": {
                "argumentTypes": [{
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }],
                "id": 2333,
                "name": "require",
                "nodeType": "Identifier",
                "overloadedDeclarations": [4294967278, 4294967278],
                "referencedDeclaration": 4294967278,
                "src": "46030:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                  "typeString": "function (bool) pure"
                }
              },
              "id": 2346,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "46030:56:1",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_tuple$__$",
                "typeString": "tuple()"
              }
            },
            "id": 2347,
            "nodeType": "ExpressionStatement",
            "src": "46030:56:1"
          }]
        },
        "functionSelector": "3ccfd60b",
        "id": 2349,
        "implemented": true,
        "kind": "function",
        "modifiers": [{
          "id": 2331,
          "kind": "modifierInvocation",
          "modifierName": {
            "id": 2330,
            "name": "onlyOwner",
            "nodeType": "IdentifierPath",
            "referencedDeclaration": 1958,
            "src": "46013:9:1"
          },
          "nodeType": "ModifierInvocation",
          "src": "46013:9:1"
        }],
        "name": "withdraw",
        "nameLocation": "45987:8:1",
        "nodeType": "FunctionDefinition",
        "parameters": {
          "id": 2329,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "45995:2:1"
        },
        "returnParameters": {
          "id": 2332,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "46023:0:1"
        },
        "scope": 2350,
        "src": "45978:114:1",
        "stateMutability": "payable",
        "virtual": false,
        "visibility": "public"
      }],
      "scope": 2351,
      "src": "43211:2884:1",
      "usedErrors": []
    }],
    "src": "105:45992:1"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.13+commit.abaa5c0e.Emscripten.clang"
  },
  "networks": {
    "5777": {
      "events": {},
      "links": {},
      "address": "0xE503b3a0f57DFEE7e2387f27BF371ac368f41Aa3",
      "transactionHash": "0x149f071980faea3f883fa4a1610544b389c4c4f17438f3d65bc8bb49aa05ce41"
    }
  },
  "schemaVersion": "3.4.7",
  "updatedAt": "2007-01-01T08:29:10.016Z",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
};
},{}],"../../node_modules/regenerator-runtime/runtime.js":[function(require,module,exports) {
var define;
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  define(Gp, "constructor", GeneratorFunctionPrototype);
  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  define(Gp, iteratorSymbol, function() {
    return this;
  });

  define(Gp, "toString", function() {
    return "[object Generator]";
  });

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
  typeof module === "object" ? module.exports : {}
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, in modern engines
  // we can explicitly access globalThis. In older engines we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}

},{}],"assets/js/index.js":[function(require,module,exports) {
"use strict";

var _ethers = require("ethers");

var _ERC721smartcontract = require("../../../build/contracts/ERC721smartcontract.json");

require("regenerator-runtime");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var CONTRACT_ADDRESS = "0xE503b3a0f57DFEE7e2387f27BF371ac368f41Aa3";
var provider = new _ethers.ethers.providers.Web3Provider(window.ethereum); //initializing, account request

_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
  return regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return provider.send("eth_requestAccounts", []);

        case 2:
        case "end":
          return _context.stop();
      }
    }
  }, _callee);
}))();

var signer = provider.getSigner();
var contract = new _ethers.ethers.Contract(CONTRACT_ADDRESS, _ERC721smartcontract.abi, provider);

function getNonce() {
  return _getNonce.apply(this, arguments);
}

function _getNonce() {
  _getNonce = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
    var nonce_;
    return regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return signer.getTransactionCount();

          case 2:
            nonce_ = _context4.sent;
            return _context4.abrupt("return", nonce_);

          case 4:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _getNonce.apply(this, arguments);
}

function getGasPrice() {
  return _getGasPrice.apply(this, arguments);
}

function _getGasPrice() {
  _getGasPrice = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
    var price;
    return regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return provider.getGasPrice();

          case 2:
            price = _context5.sent;
            return _context5.abrupt("return", price);

          case 4:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  return _getGasPrice.apply(this, arguments);
}

function getChainId() {
  return _getChainId.apply(this, arguments);
}

function _getChainId() {
  _getChainId = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {
    var network;
    return regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return provider.getNetwork();

          case 2:
            network = _context6.sent;
            return _context6.abrupt("return", network.chainId);

          case 4:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  return _getChainId.apply(this, arguments);
}

function getAddress() {
  return _getAddress.apply(this, arguments);
}

function _getAddress() {
  _getAddress = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {
    var address;
    return regeneratorRuntime.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            _context7.next = 2;
            return signer.getAddress();

          case 2:
            address = _context7.sent;
            return _context7.abrupt("return", address);

          case 4:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));
  return _getAddress.apply(this, arguments);
}

function mintNFT(_x) {
  return _mintNFT.apply(this, arguments);
}

function _mintNFT() {
  _mintNFT = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(amount) {
    var address, nonce, chainID, gasPrice, overrides, tx, signTX, receipt;
    return regeneratorRuntime.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            _context8.next = 2;
            return getAddress();

          case 2:
            address = _context8.sent;
            _context8.next = 5;
            return getNonce();

          case 5:
            nonce = _context8.sent;
            _context8.next = 8;
            return getChainId();

          case 8:
            chainID = _context8.sent;
            _context8.next = 11;
            return getGasPrice();

          case 11:
            gasPrice = _context8.sent;
            overrides = {
              from: address,
              nonce: nonce,
              gasPrice: gasPrice,
              gasLimit: _ethers.ethers.utils.hexlify("0x100000"),
              value: _ethers.ethers.utils.parseEther("0.01")
            };
            _context8.next = 15;
            return contract.populateTransaction.mint(address, amount, overrides);

          case 15:
            tx = _context8.sent;
            _context8.next = 18;
            return signer.sendTransaction(tx);

          case 18:
            signTX = _context8.sent;
            _context8.next = 21;
            return signTX.wait();

          case 21:
            receipt = _context8.sent;
            if (receipt) console.log("NFT Minted successfully");else console.log("Couldn't mint NFT dude");

          case 23:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  }));
  return _mintNFT.apply(this, arguments);
}

function listNFTs() {
  return _listNFTs.apply(this, arguments);
}

function _listNFTs() {
  _listNFTs = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10() {
    var address, ids, text;
    return regeneratorRuntime.wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            _context10.next = 2;
            return getAddress();

          case 2:
            address = _context10.sent;
            _context10.next = 5;
            return contract.functions.walletOfOwner(address);

          case 5:
            ids = _context10.sent;
            text = "";
            ids[0].forEach( /*#__PURE__*/function () {
              var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(id) {
                var uri;
                return regeneratorRuntime.wrap(function _callee9$(_context9) {
                  while (1) {
                    switch (_context9.prev = _context9.next) {
                      case 0:
                        _context9.next = 2;
                        return contract.functions.tokenURI(id);

                      case 2:
                        uri = _context9.sent;
                        text = uri + "<br>";
                        console.log(uri);

                      case 5:
                      case "end":
                        return _context9.stop();
                    }
                  }
                }, _callee9);
              }));

              return function (_x2) {
                return _ref4.apply(this, arguments);
              };
            }());
            return _context10.abrupt("return", text);

          case 9:
          case "end":
            return _context10.stop();
        }
      }
    }, _callee10);
  }));
  return _listNFTs.apply(this, arguments);
}

document.querySelector("#mint-btn").addEventListener("click", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
  var x, count;
  return regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          x = document.querySelector("#nft-count").value;
          count = x > 0 ? x : 1;
          mintNFT(count);

        case 3:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2);
})));
document.querySelector("#nft-list-btn").addEventListener("click", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
  var container, nfts;
  return regeneratorRuntime.wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          container = document.querySelector("#nfts");
          _context3.next = 3;
          return listNFTs();

        case 3:
          nfts = _context3.sent;
          container.innerHTML = nfts;

        case 5:
        case "end":
          return _context3.stop();
      }
    }
  }, _callee3);
})));
},{"ethers":"../../node_modules/ethers/lib.esm/index.js","../../../build/contracts/ERC721smartcontract.json":"../build/contracts/ERC721smartcontract.json","regenerator-runtime":"../../node_modules/regenerator-runtime/runtime.js"}],"../../../Users/Jilo/AppData/Roaming/npm/node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "55124" + '/');

  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);

          if (didAccept) {
            handled = true;
          }
        }
      }); // Enable HMR for CSS by default.

      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });

      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else if (location.reload) {
        // `location` global exists in a web worker context but lacks `.reload()` function.
        location.reload();
      }
    }

    if (data.type === 'reload') {
      ws.close();

      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID; // html encode message and stack trace

  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }

  if (checkedAssets[id]) {
    return;
  }

  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}

function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });

    return true;
  }
}
},{}]},{},["../../../Users/Jilo/AppData/Roaming/npm/node_modules/parcel-bundler/src/builtins/hmr-runtime.js","assets/js/index.js"], null)
//# sourceMappingURL=/js.5c615dc2.js.map